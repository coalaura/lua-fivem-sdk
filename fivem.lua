-- Auto generated
-- Last updated: Sun, 06 Apr 2025 14:09:39 GMT

--- @param value number
--- @return any
function Absf(value) end

--- @param value integer
--- @return any
function Absi(value) end

--- @param p0 number
--- @return any
function Acos(p0) end

--- Below is a list of modes and their respective hashes. | Mode (string) | Hash | |-----------------------------|--------------------| | SLOWMO_BIG_SCORE_JUMP | 0x2B981B0C | | JSH_EXIT_TUNNEL_SLOWMO | 0x2562AA6 | | SLOW_MO_METH_HOUSE_RAYFIRE | 0xDB9E1909 | | SLOWMO_FIB4\_TRUCK_SMASH | 0x9E144347 | | SLOWMO_PROLOGUE_VAULT | 0xEA2E68E1 | | SLOWMO_T1\_RAYFIRE_EXPLOSION | 0xD6D358F3 | | SLOWMO_T1\_TRAILER_SMASH | 0xBE607345 | | BARRY\_01\_SLOWMO | 0xD59540D4 | | BARRY\_02\_SLOWMO | 0x12F140B3 | | SLOWMO_EXTREME\_04 | 0xF562EA50 | | NIGEL\_02\_SLOWMO_SETTING | 0x384689B0 |
--- @param mode string
function ActivateAudioSlowmoMode(mode) end

--- NativeDB Introduced: v3258
--- @param camTo integer
--- @param camFrom integer
--- @param duration integer
--- @param easeLocation integer
--- @param easeRotation integer
--- @param easeFove integer
function ActivateCamWithInterpAndFovCurve(camTo, camFrom, duration, easeLocation, easeRotation, easeFove) end

--- @param netID integer
--- @param toggle boolean
function ActivateDamageTrackerOnNetworkId(netID, toggle) end

--- @param player integer
--- @param toggle boolean
function ActivateDamageTrackerOnPlayer(player, toggle) end

--- Does stuff like this:\ gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617\ Example:\ int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");\ ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);\ BOOL p1 is a toggle to define the game in pause.\ int p2 is unknown but -1 always works, not sure why though.\ \[30/03/2017] ins1de :\ the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.\ Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);\ Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map. Below is a list of all known Frontend Menu Hashes. * FE_MENU_VERSION_SP_PAUSE * FE_MENU_VERSION_MP_PAUSE * FE_MENU_VERSION_CREATOR_PAUSE * FE_MENU_VERSION_CUTSCENE_PAUSE * FE_MENU_VERSION_SAVEGAME * FE_MENU_VERSION_PRE_LOBBY * FE_MENU_VERSION_LOBBY * FE_MENU_VERSION_MP_CHARACTER_SELECT * FE_MENU_VERSION_MP_CHARACTER_CREATION * FE_MENU_VERSION_EMPTY * FE_MENU_VERSION_EMPTY_NO_BACKGROUND * FE_MENU_VERSION_TEXT_SELECTION * FE_MENU_VERSION_CORONA * FE_MENU_VERSION_CORONA_LOBBY * FE_MENU_VERSION_CORONA_JOINED_PLAYERS * FE_MENU_VERSION_CORONA_INVITE_PLAYERS * FE_MENU_VERSION_CORONA_INVITE_FRIENDS * FE_MENU_VERSION_CORONA_INVITE_CREWS * FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS * FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS * FE_MENU_VERSION_CORONA_RACE * FE_MENU_VERSION_CORONA_BETTING * FE_MENU_VERSION_JOINING_SCREEN * FE_MENU_VERSION_LANDING_MENU * FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
--- @param menuhash integer
--- @param togglePause boolean
--- @param component integer
function ActivateFrontendMenu(menuhash, togglePause, component) end

--- More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
--- @param interior integer
--- @param entitySetName string
function ActivateInteriorEntitySet(interior, entitySetName) end

--- @param entity integer
function ActivatePhysics(entity) end

--- Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this. NativeDB Added Parameter 1: int p0
function ActivateRockstarEditor() end

--- Activates built-in timecycle editing tool.
function ActivateTimecycleEditor() end

--- Creates and opens a new activity feed post to start filling in. **Note**: This is a PS4 related native, resulting in a nullsub on the PC platform. This native won't do anything when invoked.
--- @param captionString string
--- @param condensedCaptionString string
function ActivityFeedCreate(captionString, condensedCaptionString) end

--- @param ped integer
--- @param weaponHash integer
--- @param ammo integer
function AddAmmoToPed(ped, weaponHash, ammo) end

--- @param ped integer
--- @param ammoType integer
--- @param ammo integer
function AddAmmoToPedByType(ped, ammoType, ammo) end

--- Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
--- @param ped integer
--- @param amount integer
function AddArmourToPed(ped, amount) end

--- Adds an output for the specified audio submix.
--- @param submixId integer
--- @param outputSubmixId integer
function AddAudioSubmixOutput(submixId, outputSubmixId) end

--- Adds the given model name hash to the list of valid models for the player ped's parachute.
--- @param modelNameHash integer
function AddAuthorizedParachuteModel(modelNameHash) end

--- Adds the given model name hash to the list of valid models for the player ped's parachute pack.
--- @param modelNameHash integer
function AddAuthorizedParachutePackModel(modelNameHash) end

--- Adds a rectangular blip for the specified coordinates/area. It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera. By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view. Example image: minimap big map (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
--- @param x number
--- @param y number
--- @param z number
--- @param width number
--- @param height number
--- @return any
function AddBlipForArea(x, y, z, width, height) end

--- Adds a rectangular blip for the specified coordinates/area. It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera. By default, the blip will show as a *regular* blip with the specified color/sprite if it is outside of the minimap view. Example image: minimap big map (Native name is *likely* to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed) **This is the server-side RPC native equivalent of the client native \_ADD_BLIP_FOR_AREA.**
--- @param x number
--- @param y number
--- @param z number
--- @param width number
--- @param height number
--- @return any
function AddBlipForArea(x, y, z, width, height) end

--- Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip.
--- @param x number
--- @param y number
--- @param z number
--- @return any
function AddBlipForCoord(x, y, z) end

--- Creates a blip for the specified coordinates. You can use `SET_BLIP_` natives to change the blip. **This is the server-side RPC native equivalent of the client native ADD_BLIP_FOR_COORD.**
--- @param x number
--- @param y number
--- @param z number
--- @return any
function AddBlipForCoord(x, y, z) end

--- Create a blip that by default is red (enemy), you can use SET_BLIP_AS_FRIENDLY to make it blue (friend).\ Can be used for objects, vehicles and peds. Example of enemy: enemy Example of friend: friend
--- @param entity integer
--- @return any
function AddBlipForEntity(entity) end

--- Create a blip that by default is red (enemy), you can use SET_BLIP_AS_FRIENDLY to make it blue (friend).\ Can be used for objects, vehicles and peds. Example of enemy: enemy Example of friend: friend **This is the server-side RPC native equivalent of the client native ADD_BLIP_FOR_ENTITY.**
--- @param entity integer
--- @return any
function AddBlipForEntity(entity) end

--- @param pickup integer
--- @return any
function AddBlipForPickup(pickup) end

--- Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use AddBlipCoords) Example image: example
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param radius number
--- @return any
function AddBlipForRadius(posX, posY, posZ, radius) end

--- Create a blip with a radius for the specified coordinates (it doesnt create the blip sprite, so you need to use AddBlipCoords) Example image: example **This is the server-side RPC native equivalent of the client native ADD_BLIP_FOR_RADIUS.**
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param radius number
--- @return any
function AddBlipForRadius(posX, posY, posZ, radius) end

--- I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct. p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one p8 big values ~100 will slow down the camera movement before reaching this node p9 != 0 seems to override the rotation/pitch (bool?)
--- @param camera integer
--- @param x number
--- @param y number
--- @param z number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param length integer
--- @param p8 integer
--- @param transitionType integer
function AddCamSplineNode(camera, x, y, z, xRot, yRot, zRot, length, p8, transitionType) end

--- Takes a camera and uses the information from it as a camera spline node.
--- @param cam integer
--- @param cam2 integer
--- @param length integer
--- @param p3 integer
function AddCamSplineNodeUsingCamera(cam, cam2, length, p3) end

--- @param cam integer
--- @param cam2 integer
--- @param p2 integer
--- @param p3 integer
function AddCamSplineNodeUsingCameraFrame(cam, cam2, p2, p3) end

--- @param cam integer
--- @param p1 integer
--- @param p2 integer
function AddCamSplineNodeUsingGameplayFrame(cam, p1, p2) end

--- Adds a listener for Console Variable changes. The function called expects to match the following signature: ts function ConVarChangeListener(conVarName: string, reserved: any); * **conVarName**: The ConVar that changed. * **reserved**: Currently unused.
--- @param conVarFilter string
--- @param handler function
--- @return any
function AddConvarChangeListener(conVarFilter, handler) end

--- @param playerX number
--- @param playerY number
--- @param playerZ number
--- @param radiusX number
--- @param radiusY number
--- @param radiusZ number
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
function AddCoverBlockingArea(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 boolean
--- @return any
function AddCoverPoint(p0, p1, p2, p3, p4, p5, p6, p7) end

--- Places a decal into the world cs public enum DecalTypes { splatters_blood = 1010, splatters_blood_dir = 1015, splatters_blood_mist = 1017, splatters_mud = 1020, splatters_paint = 1030, splatters_water = 1040, splatters_water_hydrant = 1050, splatters_blood2 = 1110, weapImpact_metal = 4010, weapImpact_concrete = 4020, weapImpact_mattress = 4030, weapImpact_mud = 4032, weapImpact_wood = 4050, weapImpact_sand = 4053, weapImpact_cardboard = 4040, weapImpact_melee_glass = 4100, weapImpact_glass_blood = 4102, weapImpact_glass_blood2 = 4104, weapImpact_shotgun_paper = 4200, weapImpact_shotgun_mattress, weapImpact_shotgun_metal, weapImpact_shotgun_wood, weapImpact_shotgun_dirt, weapImpact_shotgun_tvscreen, weapImpact_shotgun_tvscreen2, weapImpact_shotgun_tvscreen3, weapImpact_melee_concrete = 4310, weapImpact_melee_wood = 4312, weapImpact_melee_metal = 4314, burn1 = 4421, burn2, burn3, burn4, burn5, bang_concrete_bang = 5000, bang_concrete_bang2, bang_bullet_bang, bang_bullet_bang2 = 5004, bang_glass = 5031, bang_glass2, solidPool_water = 9000, solidPool_blood, solidPool_oil, solidPool_petrol, solidPool_mud, porousPool_water, porousPool_blood, porousPool_oil, porousPool_petrol, porousPool_mud, porousPool_water_ped_drip, liquidTrail_water = 9050 }
--- @param decalType integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param sideX number
--- @param sideY number
--- @param sideZ number
--- @param width number
--- @param height number
--- @param rCoef number
--- @param gCoef number
--- @param bCoef number
--- @param opacity number
--- @param timeout number
--- @param isLongRange boolean
--- @param isDynamic boolean
--- @param useComplexColn boolean
--- @return any
function AddDecal(decalType, posX, posY, posZ, dirX, dirY, dirZ, sideX, sideY, sideZ, width, height, rCoef, gCoef, bCoef, opacity, timeout, isLongRange, isDynamic, useComplexColn) end

--- To remove, see: `REMOVE_DISPATCH_SPAWN_BLOCKING_AREA`. See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @return any
function AddDispatchSpawnBlockingAngledArea(x1, y1, z1, x2, y2, z2, width) end

--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return any
function AddDispatchSpawnBlockingArea(x1, y1, x2, y2) end

--- p5 only set to true in single player native scripts. Door hashes normally look like `PROP_[int]_DOOR_[int]` for interior doors and `PROP_BUILDING_[int]_DOOR_[int]` exterior doors but you can just make up your own hash if you want. If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state. A simple "localized" door-system (with hundreds/thousands of doors) can be created by setting p5, p6, and p7 to false and using EventHandlers to synchronize the states to: DOOR_SYSTEM_SET_DOOR_STATE, DOOR_SYSTEM_SET_OPEN_RATIO, DOOR_SYSTEM_SET_HOLD_OPEN, etc.
--- @param doorHash integer
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 boolean
--- @param scriptDoor boolean
--- @param isLocal boolean
function AddDoorToSystem(doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal) end

--- Example: GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow"); I tried this and nothing happened...
--- @param entity integer
--- @param icon string
--- @return any
function AddEntityIcon(entity, icon) end

--- All found occurrences in b678d: pastebin.com/ceu67jz8
--- @param entity integer
--- @param groupName string
--- @param fadeIn number
function AddEntityToAudioMixGroup(entity, groupName, fadeIn) end

--- NativeDB Added Parameter 9: BOOL noDamage BOOL isAudible = If explosion makes a sound. BOOL isInvisible = If the explosion is invisible or not. BOOL noDamage = false: damage || nodamage = true: no damage cpp enum eExplosionTag { DONTCARE = -1, GRENADE = 0, GRENADELAUNCHER = 1, STICKYBOMB = 2, MOLOTOV = 3, ROCKET = 4, TANKSHELL = 5, HI_OCTANE = 6, CAR = 7, PLANE = 8, PETROL_PUMP = 9, BIKE = 10, DIR_STEAM = 11, DIR_FLAME = 12, DIR_WATER_HYDRANT = 13, DIR_GAS_CANISTER = 14, BOAT = 15, SHIP_DESTROY = 16, TRUCK = 17, BULLET = 18, SMOKE_GRENADE_LAUNCHER = 19, SMOKE_GRENADE = 20, BZGAS = 21, FLARE = 22, GAS_CANISTER = 23, EXTINGUISHER = 24, PROGRAMMABLEAR = 25, TRAIN = 26, BARREL = 27, PROPANE = 28, BLIMP = 29, DIR_FLAME_EXPLODE = 30, TANKER = 31, PLANE_ROCKET = 32, VEHICLE_BULLET = 33, GAS_TANK = 34, BIRD_CRAP = 35, RAILGUN = 36, BLIMP2 = 37, FIREWORK = 38, SNOWBALL = 39, PROXMINE = 40, VALKYRIE_CANNON = 41, AIR_DEFENCE = 42, PIPEBOMB = 43, VEHICLEMINE = 44, EXPLOSIVEAMMO = 45, APCSHELL = 46, BOMB_CLUSTER = 47, BOMB_GAS = 48, BOMB_INCENDIARY = 49, BOMB_STANDARD = 50, TORPEDO = 51, TORPEDO_UNDERWATER = 52, BOMBUSHKA_CANNON = 53, BOMB_CLUSTER_SECONDARY = 54, HUNTER_BARRAGE = 55, HUNTER_CANNON = 56, ROGUE_CANNON = 57, MINE_UNDERWATER = 58, ORBITAL_CANNON = 59, BOMB_STANDARD_WIDE = 60, EXPLOSIVEAMMO_SHOTGUN = 61, OPPRESSOR2_CANNON = 62, MORTAR_KINETIC = 63, VEHICLEMINE_KINETIC = 64, VEHICLEMINE_EMP = 65, VEHICLEMINE_SPIKE = 66, VEHICLEMINE_SLICK = 67, VEHICLEMINE_TAR = 68, SCRIPT_DRONE = 69, RAYGUN = 70, BURIEDMINE = 71, SCRIPT_MISSILE = 72, RCTANK_ROCKET = 73, BOMB_WATER = 74, BOMB_WATER_SECONDARY = 75, MINE_CNCSPIKE = 76, BZGAS_MK2 = 77, FLASHGRENADE = 78, STUNGRENADE = 79, CNC_KINETICRAM = 80, SCRIPT_MISSILE_LARGE = 81, SUBMARINE_BIG = 82, EMPLAUNCHER_EMP = 83 };
--- @param x number
--- @param y number
--- @param z number
--- @param explosionType integer
--- @param damageScale number
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param cameraShake number
function AddExplosion(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) end

--- @param x number
--- @param y number
--- @param z number
--- @param explosionType integer
--- @param explosionFx integer
--- @param damageScale number
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param cameraShake number
function AddExplosionWithUserVfx(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake) end

--- Only 8 current rises can exist. If rises need to be changed, use REMOVE_EXTRA_CALMING_QUAD and then ADD_EXTRA_CALMING_QUAD again. After removing a rise, you will be able to add a rise again.
--- @param xLow number
--- @param yLow number
--- @param xHigh number
--- @param yHigh number
--- @param height number
--- @return any
function AddExtraCalmingQuad(xLow, yLow, xHigh, yHigh, height) end

--- Returns the index of the newly created hospital spawn point. p3 might be radius?
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 any
--- @return any
function AddHospitalRestart(x, y, z, p3, p4) end

--- cpp enum eAudibility { AUD_AUDIBILITY_NORMAL = 0, AUD_AUDIBILITY_CLEAR = 1, AUD_AUDIBILITY_CRITICAL = 2, AUD_AUDIBILITY_LEAD_IN = 3 }
--- @param speakerConversationIndex integer
--- @param context string
--- @param subtitle string
--- @param listenerNumber integer
--- @param volumeType integer
--- @param isRandom boolean
--- @param interruptible boolean
--- @param ducksRadio boolean
--- @param ducksScore boolean
--- @param audibility integer
--- @param headset boolean
--- @param dontInterruptForSpecialAbility boolean
--- @param isPadSpeakerRoute boolean
function AddLineToConversation(speakerConversationIndex, context, subtitle, listenerNumber, volumeType, isRandom, interruptible, ducksRadio, ducksScore, audibility, headset, dontInterruptForSpecialAbility, isPadSpeakerRoute) end

--- Loads a minimap overlay from a GFx file in the current resource. If you need to control the depth of overlay use `ADD_MINIMAP_OVERLAY_WITH_DEPTH`.
--- @param name string
--- @return any
function AddMinimapOverlay(name) end

--- Loads a minimap overlay from a GFx file in the current resource.
--- @param name string
--- @param depth integer
--- @return any
function AddMinimapOverlayWithDepth(name, depth) end

--- @param modelHash integer
--- @return any
function AddModelToCreatorBudget(modelHash) end

--- Creates a navmesh blocking object, vehicles will avoid driving through this area. Only 32 blocking objects may exist at a given time and must be manually managed. See `REMOVE_NAVMESH_BLOCKING_OBJECT` and `onResourceStop` cpp enum eBlockingObjectFlags { // Default Flag BLOCKING_OBJECT_DEFAULT = 0, // Blocking object will block wander paths BLOCKING_OBJECT_WANDERPATH = 1, // Blocking object will block (regular) shortest-paths BLOCKING_OBJECT_SHORTESTPATH = 2, // Blocking object will block flee paths BLOCKING_OBJECT_FLEEPATH = 4, // Blocking object will block all paths BLOCKING_OBJECT_ALLPATHS = 7, }
--- @param x number
--- @param y number
--- @param z number
--- @param width number
--- @param length number
--- @param height number
--- @param heading number
--- @param bPermanent boolean
--- @param flags integer
--- @return any
function AddNavmeshBlockingObject(x, y, z, width, length, height, heading, bPermanent, flags) end

--- @param x number
--- @param y number
--- @param radius number
function AddNavmeshRequiredRegion(x, y, radius) end

--- @param addToBrief boolean
function AddNextMessageToPreviousBriefs(addToBrief) end

--- NativeDB Introduced: v2699
--- @param x number
--- @param y number
--- @param z number
--- @param groundLvl number
--- @param width number
--- @param transparency number
--- @return any
function AddOilDecal(x, y, z, groundLvl, width, transparency) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param explosionType integer
--- @param damageScale number
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param cameraShake number
function AddOwnedExplosion(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake) end

--- connects/links 2 route nodes\ image representing the cyclic example below:\ image
--- @param id1 integer
--- @param id2 integer
function AddPatrolRouteLink(id1, id2) end

--- x2,y2 and z2 are the coordinates to which the ped should look at
--- @param id integer
--- @param guardScenario string
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param waitTime integer
function AddPatrolRouteNode(id, guardScenario, x1, y1, z1, x2, y2, z2, waitTime) end

--- Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals. collection - PedDecorationCollection filename hash overlay - Item name hash Example: Entry inside "mpbeach_overlays.xml" - <Item> <uvPos x="0.500000" y="0.500000" /> <scale x="0.600000" y="0.500000" /> <rotation value="0.000000" /> <nameHash>FM_Hair_Fuzz</nameHash> <txdHash>mp_hair_fuzz</txdHash> <txtHash>mp_hair_fuzz</txtHash> <zone>ZONE_HEAD</zone> <type>TYPE_TATTOO</type> <faction>FM</faction> <garment>All</garment> <gender>GENDER_DONTCARE</gender> <award /> <awardLevel /> </Item> Code: PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
--- @param ped integer
--- @param collection integer
--- @param overlay integer
function AddPedDecorationFromHashes(ped, collection, overlay) end

--- Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals. collection - PedDecorationCollection filename hash overlay - Item name hash Example: Entry inside "mpbeach_overlays.xml" - <Item> <uvPos x="0.500000" y="0.500000" /> <scale x="0.600000" y="0.500000" /> <rotation value="0.000000" /> <nameHash>FM_Hair_Fuzz</nameHash> <txdHash>mp_hair_fuzz</txdHash> <txtHash>mp_hair_fuzz</txtHash> <zone>ZONE_HEAD</zone> <type>TYPE_TATTOO</type> <faction>FM</faction> <garment>All</garment> <gender>GENDER_DONTCARE</gender> <award /> <awardLevel /> </Item> Code: PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz")) **This is the server-side RPC native equivalent of the client native ADD_PED_DECORATION_FROM_HASHES.**
--- @param ped integer
--- @param collection integer
--- @param overlay integer
function AddPedDecorationFromHashes(ped, collection, overlay) end

--- @param ped integer
--- @param collection integer
--- @param overlay integer
function AddPedDecorationFromHashesInCorona(ped, collection, overlay) end

--- @param speakerConversationIndex integer
--- @param ped integer
--- @param voiceName string
function AddPedToConversation(speakerConversationIndex, ped, voiceName) end

--- @param x number
--- @param y number
--- @param z number
--- @param groundLvl number
--- @param width number
--- @param transparency number
--- @return any
function AddPetrolDecal(x, y, z, groundLvl, width, transparency) end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
function AddPetrolTrailDecalInfo(x, y, z, p3) end

--- @param pickup integer
--- @param roomName string
function AddPickupToInteriorRoomByName(pickup, roomName) end

--- @param x number
--- @param y number
--- @param z number
function AddPointToGpsCustomRoute(x, y, z) end

--- @param x number
--- @param y number
--- @param z number
function AddPointToGpsMultiRoute(x, y, z) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 any
--- @return any
function AddPoliceRestart(p0, p1, p2, p3, p4) end

--- NativeDB Added Parameter 10: BOOL p9
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 number
--- @param p7 number
--- @param p8 boolean
--- @return any
function AddPopMultiplierArea(x1, y1, z1, x2, y2, z2, p6, p7, p8) end

--- This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param pedMultiplier number
--- @param vehicleMultiplier number
--- @param p6 boolean
--- @param p7 boolean
--- @return any
function AddPopMultiplierSphere(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7) end

--- Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
--- @param name string
--- @return any
--- @return integer
function AddRelationshipGroup(name) end

--- Experimental natives, please do not use in a live environment.
--- @param origTxd string
--- @param origTxn string
--- @param newTxd string
--- @param newTxn string
function AddReplaceTexture(origTxd, origTxn, newTxd, newTxn) end

--- @param value any
function AddReplayStatValue(value) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param speed number
--- @param p5 boolean
--- @return any
function AddRoadNodeSpeedZone(x, y, z, radius, speed, p5) end

--- Creates a rope at the specific position, that extends in the specified direction when not attached to any entities. __ Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1). Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring. There are 8 different rope types in the base game. Full rope data can be found in `ropedata.xml`. cpp enum ePhysicsRopeType { RopeThin = 0, // Verticies: 1, Radius: 0.03, Textures: rope & rope_n RopeWire6 = 1, // Verticies: 4, Radius: 0.015, Textures: steel_cable & steel_cable_n RopeWire32 = 2, // Verticies: 32, Radius: 0.025, Textures: steel_cable & steel_cable_n RopeMesh = 3, // Verticies: 6, Radius: 0.03, Textures: rope & rope_n RopeThinWire32 = 4, // Verticies: 32, Radius: 0.01, Textures: rope & rope_n RopeReins = 5, // Verticies: 32, Radius: 0.005, Textures: rope & rope_n RopeThin4 = 6, // Verticies: 4, Radius: 0.03, Textures: rope & rope_n RopeWire64 = 7 // Verticies: 64, Radius: 0.025, Textures: steel_cable & steel_cable_n }
--- @param x number
--- @param y number
--- @param z number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param maxLength number
--- @param ropeType integer
--- @param initLength number
--- @param minLength number
--- @param lengthChangeRate number
--- @param onlyPPU boolean
--- @param collisionOn boolean
--- @param lockFromFront boolean
--- @param timeMultiplier number
--- @param breakable boolean
--- @return any
--- @return any
function AddRope(x, y, z, rotX, rotY, rotZ, maxLength, ropeType, initLength, minLength, lengthChangeRate, onlyPPU, collisionOn, lockFromFront, timeMultiplier, breakable) end

--- Sets an area where scenarios are blocked
--- @param posMinX number
--- @param posMinY number
--- @param posMinZ number
--- @param posMaxX number
--- @param posMaxY number
--- @param posMaxZ number
--- @param network boolean
--- @param cancelActive boolean
--- @param blockPeds boolean
--- @param blockVehicles boolean
--- @return any
function AddScenarioBlockingArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ, network, cancelActive, blockPeds, blockVehicles) end

--- BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0); - Nacorpio ----- Hardcoded to not work in Multiplayer.
--- @param name string
--- @param model integer
--- @param p2 number
--- @param p3 number
function AddScriptToRandomPed(name, model, p2, p3) end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
--- @param eventType integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration number
--- @return any
function AddShockingEventAtPosition(eventType, x, y, z, duration) end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
--- @param eventType integer
--- @param entity integer
--- @param duration number
--- @return any
function AddShockingEventForEntity(eventType, entity, duration) end

--- Adds a handler for changes to a state bag. The function called expects to match the following signature: ts function StateBagChangeHandler(bagName: string, key: string, value: any, reserved: number, replicated: boolean); * **bagName**: The internal bag ID for the state bag which changed. This is usually `player:Source`, `entity:NetID` or `localEntity:Handle`. * **key**: The changed key. * **value**: The new value stored at key. The old value is still stored in the state bag at the time this callback executes. * **reserved**: Currently unused. * **replicated**: Whether the set is meant to be replicated. At this time, the change handler can't opt to reject changes. If bagName refers to an entity, use GET_ENTITY_FROM_STATE_BAG_NAME to get the entity handle If bagName refers to a player, use GET_PLAYER_FROM_STATE_BAG_NAME to get the player handle
--- @param keyFilter string
--- @param bagFilter string
--- @param handler function
--- @return any
function AddStateBagChangeHandler(keyFilter, bagFilter, handler) end

--- See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param x4 number
--- @param y4 number
--- @param z4 number
--- @param camX number
--- @param camY number
--- @param camZ number
--- @param unk1 integer
--- @param unk2 integer
--- @param unk3 integer
--- @return any
function AddStuntJump(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, unk1, unk2, unk3) end

--- Creates a new stunt jump. The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP\_**ANGLED**. Info about the specific 'parameter sections': **x1, y1, z1, x2, y2, z2 and radius1:** First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose. **x3, y3, z3, x4, y4, z4 and radius2:** Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing). **camX, camY and camZ:** The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location. **unk1, unk2 and unk3:** Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts. Visualized example in-game: ![](https://d.fivem.dev/2019-03-15\_18-24\_c7802\_846.png) Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius1 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param x4 number
--- @param y4 number
--- @param z4 number
--- @param radius2 number
--- @param camX number
--- @param camY number
--- @param camZ number
--- @param unk1 integer
--- @param unk2 integer
--- @param unk3 integer
--- @return any
function AddStuntJumpAngled(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, unk1, unk2, unk3) end

--- Adds a point related to CTacticalAnalysis
--- @param x number
--- @param y number
--- @param z number
function AddTacticalAnalysisPoint(x, y, z) end

--- @param modifierName1 string
--- @param modifierName2 string
function AddTcmodifierOverride(modifierName1, modifierName2) end

--- Adds a float to a text component placeholder, replacing `~1~` in the current text command's text label. Example output
--- @param value number
--- @param decimalPlaces integer
function AddTextComponentFloat(value, decimalPlaces) end

--- @param value integer
--- @param commaSeparated boolean
function AddTextComponentFormattedInteger(value, commaSeparated) end

--- @param value integer
function AddTextComponentInteger(value) end

--- @param blip integer
function AddTextComponentSubstringBlipName(blip) end

--- Certain characters like `<` will have to be escaped using html entities (e.g. `&lt;`), otherwise the text wont display properly.
--- @param string string
function AddTextComponentSubstringKeyboardDisplay(string) end

--- p1 was always -1
--- @param p0 string
--- @param p1 integer
function AddTextComponentSubstringPhoneNumber(p0, p1) end

--- Adds an arbitrary string as a text component placeholder, replacing `~a~` in the current text command's text label. See the documentation on text formatting for more information.
--- @param text string
function AddTextComponentSubstringPlayerName(text) end

--- @param labelName string
function AddTextComponentSubstringTextLabel(labelName) end

--- It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
--- @param gxtEntryHash integer
function AddTextComponentSubstringTextLabelHashKey(gxtEntryHash) end

--- Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
--- @param timestamp integer
--- @param flags integer
function AddTextComponentSubstringTime(timestamp, flags) end

--- This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
--- @param website string
function AddTextComponentSubstringWebsite(website) end

--- @param entryKey string
--- @param entryText string
function AddTextEntry(entryKey, entryText) end

--- @param entryKey integer
--- @param entryText string
function AddTextEntryByHash(entryKey, entryText) end

--- @param hours integer
--- @param minutes integer
--- @param seconds integer
function AddToClockTime(hours, minutes, seconds) end

--- @param p0 any
--- @param p1 any
--- @return any
function AddToItemset(p0, p1) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @return any
function AddVehicleCombatAngledAvoidanceArea(p0, p1, p2, p3, p4, p5, p6) end

--- boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
--- @param vehicle integer
--- @param ped integer
--- @param boneIndex integer
--- @param x1 number
--- @param x2 number
--- @param x3 number
--- @param y1 number
--- @param y2 number
--- @param y3 number
--- @param z1 number
--- @param z2 number
--- @param z3 number
--- @param scale number
--- @param p13 any
--- @param alpha integer
--- @return any
function AddVehicleCrewEmblem(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha) end

--- @param vehicle integer
function AddVehiclePhoneExplosiveDevice(vehicle) end

--- @param p0 any
--- @param p1 number
--- @param p2 any
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 any
function AddVehicleStuckCheckWithWarp(p0, p1, p2, p3, p4, p5, p6) end

--- x, y, z: offset in world coords from some entity.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
function AddVehicleSubtaskAttackCoord(ped, x, y, z) end

--- @param ped integer
--- @param ped2 integer
function AddVehicleSubtaskAttackPed(ped, ped2) end

--- @param vehicle integer
function AddVehicleUpsidedownCheck(vehicle) end

--- @param hour integer
--- @param minute integer
--- @param second integer
function AdvanceClockTimeTo(hour, minute, second) end

--- This native it's a debug native. Won't do anything.
--- @param vehicle integer
function AllowAmbientVehiclesToAvoidAdverseConditions(vehicle) end

--- @param toggle boolean
function AllowMissionCreatorWarp(toggle) end

--- Allows opening the pause menu this frame, when the player is dead.
function AllowPauseMenuWhenDeadThisFrame() end

function AllowPlayerSwitchAscent() end

function AllowPlayerSwitchDescent() end

function AllowPlayerSwitchOutro() end

function AllowPlayerSwitchPan() end

--- @param toggle boolean
function AllowSonarBlips(toggle) end

--- Example from michael2 script. CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
--- @param cam integer
--- @param p1 string
--- @param p2 string
--- @param p3 string
--- @param amplitude number
function AnimatedShakeCam(cam, p1, p2, p3, amplitude) end

--- CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
--- @param p0 string
--- @param p1 string
--- @param p2 string
--- @param p3 number
function AnimatedShakeScriptGlobal(p0, p1, p2, p3) end

--- Seems to animate the gameplay camera zoom. Eg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f); will animate the camera zooming in from 1000 meters away. Game scripts use it like this: // Setting this to 1 prevents V key from changing zoom PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1); // These restrict how far you can move cam up/down left/right CAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f); CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f); CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);
--- @param p0 number
--- @param distance number
function AnimateGameplayCamZoom(p0, distance) end

--- See `ANIMPOSTFX_PLAY`
--- @param effectName string
--- @return any
function AnimpostfxGetUnk(effectName) end

--- See `ANIMPOSTFX_PLAY`.
--- @param effectName string
--- @return any
function AnimpostfxIsRunning(effectName) end

--- duration - is how long to play the effect for in milliseconds. If 0, it plays the default length if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
--- @param effectName string
--- @param duration integer
--- @param looped boolean
function AnimpostfxPlay(effectName, duration, looped) end

--- See `ANIMPOSTFX_PLAY`.
--- @param effectName string
function AnimpostfxStop(effectName) end

function AnimpostfxStopAll() end

--- Stops the effect and sets a value (bool) in its data (+0x199) to false; See `ANIMPOSTFX_PLAY`.
--- @param effectName string
function AnimpostfxStopAndDoUnk(effectName) end

function AppClearBlock() end

function AppCloseApp() end

function AppCloseBlock() end

--- @return any
function AppDataValid() end

--- @param appName string
--- @return any
function AppDeleteAppData(appName) end

--- @return any
function AppGetDeletedFileStatus() end

--- @param property string
--- @return any
function AppGetFloat(property) end

--- @param property string
--- @return any
function AppGetInt(property) end

--- @param property string
--- @return any
function AppGetString(property) end

--- @return any
function AppHasLinkedSocialClubAccount() end

--- @param appName string
--- @return any
function AppHasSyncedData(appName) end

--- damages a ped with the given amount ---- armorFirst means it will damage/lower the armor first before damaging the player. setting damageAmount to a negative amount will cause the player or the armor (depending on armorFirst) to be healed by damageAmount instead. NativeDB Added Parameter 4: Any p3
--- @param ped integer
--- @param damageAmount integer
--- @param armorFirst boolean
function ApplyDamageToPed(ped, damageAmount, armorFirst) end

--- Applies a force to the specified entity. cpp enum eForceType { MinForce = 0, MaxForceRot = 1, MinForce2 = 2, MaxForceRot2 = 3, ForceNoRot = 4, ForceRotPlusForce = 5 } Research/documentation on the gtaforums can be found here and here.
--- @param entity integer
--- @param forceType integer
--- @param x number
--- @param y number
--- @param z number
--- @param offX number
--- @param offY number
--- @param offZ number
--- @param boneIndex integer
--- @param isDirectionRel boolean
--- @param ignoreUpVec boolean
--- @param isForceRel boolean
--- @param p12 boolean
--- @param p13 boolean
function ApplyForceToEntity(entity, forceType, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) end

--- Applies a force to the specified entity. cpp enum eForceType { MinForce = 0, MaxForceRot = 1, MinForce2 = 2, MaxForceRot2 = 3, ForceNoRot = 4, ForceRotPlusForce = 5 } Research/documentation on the gtaforums can be found here and here. **This is the server-side RPC native equivalent of the client native APPLY_FORCE_TO_ENTITY.**
--- @param entity integer
--- @param forceType integer
--- @param x number
--- @param y number
--- @param z number
--- @param offX number
--- @param offY number
--- @param offZ number
--- @param boneIndex integer
--- @param isDirectionRel boolean
--- @param ignoreUpVec boolean
--- @param isForceRel boolean
--- @param p12 boolean
--- @param p13 boolean
function ApplyForceToEntity(entity, forceType, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13) end

--- @param entity integer
--- @param forceType integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 boolean
--- @param isDirectionRel boolean
--- @param isForceRel boolean
--- @param p8 boolean
function ApplyForceToEntityCenterOfMass(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8) end

--- @param posX number
--- @param posY number
--- @param posZ number
--- @param vecX number
--- @param vecY number
--- @param vecZ number
--- @param impulse number
function ApplyImpulseToCloth(posX, posY, posZ, vecX, vecY, vecZ, impulse) end

--- Found one occurence in re_crashrescue.c4 PED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, "wound_sheet");
--- @param ped integer
--- @param boneIndex integer
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param woundType string
function ApplyPedBlood(ped, boneIndex, xRot, yRot, zRot, woundType) end

--- @param ped integer
--- @param zone integer
--- @param u number
--- @param v number
--- @param bloodName string
function ApplyPedBloodByZone(ped, zone, u, v, bloodName) end

--- @param ped integer
--- @param p1 any
--- @param p2 number
--- @param p3 number
--- @param p4 any
function ApplyPedBloodDamageByZone(ped, p1, p2, p3, p4) end

--- Applies blood damage to a ped with specific parameters for zone, UV offsets, rotation, scale, and initial aging. NativeDB Introduced: v323
--- @param ped integer
--- @param component integer
--- @param u number
--- @param v number
--- @param rotation number
--- @param scale number
--- @param forcedFrame integer
--- @param preAge number
--- @param bloodName string
function ApplyPedBloodSpecific(ped, component, u, v, rotation, scale, forcedFrame, preAge, bloodName) end

--- scar blushing cs_flush_anger cs_flush_anger_face bruise bruise_large herpes ArmorBullet basic_dirt_cloth basic_dirt_skin cs_trev1_dirt
--- @param ped integer
--- @param damageZone integer
--- @param xOffset number
--- @param yOffset number
--- @param heading number
--- @param scale number
--- @param alpha number
--- @param variation integer
--- @param fadeIn boolean
--- @param decalName string
function ApplyPedDamageDecal(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName) end

--- Damage Packs: "SCR_TrevorTreeBang" "HOSPITAL_0" "HOSPITAL_1" "HOSPITAL_2" "HOSPITAL_3" "HOSPITAL_4" "HOSPITAL_5" "HOSPITAL_6" "HOSPITAL_7" "HOSPITAL_8" "HOSPITAL_9" "SCR_Dumpster" "BigHitByVehicle" "SCR_Finale_Michael_Face" "SCR_Franklin_finb" "SCR_Finale_Michael" "SCR_Franklin_finb2" "Explosion_Med" "SCR_Torture" "SCR_TracySplash" "Skin_Melee_0" Additional damage packs: gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
--- @param ped integer
--- @param damagePack string
--- @param damage number
--- @param mult number
function ApplyPedDamagePack(ped, damagePack, damage, mult) end

--- @param numEntries integer
--- @param msPerCycle integer
--- @return any
function ApplyWeatherCycles(numEntries, msPerCycle) end

function AppSaveData() end

--- Called in the gamescripts like: APP::APP_SET_APP("car"); APP::APP_SET_APP("dog");
--- @param appName string
function AppSetApp(appName) end

--- @param blockName string
function AppSetBlock(blockName) end

--- @param property string
--- @param value number
function AppSetFloat(property, value) end

--- @param property string
--- @param value integer
function AppSetInt(property, value) end

--- @param property string
--- @param value string
function AppSetString(property, value) end

--- @return any
function AreAllNavmeshRegionsLoaded() end

--- Appears to return false if any window is broken.
--- @param vehicle integer
--- @return any
function AreAllVehicleWindowsIntact(vehicle) end

--- Returns false if every seat is occupied.
--- @param vehicle integer
--- @return any
function AreAnyVehicleSeatsFree(vehicle) end

--- Returns true when the bomb bay doors of this plane are open. False if they're closed.
--- @param aircraft integer
--- @return any
function AreBombBayDoorsOpen(aircraft) end

--- @param garageHash integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 any
--- @return any
function AreEntitiesEntirelyInsideGarage(garageHash, p1, p2, p3, p4) end

--- Only used with the "akula" in the decompiled native scripts. NativeDB Introduced: v1290
--- @param vehicle integer
--- @return any
function AreHeliStubWingsDeployed(vehicle) end

--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return any
function AreNodesLoadedForArea(x1, y1, x2, y2) end

--- Returns whether the outrigger legs are deployed for the vehicle. The Chernobog is one of the few vehicles with outrigger legs. NativeDB Introduced: v1290
--- @param vehicle integer
--- @return any
function AreOutriggerLegsDeployed(vehicle) end

--- Queries whether the control panels of a plane are intact. This native is used to determine the operational status of a plane's cockpit controls, which can affect the plane's flyability.
--- @param vehicle integer
--- @param checkForZeroHealth boolean
--- @return any
function ArePlaneControlPanelsIntact(vehicle, checkForZeroHealth) end

--- @param plane integer
--- @return any
function ArePlanePropellersIntact(plane) end

--- @param plane integer
--- @return any
function ArePlaneWingsIntact(plane) end

--- @param player integer
--- @return any
function ArePlayerFlashingStarsAboutToDrop(player) end

--- @param player integer
--- @return any
function ArePlayerStarsGreyedOut(player) end

--- @return any
function AreProfileSettingsValid() end

--- @param string1 string
--- @param string2 string
--- @return any
function AreStringsEqual(string1, string2) end

--- @param value number
--- @return any
function Asin(value) end

function AssistedMovementCloseRoute() end

function AssistedMovementFlushRoute() end

--- @param route string
--- @return any
function AssistedMovementIsRouteLoaded(route) end

--- @param dist number
function AssistedMovementOverrideLoadDistanceThisFrame(dist) end

--- @param route string
function AssistedMovementRemoveRoute(route) end

--- Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
--- @param route string
function AssistedMovementRequestRoute(route) end

--- @param route string
--- @param props integer
function AssistedMovementSetRouteProperties(route, props) end

--- @param p0 number
--- @return any
function Atan(p0) end

--- @param p0 number
--- @param p1 number
--- @return any
function Atan2(p0, p1) end

--- Last param determines if its relative to the Entity
--- @param cam integer
--- @param entity integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param isRelative boolean
function AttachCamToEntity(cam, entity, xOffset, yOffset, zOffset, isRelative) end

--- This native works with peds only.
--- @param cam integer
--- @param ped integer
--- @param boneIndex integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param isRelative boolean
function AttachCamToPedBone(cam, ped, boneIndex, xOffset, yOffset, zOffset, isRelative) end

--- This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
--- @param cam integer
--- @param vehicle integer
--- @param boneIndex integer
--- @param relativeRotation boolean
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param offX number
--- @param offY number
--- @param offZ number
--- @param fixedDirection boolean
function AttachCamToVehicleBone(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offX, offY, offZ, fixedDirection) end

--- @param handler integer
--- @param container integer
function AttachContainerToHandlerFrame(handler, container) end

--- Attaches entity 1 to entity 2.
--- @param ropeId integer
--- @param ent1 integer
--- @param ent2 integer
--- @param ent1_x number
--- @param ent1_y number
--- @param ent1_z number
--- @param ent2_x number
--- @param ent2_y number
--- @param ent2_z number
--- @param length number
--- @param p10 boolean
--- @param p11 boolean
--- @param boneName1 string
--- @param boneName2 string
function AttachEntitiesToRope(ropeId, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11, boneName1, boneName2) end

--- @param entity1 integer
--- @param entity2 integer
--- @param entityBone integer
--- @param entityBone2 integer
--- @param p4 boolean
--- @param p5 boolean
function AttachEntityBoneToEntityBone(entity1, entity2, entityBone, entityBone2, p4, p5) end

--- @param entity1 integer
--- @param entity2 integer
--- @param entityBone integer
--- @param entityBone2 integer
--- @param p4 boolean
--- @param p5 boolean
function AttachEntityBoneToEntityBonePhysically(entity1, entity2, entityBone, entityBone2, p4, p5) end

--- @param vehicle integer
--- @param entity integer
--- @param p2 integer
--- @param x number
--- @param y number
--- @param z number
function AttachEntityToCargobob(vehicle, entity, p2, x, y, z) end

--- Attach an entity to the specified entity.
--- @param entity1 integer
--- @param entity2 integer
--- @param boneIndex integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param p9 boolean
--- @param useSoftPinning boolean
--- @param collision boolean
--- @param isPed boolean
--- @param rotationOrder integer
--- @param syncRot boolean
function AttachEntityToEntity(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, rotationOrder, syncRot) end

--- breakForce is the amount of force required to break the bond. p14 - is always 1 in scripts p15 - is 1 or 0 in scripts - unknown what it does p16 - controls collision between the two entities (FALSE disables collision). p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone) p18 - is always 2 in scripts.
--- @param entity1 integer
--- @param entity2 integer
--- @param boneIndex1 integer
--- @param boneIndex2 integer
--- @param xPos1 number
--- @param yPos1 number
--- @param zPos1 number
--- @param xPos2 number
--- @param yPos2 number
--- @param zPos2 number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param breakForce number
--- @param fixedRot boolean
--- @param p15 boolean
--- @param collision boolean
--- @param teleport boolean
--- @param p18 integer
function AttachEntityToEntityPhysically(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, teleport, p18) end

--- @param pickupObject integer
--- @param ped integer
function AttachPortablePickupToPed(pickupObject, ped) end

--- The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
--- @param ropeId integer
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 boolean
function AttachRopeToEntity(ropeId, entity, x, y, z, p5) end

--- @param sceneID integer
--- @param entity integer
--- @param boneIndex integer
function AttachSynchronizedSceneToEntity(sceneID, entity, boneIndex) end

--- Might be more appropriate in AUDIO?
--- @param entity integer
function AttachTvAudioToEntity(entity) end

--- @param vehicle integer
--- @param trailer integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param coordsX number
--- @param coordsY number
--- @param coordsZ number
--- @param rotationX number
--- @param rotationY number
--- @param rotationZ number
--- @param disableColls number
function AttachVehicleOnToTrailer(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableColls) end

--- @param cargobob integer
--- @param vehicle integer
--- @param vehicleBoneIndex integer
--- @param x number
--- @param y number
--- @param z number
function AttachVehicleToCargobob(cargobob, vehicle, vehicleBoneIndex, x, y, z) end

--- HookOffset defines where the hook is attached. leave at 0 for default attachment.
--- @param towTruck integer
--- @param vehicle integer
--- @param rear boolean
--- @param hookOffsetX number
--- @param hookOffsetY number
--- @param hookOffsetZ number
function AttachVehicleToTowTruck(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ) end

--- @param vehicle integer
--- @param trailer integer
--- @param radius number
function AttachVehicleToTrailer(vehicle, trailer, radius) end

--- @return any
function AudioIsScriptedMusicPlaying() end

--- @param event integer
--- @param amountReceived integer
--- @return any
--- @return integer
function BadSportPlayerLeftDetected(event, amountReceived) end

--- @param p0 any
--- @param p1 any
function BeginReplayStats(p0, p1) end

--- Push a function from the Scaleform onto the stack
--- @param scaleform integer
--- @param methodName string
--- @return any
function BeginScaleformMovieMethod(scaleform, methodName) end

--- Starts frontend (pause menu) scaleform movie methods. This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc. Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
--- @param functionName string
--- @return any
function BeginScaleformMovieMethodOnFrontend(functionName) end

--- Starts frontend (pause menu) scaleform movie methods for header options. Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
--- @param functionName string
--- @return any
function BeginScaleformMovieMethodOnFrontendHeader(functionName) end

--- Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform. Known components: 19 - MP_RANK_BAR 20 - HUD_DIRECTOR_MODE This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
--- @param hudComponent integer
--- @param methodName string
--- @return any
function BeginScaleformScriptHudMovieMethod(hudComponent, methodName) end

function BeginSrl() end

--- @return any
function BeginTakeHighQualityPhoto() end

--- @return any
function BeginTakeMissionCreatorPhoto() end

--- Initializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here BEGIN_TEXT_COMMAND_PRINT e.g void StartLoadingMessage(char *text, int spinnerType = 3) { _SET_LOADING_PROMPT_TEXT_ENTRY("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); _SHOW_LOADING_PROMPT(spinnerType); } /*OR*/ void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000) { _SET_LOADING_PROMPT_TEXT_ENTRY("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); _SHOW_LOADING_PROMPT(spinnerType); WAIT(timeMs); _REMOVE_LOADING_PROMPT(); } These are some localized strings used in the loading spinner. "PM_WAIT" = Please Wait "CELEB_WPLYRS" = Waiting For Players. "CELL_SPINNER2" = Scanning storage. "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait. "ERROR_CHECKPROFANITY" = Checking your text for profanity. Please wait. "FM_COR_AUTOD" = Just spinner no text "FM_IHELP_WAT2" = Waiting for other players "FM_JIP_WAITO" = Game options are being set "FMMC_DOWNLOAD" = Downloading "FMMC_PLYLOAD" = Loading "FMMC_STARTTRAN" = Launching session "HUD_QUITTING" = Quiting session "KILL_STRIP_IDM" = Waiting for to accept "MP_SPINLOADING" = Loading
--- @param string string
function BeginTextCommandBusyspinnerOn(string) end

--- clears a print text command with this text
--- @param text string
function BeginTextCommandClearPrint(text) end

--- Used to be known as _SET_TEXT_COMPONENT_FORMAT
--- @param inputType string
function BeginTextCommandDisplayHelp(inputType) end

--- The following were found in the decompiled script files: STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3 ESDOLLA ESMINDOLLA - cash (negative) Used to be known as _SET_TEXT_ENTRY
--- @param text string
function BeginTextCommandDisplayText(text) end

--- BEGIN_TEXT_COMMAND_* Example: _BEGIN_TEXT_COMMAND_GET_WIDTH("NUMBER"); ADD_TEXT_COMPONENT_FLOAT(69.420f, 2); float width = _END_TEXT_COMMAND_GET_WIDTH(1);
--- @param text string
function BeginTextCommandGetWidth(text) end

--- nothin doin. BOOL Message(char* text) { BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(); }
--- @param text string
function BeginTextCommandIsMessageDisplayed(text) end

--- @param labelName string
function BeginTextCommandIsThisHelpMessageBeingDisplayed(labelName) end

--- get's line count int GetLineCount(char *text, float x, float y) { _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y); }
--- @param entry string
function BeginTextCommandLineCount(entry) end

--- @param p0 string
function BeginTextCommandObjective(p0) end

--- @param gxtEntry string
function BeginTextCommandOverrideButtonText(gxtEntry) end

--- Used to be known as _SET_TEXT_ENTRY_2 void ShowSubtitle(char *text) { BEGIN_TEXT_COMMAND_PRINT("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); END_TEXT_COMMAND_PRINT(2000, 1); }
--- @param GxtEntry string
function BeginTextCommandPrint(GxtEntry) end

--- Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called. Examples: GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER"); HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1)); GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING(); GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING"); HUD::_ADD_TEXT_COMPONENT_STRING(a_2); GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING(); GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2"); HUD::_0x17299B63C7683A2B(v_3); HUD::_0x17299B63C7683A2B(v_4); GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING(); GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1"); HUD::_0x17299B63C7683A2B(v_3); GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
--- @param textLabel string
function BeginTextCommandScaleformString(textLabel) end

--- Starts a text command to change the name of a blip displayed in the pause menu. This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
--- @param textLabel string
function BeginTextCommandSetBlipName(textLabel) end

--- Declares the entry type of a notification, for example "STRING". int ShowNotification(char \*text) { BEGIN_TEXT_COMMAND_THEFEED_POST("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); return \_DRAW_NOTIFICATION(1, 1); }
--- @param text string
function BeginTextCommandThefeedPost(text) end

--- Deletes the given context from the background scripts context map. NativeDB Introduced: v323
--- @param contextName string
function BgEndContext(contextName) end

--- Hashed version of 0xDC2BACD920D0A0DD. NativeDB Introduced: v323
--- @param contextHash integer
function BgEndContextHash(contextHash) end

--- Inserts the given context into the background scripts context map. NativeDB Introduced: v323
--- @param contextName string
function BgStartContext(contextName) end

--- Hashed version of 0x9D5A25BADB742ACD. NativeDB Introduced: v323
--- @param contextHash integer
function BgStartContextHash(contextHash) end

--- Plays a siren blip from the vehicle when you double press the horn key. This only works on vehicles with sirens.
--- @param vehicle integer
function BlipSiren(vehicle) end

--- Blocks *all* speech playing on the given ped, including speech triggered by natives such as PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE The flag itself is not synced, it must be called on each machine that wishes to suppress the speech. The `SuppressOutgoingNetworkSpeech` flag can be set to `false` if you want speech triggered locally through `PLAY_PED_AMBIENT_SPEECH_*` related native calls to still be audible on remote machines, even though it was blocked on the local one.
--- @param ped integer
--- @param shouldBlock boolean
--- @param suppressOutgoingNetworkSpeech boolean
function BlockAllSpeechFromPed(ped, shouldBlock, suppressOutgoingNetworkSpeech) end

--- @param blocked boolean
function BlockDeathJingle(blocked) end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt This is limited to 4 blocked events at a time.
--- @param name integer
--- @param eventType integer
function BlockDecisionMakerEvent(name, eventType) end

--- @param dispatchService integer
--- @param toggle boolean
function BlockDispatchServiceResourceCreation(dispatchService, toggle) end

--- @param ped integer
--- @param toggle boolean
function BlockPedDeadBodyShockingEvents(ped, toggle) end

--- cpp enum eAudContextBlockTarget { AUD_CONTEXT_BLOCK_PLAYER = 0, AUD_CONTEXT_BLOCK_NPCS = 1, AUD_CONTEXT_BLOCK_BUDDYS = 2, AUD_CONTEXT_BLOCK_EVERYONE = 3, AUD_CONTEXT_BLOCK_TARGETS_TOTAL } Stop a certain group of peds from using a certain group of speech contexts. Note that the block will be automatically removed when the calling script finishes
--- @param groupName string
--- @param contextBlockTarget integer
function BlockSpeechContextGroup(groupName, contextBlockTarget) end

--- @param entity integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 any
--- @param p10 boolean
function BreakEntityGlass(entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) end

--- @param p0 integer
--- @param p1 any
--- @param p2 boolean
function BreakObjectFragmentChild(p0, p1, p2) end

--- Break off vehicle wheel by index. The `leaveDebrisTrail` flag requires `putOnFire` to be true.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param leaveDebrisTrail boolean
--- @param deleteWheel boolean
--- @param unknownFlag boolean
--- @param putOnFire boolean
function BreakOffVehicleWheel(vehicle, wheelIndex, leaveDebrisTrail, deleteWheel, unknownFlag, putOnFire) end

--- This native makes the vehicle stop immediately, as it happens when we enter a multiplayer garage.
--- @param vehicle integer
--- @param distance number
--- @param duration integer
--- @param bControlVerticalVelocity boolean
function BringVehicleToHalt(vehicle, distance, duration, bControlVerticalVelocity) end

--- @return any
function BusyspinnerIsDisplaying() end

--- @return any
function BusyspinnerIsOn() end

--- Removes the loading prompt at the bottom right of the screen.
function BusyspinnerOff() end

--- Calculates the travel distance between a set of points. Doesn't seem to correlate with distance on gps sometimes. This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function CalculateTravelDistanceBetweenPoints(x1, y1, z1, x2, y2, z2) end

--- This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay.
--- @param miniMap integer
--- @param fnName string
--- @return any
function CallMinimapScaleformFunction(miniMap, fnName) end

--- Calls the Scaleform function.
--- @param scaleform integer
--- @param method string
function CallScaleformMovieMethod(scaleform, method) end

--- Calls the Scaleform function and passes the parameters as floats. The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
--- @param scaleform integer
--- @param methodName string
--- @param param1 number
--- @param param2 number
--- @param param3 number
--- @param param4 number
--- @param param5 number
function CallScaleformMovieMethodWithNumber(scaleform, methodName, param1, param2, param3, param4, param5) end

--- Calls the Scaleform function and passes both float and string parameters (in their respective order). The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL). NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters. Examples: // function MY_FUNCTION(floatParam1, floatParam2, stringParam) GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0); // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2) GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
--- @param scaleform integer
--- @param methodName string
--- @param floatParam1 number
--- @param floatParam2 number
--- @param floatParam3 number
--- @param floatParam4 number
--- @param floatParam5 number
--- @param stringParam1 string
--- @param stringParam2 string
--- @param stringParam3 string
--- @param stringParam4 string
--- @param stringParam5 string
function CallScaleformMovieMethodWithNumberAndString(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5) end

--- Calls the Scaleform function and passes the parameters as strings. The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
--- @param scaleform integer
--- @param methodName string
--- @param param1 string
--- @param param2 string
--- @param param3 string
--- @param param4 string
--- @param param5 string
function CallScaleformMovieMethodWithString(scaleform, methodName, param1, param2, param3, param4, param5) end

--- Checks if a boat can be anchored at its present position without possibly intersecting collision later. NativeDB Introduced: v323
--- @param boat integer
--- @return any
function CanAnchorBoatHere(boat) end

--- Checks if a boat can be anchored at its present position, ignoring any players standing on the boat. NativeDB Introduced: v678
--- @param boat integer
--- @return any
function CanAnchorBoatHereIgnorePlayers(boat) end

--- Determines whether the specified Cargobob can pick up a given entity.
--- @param cargobob integer
--- @param entity integer
--- @return any
function CanCargobobPickUpEntity(cargobob, entity) end

function CancelAllPoliceReports() end

--- Cancels the currently executing event.
function CancelEvent() end

--- All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
--- @param eventName string
--- @return any
function CancelMusicEvent(eventName) end

--- Closes the onscreen keyboard on console versions of the game. **NOTE:** Do not use this native in FiveM/PC, because `UPDATE_ONSCREEN_KEYBOARD` value doesn't get cleaned up and stays as `0`. You should use `FORCE_CLOSE_TEXT_INPUT_BOX` instead.
function CancelOnscreenKeyboard() end

function CancelStuntJump() end

--- @return any
function CanCreateRandomBikeRider() end

--- @return any
function CanCreateRandomCops() end

--- @return any
function CanCreateRandomDriver() end

--- @param unk boolean
--- @return any
function CanCreateRandomPed(unk) end

--- @param ped integer
--- @return any
function CanKnockPedOffVehicle(ped) end

--- NativeDB Added Parameter 1: int p0 NativeDB Added Parameter 2: int p1 NativeDB Added Parameter 3: int amount NativeDB Added Parameter 4: int* p3
--- @return any
function CanPayGoon() end

--- @param player integer
--- @param ped integer
--- @return any
function CanPedHearPlayer(player, ped) end

--- @param ped integer
--- @param target integer
--- @return any
function CanPedInCombatSeeTarget(ped, target) end

--- Prevents the ped from going limp. [Example: Can prevent peds from falling when standing on moving vehicles.]
--- @param ped integer
--- @return any
function CanPedRagdoll(ped) end

--- @param ped1 integer
--- @param ped2 integer
--- @return any
function CanPedSeeHatedPed(ped1, ped2) end

--- This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away. I can confirm the above. This function is hard-coded to always return 1.
--- @return any
function CanPhoneBeSeenOnScreen() end

--- Returns whether or not the specified player has enough information to start a commerce session for.
--- @param playerSrc integer
--- @return any
function CanPlayerStartCommerceSession(playerSrc) end

--- @param player integer
--- @return any
function CanPlayerStartMission(player) end

--- @param ped_amt integer
--- @param vehicle_amt integer
--- @param object_amt integer
--- @param pickup_amt integer
--- @return any
function CanRegisterMissionEntities(ped_amt, vehicle_amt, object_amt, pickup_amt) end

--- @param amount integer
--- @return any
function CanRegisterMissionObjects(amount) end

--- @param amount integer
--- @return any
function CanRegisterMissionPeds(amount) end

--- @param amount integer
--- @return any
function CanRegisterMissionPickups(amount) end

--- @param amount integer
--- @return any
function CanRegisterMissionVehicles(amount) end

--- Returns when it is safe to start applying changes to cutscene entities. Should always be used for applying components. See `SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED` and `REGISTER_ENTITY_FOR_CUTSCENE` for an example. This will be true before the cutscene is considered loaded
--- @return any
function CanRequestAssetsForCutsceneEntity() end

--- modelHash (p1) was always 0 in R* scripts
--- @param cutsceneEntName string
--- @param modelHash integer
--- @return any
function CanSetEnterStateForRegisteredEntity(cutsceneEntName, modelHash) end

--- Whether or not it is safe to run functions on the camera, as the camera is now no longer being used by the cutscene.
--- @param p0 boolean
--- @return any
function CanSetExitStateForCamera(p0) end

--- Returns if the script can begin interacting with the registered entity. Primarly used for lead-outs of cutscenes. Returns on frame after cutscene ends, so you cannot get is while using IsCutsceneActive() Whether it is safe to start doing scripted actions on the entity, like simulating walking out of a cutscene.
--- @param cutsceneEntName string
--- @param modelHash integer
--- @return any
function CanSetExitStateForRegisteredEntity(cutsceneEntName, modelHash) end

--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function CanShuffleSeat(vehicle, seatIndex) end

--- this returns if you can use the weapon while using a parachute
--- @param weaponHash integer
--- @return any
function CanUseWeaponOnParachute(weaponHash) end

--- @param vehicle integer
--- @return any
function CanVehicleReceiveCbRadio(vehicle) end

--- Does something similar to INTERIOR::DISABLE_INTERIOR
--- @param interiorID integer
--- @param toggle boolean
function CapInterior(interiorID, toggle) end

function CascadeShadowsClearShadowSampleType() end

--- When this is set to ON, shadows only draw as you get nearer. When OFF, they draw from a further distance.
--- @param toggle boolean
function CascadeShadowsEnableEntityTracker(toggle) end

function CascadeShadowsInitSession() end

--- @param p0 boolean
function CascadeShadowsSetAircraftMode(p0) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 number
function CascadeShadowsSetCascadeBounds(p0, p1, p2, p3, p4, p5, p6, p7) end

--- @param p0 number
function CascadeShadowsSetCascadeBoundsScale(p0) end

--- @param p0 boolean
function CascadeShadowsSetDynamicDepthMode(p0) end

--- @param p0 number
function CascadeShadowsSetDynamicDepthValue(p0) end

--- @param p0 number
function CascadeShadowsSetEntityTrackerScale(p0) end

--- Possible values: "CSM_ST_POINT" "CSM_ST_LINEAR" "CSM_ST_TWOTAP" "CSM_ST_BOX3x3" "CSM_ST_BOX4x4" "CSM_ST_DITHER2_LINEAR" "CSM_ST_CUBIC" "CSM_ST_DITHER4" "CSM_ST_DITHER16" "CSM_ST_SOFT16" "CSM_ST_DITHER16_RPDB" "CSM_ST_POISSON16_RPDB_GNORM" "CSM_ST_HIGHRES_BOX4x4" "CSM_ST_CLOUDS_SIMPLE" "CSM_ST_CLOUDS_LINEAR" "CSM_ST_CLOUDS_TWOTAP" "CSM_ST_CLOUDS_BOX3x3" "CSM_ST_CLOUDS_BOX4x4" "CSM_ST_CLOUDS_DITHER2_LINEAR" "CSM_ST_CLOUDS_SOFT16" "CSM_ST_CLOUDS_DITHER16_RPDB" "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
--- @param type string
function CascadeShadowsSetShadowSampleType(type) end

--- I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
--- @param value number
--- @return any
function Ceil(value) end

--- Activates the cellphone camera. Make sure you have a mobile phone created with `CREATE_MOBILE_PHONE` or else the camera will not work.
--- @param active boolean
--- @param bGoFirstPerson boolean
function CellCamActivate(active, bGoFirstPerson) end

--- Toggles the selfie mode on the cellphone camera. Only visible when the cell phone camera is active.
--- @param toggle boolean
function CellCamActivateSelfieMode(toggle) end

--- @param entity integer
--- @return any
function CellCamIsCharVisibleNoFaceCheck(entity) end

--- Moves the character's finger in a swiping motion when holding a cellphone in their hand through the use of the CREATE_MOBILE_PHONE native. cpp enum eCellInput { CELL_INPUT_NONE = 0, CELL_INPUT_UP = 1, CELL_INPUT_DOWN = 2, CELL_INPUT_LEFT = 3, CELL_INPUT_RIGHT = 4, CELL_INPUT_SELECT = 5 }
--- @param direction integer
function CellCamMoveFinger(direction) end

--- @param p0 number
function CellCamSetDistance(p0) end

--- @param p0 number
function CellCamSetHeadHeight(p0) end

--- @param p0 number
function CellCamSetHeadPitch(p0) end

--- @param p0 number
function CellCamSetHeadRoll(p0) end

--- @param p0 number
function CellCamSetHorizontalOffset(p0) end

--- if the bool "Toggle" is "true" so the phone is lean. if the bool "Toggle" is "false" so the phone is not lean.
--- @param toggle boolean
function CellCamSetLean(toggle) end

--- @param p0 number
function CellCamSetRoll(p0) end

--- @param p0 number
function CellCamSetVerticalOffset(p0) end

--- Displays cash change notifications on HUD.
--- @param cash integer
--- @param bank integer
function ChangeFakeMpCash(cash, bank) end

--- @param player integer
--- @param ped integer
--- @param b2 boolean
--- @param resetDamage boolean
function ChangePlayerPed(player, ped, b2, resetDamage) end

--- minimum: Degrees between -90f and 90f. maximum: Degrees between -90f and 90f. Clamps the gameplay camera's current pitch. Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
--- @param minimum number
--- @param maximum number
function ClampGameplayCamPitch(minimum, maximum) end

--- minimum: Degrees between -180f and 180f. maximum: Degrees between -180f and 180f. Clamps the gameplay camera's current yaw. Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
--- @param minimum number
--- @param maximum number
function ClampGameplayCamYaw(minimum, maximum) end

--- @param p0 any
function CleanItemset(p0) end

function CleanupAsyncInstall() end

--- @param p0 integer
--- @param p1 boolean
function ClearAdditionalText(p0, p1) end

--- Clears all active blip routes that have been set with `SetBlipRoute`.
function ClearAllBlipRoutes() end

function ClearAllBrokenGlass() end

function ClearAllHelpMessages() end

--- @param ped integer
function ClearAllPedProps(ped) end

--- @param ped integer
function ClearAllPedVehicleForcedSeatUsage(ped) end

--- Resets the list of ambients zones enabled/disabled status to its value before it was modified by this script. Default behaviour is that any state change only gets applied once the player leaves the zone.
--- @param zoneListName string
--- @param forceUpdate boolean
function ClearAmbientZoneListState(zoneListName, forceUpdate) end

--- Resets the ambient zone enabled/disabled status to its value before it was modified by this script Default behaviour is that any state change only gets applied once the player leaves the zone.
--- @param zoneName string
--- @param forceUpdate boolean
function ClearAmbientZoneState(zoneName, forceUpdate) end

--- NativeDB Added Parameter 13: Any p12
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
--- @param p10 boolean
--- @param p11 boolean
function ClearAngledAreaOfVehicles(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11) end

--- Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
--- @param X number
--- @param Y number
--- @param Z number
--- @param radius number
--- @param p4 boolean
--- @param ignoreCopCars boolean
--- @param ignoreObjects boolean
--- @param p7 boolean
function ClearArea(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7) end

--- MISC::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
function ClearAreaLeaveVehicleHealth(x, y, z, radius, p4, p5, p6, p7) end

--- Clears an area of cops at the given coordinates and radius.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param createNetEvent boolean
function ClearAreaOfCops(x, y, z, radius, createNetEvent) end

--- I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param flags integer
function ClearAreaOfObjects(x, y, z, radius, flags) end

--- Clears an area of peds at the given coordinates and radius.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param createNetEvent boolean
function ClearAreaOfPeds(x, y, z, radius, createNetEvent) end

--- Clears an area of projectiles at the given coordinates and radius.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param createNetEvent boolean
function ClearAreaOfProjectiles(x, y, z, radius, createNetEvent) end

--- Example: CLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false); NativeDB Added Parameter 10: BOOL p9
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
function ClearAreaOfVehicles(x, y, z, radius, p4, p5, p6, p7, p8) end

--- This sets bit [offset] of [address] to off. Example: MISC::CLEAR_BIT(&bitAddress, 1); To check if this bit has been enabled: MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
--- @param offset integer
--- @return integer
function ClearBit(offset) end

function ClearBrief() end

function ClearCloudHat() end

--- Clears the previously queued custom track lost for the given radio station.
--- @param radioStation string
function ClearCustomRadioTrackList(radioStation) end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
--- @param name integer
--- @param eventType integer
function ClearDecisionMakerEventResponse(name, eventType) end

--- Resets the screen's draw-origin which was changed by the function `SET_DRAW_ORIGIN` back to `x=0, y=0`. See `SET_DRAW_ORIGIN` for further information.
function ClearDrawOrigin() end

--- Resets the screen's draw-origin which was changed by the function `SET_DRAW_ORIGIN` back to `x=0, y=0`. See `SET_DRAW_ORIGIN` for further information.
function ClearDrawOrigin() end

--- @param ped integer
function ClearDrivebyTaskUnderneathDrivingTask(ped) end

function ClearDynamicPauseMenuErrorMessage() end

--- This native **could affect** the arguments of the `CEventNetworkEntityDamage` game event, by clearing the damaging entity before the event is fired.
--- @param entity integer
function ClearEntityLastDamageEntity(entity) end

--- @param entity integer
function ClearEntityLastWeaponDamage(entity) end

--- Clears the secondary timecycle modifier usually set with `SetExtraTimecycleModifier`
function ClearExtraTimecycleModifier() end

--- NativeDB Introduced: v1493
--- @param ped integer
function ClearFacialClipsetOverride(ped) end

--- @param ped integer
function ClearFacialIdleAnimOverride(ped) end

--- @param hudIndex integer
--- @param p1 boolean
function ClearFloatingHelp(hudIndex, p1) end

function ClearFocus() end

--- @param garageHash integer
--- @param isNetwork boolean
function ClearGarageArea(garageHash, isNetwork) end

function ClearGpsCustomRoute() end

--- Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
--- @param index integer
function ClearGpsDisabledZoneAtIndex(index) end

--- Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them. Doesn't seem like the flags are actually read by the game at all.
function ClearGpsFlags() end

--- Does the same as `SET_GPS_MULTI_ROUTE_RENDER(false)`
function ClearGpsMultiRoute() end

function ClearGpsPlayerWaypoint() end

--- Does the same as SET_RACE_TRACK_RENDER(false);
function ClearGpsRaceTrack() end

function ClearHdArea() end

--- @param toggle boolean
function ClearHelp(toggle) end

--- Immediately removes entity from an interior. Like sets entity to `limbo` room. NativeDB Introduced: v2189
--- @param entity integer
function ClearInteriorForEntity(entity) end

function ClearLastDrivenVehicle() end

--- **This native does absolutely nothing, just a nullsub**
function ClearLaunchParams() end

--- NativeDB Introduced: 3095 Resets or clears the nitrous system for a specified vehicle. You can check if a vehicle has nitrous with `IS_NITROUS_ACTIVE`
--- @param vehicle integer
function ClearNitrous(vehicle) end

--- @param garageHash integer
--- @param vehicles boolean
--- @param peds boolean
--- @param objects boolean
--- @param isNetwork boolean
function ClearObjectsInsideGarage(garageHash, vehicles, peds, objects, isNetwork) end

function ClearOverrideWeather() end

--- @param ped integer
--- @param stance integer
--- @param p2 number
function ClearPedAlternateMovementAnim(ped, stance, p2) end

--- @param ped integer
--- @param p1 number
function ClearPedAlternateWalkAnim(ped, p1) end

--- Clears the blood on a ped.
--- @param ped integer
function ClearPedBloodDamage(ped) end

--- Somehow related to changing ped's clothes.
--- @param ped integer
--- @param p1 integer
function ClearPedBloodDamageByZone(ped, p1) end

--- CLEAR_PED_*
--- @param ped integer
function ClearPedCoverClipsetOverride(ped) end

--- p1: from 0 to 5 in the b617d scripts. p2: "blushing" and "ALL" found in the b617d scripts.
--- @param ped integer
--- @param p1 integer
--- @param p2 string
function ClearPedDamageDecalByZone(ped, p1, p2) end

--- @param ped integer
function ClearPedDecorations(ped) end

--- @param ped integer
function ClearPedDecorationsLeaveScars(ped) end

--- @param ped integer
function ClearPedDriveByClipsetOverride(ped) end

--- @param ped integer
function ClearPedEnvDirt(ped) end

function ClearPedInPauseMenu() end

--- @param ped integer
function ClearPedLastDamageBone(ped) end

--- Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
--- @param ped integer
function ClearPedLastWeaponDamage(ped) end

function ClearPedNonCreationArea() end

--- @param ped integer
function ClearPedParachutePackVariation(ped) end

--- @param ped integer
--- @param propId integer
function ClearPedProp(ped, propId) end

--- CLEAR_PED_PROP **This is the server-side RPC native equivalent of the client native CLEAR_PED_PROP.**
--- @param ped integer
--- @param propId integer
function ClearPedProp(ped, propId) end

--- Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
--- @param ped integer
function ClearPedScubaGearVariation(ped) end

--- @param ped integer
function ClearPedSecondaryTask(ped) end

--- CLEAR_PED_SECONDARY_TASK **This is the server-side RPC native equivalent of the client native CLEAR_PED_SECONDARY_TASK.**
--- @param ped integer
function ClearPedSecondaryTask(ped) end

--- @param ped integer
function ClearPedStoredHatProp(ped) end

--- Clear a ped's tasks. Stop animations and other tasks created by scripts.
--- @param ped integer
function ClearPedTasks(ped) end

--- Clear a ped's tasks. Stop animations and other tasks created by scripts. **This is the server-side RPC native equivalent of the client native CLEAR_PED_TASKS.**
--- @param ped integer
function ClearPedTasks(ped) end

--- Immediately stops the pedestrian from whatever it's doing. The difference between this and CLEAR_PED_TASKS is that this one teleports the ped but does not change the position of the ped.
--- @param ped integer
function ClearPedTasksImmediately(ped) end

--- Immediately stops the pedestrian from whatever it's doing. The difference between this and CLEAR_PED_TASKS is that this one teleports the ped but does not change the position of the ped. **This is the server-side RPC native equivalent of the client native CLEAR_PED_TASKS_IMMEDIATELY.**
--- @param ped integer
function ClearPedTasksImmediately(ped) end

--- It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
--- @param ped integer
function ClearPedWetness(ped) end

--- @param player integer
function ClearPlayerHasDamagedAtLeastOneNonAnimalPed(player) end

--- @param player integer
function ClearPlayerHasDamagedAtLeastOnePed(player) end

--- @param player integer
function ClearPlayerParachuteModelOverride(player) end

--- @param player integer
function ClearPlayerParachutePackModelOverride(player) end

--- @param player integer
function ClearPlayerParachuteVariationOverride(player) end

--- NativeDB Introduced: v2372
--- @param player integer
function ClearPlayerReserveParachuteModelOverride(player) end

--- This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false); PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
--- @param player integer
function ClearPlayerWantedLevel(player) end

--- This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false); PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible. **This is the server-side RPC native equivalent of the client native CLEAR_PLAYER_WANTED_LEVEL.**
--- @param player integer
function ClearPlayerWantedLevel(player) end

--- Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators. Modified example from "am_imp_exp.c4", line 6418: /* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1)); etc. */ STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash); ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
--- @param scheduleId integer
function ClearPopscheduleOverrideVehicleModel(scheduleId) end

function ClearPrints() end

function ClearRaceGalleryBlips() end

--- There seem to be 26 flags
--- @param ped integer
--- @param flags integer
function ClearRagdollBlockingFlags(ped, flags) end

--- Clears the relationship between two groups. This should be called twice (once for each group). Relationship types: 0 = Companion 1 = Respect 2 = Like 3 = Neutral 4 = Dislike 5 = Hate 255 = Pedestrians (Credits: Inco) Example: PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C); PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
--- @param relationship integer
--- @param group1 integer
--- @param group2 integer
function ClearRelationshipBetweenGroups(relationship, group1, group2) end

--- **This native does absolutely nothing, just a nullsub**
function ClearReminderMessage() end

function ClearReplayStats() end

function ClearRestartCustomPosition() end

--- @param entity integer
function ClearRoomForEntity(entity) end

function ClearRoomForGameViewport() end

--- For an example on how to use this please refer to OPEN_SEQUENCE_TASK #### NOTE If you fail to call `CLOSE_SEQUENCE_TASK` and `CLEAR_SEQUENCE_TASK` the sequence system can get stuck in a broken state until you restart your client.
--- @param taskSequenceId integer
--- @return integer
function ClearSequenceTask(taskSequenceId) end

function ClearSmallPrints() end

function ClearTacticalAnalysisPoints() end

--- p0: found arguments in the b617d scripts: pastebin.com/X5akCN7z
--- @param p0 string
function ClearThisPrint(p0) end

function ClearTimecycleModifier() end

--- @param tvChannel integer
function ClearTvChannelPlaylist(tvChannel) end

--- @param vehicle integer
function ClearVehicleCustomPrimaryColour(vehicle) end

--- @param vehicle integer
function ClearVehicleCustomSecondaryColour(vehicle) end

--- Removes the cargen area of interest and resumes normal cargen spawning. You can set the area of interest with `SET_VEHICLE_GENERATOR_AREA_OF_INTEREST`
function ClearVehicleGeneratorAreaOfInterest() end

function ClearVehiclePhoneExplosiveDevice() end

--- @param vehicle integer
function ClearVehicleRouteHistory(vehicle) end

--- CLEAR_* NativeDB Introduced: v1290
--- @param vehicle integer
function ClearVehicleTasks(vehicle) end

--- Removes vehicle xenon lights custom RGB color.
--- @param vehicle integer
function ClearVehicleXenonLightsCustomColor(vehicle) end

--- Clears the active weather type after a specific amount of time determined by `transitionTimeInMs`.
--- @param transitionTimeInMs integer
function ClearWeatherTypeNowPersistNetwork(transitionTimeInMs) end

function ClearWeatherTypePersist() end

--- Creates a copy of the passed ped, optionally setting it as local and/or shallow-copying the head blend data.
--- @param ped integer
--- @param isNetwork boolean
--- @param bScriptHostPed boolean
--- @param copyHeadBlendFlag boolean
--- @return any
function ClonePed(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag) end

--- Used one time in fmmc_launcher.c instead of CLONE_PED because ?
--- @param ped integer
--- @param heading number
--- @param isNetwork boolean
--- @param bScriptHostPed boolean
--- @param p4 any
--- @return any
function ClonePedEx(ped, heading, isNetwork, bScriptHostPed, p4) end

--- Copies ped's components and props to targetPed.
--- @param ped integer
--- @param targetPed integer
function ClonePedToTarget(ped, targetPed) end

--- @param ped integer
--- @param targetPed integer
--- @param p2 any
function ClonePedToTargetEx(ped, targetPed, p2) end

--- @param sourceModifierName string
--- @param clonedModifierName string
--- @return any
function CloneTimecycleModifier(sourceModifierName, clonedModifierName) end

--- @param vehicle integer
function CloseBombBayDoors(vehicle) end

function CloseMultiplayerChat() end

function ClosePatrolRoute() end

--- For an example on how to use this please refer to OPEN_SEQUENCE_TASK #### NOTE If you fail to call `CLOSE_SEQUENCE_TASK` and `CLEAR_SEQUENCE_TASK` this can get stuck in a broken state until you restart your client.
--- @param taskSequenceId integer
function CloseSequenceTask(taskSequenceId) end

function CloseSocialClubMenu() end

--- Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
function CloudCheckAvailability() end

--- @param p0 string
--- @return any
function CloudDeleteMemberFile(p0) end

--- @param handle integer
--- @return any
function CloudDidRequestSucceed(handle) end

--- @return any
function CloudGetAvailabilityCheckResult() end

--- @param handle integer
--- @return any
function CloudHasRequestCompleted(handle) end

--- @return any
function CloudIsCheckingAvailability() end

--- Commits the backing pixels to the specified runtime texture.
--- @param tex integer
function CommitRuntimeTexture(tex) end

--- Compares two strings up to a specified number of characters. Parameters: str1 - String to be compared. str2 - String to be compared. matchCase - Comparison will be case-sensitive. maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length. Returns: A value indicating the relationship between the strings: <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1) 0 - The contents of both strings are equal. >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1) Examples: MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b' MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal When comparing case-sensitive strings, lower-case characters are greater than upper-case characters: MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a' MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
--- @param str1 string
--- @param str2 string
--- @param matchCase boolean
--- @param maxLength integer
--- @return any
function CompareStrings(str1, str2, matchCase, maxLength) end

--- Works for vehicles with a retractable landing gear landing gear states: 0: Deployed 1: Closing 2: Opening 3: Retracted
--- @param vehicle integer
--- @param state integer
function ControlLandingGear(vehicle, state) end

--- Forces the ped to use the mounted weapon. Returns false if task is not possible.
--- @param ped integer
--- @return any
function ControlMountedWeapon(ped) end

--- Takes the specified time and writes it to the structure specified in the second argument. struct date_time { alignas(8) int year; alignas(8) int month; alignas(8) int day; alignas(8) int hour; alignas(8) int minute; alignas(8) int second; };
--- @param posixTime integer
--- @return any
function ConvertPosixTime(posixTime) end

--- @param src any
--- @param size integer
--- @return any
function CopyMemory(src, size) end

--- Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
--- @param sourceVehicle integer
--- @param targetVehicle integer
function CopyVehicleDamages(sourceVehicle, targetVehicle) end

--- Returns the cosine of the given number.
--- @param value number
--- @return any
function Cos(value) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param weaponHash integer
--- @return any
function CreateAirDefenseArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, weaponHash) end

--- Both coordinates are from objects in the decompiled scripts. Native related to \_0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param weaponHash integer
--- @return any
function CreateAirDefenseSphere(x, y, z, radius, p4, p5, p6, weaponHash) end

--- Creates an ambient pickup given the hash. Pickup hashes can be found here.
--- @param pickupHash integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param flags integer
--- @param value integer
--- @param modelHash integer
--- @param returnHandle boolean
--- @param p8 boolean
--- @return any
function CreateAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, returnHandle, p8) end

--- Creates an audio submix with the specified name, or gets the existing audio submix by that name.
--- @param name string
--- @return any
function CreateAudioSubmix(name) end

--- Creates a camera with the specified cam name, You can use `SET_CAM_` natives to manipulate the camera.\ Make sure to call RENDER_SCRIPT_CAMS once the camera is created, or this won't have any visible effect. ### Camera names: * DEFAULT_SCRIPTED_CAMERA * DEFAULT_ANIMATED_CAMERA * DEFAULT_SPLINE_CAMERA * DEFAULT_SCRIPTED_FLY_CAMERA * TIMED_SPLINE_CAMERA * CUSTOM_TIMED_SPLINE_CAMERA * ROUNDED_SPLINE_CAMERA * SMOOTHED_SPLINE_CAMERA
--- @param camName string
--- @param active boolean
--- @return any
function CreateCam(camName, active) end

--- Creates a camera with the specified camera hash, You can use `SET_CAM_` natives to manipulate the camera. Make sure to call RENDER_SCRIPT_CAMS once the camera is created, or this won't have any visible effect. Take a look at CREATE_CAM if you would like to see the available camera names. NativeDB Introduced: v323
--- @param camHash integer
--- @param active boolean
--- @return any
function CreateCamera(camHash, active) end

--- Create a camera with the specified camera hash, You can use `SET_CAM_` natives to manipulate the camera. Make sure to call RENDER_SCRIPT_CAMS once the camera is created, or this won't have any visible effect. Take a look at CREATE_CAM if you would like to see the available camera names. NativeDB Introduced: v323
--- @param camHash integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param fov number
--- @param active boolean
--- @param rotationOrder integer
--- @return any
function CreateCameraWithParams(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, active, rotationOrder) end

--- Create a camera with the specified cam name/type, You can use `SET_CAM_` natives to manipulate the camera. Take a look at CREATE_CAM if you would like to see the available camera names.
--- @param camName string
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param fov number
--- @param active boolean
--- @param rotationOrder integer
--- @return any
function CreateCamWithParams(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, active, rotationOrder) end

--- Creates a checkpoint. Returns the handle of the checkpoint. 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers. Parameters: * type - The type of checkpoint to create. See below for a list of checkpoint types. * pos1 - The position of the checkpoint. * pos2 - The position of the next checkpoint to point to. * diameter - The diameter of the checkpoint. * color - The color of the checkpoint. * reserved - Special parameter, see below for details. Usually set to 0 in the scripts. Checkpoint types (prior to game build 2189): 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 35-38-------Ring: Airplane Up, Left, Right, UpsideDown 39----------? 40----------Ring: just a ring 41----------? 42-44-------Cylinder w/ number (uses 'reserved' parameter) 45-47-------Cylinder no arrow or number If using type 42-44, reserved sets number / number and shape to display 0-99------------Just numbers (0-99) 100-109-----------------Arrow (0-9) 110-119------------Two arrows (0-9) 120-129----------Three arrows (0-9) 130-139----------------Circle (0-9) 140-149------------CycleArrow (0-9) 150-159----------------Circle (0-9) 160-169----Circle w/ pointer (0-9) 170-179-------Perforated ring (0-9) 180-189----------------Sphere (0-9) Checkpoint Types as of game build 2189
--- @param type integer
--- @param posX1 number
--- @param posY1 number
--- @param posZ1 number
--- @param posX2 number
--- @param posY2 number
--- @param posZ2 number
--- @param diameter number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param reserved integer
--- @return any
function CreateCheckpoint(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved) end

--- @param p0 any
--- @param p1 integer
--- @param p2 any
--- @param entity integer
function CreateCinematicShot(p0, p1, p2, entity) end

--- Creates a volume where water effects do not apply. Useful for preventing water collisions from flooding areas underneath them. This has no effect on waterquads, only water created from drawables and collisions. Don't create volumes when your local ped is swimming (e.g. use IS_PED_SWIMMING in your scripts before you call this)
--- @param xMin number
--- @param yMin number
--- @param zMin number
--- @param xMax number
--- @param yMax number
--- @param zMax number
--- @return any
function CreateDryVolume(xMin, yMin, zMin, xMax, yMax, zMax) end

--- Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.
--- @param url string
--- @param width integer
--- @param height integer
--- @return any
function CreateDui(url, width, height) end

--- As per the name, this native creates a "fake" gamer tag that is attached to a specific ped. Unlike "real" gamer tags, you cannot set the crew colour of these gamer tags. To create gamer tags for actual players and for more gamer tag information, see CREATE_MP_GAMER_TAG_WITH_CREW_COLOR.
--- @param ped integer
--- @param username string
--- @param crewIsPrivate boolean
--- @param crewIsRockstar boolean
--- @param crewName string
--- @param crewRank integer
--- @return any
function CreateFakeMpGamerTag(ped, username, crewIsPrivate, crewIsRockstar, crewName, crewRank) end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 any
--- @param modelHash integer
--- @param p5 boolean
function CreateForcedObject(x, y, z, p3, modelHash, p5) end

--- Creates a new ped group. Groups can contain up to 8 peds. The parameter is unused. Returns a handle to the created group, or 0 if a group couldn't be created.
--- @param unused integer
--- @return any
function CreateGroup(unused) end

--- NativeDB Added Parameter 8: Any p7 NativeDB Added Parameter 9: Any p8
--- @param dispatchService integer
--- @param x number
--- @param y number
--- @param z number
--- @param numUnits integer
--- @param radius number
--- @return any
--- @return integer
function CreateIncident(dispatchService, x, y, z, numUnits, radius) end

--- NativeDB Added Parameter 6: Any p5 NativeDB Added Parameter 7: Any p6
--- @param dispatchService integer
--- @param ped integer
--- @param numUnits integer
--- @param radius number
--- @return any
--- @return integer
function CreateIncidentWithEntity(dispatchService, ped, numUnits, radius) end

--- @param distri boolean
--- @return any
function CreateItemset(distri) end

--- Train models must be requested before use. See trains.xml (located in `Grand Theft Auto V\update\update.rpf\common\data\levels\gta5\trains.xml`) for freight and metro variations. Model names to request can be found by searching `model_name` in the file. The `Lua` usage example provided down below has been provided in such way so users can test each and every train variation. ### Newly added parameters (seen in 2372 build) NativeDB Added Parameter 6: BOOL isNetwork NativeDB Added Parameter 7: BOOL netMissionEntity * **isNetwork**: Whether to create a network object for the train. If false, the train exists only locally. * **netMissionEntity**: Whether to register the train as pinned to the script host in the R\* network model. ### Train Models: * freight ### Carriage Models: * freightcar * freightcar2 (Added v2372) * freightcont1 * freightcont2 * freightgrain * metrotrain * tankercar ### Some train variations (default from trains.xml as of build 2372) * 17. Very long train and freight variation. * 18. Freight train only. * 26. Double metro train (with both models flipped opposite to each other). This used to be `25` before the 2802 build, it also used to be `24` before the 2372 build.
--- @param variation integer
--- @param x number
--- @param y number
--- @param z number
--- @param direction boolean
--- @return any
function CreateMissionTrain(variation, x, y, z, direction) end

--- Creates a mobile phone of the specified type. Possible phone types: 0 - Default phone / Michael's phone 1 - Trevor's phone 2 - Franklin's phone 4 - Prologue phone These values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.
--- @param phoneType integer
function CreateMobilePhone(phoneType) end

--- p5 = sets as true in scripts Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well. Network players do not see changes done with this.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param model integer
--- @param p5 boolean
function CreateModelHide(x, y, z, radius, model, p5) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param model integer
--- @param p5 boolean
function CreateModelHideExcludingScriptObjects(x, y, z, radius, model, p5) end

--- Only works with objects! Network players do not see changes done with this.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param originalModel integer
--- @param newModel integer
--- @param p6 boolean
function CreateModelSwap(x, y, z, radius, originalModel, newModel, p6) end

--- Spawns one or more money pickups. x: The X-component of the world position to spawn the money pickups at. y: The Y-component of the world position to spawn the money pickups at. z: The Z-component of the world position to spawn the money pickups at. value: The combined value of the pickups (in dollars). amount: The number of pickups to spawn. model: The model to use, or 0 for default money model. Example: CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae); Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000). ============================================== Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
--- @param x number
--- @param y number
--- @param z number
--- @param value integer
--- @param amount integer
--- @param model integer
function CreateMoneyPickups(x, y, z, value, amount, model) end

--- Creates a gamer tag for the specified local player ID, automatically attached to the player's current ped. The created gamer tag will have the same ID as the player. You can use IS_MP_GAMER_TAG_ACTIVE to check if a gamer tag already exists for a player. After the gamer tag is created, all components will be set as invisible. Use SET_MP_GAMER_TAG_VISIBILITY to change the visibility of individual components or \_SET_MP_GAMER_TAG_VISIBILITY_ALL to set all of them at once. To create a gamer tag for a ped that is not a player, see CREATE_FAKE_MP_GAMER_TAG.
--- @param player integer
--- @param username string
--- @param crewIsPrivate boolean
--- @param crewIsRockstar boolean
--- @param crewName string
--- @param crewRank integer
--- @param crewR integer
--- @param crewG integer
--- @param crewB integer
function CreateMpGamerTagWithCrewColor(player, username, crewIsPrivate, crewIsRockstar, crewName, crewRank, crewR, crewG, crewB) end

function CreateNewScriptedConversation() end

--- Creates a new NaturalMotion message. startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized. messageId: The ID of the NaturalMotion message. If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
--- @param startImmediately boolean
--- @param messageId integer
function CreateNmMessage(startImmediately, messageId) end

--- NativeDB Introduced: v2372
--- @param pickupHash any
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param flags integer
--- @param value integer
--- @param modelHash any
--- @param p7 boolean
--- @param p8 boolean
--- @return any
function CreateNonNetworkedAmbientPickup(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8) end

--- @param pickupHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param placeOnGround boolean
--- @param modelHash integer
--- @return any
function CreateNonNetworkedPortablePickup(pickupHash, x, y, z, placeOnGround, modelHash) end

--- Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model. This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param isNetwork boolean
--- @param netMissionEntity boolean
--- @param doorFlag boolean
--- @return any
function CreateObject(modelHash, x, y, z, isNetwork, netMissionEntity, doorFlag) end

--- Creates an object (prop) with the specified model at the specified position, offset on the Z axis by the radius of the object's model. This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL). **This is the server-side RPC native equivalent of the client native CREATE_OBJECT.**
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param isNetwork boolean
--- @param netMissionEntity boolean
--- @param doorFlag boolean
--- @return any
function CreateObject(modelHash, x, y, z, isNetwork, netMissionEntity, doorFlag) end

--- Creates an object (prop) with the specified model centered at the specified position. This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param isNetwork boolean
--- @param netMissionEntity boolean
--- @param doorFlag boolean
--- @return any
function CreateObjectNoOffset(modelHash, x, y, z, isNetwork, netMissionEntity, doorFlag) end

--- Creates an object (prop) with the specified model centered at the specified position. This object will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL). **This is the server-side RPC native equivalent of the client native CREATE_OBJECT_NO_OFFSET.**
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param isNetwork boolean
--- @param netMissionEntity boolean
--- @param doorFlag boolean
--- @return any
function CreateObjectNoOffset(modelHash, x, y, z, isNetwork, netMissionEntity, doorFlag) end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @return any
function CreateParachuteBagObject(ped, p1, p2) end

function CreatePatrolRoute() end

--- Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading. This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL).
--- @param pedType integer
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isNetwork boolean
--- @param bScriptHostPed boolean
--- @return any
function CreatePed(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed) end

--- Creates a ped (biped character, pedestrian, actor) with the specified model at the specified position and heading. This ped will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL). **This is the server-side RPC native equivalent of the client native CREATE_PED.**
--- @param pedType integer
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isNetwork boolean
--- @param bScriptHostPed boolean
--- @return any
function CreatePed(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed) end

--- @param vehicle integer
--- @param pedType integer
--- @param modelHash integer
--- @param seat integer
--- @param isNetwork boolean
--- @param bScriptHostPed boolean
--- @return any
function CreatePedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) end

--- CREATE_PED_INSIDE_VEHICLE **This is the server-side RPC native equivalent of the client native CREATE_PED_INSIDE_VEHICLE.**
--- @param vehicle integer
--- @param pedType integer
--- @param modelHash integer
--- @param seat integer
--- @param isNetwork boolean
--- @param bScriptHostPed boolean
--- @return any
function CreatePedInsideVehicle(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed) end

--- Pickup hashes can be found here.
--- @param pickupHash integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param p4 integer
--- @param value integer
--- @param p6 boolean
--- @param modelHash integer
--- @return any
function CreatePickup(pickupHash, posX, posY, posZ, p4, value, p6, modelHash) end

--- Drops the Hook/Magnet on a cargobob cpp enum eCargobobHook { CARGOBOB_HOOK = 0, CARGOBOB_MAGNET = 1, };
--- @param cargobob integer
--- @param state integer
function CreatePickUpRopeForCargobob(cargobob, state) end

--- Pickup hashes: pastebin.com/8EuSv2r1 flags: 8 (1 << 3): place on ground 512 (1 << 9): spin around
--- @param pickupHash integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param flag integer
--- @param amount integer
--- @param p9 any
--- @param p10 boolean
--- @param modelHash integer
--- @return any
function CreatePickupRotate(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash) end

--- Pickup hashes can be found here.
--- @param pickupHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param placeOnGround boolean
--- @param modelHash integer
--- @return any
function CreatePortablePickup(pickupHash, x, y, z, placeOnGround, modelHash) end

--- vb.net Dim ped_handle As Integer With Game.Player.Character Dim pos As Vector3 = .Position + .ForwardVector * 3 ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z) End With Creates a Ped at the specified location, returns the Ped Handle. Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
--- @param posX number
--- @param posY number
--- @param posZ number
--- @return any
function CreateRandomPed(posX, posY, posZ) end

--- @param vehicle integer
--- @param returnHandle boolean
--- @return any
function CreateRandomPedAsDriver(vehicle, returnHandle) end

--- Creates a blank runtime texture.
--- @param txd integer
--- @param txn string
--- @param width integer
--- @param height integer
--- @return any
function CreateRuntimeTexture(txd, txn, width, height) end

--- Creates a runtime texture from a DUI handle.
--- @param txd integer
--- @param txn string
--- @param duiHandle string
--- @return any
function CreateRuntimeTextureFromDuiHandle(txd, txn, duiHandle) end

--- Creates a runtime texture from the specified file in the current resource or a base64 data URL.
--- @param txd integer
--- @param txn string
--- @param fileName string
--- @return any
function CreateRuntimeTextureFromImage(txd, txn, fileName) end

--- Creates a runtime texture dictionary with the specified name. Example: lua local txd = CreateRuntimeTxd('meow')
--- @param name string
--- @return any
function CreateRuntimeTxd(name) end

--- Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown. Parameters: a/w/s - Generator position heading - Generator heading p4 - Unknown (always 5.0) p5 - Unknown (always 3.0) modelHash - Vehicle model hash p7/8/9/10 - Unknown (always -1) p11 - Unknown (usually TRUE, only one instance of FALSE) p12/13 - Unknown (always FALSE) p14 - Unknown (usally FALSE, only two instances of TRUE) p15 - Unknown (always TRUE) p16 - Unknown (always -1) Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0); CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p4 number
--- @param p5 number
--- @param modelHash integer
--- @param p7 integer
--- @param p8 integer
--- @param p9 integer
--- @param p10 integer
--- @param p11 boolean
--- @param p12 boolean
--- @param p13 boolean
--- @param p14 boolean
--- @param p15 boolean
--- @param p16 integer
--- @return any
function CreateScriptVehicleGenerator(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16) end

--- p6 always 2 (but it doesnt seem to matter...) roll and pitch 0 yaw to Ped.rotation
--- @param x number
--- @param y number
--- @param z number
--- @param roll number
--- @param pitch number
--- @param yaw number
--- @param p6 integer
--- @return any
function CreateSynchronizedScene(x, y, z, roll, pitch, yaw, p6) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param object integer
--- @return any
function CreateSynchronizedScene_2(x, y, z, radius, object) end

--- Create a clean timecycle modifier. See `SET_TIMECYCLE_MODIFIER_VAR` to add variables.
--- @param modifierName string
--- @return any
function CreateTimecycleModifier(modifierName) end

--- Creates a tracked point: useful for checking the visibility of a 3D point on screen. Tracked points must be manually managed and will not be destroyed on resource stop (they are not an instance of CScriptResource). See `DESTROY_TRACKED_POINT` and onResourceStop. Only 64 points may be tracked at a given time.
--- @return any
function CreateTrackedPoint() end

--- Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL). NativeDB Added Parameter 8: BOOL p7
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isNetwork boolean
--- @param netMissionEntity boolean
--- @return any
function CreateVehicle(modelHash, x, y, z, heading, isNetwork, netMissionEntity) end

--- Creates a vehicle with the specified model at the specified position. This vehicle will initially be owned by the creating script as a mission entity, and the model should be loaded already (e.g. using REQUEST_MODEL). NativeDB Added Parameter 8: BOOL p7 **This is the server-side RPC native equivalent of the client native CREATE_VEHICLE.**
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param isNetwork boolean
--- @param netMissionEntity boolean
--- @return any
function CreateVehicle(modelHash, x, y, z, heading, isNetwork, netMissionEntity) end

--- Equivalent to CREATE_VEHICLE, but it uses 'server setter' logic (like the former CREATE_AUTOMOBILE) as a workaround for reliability concerns regarding entity creation RPC. Unlike CREATE_AUTOMOBILE, this supports other vehicle types as well.
--- @param modelHash integer
--- @param type string
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @return any
function CreateVehicleServerSetter(modelHash, type, x, y, z, heading) end

--- Create a weapon object that cannot be attached to a ped. If you want to create a weapon object that can be attached to a ped, use `CREATE_OBJECT` instead. NativeDB Added Parameter 9: BOOL bRegisterAsNetworkObject NativeDB Added Parameter 10: BOOL bScriptHostObject
--- @param weaponHash integer
--- @param ammoCount integer
--- @param x number
--- @param y number
--- @param z number
--- @param bCreateDefaultComponents boolean
--- @param scale number
--- @param customModelHash integer
--- @return any
function CreateWeaponObject(weaponHash, ammoCount, x, y, z, bCreateDefaultComponents, scale, customModelHash) end

--- some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
--- @param p0 number
function CustomMenuCoordinates(p0) end

--- @param value boolean
--- @return any
function DataarrayAddBool(value) end

--- @return any
--- @return any
function DataarrayAddDict() end

--- @param value number
--- @return any
function DataarrayAddFloat(value) end

--- @param value integer
--- @return any
function DataarrayAddInt(value) end

--- @param value string
--- @return any
function DataarrayAddString(value) end

--- @param valueX number
--- @param valueY number
--- @param valueZ number
--- @return any
function DataarrayAddVector(valueX, valueY, valueZ) end

--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetBool(arrayIndex) end

--- @return any
--- @return any
function DataarrayGetCount() end

--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetDict(arrayIndex) end

--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetFloat(arrayIndex) end

--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetInt(arrayIndex) end

--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetString(arrayIndex) end

--- Types: 1 = Boolean 2 = Integer 3 = Float 4 = String 5 = Vector3 6 = Object 7 = Array
--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetType(arrayIndex) end

--- @param arrayIndex integer
--- @return any
--- @return any
function DataarrayGetVector(arrayIndex) end

--- @param key string
--- @return any
--- @return any
function DatadictCreateArray(key) end

--- @param key string
--- @return any
--- @return any
function DatadictCreateDict(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetArray(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetBool(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetDict(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetFloat(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetInt(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetString(key) end

--- Types: 1 = Boolean 2 = Integer 3 = Float 4 = String 5 = Vector3 6 = Object 7 = Array
--- @param key string
--- @return any
--- @return any
function DatadictGetType(key) end

--- @param key string
--- @return any
--- @return any
function DatadictGetVector(key) end

--- @param key string
--- @param value boolean
--- @return any
function DatadictSetBool(key, value) end

--- @param key string
--- @param value number
--- @return any
function DatadictSetFloat(key, value) end

--- @param key string
--- @param value integer
--- @return any
function DatadictSetInt(key, value) end

--- @param key string
--- @param value string
--- @return any
function DatadictSetString(key, value) end

--- @param key string
--- @param valueX number
--- @param valueY number
--- @param valueZ number
--- @return any
function DatadictSetVector(key, valueX, valueY, valueZ) end

function DatafileClearWatchList() end

--- NativeDB Added Parameter 1: int p0
function DatafileCreate() end

--- NativeDB Added Parameter 1: int p0
function DatafileDelete() end

--- @param p0 any
--- @return any
function DatafileDeleteRequestedFile(p0) end

function DatafileFlushMissionHeader() end

--- NativeDB Added Parameter 1: int p0
--- @return any
function DatafileGetFileDict() end

--- @param p0 any
--- @return any
function DatafileHasLoadedFileData(p0) end

--- @param p0 any
--- @return any
function DatafileHasValidFileData(p0) end

--- Example: if (!DATAFILE::_BEDB96A7584AA8CF()) { if (!g_109E3) { if (((sub_d4f() == 2) == 0) && (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS())) { if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE()) { g_17A8B = 0; } if (!g_D52C) { sub_730(); } } } }
--- @return any
function DatafileIsSavePending() end

--- @param index integer
--- @return any
function DatafileIsValidRequestId(index) end

--- Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage. Returns whether or not the file was successfully loaded. Example: DATAFILE::_LOAD_UGC_FILE("RockstarPlaylists") // loads "rockstarplaylists_00.ugc" NativeDB Added Parameter 2: Any p1
--- @param filename string
--- @return any
function DatafileLoadOfflineUgc(filename) end

--- NativeDB Added Parameter 2: Any p1
--- @param p0 any
--- @return any
function DatafileSelectActiveFile(p0) end

--- NativeDB Added Parameter 2: Any p1
--- @param p0 integer
--- @return any
function DatafileSelectCreatorStats(p0) end

--- NativeDB Added Parameter 2: Any p1
--- @param p0 integer
--- @return any
function DatafileSelectUgcData(p0) end

--- NativeDB Added Parameter 2: Any p1
--- @param p0 integer
--- @return any
function DatafileSelectUgcPlayerData(p0) end

--- NativeDB Added Parameter 3: Any p2
--- @param p0 integer
--- @param p1 boolean
--- @return any
function DatafileSelectUgcStats(p0, p1) end

--- NativeDB Added Parameter 2: Any p1
--- @param filename string
--- @return any
function DatafileStartSaveToCloud(filename) end

--- NativeDB Added Parameter 1: int p0
function DatafileStoreMissionHeader() end

--- @return boolean
--- @return boolean
function DatafileUpdateSaveToCloud() end

--- Adds the given request ID to the watch list.
--- @param id integer
function DatafileWatchRequestId(id) end

--- Deactivates the named slowmo mode.
--- @param mode string
function DeactivateAudioSlowmoMode(mode) end

--- @param interior integer
--- @param entitySetName string
function DeactivateInteriorEntitySet(interior, entitySetName) end

--- Returns whether or not the specified property is set for the entity.
--- @param entity integer
--- @param propertyName string
--- @return any
function DecorExistOn(entity, propertyName) end

--- @param entity integer
--- @param propertyName string
--- @return any
function DecorGetBool(entity, propertyName) end

--- @param entity integer
--- @param propertyName string
--- @return any
function DecorGetFloat(entity, propertyName) end

--- @param entity integer
--- @param propertyName string
--- @return any
function DecorGetInt(entity, propertyName) end

--- @param propertyName string
--- @param type integer
--- @return any
function DecorIsRegisteredAsType(propertyName, type) end

--- cpp enum eDecorType { DECOR_TYPE_FLOAT = 1, DECOR_TYPE_BOOL = 2, DECOR_TYPE_INT = 3, DECOR_TYPE_STRING = 4, DECOR_TYPE_TIME = 5 };
--- @param propertyName string
--- @param type integer
function DecorRegister(propertyName, type) end

--- Called after all decorator type initializations.
function DecorRegisterLock() end

--- @param entity integer
--- @param propertyName string
--- @return any
function DecorRemove(entity, propertyName) end

--- This function sets metadata of type bool to specified entity.
--- @param entity integer
--- @param propertyName string
--- @param value boolean
--- @return any
function DecorSetBool(entity, propertyName, value) end

--- @param entity integer
--- @param propertyName string
--- @param value number
--- @return any
function DecorSetFloat(entity, propertyName, value) end

--- Sets property to int.
--- @param entity integer
--- @param propertyName string
--- @param value integer
--- @return any
function DecorSetInt(entity, propertyName, value) end

--- @param entity integer
--- @param propertyName string
--- @param timestamp integer
--- @return any
function DecorSetTime(entity, propertyName, timestamp) end

function DeleteAllTrains() end

--- @param checkpoint integer
function DeleteCheckpoint(checkpoint) end

--- @param ropeId integer
function DeleteChildRope(ropeId) end

--- Delete the specified entity, and invalidate the passed handle (i.e., the in/out argument). You might want to check if the entity exists before with DOES_ENTITY_EXIST.
--- @param entity integer
--- @return integer
function DeleteEntity(entity) end

--- Deletes the specified entity. **NOTE**: For trains this will only work if called on the train engine, it will not work on its carriages.
--- @param entity integer
function DeleteEntity(entity) end

--- @param referenceIdentity string
function DeleteFunctionReference(referenceIdentity) end

--- Delete an incident with a given id. ======================================================= Correction, I have change this to int, instead of int* as it doesn't use a pointer to the createdIncident. If you try it you will crash (or) freeze. =======================================================
--- @param incidentId integer
function DeleteIncident(incidentId) end

--- Used to delete mission trains created with `CREATE_MISSION_TRAIN`.
--- @param train integer
--- @return integer
function DeleteMissionTrain(train) end

--- Deletes the specified object. **Note**: If for some reason the entity won't delete, you might want to check if the object is a mission entity. NativeDB Introduced: v323
--- @param object integer
--- @return integer
function DeleteObject(object) end

--- From the b617d scripts: TASK::DELETE_PATROL_ROUTE("miss_merc0"); TASK::DELETE_PATROL_ROUTE("miss_merc1"); TASK::DELETE_PATROL_ROUTE("miss_merc2"); TASK::DELETE_PATROL_ROUTE("miss_dock");
--- @param patrolRoute string
function DeletePatrolRoute(patrolRoute) end

--- Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
--- @param ped integer
--- @return integer
function DeletePed(ped) end

--- @param key string
function DeleteResourceKvp(key) end

--- Nonsynchronous DELETE_RESOURCE_KVP operation; see FLUSH_RESOURCE_KVP.
--- @param key string
function DeleteResourceKvpNoSync(key) end

--- Deletes the rope with the specified handle. You should check if the rope exists before trying to delete it, see DOES_ROPE_EXIST. For an example on how to use this native please refer to ADD_ROPE
--- @param ropeId integer
--- @return integer
function DeleteRope(ropeId) end

--- Removes a scripted vehicle generator.
--- @param vehicleGenerator integer
function DeleteScriptVehicleGenerator(vehicleGenerator) end

--- @param p0 integer
function DeleteStuntJump(p0) end

--- Deletes the specified `entity` and any carriage its attached to, or that is attached to it.
--- @param entity integer
function DeleteTrain(entity) end

--- Deletes a vehicle. The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true); eg how to use: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true); DELETE_VEHICLE(&vehicle); Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
--- @param vehicle integer
--- @return integer
function DeleteVehicle(vehicle) end

function DeleteWaypoint() end

--- Does nothing and always returns false.
--- @param amount integer
--- @return any
function DepositVc(amount) end

--- BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
--- @param bScriptHostCam boolean
function DestroyAllCams(bScriptHostCam) end

--- BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
--- @param cam integer
--- @param bScriptHostCam boolean
function DestroyCam(cam, bScriptHostCam) end

--- Destroys a DUI browser.
--- @param duiObject integer
function DestroyDui(duiObject) end

--- @param p0 any
function DestroyItemset(p0) end

--- Destroys the currently active mobile phone.
function DestroyMobilePhone() end

--- @param point integer
function DestroyTrackedPoint(point) end

--- @param cam integer
function DetachCam(cam) end

--- @param vehicle integer
function DetachContainerFromHandlerFrame(vehicle) end

--- @param entity integer
--- @param dynamic boolean
--- @param collision boolean
function DetachEntity(entity, dynamic, collision) end

--- Detaches the specified entity currently being carried by a Cargobob.
--- @param vehicle integer
--- @param entity integer
--- @return any
function DetachEntityFromCargobob(vehicle, entity) end

--- @param pickupObject integer
function DetachPortablePickupFromPed(pickupObject) end

--- @param ropeId integer
--- @param entity integer
function DetachRopeFromEntity(ropeId, entity) end

--- @param sceneID integer
function DetachSynchronizedScene(sceneID) end

--- @param vehicle integer
--- @return any
function DetachVehicleFromAnyCargobob(vehicle) end

--- @param vehicle integer
--- @return any
function DetachVehicleFromAnyTowTruck(vehicle) end

--- @param cargobob integer
--- @param vehicle integer
function DetachVehicleFromCargobob(cargobob, vehicle) end

--- First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
--- @param towTruck integer
--- @param vehicle integer
function DetachVehicleFromTowTruck(towTruck, vehicle) end

--- @param vehicle integer
function DetachVehicleFromTrailer(vehicle) end

function DetonateVehiclePhoneExplosiveDevice() end

function DisableAimCamThisUpdate() end

--- @param padIndex integer
function DisableAllControlActions(padIndex) end

--- @param entity integer
function DisableCamCollisionForEntity(entity) end

--- @param entity integer
function DisableCamCollisionForObject(entity) end

--- Control values and meaning Example: `CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true)` disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame. Control group 1 and 0 gives the same results as 2. Same results for all players.
--- @param padIndex integer
--- @param control integer
--- @param disable boolean
function DisableControlAction(padIndex, control, disable) end

--- Disables the editor runtime mode, changing game behavior to not track entity metadata. This function supports SDK infrastructure and is not intended to be used directly from your code.
function DisableEditorRuntime() end

--- Disables first person camera for the current frame. Found in decompiled scripts: GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255); CAM::_DE2EF5DA284CC8DF();
function DisableFirstPersonCamThisFrame() end

function DisableFrontendThisFrame() end

--- @param ped integer
function DisableHeadBlendPaletteColor(ped) end

--- The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
--- @param hospitalIndex integer
--- @param toggle boolean
function DisableHospitalRestart(hospitalIndex, toggle) end

--- Disables the game's afk camera that starts panning around after 30 seconds of inactivity.
--- @param state boolean
function DisableIdleCamera(state) end

--- @param vehicle integer
--- @param propeller integer
function DisableIndividualPlanePropeller(vehicle, propeller) end

--- @param padIndex integer
function DisableInputGroup(padIndex) end

--- Example: This removes the interior from the strip club and when trying to walk inside the player just falls: INTERIOR::DISABLE_INTERIOR(118018, true);
--- @param interiorID integer
--- @param toggle boolean
function DisableInterior(interiorID, toggle) end

--- Removes any custom moon cycle overrides that have been configured with ENABLE_MOON_CYCLE_OVERRIDE
function DisableMoonCycleOverride() end

--- If true is passed, the player won't be able to open the multiplayer chat
--- @param disable boolean
function DisableMultiplayerChat(disable) end

--- Use this if you want to completely disable a large area of navmesh. For smaller areas, use `ADD_NAVMESH_BLOCKING_OBJECT` instead.
--- @param posMinX number
--- @param posMinY number
--- @param posMinZ number
--- @param posMaxX number
--- @param posMaxY number
--- @param posMaxZ number
--- @param bDisable boolean
function DisableNavmeshInArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ, bDisable) end

function DisableOcclusionThisFrame() end

--- @param ped integer
function DisablePedHeatscaleOverride(ped) end

--- @param ped integer
--- @param shouldDisable boolean
function DisablePedPainAudio(ped, shouldDisable) end

--- @param vehicle integer
--- @param p1 boolean
--- @param p2 boolean
function DisablePlaneAileron(vehicle, p1, p2) end

--- Inhibits the player from using any method of combat including melee and firearms.\ NOTE: Only disables the firing for one frame
--- @param player integer
--- @param toggle boolean
function DisablePlayerFiring(player, toggle) end

--- Disables vehicle rewards for the current frame.
--- @param player integer
function DisablePlayerVehicleRewards(player) end

--- Disables the spawn point at the police house on the specified index. policeIndex: The police house index. toggle: true to enable the spawn point, false to disable. - Nacorpio
--- @param policeIndex integer
--- @param toggle boolean
function DisablePoliceRestart(policeIndex, toggle) end

--- This will disable the ability to make camera changes in R\* Editor.
function DisableRockstarEditorCameraChanges() end

function DisableScreenblurFade() end

--- @param p0 any
function DisableScriptAmbientEffects(p0) end

--- @param brainSet integer
function DisableScriptBrainSet(brainSet) end

--- @param p0 integer
function DisableStuntJumpSet(p0) end

function DisableSwitchOutroFx() end

--- @param toggle boolean
function DisableVehicleDistantlights(toggle) end

function DisableVehicleFirstPersonCamThisFrame() end

--- @param vehicle integer
--- @param toggle boolean
function DisableVehicleNeonLights(vehicle, toggle) end

--- Disables the game's afk camera that starts panning around after 30 seconds of inactivity(While riding in a car as a passenger)
--- @param state boolean
function DisableVehiclePassengerIdleCamera(state) end

--- @param vehicle integer
function DisableVehicleTurretMovementThisFrame(vehicle) end

--- how does this work?
--- @param disabled boolean
--- @param weaponHash integer
--- @param vehicle integer
--- @param owner integer
function DisableVehicleWeapon(disabled, weaponHash, vehicle, owner) end

--- Disables collision for this vehicle (maybe it also supports other entities, not sure). Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle. Example video Not sure if there is a native (and if so, which one) that resets the collisions.
--- @param vehicle integer
function DisableVehicleWorldCollision(vehicle) end

--- Disables the game's world horizon lods rendering (see `farlods.#dd`). Using the island hopper natives might also affect this state.
--- @param state boolean
function DisableWorldhorizonRendering(state) end

--- @param display boolean
function DisplayAmmoThisFrame(display) end

--- @param toggle boolean
function DisplayAreaName(toggle) end

--- "DISPLAY_CASH(true);" makes the cash amount render on the screen when appropriate "DISPLAY_CASH(false);" disables cash amount rendering
--- @param display boolean
function DisplayCash(display) end

--- Shows a help message for one frame. Do note that this message doesn't get added to the Pause Menu info section.
--- @param pTextLabel string
--- @param bCurvedWindow boolean
function DisplayHelpTextThisFrame(pTextLabel, bCurvedWindow) end

--- If Hud should be displayed
--- @param toggle boolean
function DisplayHud(toggle) end

--- Enables drawing some hud components, such as help labels, this frame, when the player is dead.
function DisplayHudWhenDeadThisFrame() end

function DisplayHudWhenPausedThisFrame() end

--- Displays a text input box. cpp enum eKeyboardType { ONSCREEN_KEYBOARD_ENGLISH = 0, ONSCREEN_KEYBOARD_LOCALISED = 1, ONSCREEN_KEYBOARD_PASSWORD = 2, ONSCREEN_KEYBOARD_GAMERTAG = 3, ONSCREEN_KEYBOARD_EMAIL = 4, ONSCREEN_KEYBOARD_BASIC_ENGLISH = 5, ONSCREEN_KEYBOARD_FILENAME = 6 };
--- @param keyboardType integer
--- @param windowTitle string
--- @param description string
--- @param defaultText string
--- @param defaultConcat1 string
--- @param defaultConcat2 string
--- @param defaultConcat3 string
--- @param maxInputLength integer
function DisplayOnscreenKeyboard(keyboardType, windowTitle, description, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength) end

--- Displays the text input box with support for input with 500 characters.
--- @param keyboardType integer
--- @param windowTitle string
--- @param description string
--- @param defaultText string
--- @param defaultConcat1 string
--- @param defaultConcat2 string
--- @param defaultConcat3 string
--- @param defaultConcat4 string
--- @param defaultConcat5 string
--- @param defaultConcat6 string
--- @param defaultConcat7 string
--- @param maxInputLength integer
function DisplayOnscreenKeyboardWithLongerInitialString(keyboardType, windowTitle, description, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength) end

--- Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O. Doesn't need to be called every frame. Preview: https://i.imgur.com/DfqKWfJ.png Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
--- @param toggle boolean
function DisplayPlayerNameTagsOnBlips(toggle) end

--- If Minimap / Radar should be displayed.
--- @param toggle boolean
function DisplayRadar(toggle) end

--- Displays the crosshair for this frame.
function DisplaySniperScopeThisFrame() end

--- Purpose of the BOOL currently unknown. Both, true and false, work
--- @param unk boolean
function DisplaySystemSigninUi(unk) end

--- Toggles fake distant siren sounds
--- @param shouldPlay boolean
function DistantCopCarSirens(shouldPlay) end

function DoAutoSave() end

--- @param zoneId integer
--- @return any
function DoesAirDefenseZoneExist(zoneId) end

--- @param animDict string
--- @return any
function DoesAnimDictExist(animDict) end

--- @param blip integer
--- @return any
function DoesBlipExist(blip) end

--- @param blip integer
--- @return any
function DoesBlipHaveGpsRoute(blip) end

--- @param vehicle integer
--- @return any
function DoesBoatSinkWhenWrecked(vehicle) end

--- Looks up a camera handle in the current camera pool and returns `true` if the handle is found, otherwise it returns `false`.
--- @param cam integer
--- @return any
function DoesCamExist(cam) end

--- Returns true only when the magnet is active, will return false if the hook is active
--- @param cargobob integer
--- @return any
function DoesCargobobHavePickupMagnet(cargobob) end

--- Returns true only when the hook is active, will return false if the magnet is active
--- @param cargobob integer
--- @return any
function DoesCargobobHavePickUpRope(cargobob) end

--- Checks if the context exists for the ped, searching through the voices in its PedVoiceGroup. The final argument can be set to true to allow searching in backup PVGs
--- @param ped integer
--- @param speechName string
--- @param allowBackupPVGs boolean
--- @return any
function DoesContextExistForThisPed(ped, speechName, allowBackupPVGs) end

--- @param cutsceneEntName string
--- @param modelHash integer
--- @return any
function DoesCutsceneEntityExist(cutsceneEntName, modelHash) end

--- @param entity integer
--- @param p2 boolean
--- @return any
function DoesEntityBelongToThisScript(entity, p2) end

--- Checks whether an entity exists in the game world.
--- @param entity integer
--- @return any
function DoesEntityExist(entity) end

--- @param entity integer
--- @return any
function DoesEntityExist(entity) end

--- NativeDB Introduced: v2699
--- @param entity integer
--- @return any
function DoesEntityHaveAnimDirector(entity) end

--- @param entity integer
--- @return any
function DoesEntityHaveDrawable(entity) end

--- @param entity integer
--- @return any
function DoesEntityHavePhysics(entity) end

--- NativeDB Introduced: v2699
--- @param entity integer
--- @return any
function DoesEntityHaveSkeletonData(entity) end

--- Checks via CVehicleModelInfo
--- @param vehicle integer
--- @param extraId integer
--- @return any
function DoesExtraExist(vehicle, extraId) end

--- @param groupId integer
--- @return any
function DoesGroupExist(groupId) end

--- Used in pi_menu.c. Checks if there is a brief entry for specified value. Values: 0 - Dialogue brief 1 - Help text brief 2 - Mission Objective brief
--- @param briefValue integer
--- @return any
function DoesLatestBriefStringExist(briefValue) end

--- @param p0 any
--- @return any
function DoesNavmeshBlockingObjectExist(p0) end

--- p5 is usually 0.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param hash integer
--- @param p5 boolean
--- @return any
function DoesObjectOfTypeExistAtCoords(x, y, z, radius, hash, p5) end

--- @param ptfxHandle integer
--- @return any
function DoesParticleFxLoopedExist(ptfxHandle) end

--- Returns whether the ped's blip is controlled by the game. It's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).
--- @param ped integer
--- @return any
function DoesPedHaveAiBlip(ped) end

--- @param pickup integer
--- @return any
function DoesPickupExist(pickup) end

--- @param pickupObject integer
--- @return any
function DoesPickupObjectExist(pickupObject) end

--- Pickup hashes can be found here.
--- @param pickupHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function DoesPickupOfTypeExistInArea(pickupHash, x, y, z, radius) end

--- Returns whether or not the player exists
--- @param playerSrc integer
--- @return any
function DoesPlayerExist(playerSrc) end

--- Requests whether or not the player owns the specified SKU.
--- @param playerSrc integer
--- @param skuId integer
--- @return any
function DoesPlayerOwnSku(playerSrc, skuId) end

--- Requests whether or not the player owns the specified package.
--- @param playerSrc integer
--- @param skuId integer
--- @return any
function DoesPlayerOwnSkuExt(playerSrc, skuId) end

--- @return any
function DoesPlayerVehHaveRadio() end

--- @param id integer
--- @return any
function DoesPopMultiplierAreaExist(id) end

--- @param id integer
--- @return any
function DoesPopMultiplierSphereExist(id) end

--- Returns true if a destructible object with this handle exists, false otherwise.
--- @param object integer
--- @return any
function DoesRayfireMapObjectExist(object) end

--- @param groupHash integer
--- @return any
function DoesRelationshipGroupExist(groupHash) end

--- Return if the rope was generated or not by the script where the native is called.
--- @param ropeId integer
--- @return any
function DoesRopeBelongToThisScript(ropeId) end

--- For an example on how to use this native please refer to ADD_ROPE
--- @param ropeId integer
--- @return any
--- @return integer
function DoesRopeExist(ropeId) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function DoesScenarioBlockingAreaExist(x1, y1, z1, x2, y2, z2) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param b boolean
--- @return any
function DoesScenarioExistInArea(x, y, z, radius, b) end

--- Occurrences in the b617d scripts: "ARMY_GUARD", "ARMY_HELI", "Cinema_Downtown", "Cinema_Morningwood", "Cinema_Textile", "City_Banks", "Countryside_Banks", "DEALERSHIP", "GRAPESEED_PLANES", "KORTZ_SECURITY", "LOST_BIKERS", "LSA_Planes", "LSA_Planes", "MP_POLICE", "Observatory_Bikers", "POLICE_POUND1", "POLICE_POUND2", "POLICE_POUND3", "POLICE_POUND4", "POLICE_POUND5" "QUARRY", "SANDY_PLANES", "SCRAP_SECURITY", "SEW_MACHINE", "SOLOMON_GATE", "Triathlon_1_Start", "Triathlon_2_Start", "Triathlon_3_Start" Sometimes used with IS_SCENARIO_GROUP_ENABLED: if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) { else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
--- @param scenarioGroup string
--- @return any
function DoesScenarioGroupExist(scenarioGroup) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 string
--- @param p4 number
--- @param p5 boolean
--- @return any
function DoesScenarioOfTypeExistInArea(p0, p1, p2, p3, p4, p5) end

--- Checks if there is a cover point at position
--- @param x number
--- @param y number
--- @param z number
--- @return any
function DoesScriptedCoverPointExistAtCoords(x, y, z) end

--- @param scriptName string
--- @return any
function DoesScriptExist(scriptName) end

--- @param vehicleGenerator integer
--- @return any
function DoesScriptVehicleGeneratorExist(vehicleGenerator) end

--- @param scriptHash integer
--- @return any
function DoesScriptWithNameHashExist(scriptHash) end

--- @param componentHash integer
--- @param restrictionTagHash integer
--- @param componentId integer
--- @return any
function DoesShopPedApparelHaveRestrictionTag(componentHash, restrictionTagHash, componentId) end

--- @param gxt string
--- @return any
function DoesTextBlockExist(gxt) end

--- Checks if the passed gxt name exists in the game files.
--- @param gxt string
--- @return any
function DoesTextLabelExist(gxt) end

--- @param modifierName string
--- @param varName string
--- @return any
function DoesTimecycleModifierHasVar(modifierName, varName) end

--- @param train integer
--- @return any
function DoesTrainStopAtStations(train) end

--- Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
--- @param vehicle integer
--- @return any
function DoesVehicleAllowRappel(vehicle) end

--- @param decorator string
--- @return any
function DoesVehicleExistWithDecorator(decorator) end

--- @param vehicle integer
--- @param p1 integer
--- @return any
function DoesVehicleHaveCrewEmblem(vehicle, p1) end

--- NativeDB Introduced: v1180
--- @param vehicle integer
--- @return any
function DoesVehicleHaveLandingGear(vehicle) end

--- Determines whether a specific vehicle is equipped with a roof. NativeDB Introduced: v323
--- @param vehicle integer
--- @return any
function DoesVehicleHaveRoof(vehicle) end

--- Determines whether the specified vehicle is equipped with a searchlight. NativeDB Introduced: v2189
--- @param vehicle integer
--- @return any
function DoesVehicleHaveSearchlight(vehicle) end

--- Maximum amount of vehicles with vehicle stuck check appears to be 16.
--- @param vehicle integer
--- @return any
function DoesVehicleHaveStuckVehicleCheck(vehicle) end

--- @param vehicle integer
--- @return any
function DoesVehicleHaveWeapons(vehicle) end

--- Checks if vehicle tyre at index exists. Also returns false if tyre was removed. NativeDB Introduced: v1493
--- @param vehicle integer
--- @param tyreIndex integer
--- @return any
function DoesVehicleTyreExist(vehicle, tyreIndex) end

--- Checks whether the vehicle consumes fuel. The check is done based on petrol tank volume and vehicle type. Bicycles and vehicles with petrol tank volume equal to zero (only bicycles by default) do not use fuel. All other vehicles do. You can customize petrol tank volume using `SET_HANDLING_FLOAT`/`SET_VEHICLE_HANDLING_FLOAT` natives with `fieldName` equal to `fPetrolTankVolume`.
--- @param vehicle integer
--- @return any
function DoesVehicleUseFuel(vehicle) end

--- @param weaponHash integer
--- @param componentHash integer
--- @return any
function DoesWeaponTakeWeaponComponent(weaponHash, componentHash) end

--- @param p0 boolean
function DontRenderInGameUi(p0) end

--- When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
function DontTiltMinimapThisFrame() end

--- Hardcoded not to work in multiplayer environments. Native name between `SET_LOCAL_PLAYER_VISIBLE_LOCALLY` & `SET_MAX_WANTED_LEVEL`. OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0); //door unlocked OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0); //door locked
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param locked boolean
--- @param xRotMult number
--- @param yRotMult number
--- @param zRotMult number
function DoorControl(modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult) end

--- Search radius: 0.5
--- @param x number
--- @param y number
--- @param z number
--- @param modelHash integer
--- @return any
--- @return integer
function DoorSystemFindExistingDoor(x, y, z, modelHash) end

--- Returns a list of door system entries: a door system hash (see ADD_DOOR_TO_SYSTEM) and its object handle. The data returned adheres to the following layout: [{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]
--- @return any
function DoorSystemGetActive() end

--- NativeDB Introduced: v1868
--- @param doorHash integer
--- @return any
function DoorSystemGetAutomaticDistance(doorHash) end

--- @param doorHash integer
--- @return any
function DoorSystemGetDoorPendingState(doorHash) end

--- @param doorHash integer
--- @return any
function DoorSystemGetDoorState(doorHash) end

--- @param doorHash integer
--- @return any
function DoorSystemGetIsPhysicsLoaded(doorHash) end

--- @param doorHash integer
--- @return any
function DoorSystemGetOpenRatio(doorHash) end

--- @return any
function DoorSystemGetSize() end

--- @param doorHash integer
--- @param distance number
--- @param requestDoor boolean
--- @param forceUpdate boolean
function DoorSystemSetAutomaticDistance(doorHash, distance, requestDoor, forceUpdate) end

--- Includes networking check: ownership vs. or the door itself **isn't** networked.
--- @param doorHash integer
--- @param rate number
--- @param requestDoor boolean
--- @param forceUpdate boolean
function DoorSystemSetAutomaticRate(doorHash, rate, requestDoor, forceUpdate) end

--- Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true. ### Door lock states: (v323) * **0**: UNLOCKED * **1**: LOCKED * **2**: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA * **3**: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME * **4**: DOORSTATE_FORCE_LOCKED_THIS_FRAME * **5**: DOORSTATE_FORCE_OPEN_THIS_FRAME * **6**: DOORSTATE_FORCE_CLOSED_THIS_FRAME
--- @param doorHash integer
--- @param state integer
--- @param requestDoor boolean
--- @param forceUpdate boolean
function DoorSystemSetDoorState(doorHash, state, requestDoor, forceUpdate) end

--- Includes networking check: ownership vs. or the door itself **isn't** networked.
--- @param doorHash integer
--- @param toggle boolean
function DoorSystemSetHoldOpen(doorHash, toggle) end

--- Sets the ajar angle of a door. Ranges from -1.0 to 1.0, and 0.0 is closed / default.
--- @param doorHash integer
--- @param ajar number
--- @param requestDoor boolean
--- @param forceUpdate boolean
function DoorSystemSetOpenRatio(doorHash, ajar, requestDoor, forceUpdate) end

--- Includes networking check: ownership vs. or the door itself **isn't** networked.
--- @param doorHash integer
--- @param removed boolean
--- @param requestDoor boolean
--- @param forceUpdate boolean
function DoorSystemSetSpringRemoved(doorHash, removed, requestDoor, forceUpdate) end

--- Fades the screen in. duration: The time the fade should take, in milliseconds.
--- @param duration integer
function DoScreenFadeIn(duration) end

--- Fades the screen out. duration: The time the fade should take, in milliseconds.
--- @param duration integer
function DoScreenFadeOut(duration) end

--- Must be called each frame, will play at specified position on screen when called with `_PLAY_BINK_MOVIE`
--- @param binkMovie integer
--- @param posX number
--- @param posY number
--- @param scaleX number
--- @param scaleY number
--- @param rotation number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function DrawBinkMovie(binkMovie, posX, posY, scaleX, scaleY, rotation, r, g, b, a) end

--- This native draws a box between two vectors in the game world. It is typically used for visualizing boundaries or areas of interest. The color of the box is specified by the red, green, and blue parameters, with alpha determining its opacity. This native should be called every frame for continuous rendering. NativeDB Introduced: v323
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawBox(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) end

--- Allows drawing advanced light effects, known as coronas, which support flares, volumetric lighting, and customizable glow properties.
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param size number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param intensity number
--- @param zBias number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param viewThreshold number
--- @param innerAngle number
--- @param outerAngle number
--- @param flags integer
function DrawCorona(posX, posY, posZ, size, red, green, blue, alpha, intensity, zBias, dirX, dirY, dirZ, viewThreshold, innerAngle, outerAngle, flags) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function DrawDebugBox(x1, y1, z1, x2, y2, z2, r, g, b, a) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param x number
--- @param y number
--- @param z number
--- @param size number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawDebugCross(x, y, z, size, red, green, blue, alpha) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function DrawDebugLine(x1, y1, z1, x2, y2, z2, r, g, b, a) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param r1 integer
--- @param g1 integer
--- @param b1 integer
--- @param r2 integer
--- @param g2 integer
--- @param b2 integer
--- @param alpha1 integer
--- @param alpha2 integer
function DrawDebugLineWithTwoColours(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawDebugSphere(x, y, z, radius, red, green, blue, alpha) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param text string
--- @param x number
--- @param y number
--- @param z number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawDebugText(text, x, y, z, red, green, blue, alpha) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param text string
--- @param x number
--- @param y number
--- @param z number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawDebugText_2d(text, x, y, z, red, green, blue, alpha) end

--- Draws a gizmo. This function supports SDK infrastructure and is not intended to be used directly from your code. This should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer. Matrix layout is as follows: * Element \[0], \[1] and \[2] should represent the right vector. * Element \[4], \[5] and \[6] should represent the forward vector. * Element \[8], \[9] and \[10] should represent the up vector. * Element \[12], \[13] and \[14] should represent X, Y and Z translation coordinates. * All other elements should be \[0, 0, 0, 1].
--- @param matrixPtr string
--- @param id string
--- @return any
function DrawGizmo(matrixPtr, id) end

--- Draw a glow sphere this frame. Up to 256 per single frame.
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param radius number
--- @param colorR integer
--- @param colorG integer
--- @param colorB integer
--- @param intensity number
--- @param invert boolean
--- @param marker boolean
function DrawGlowSphere(posX, posY, posZ, radius, colorR, colorG, colorB, intensity, invert, marker) end

--- Similar to \_DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets. These seem to be the only dicts ever requested by this native: prop_screen_biker_laptop Prop_Screen_GR_Disruption Prop_Screen_TaleOfUs prop_screen_nightclub Prop_Screen_IE_Adhawk prop_screen_sm_free_trade_shipping prop_screen_hacker_truck MPDesktop Prop_Screen_Nightclub And a few others
--- @param textureDict string
--- @param textureName string
--- @param screenX number
--- @param screenY number
--- @param width number
--- @param height number
--- @param heading number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawInteractiveSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha) end

--- @param posX number
--- @param posY number
--- @param posZ number
--- @param colorR integer
--- @param colorG integer
--- @param colorB integer
--- @param range number
--- @param intensity number
function DrawLightWithRange(posX, posY, posZ, colorR, colorG, colorB, range, intensity) end

--- @param x number
--- @param y number
--- @param z number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param range number
--- @param intensity number
--- @param shadow number
function DrawLightWithRangeAndShadow(x, y, z, r, g, b, range, intensity, shadow) end

--- This native draws a line between two vectors in the game world. It is typically used for visualizing paths or connections between points. The color of the line is specified by the red, green, and blue parameters, with alpha determining its opacity. This native should be called every frame for continuous rendering. NativeDB Introduced: v323
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawLine(x1, y1, z1, x2, y2, z2, red, green, blue, alpha) end

--- Like DRAW_RECT, but it's a line.
--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @param width number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function DrawLine_2d(x1, y1, x2, y2, width, r, g, b, a) end

--- @param p0 boolean
--- @param p1 boolean
function DrawLowQualityPhotoToPhone(p0, p1) end

--- Draws a marker with the specified appearance at the target location. This has to be called every frame, e.g. in a `Wait(0)` loop. There's a list of markers on the FiveM documentation site.
--- @param type integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param scaleX number
--- @param scaleY number
--- @param scaleZ number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param bobUpAndDown boolean
--- @param faceCamera boolean
--- @param p19 integer
--- @param rotate boolean
--- @param textureDict string
--- @param textureName string
--- @param drawOnEnts boolean
function DrawMarker(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts) end

--- NativeDB Added Parameter 26: BOOL p25
--- @param type integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param scaleX number
--- @param scaleY number
--- @param scaleZ number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param bobUpAndDown boolean
--- @param faceCamera boolean
--- @param p19 integer
--- @param rotate boolean
--- @param textureDict string
--- @param textureName string
--- @param drawOnEnts boolean
--- @param p24 boolean
function DrawMarker_2(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24) end

--- x/y/z - Location of a vertex (in world coords), presumably. ---------------- x1, y1, z1 : Coordinates for the first point x2, y2, z2 : Coordinates for the second point x3, y3, z3 : Coordinates for the third point r, g, b, alpha : Color with RGBA-Values Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b). But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution. I recommend using a predefined function to call this. [VB.NET] Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color) [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A) End Sub [C#] public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col) { Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A); } BTW: Intersecting triangles are not supported: They overlap in the order they were called.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha) end

--- Draws a rectangle on the screen. -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen) -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen) -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width) -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height) -R: Red part of the color. (0-255) -G: Green part of the color. (0-255) -B: Blue part of the color. (0-255) -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque) The total number of rectangles to be drawn in one frame is apparently limited to 399. NativeDB Added Parameter 9: BOOL p8
--- @param x number
--- @param y number
--- @param width number
--- @param height number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function DrawRect(x, y, width, height, r, g, b, a) end

--- DRAW_RECT, but with a rotation. Seems to be broken.
--- @param x number
--- @param y number
--- @param width number
--- @param height number
--- @param rotation number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function DrawRectRotated(x, y, width, height, rotation, r, g, b, a) end

--- @param scaleformHandle integer
--- @param x number
--- @param y number
--- @param width number
--- @param height number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param unk integer
function DrawScaleformMovie(scaleformHandle, x, y, width, height, red, green, blue, alpha, unk) end

--- @param scaleform integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param p7 number
--- @param sharpness number
--- @param p9 number
--- @param scaleX number
--- @param scaleY number
--- @param scaleZ number
--- @param p13 any
function DrawScaleformMovie_3d(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, sharpness, p9, scaleX, scaleY, scaleZ, p13) end

--- @param scaleform integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param scaleX number
--- @param scaleY number
--- @param scaleZ number
--- @param p13 any
function DrawScaleformMovie_3dSolid(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13) end

--- unk is not used so no need
--- @param scaleform integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param unk integer
function DrawScaleformMovieFullscreen(scaleform, red, green, blue, alpha, unk) end

--- @param scaleform1 integer
--- @param scaleform2 integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawScaleformMovieFullscreenMasked(scaleform1, scaleform2, red, green, blue, alpha) end

--- It's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A p0 was always "CELEBRATION_WINNER"
--- @param p0 string
--- @param ped integer
--- @param p2 integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @return any
function DrawShowroom(p0, ped, p2, posX, posY, posZ) end

--- Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In". Example image: lua DrawSphere(35.45, 172.66, 126.22, 1.0, 0, 0, 255, 0.2)
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param r integer
--- @param g integer
--- @param b integer
--- @param opacity number
function DrawSphere(x, y, z, radius, r, g, b, opacity) end

--- Parameters: * pos - coordinate where the spotlight is located * dir - the direction vector the spotlight should aim at from its current position * r,g,b - color of the spotlight * distance - the maximum distance the light can reach * brightness - the brightness of the light * roundness - "smoothness" of the circle edge * radius - the radius size of the spotlight * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg) Example in C# (spotlight aims at the closest vehicle): Vector3 myPos = Game.Player.Character.Position; Vehicle nearest = World.GetClosestVehicle(myPos , 1000f); Vector3 destinationCoords = nearest.Position; Vector3 dirVector = destinationCoords - myPos; dirVector.Normalize(); Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param colorR integer
--- @param colorG integer
--- @param colorB integer
--- @param distance number
--- @param brightness number
--- @param hardness number
--- @param radius number
--- @param falloff number
function DrawSpotLight(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff) end

--- @param posX number
--- @param posY number
--- @param posZ number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param colorR integer
--- @param colorG integer
--- @param colorB integer
--- @param distance number
--- @param brightness number
--- @param roundness number
--- @param radius number
--- @param falloff number
--- @param shadowId integer
function DrawSpotLightWithShadow(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId) end

--- Draws a 2D sprite on the screen. Parameters: textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.) textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.) screenX/Y - Screen offset (0.5 = center) scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half) heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees red,green,blue - Sprite color (default = 255/255/255) alpha - opacity level NativeDB Added Parameter 12: BOOL p11
--- @param textureDict string
--- @param textureName string
--- @param screenX number
--- @param screenY number
--- @param width number
--- @param height number
--- @param heading number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawSprite(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha) end

--- Used for drawling Deadline trailing lights, see deadline.ytd Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally. For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param red1 number
--- @param green1 number
--- @param blue1 number
--- @param alpha1 integer
--- @param red2 number
--- @param green2 number
--- @param blue2 number
--- @param alpha2 integer
--- @param red3 number
--- @param green3 number
--- @param blue3 number
--- @param alpha3 integer
--- @param textureDict string
--- @param textureName string
--- @param u1 number
--- @param v1 number
--- @param w1 number
--- @param u2 number
--- @param v2 number
--- @param w2 number
--- @param u3 number
--- @param v3 number
--- @param w3 number
function DrawSpritePoly_2(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) end

--- Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite. u1, v1 - texture coordinates for the top-left corner u2, v2 - texture coordinates for the bottom-right corner NativeDB Introduced: v1868
--- @param textureDict string
--- @param textureName string
--- @param x number
--- @param y number
--- @param width number
--- @param height number
--- @param u1 number
--- @param v1 number
--- @param u2 number
--- @param v2 number
--- @param heading number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawSpriteUv(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha) end

--- This native draws a textured polygon between three vectors in the game world. It's commonly utilized for rendering deadline trailing lights, with additional details available in the `deadline.ytd` file. UVW mapping details (u,v,w parameters) can be found on various internet resources. This native is specifically used for drawing textured polygons on the screen, where UV coordinates define the texture mapping and color/alpha parameters define the appearance of the polygon. This native should be called every frame for continuous rendering. NativeDB Introduced: v877
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param textureDict string
--- @param textureName string
--- @param u1 number
--- @param v1 number
--- @param w1 number
--- @param u2 number
--- @param v2 number
--- @param w2 number
--- @param u3 number
--- @param v3 number
--- @param w3 number
function DrawTexturedPoly(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3) end

--- All calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively. "act_cinema.ysc", line 1483: HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375); HUD::SET_TEXT_RENDER_ID(l_AE); GRAPHICS::_0x61BB1D9B3A95D802(4); GRAPHICS::_0xC6372ECD45D73BCD(1); if (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) { GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255); } else { GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255); } "am_mp_property_int.ysc", line 102545: if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) { if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) { HUD::SET_TEXT_RENDER_ID(a_2._f1); GRAPHICS::_0x61BB1D9B3A95D802(4); GRAPHICS::_0xC6372ECD45D73BCD(1); GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255); if (GRAPHICS::GET_TV_CHANNEL() == -1) { sub_a8fa5(a_2, 1); } else { sub_a8fa5(a_2, 1); GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3); } HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()); } }
--- @param xPos number
--- @param yPos number
--- @param xScale number
--- @param yScale number
--- @param rotation number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function DrawTvChannel(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha) end

--- @param ped integer
function DropAmbientProp(ped) end

--- @param playerSrc integer
--- @param reason string
function DropPlayer(playerSrc, reason) end

--- @param referenceIdentity string
--- @return any
function DuplicateFunctionReference(referenceIdentity) end

--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
function EjectJb700Roof(vehicle, x, y, z) end

--- Will disable a plane or a helicopter's need to swerve around object in its heightmap when using TASK_PLANE_MISSION or other AI / Pilot behavior. Will ensure plane flys directly to it's destination or die trying! This native does NOT need to be called every frame, but instead, just called once on the vehicle (NOT THE PED) you're trying to disable avoidance for!
--- @param vehicle integer
--- @param avoidObstacles boolean
function EnableAircraftObstacleAvoidance(vehicle, avoidObstacles) end

--- Creates a motion-blur sort of effect, this native does not seem to work, however by using the `ANIMPOSTFX_PLAY` native with `"DrugsMichaelAliensFight"` as the effect parameter, you should be able to get the effect. This native does not seem to work, however by using the ANIMPOSTFX_PLAY native with "DrugsMichaelAliensFight" as the effect parameter, you should be able to get the effect.
--- @param toggle boolean
function EnableAlienBloodVfx(toggle) end

--- cpp enum ePadType { PLAYER_CONTROL = 0, CAMERA_CONTROL = 1, FRONTEND_CONTRO = 2 };
--- @param padIndex integer
function EnableAllControlActions(padIndex) end

--- If true, this native will create purple explosions upon projectile impact, add comic-like PTFX when firing a weapon, create a sound on bullet impact and have its own "blood effect". If the PTFX asset "scr_rcbarry2" is not requested using (`RequestNamedPtfxAsset`) then this native **will not work as intended**. Excerpt from fm_content_drug_lab_work.c: STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_rcbarry2"); if (STREAMING::HAS_NAMED_PTFX_ASSET_LOADED("scr_rcbarry2")) { GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(true); AUDIO::START_AUDIO_SCENE("DLC_CM2022_DRUG_TRIP_SPRINKLERS_SCENE"); func_720(26); }
--- @param toggle boolean
function EnableClownBloodVfx(toggle) end

--- control values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Control.cs and https://docs.fivem.net/game-references/controls/ 0, 1 and 2 used in the scripts. Control values from the decompiled scripts: 0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36, 37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100 ,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19 0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2 20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257, 261,262,263,264,286,287,288,289,337,338,339,340,341,342,343 INPUTGROUP_MOVE INPUTGROUP_LOOK INPUTGROUP_WHEEL INPUTGROUP_CELLPHONE_NAVIGATE INPUTGROUP_CELLPHONE_NAVIGATE_UD INPUTGROUP_CELLPHONE_NAVIGATE_LR INPUTGROUP_FRONTEND_DPAD_ALL INPUTGROUP_FRONTEND_DPAD_UD INPUTGROUP_FRONTEND_DPAD_LR INPUTGROUP_FRONTEND_LSTICK_ALL INPUTGROUP_FRONTEND_RSTICK_ALL INPUTGROUP_FRONTEND_GENERIC_UD INPUTGROUP_FRONTEND_GENERIC_LR INPUTGROUP_FRONTEND_GENERIC_ALL INPUTGROUP_FRONTEND_BUMPERS INPUTGROUP_FRONTEND_TRIGGERS INPUTGROUP_FRONTEND_STICKS INPUTGROUP_SCRIPT_DPAD_ALL INPUTGROUP_SCRIPT_DPAD_UD INPUTGROUP_SCRIPT_DPAD_LR INPUTGROUP_SCRIPT_LSTICK_ALL INPUTGROUP_SCRIPT_RSTICK_ALL INPUTGROUP_SCRIPT_BUMPERS INPUTGROUP_SCRIPT_TRIGGERS INPUTGROUP_WEAPON_WHEEL_CYCLE INPUTGROUP_FLY INPUTGROUP_SUB INPUTGROUP_VEH_MOVE_ALL INPUTGROUP_CURSOR INPUTGROUP_CURSOR_SCROLL INPUTGROUP_SNIPER_ZOOM_SECONDARY INPUTGROUP_VEH_HYDRAULICS_CONTROL Took those in IDA Pro.Not sure in which order they go
--- @param padIndex integer
--- @param control integer
--- @param enable boolean
function EnableControlAction(padIndex, control, enable) end

--- Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
function EnableCrosshairThisFrame() end

--- Enables or disables the specified 'dispatch service' type. 'Dispatch services' are used for spawning AI response peds/vehicles for events such as a fire in the street (type 3 - DT_FireDepartment), or gunfire in a gang area (type 11 - DT_Gangs). List of dispatch services: cpp enum eDispatchType { DT_Invalid = 0, DT_PoliceAutomobile = 1, DT_PoliceHelicopter = 2, DT_FireDepartment = 3, DT_SwatAutomobile = 4, DT_AmbulanceDepartment = 5, DT_PoliceRiders = 6, DT_PoliceVehicleRequest = 7, DT_PoliceRoadBlock = 8, DT_PoliceAutomobileWaitPulledOver = 9, DT_PoliceAutomobileWaitCruising = 10, DT_Gangs = 11, DT_SwatHelicopter = 13, DT_PoliceBoat = 14, DT_ArmyVehicle = 15, DT_BikerBackup = 15 }; Note that 'dispatch service' has nothing to do with the police scanner (audio), to toggle that, use SET_AUDIO_FLAG with `'PoliceScannerDisabled'`.
--- @param dispatchService integer
--- @param toggle boolean
function EnableDispatchService(dispatchService, toggle) end

--- Enables the editor runtime mode, changing game behavior to track entity metadata. This function supports SDK infrastructure and is not intended to be used directly from your code.
function EnableEditorRuntime() end

--- @param enabled boolean
function EnableEnhancedHostSupport(enabled) end

--- ENABLE_*
--- @param entity integer
function EnableEntityUnk(entity) end

--- This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
--- @param mapObjectHash integer
function EnableExteriorCullModelThisFrame(mapObjectHash) end

--- Enables laser sight on any weapon. It doesn't work. Neither on tick nor OnKeyDown
--- @param toggle boolean
function EnableLaserSightRendering(toggle) end

--- Enable a custom moon cycle, allowing control of which lunar phase the moon is in. Valid values are from `0.0` to `1.0`, with `0.5` representing a full moon. | Value | Lunar Phase | | :---: | :-------------: | | `0.1` | Waxing Crescent | | `0.2` | First Quarter | | `0.3` | Waxing Gibbous | | `0.5` | Full Moon | | `0.7` | Waning Gibbous | | `0.8` | Third Quarter | | `0.9` | Waning Crescent | The moon phase can be disabled with DISABLE_MOON_CYCLE_OVERRIDE
--- @param phase number
function EnableMoonCycleOverride(phase) end

--- @param toggle boolean
function EnableMovieKeyframeWait(toggle) end

--- @param toggle boolean
function EnableMovieSubtitles(toggle) end

--- @param garageHash integer
--- @param toggle boolean
function EnableSavingInGarage(garageHash, toggle) end

--- @param brainSet integer
function EnableScriptBrainSet(brainSet) end

--- @param mapObjectHash integer
function EnableScriptCullModelThisFrame(mapObjectHash) end

--- NativeDB Added Parameter 3: Any p2
--- @param player integer
--- @param toggle boolean
function EnableSpecialAbility(player, toggle) end

--- Enable or disable the plane stall warning sounds
--- @param vehicle integer
--- @param enable boolean
function EnableStallWarningSounds(vehicle, enable) end

--- Enable the stunt jump audio detection code This native is meant to be called per-frame for as long as detection is wanted.
function EnableStuntJumpAudio() end

--- @param p0 integer
function EnableStuntJumpSet(p0) end

function EnableSwitchPauseBeforeDescent() end

--- Makes the ped jump around like they're in a tennis match
--- @param ped integer
--- @param toggle boolean
--- @param p2 boolean
function EnableTennisMode(ped, toggle, p2) end

--- Enable or disable exhaust pops on the given vehicle.
--- @param vehicle integer
--- @param toggle boolean
function EnableVehicleExhaustPops(vehicle, toggle) end

--- @param vehicle integer
--- @param enableFanbeltDamage boolean
function EnableVehicleFanbeltDamage(vehicle, enableFanbeltDamage) end

--- @param handle integer
function EndFindKvp(handle) end

--- @param findHandle integer
function EndFindObject(findHandle) end

--- @param findHandle integer
function EndFindPed(findHandle) end

--- @param findHandle integer
function EndFindPickup(findHandle) end

--- @param findHandle integer
function EndFindVehicle(findHandle) end

function EndPetrolTrailDecals() end

function EndReplayStats() end

--- Pops and calls the Scaleform function on the stack
function EndScaleformMovieMethod() end

--- @return any
function EndScaleformMovieMethodReturnValue() end

--- Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
function EndSrl() end

--- cpp enum eBusySpinnerType { BUSY_SPINNER_LEFT = 0, BUSY_SPINNER_LEFT_2 = 1, BUSY_SPINNER_LEFT_3 = 2, BUSY_SPINNER_SAVE = 3, BUSY_SPINNER_RIGHT = 4, };
--- @param busySpinnerType integer
function EndTextCommandBusyspinnerOn(busySpinnerType) end

function EndTextCommandClearPrint() end

--- @param shape integer
--- @param loop boolean
--- @param beep boolean
--- @param duration integer
function EndTextCommandDisplayHelp(shape, loop, beep, duration) end

--- After applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis. NativeDB Added Parameter 3: int p2
--- @param x number
--- @param y number
function EndTextCommandDisplayText(x, y) end

--- END_TEXT_COMMAND_* In scripts font most of the time is passed as 1. Use _BEGIN_TEXT_GET_COMMAND_GET_WIDTH param is not font from what i've tested
--- @param p0 boolean
--- @return any
function EndTextCommandGetWidth(p0) end

--- @return any
function EndTextCommandIsMessageDisplayed() end

--- Returns whether a specific help message is being displayed or not. cpp enum HudIndexes { HELP_TEXT = 0, FLOATING_HELP_TEXT_1 = 1, FLOATING_HELP_TEXT_2 = 2, }
--- @param hudIndex integer
--- @return any
function EndTextCommandIsThisHelpMessageBeingDisplayed(hudIndex) end

--- END_TEXT_COMMAND_* Determines how many lines the text string will use when drawn on screen. Must use 0x521FB041D93DD0E4 for setting up
--- @param x number
--- @param y number
--- @return any
function EndTextCommandLineCount(x, y) end

--- @param p0 boolean
function EndTextCommandObjective(p0) end

--- @param buttonIndex integer
function EndTextCommandOverrideButtonText(buttonIndex) end

--- Draws the subtitle at middle center of the screen. int duration = time in milliseconds to show text on screen before disappearing drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished Used to be known as _DRAW_SUBTITLE_TIMED
--- @param duration integer
--- @param drawImmediately boolean
function EndTextCommandPrint(duration, drawImmediately) end

function EndTextCommandScaleformString() end

--- Finalizes a text command started with `BEGIN_TEXT_COMMAND_SET_BLIP_NAME`, setting the name of the specified blip.
--- @param blip integer
function EndTextCommandSetBlipName(blip) end

--- Shows an "award" notification above the minimap, lua example result: ![](https://i.imgur.com/e2DNaKX.png) Old description: Example: UI::_SET_NOTIFICATION_TEXT_ENTRY("HUNT"); UI::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
--- @param textureDict string
--- @param textureName string
--- @param rpBonus integer
--- @param colorOverlay integer
--- @param titleLabel string
--- @return any
function EndTextCommandThefeedPostAward(textureDict, textureName, rpBonus, colorOverlay, titleLabel) end

--- @param chTitle string
--- @param clanTxd string
--- @param clanTxn string
--- @param isImportant boolean
--- @param showSubtitle boolean
--- @return any
function EndTextCommandThefeedPostCrewRankup(chTitle, clanTxd, clanTxn, isImportant, showSubtitle) end

--- This function and the one below it are for after you receive an invite, not sending it. p0 = 1 or 0 nothin doin. int invite(Player player) { int iVar2, iVar3; networkHandleMgr handle; NETWORK_HANDLE_FROM_PLAYER(player, &handle.netHandle, 13); networkClanMgr clan; char *playerName = GET_PLAYER_NAME(player); _SET_NOTIFICATION_TEXT_ENTRY("STRING"); _SET_NOTIFACTION_COLOR_NEXT(0); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName); if (NETWORK_CLAN_PLAYER_GET_DESC(&clan, 35, &handle.netHandle)) { iVar2 = 0; if (ARE_STRINGS_EQUAL(clan.unk22, "Leader") && clan.unk30 == 0) { iVar2 = 1; } if (clan.unk21 > 0) { iVar3 = 0; } else { iVar3 = 1; } BOOL unused = _0x54E79E9C(&clan.clanHandle, 35); return _DRAW_NOTIFICATION_APARTMENT_INVITE(iVar3, 0 /*unused*/, &clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0); } }
--- @param crewTypeIsPrivate boolean
--- @param crewTagContainsRockstar boolean
--- @param rank integer
--- @param hasFounderStatus boolean
--- @param isImportant boolean
--- @param clanHandle integer
--- @param r integer
--- @param g integer
--- @param b integer
--- @return any
--- @return integer
function EndTextCommandThefeedPostCrewtag(crewTypeIsPrivate, crewTagContainsRockstar, rank, hasFounderStatus, isImportant, clanHandle, r, g, b) end

--- p0 = 1 or 0 crashes my game... this is for sending invites to network players - jobs/apartment/ect... return notification handle int invite(Player player) { networkHandleMgr netHandle; networkClanMgr clan; char *playerName = GET_PLAYER_NAME(player); _SET_NOTIFICATION_TEXT_ENTRY("STRING"); _SET_NOTIFACTION_COLOR_NEXT(1); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName); NETWORK_HANDLE_FROM_PLAYER(player, &netHandle.netHandle, 13); if (NETWORK_CLAN_PLAYER_IS_ACTIVE(&netHandle.netHandle)) { NETWORK_CLAN_PLAYER_GET_DESC(&clan.clanHandle, 35, &netHandle.netHandle); _DRAW_NOTIFICATION_CLAN_INVITE(0, _0x54E79E9C(&clan.clanHandle, 35), &clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0); } }
--- @param crewTypeIsPrivate boolean
--- @param crewTagContainsRockstar boolean
--- @param rank integer
--- @param isLeader boolean
--- @param isImportant boolean
--- @param clanHandle integer
--- @param gamerStr string
--- @param r integer
--- @param g integer
--- @param b integer
--- @return any
--- @return integer
function EndTextCommandThefeedPostCrewtagWithGameName(crewTypeIsPrivate, crewTagContainsRockstar, rank, isLeader, isImportant, clanHandle, gamerStr, r, g, b) end

--- Sets some extra options for a notification. It adds an image (or icon type) and sets a notification title (sender) and subtitle (subject). Texture dictionary and texture name parameters are usually the same exact value. Example result: ![](https://i.imgur.com/LviutDl.png) Old description with list of possible icons and texture names: List of picNames: pastebin.com/XdpJVbHz flash is a bool for fading in. iconTypes: 1 : Chat Box 2 : Email 3 : Add Friend Request 4 : Nothing 5 : Nothing 6 : Nothing 7 : Right Jumping Arrow 8 : RP Icon 9 : $ Icon "sender" is the very top header. This can be any old string. "subject" is the header under the sender.
--- @param textureDict string
--- @param textureName string
--- @param flash boolean
--- @param iconType integer
--- @param sender string
--- @param subject string
--- @return any
function EndTextCommandThefeedPostMessagetext(textureDict, textureName, flash, iconType, sender, subject) end

--- This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT. Needs more research. Only one type of usage in the scripts: HUD::\_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a\_0);
--- @param txdName string
--- @param textureName string
--- @param flash boolean
--- @param iconType integer
--- @param sender string
--- @param subject string
--- @return any
function EndTextCommandThefeedPostMessagetextGxtEntry(txdName, textureName, flash, iconType, sender, subject) end

--- Example, only occurrence in the scripts: v_8 = UI::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5); Example result: ![](https://i.imgur.com/YrN4Bcm.png)
--- @param picTxd string
--- @param picTxn string
--- @param flash boolean
--- @param iconType integer
--- @param nameStr string
--- @param subtitleStr string
--- @param durationMultiplier number
--- @return any
function EndTextCommandThefeedPostMessagetextTu(picTxd, picTxn, flash, iconType, nameStr, subtitleStr, durationMultiplier) end

--- List of picNames pastebin.com/XdpJVbHz flash is a bool for fading in. iconTypes: 1 : Chat Box 2 : Email 3 : Add Friend Request 4 : Nothing 5 : Nothing 6 : Nothing 7 : Right Jumping Arrow 8 : RP Icon 9 : $ Icon "sender" is the very top header. This can be any old string. "subject" is the header under the sender. "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long. "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
--- @param picTxd string
--- @param picTxn string
--- @param flash boolean
--- @param iconType integer
--- @param nameStr string
--- @param subtitleStr string
--- @param duration number
--- @param crewPackedStr string
--- @return any
function EndTextCommandThefeedPostMessagetextWithCrewTag(picTxd, picTxn, flash, iconType, nameStr, subtitleStr, duration, crewPackedStr) end

--- List of picNames: pastebin.com/XdpJVbHz flash is a bool for fading in. iconTypes: 1 : Chat Box 2 : Email 3 : Add Friend Request 4 : Nothing 5 : Nothing 6 : Nothing 7 : Right Jumping Arrow 8 : RP Icon 9 : $ Icon "sender" is the very top header. This can be any old string. "subject" is the header under the sender. "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long. "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.) iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType. int IconNotification(char *text, char *text2, char *Subject) { _SET_NOTIFICATION_TEXT_ENTRY("STRING"); ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text); _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7); return _DRAW_NOTIFICATION(1, 1); }
--- @param picTxd string
--- @param picTxn string
--- @param flash boolean
--- @param iconType1 integer
--- @param nameStr string
--- @param subtitleStr string
--- @param duration number
--- @param crewPackedStr string
--- @param iconType2 integer
--- @param textColor integer
--- @return any
function EndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(picTxd, picTxn, flash, iconType1, nameStr, subtitleStr, duration, crewPackedStr, iconType2, textColor) end

--- @param blink boolean
--- @param bHasTokens boolean
--- @return any
function EndTextCommandThefeedPostMpticker(blink, bHasTokens) end

--- returns a notification handle, prints out a notification like below: type range: 0 if you set type to 1, image goes from 0 - 39 - Xbox you can add text to example: UI::_0xD202B92CBF1D816F(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
--- @param eType integer
--- @param iIcon integer
--- @param sTitle string
--- @return any
function EndTextCommandThefeedPostReplayIcon(eType, iIcon, sTitle) end

--- returns a notification handle, prints out a notification like below: type range: 0 - 2 if you set type to 1, button accepts "~INPUT_SOMETHING~" example: HUD::_0xDD6CB2CCE7C2735C(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!"); - imgur.com/UPy0Ial Examples from the scripts: l_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~",""); l_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_SAVE_REPLAY_CLIP~",""); l_D1[1/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~",""); l_D1[2/*1*/]=HUD::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
--- @param type integer
--- @param button string
--- @param text string
--- @return any
function EndTextCommandThefeedPostReplayInput(type, button, text) end

--- List of picture names Example result: ![](https://i.imgur.com/SdEZ22m.png)
--- @param statTitle string
--- @param iconEnum integer
--- @param stepVal boolean
--- @param barValue integer
--- @param isImportant boolean
--- @param picTxd string
--- @param picTxn string
--- @return any
function EndTextCommandThefeedPostStats(statTitle, iconEnum, stepVal, barValue, isImportant, picTxd, picTxn) end

--- Example output preview: ![](https://i.imgur.com/TJvqkYq.png)
--- @param isImportant boolean
--- @param bHasTokens boolean
--- @return any
function EndTextCommandThefeedPostTicker(isImportant, bHasTokens) end

--- @param blink boolean
--- @param bHasTokens boolean
--- @return any
function EndTextCommandThefeedPostTickerForced(blink, bHasTokens) end

--- @param isImportant boolean
--- @param bHasTokens boolean
--- @return any
function EndTextCommandThefeedPostTickerWithTokens(isImportant, bHasTokens) end

--- @param chTitle string
--- @param iconType integer
--- @param chSubtitle string
--- @return any
function EndTextCommandThefeedPostUnlock(chTitle, iconType, chSubtitle) end

--- @param chTitle string
--- @param iconType integer
--- @param chSubtitle string
--- @param isImportant boolean
--- @return any
function EndTextCommandThefeedPostUnlockTu(chTitle, iconType, chSubtitle, isImportant) end

--- @param chTitle string
--- @param iconType integer
--- @param chSubtitle string
--- @param isImportant boolean
--- @param titleColor integer
--- @param p5 boolean
--- @return any
function EndTextCommandThefeedPostUnlockTuWithColor(chTitle, iconType, chSubtitle, isImportant, titleColor, p5) end

--- NativeDB Added Parameter 7: int hudColorIndex1 NativeDB Added Parameter 8: int hudColorIndex2
--- @param ch1TXD string
--- @param ch1TXN string
--- @param val1 integer
--- @param ch2TXD string
--- @param ch2TXN string
--- @param val2 integer
--- @return any
function EndTextCommandThefeedPostVersusTu(ch1TXD, ch1TXN, val1, ch2TXD, ch2TXN, val2) end

--- Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens. Also useful for when you are trying to add blips and inputs in your scaleform (If the scaleform supports it).
function EndTextCommandUnparsedScaleformString() end

--- Internal function for ensuring an entity has a state bag.
--- @param entity integer
function EnsureEntityStateBag(entity) end

--- Enters cursor mode, suppressing mouse movement to the game and displaying a mouse cursor instead. This function supports SDK infrastructure and is not intended to be used directly from your code.
function EnterCursorMode() end

--- @param commandString string
function ExecuteCommand(commandString) end

--- This native is not implemented.
--- @param data string
--- @param objectId integer
--- @param tree string
--- @return any
function ExperimentalLoadCloneCreate(data, objectId, tree) end

--- This native is not implemented.
--- @param entity integer
--- @param data string
function ExperimentalLoadCloneSync(entity, data) end

--- This native is not implemented.
--- @param entity integer
--- @return any
function ExperimentalSaveCloneCreate(entity) end

--- This native is not implemented.
--- @param entity integer
--- @return any
function ExperimentalSaveCloneSync(entity) end

--- Applies lethal damage (FLT_MAX) to the `SKEL_Head` bone of the specified ped using the weapon passed, leading to the ped's untimely demise. The naming of the native is a legacy leftover (formerly EXPLODE_CHAR_HEAD in GTA3) as in the early 3D GTA games, lethal damage to a ped head would 'explode' it. Do note that this native function does not work in multiplayer/network environment.
--- @param ped integer
--- @param weaponHash integer
function ExplodePedHead(ped, weaponHash) end

--- WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
--- @param ped integer
--- @param weaponHash integer
--- @param p2 boolean
function ExplodeProjectiles(ped, weaponHash, p2) end

--- Explodes a selected vehicle. Vehicle vehicle = Vehicle you want to explode. BOOL isAudible = If explosion makes a sound. BOOL isInvisible = If the explosion is invisible or not. First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
--- @param vehicle integer
--- @param isAudible boolean
--- @param isInvisible boolean
function ExplodeVehicle(vehicle, isAudible, isInvisible) end

--- @param vehicle integer
--- @param p1 boolean
function ExplodeVehicleInCutscene(vehicle, p1) end

--- Appears only 3 times in the scripts, more specifically in michael1.ysc - This can be used to prevent dying if you are "out of the world"
--- @param x number
--- @param y number
--- @param z number
function ExtendWorldBoundaryForPlayer(x, y, z) end

--- @return any
function FacebookDoUnkCheck() end

--- @return any
function FacebookIsAvailable() end

--- @return any
function FacebookIsSendingData() end

--- @return any
function FacebookSetCreateCharacterComplete() end

--- @param heistName string
--- @param cashEarned integer
--- @param xpEarned integer
--- @return any
function FacebookSetHeistComplete(heistName, cashEarned, xpEarned) end

--- milestoneId: 0 = "percentcomplete" 1 = "storycomplete" 2 = "vehicles" 3 = "properties" 4 = "psych" 5 = "mapreveal" 6 = "prologue"
--- @param milestoneId integer
--- @return any
function FacebookSetMilestoneComplete(milestoneId) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param duration number
function FadeDecalsInRange(x, y, z, radius, duration) end

--- Hardcoded to not work in SP.
--- @param p0 boolean
function FadeOutLocalPlayer(p0) end

--- @param p0 number
function FadeUpPedLight(p0) end

--- @param p1 any
--- @param p2 any
--- @return any
--- @return integer
function FilloutPmPlayerList(p1, p2) end

--- @param p2 any
--- @param p3 any
--- @return any
--- @return any
--- @return any
function FilloutPmPlayerListWithNames(p2, p3) end

--- @param ped integer
function FinalizeHeadBlend(ped) end

--- In the script "player_scene_t_bbfight.c4": "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))" -- &l_16E (p0) is requested as an anim dictionary earlier in the script. -- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the "animation" param. -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for: "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))" Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though -alphazolam Animations list
--- @param animDictionary string
--- @param animName string
--- @param p2 string
--- @return any
--- @return any
--- @return any
function FindAnimEventPhase(animDictionary, animName, p2) end

--- @return any
--- @return integer
function FindFirstObject() end

--- @return any
--- @return integer
function FindFirstPed() end

--- @return any
--- @return integer
function FindFirstPickup() end

--- @return any
--- @return integer
function FindFirstVehicle() end

--- @param handle integer
--- @return any
function FindKvp(handle) end

--- @param findHandle integer
--- @return any
--- @return integer
function FindNextObject(findHandle) end

--- @param findHandle integer
--- @return any
--- @return integer
function FindNextPed(findHandle) end

--- @param findHandle integer
--- @return any
--- @return integer
function FindNextPickup(findHandle) end

--- @param findHandle integer
--- @return any
--- @return integer
function FindNextVehicle(findHandle) end

--- @param stationNameHash integer
--- @return any
function FindRadioStationIndex(stationNameHash) end

--- Native is significantly more complicated than simply generating a random vector & length. The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport\_\__IsSphereVisible. NativeDB Introduced: v1290
--- @param ped integer
--- @return any
function FindRandomPointInSpace(ped) end

--- Finds a position ahead of the player by predicting the players next actions. The positions match path finding node positions. When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param dirX number
--- @param dirY number
--- @param dirZ number
--- @param distance number
--- @return any
--- @return vector3
function FindSpawnPointInDirection(posX, posY, posZ, dirX, dirY, dirZ, distance) end

--- Finds the vehicle that is carrying this entity with a handler frame. The model of the entity must be prop_contr_03b_ld or the function will return 0.
--- @param entity integer
--- @return any
function FindVehicleCarryingThisEntity(entity) end

--- @param zoneId integer
--- @param x number
--- @param y number
--- @param z number
function FireAirDefenseWeapon(zoneId, x, y, z) end

--- Resets and brings back all the children of a fragment based object. This should be used when attaching or detaching an object from another entity, especially when the object being detached consists of multiple fragments. Attempting to teleport a fragment-based object using `SET_ENTITY_COORDS` such as a flag object, will result in it remaining in place and failing to teleport, given the condition mentioned in the preceding statement. The native should be executed after detaching the object from its parent entity and before calling `SET_ENTITY_COORDS`. Example given down below.
--- @param object integer
function FixObjectFragment(object) end

--- See eWindowId declared in `IS_VEHICLE_WINDOW_INTACT`. This function is coded to not work on vehicles of type: `CBike`, `Bmx`, `CBoat`, `CTrain`, and `CSubmarine`.
--- @param vehicle integer
--- @param windowIndex integer
function FixVehicleWindow(vehicle, windowIndex) end

--- @param toggle boolean
function FlagPlayerContextInTournament(toggle) end

--- @param private_ boolean
function FlagServerAsPrivate(private_) end

--- @param millisecondsToFlash integer
function FlashAbilityBar(millisecondsToFlash) end

--- adds a short flash to the Radar/Minimap Usage: UI.FLASH_MINIMAP_DISPLAY
function FlashMinimapDisplay() end

--- @param hudColorIndex integer
function FlashMinimapDisplayWithColor(hudColorIndex) end

--- @param p0 boolean
function FlashWantedDisplay(p0) end

--- @param value number
--- @return any
function Floor(value) end

--- Nonsynchronous operations will not wait for a disk/filesystem flush before returning from a write or delete call. They will be much faster than their synchronous counterparts (e.g., bulk operations), however, a system crash may lose the data to some recent operations. This native ensures all `_NO_SYNC` operations are synchronized with the disk/filesystem.
function FlushResourceKvp() end

--- @param p0 boolean
function ForceCinematicRenderingThisUpdate(p0) end

--- used with 1,2,8,64,128 in the scripts
--- @param cleanupFlags integer
function ForceCleanup(cleanupFlags) end

--- PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
--- @param name string
--- @param cleanupFlags integer
function ForceCleanupForAllThreadsWithThisName(name, cleanupFlags) end

--- @param id integer
--- @param cleanupFlags integer
function ForceCleanupForThreadWithThisId(id, cleanupFlags) end

function ForceCloseReportugcMenu() end

function ForceCloseTextInputBox() end

--- Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
--- @param entity integer
function ForceEntityAiAndAnimationUpdate(entity) end

--- Sets the localplayer playerinfo state back to playing (State 0) States are: -1: "Invalid" 0: "Playing" 1: "Died" 2: "Arrested" 3: "Failed Mission" 4: "Left Game" 5: "Respawn" 6: "In MP Cutscene"
function ForceGameStatePlaying() end

--- creates single lightning+thunder at random position
function ForceLightningFlash() end

--- Forces the chosen station to paly the given music track list. All other music track lists will be locked.
--- @param radioStation string
--- @param trackListName string
--- @param timeOffsetMilliseconds integer
function ForceMusicTrackList(radioStation, trackListName, timeOffsetMilliseconds) end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
function ForcePedAiAndAnimationUpdate(ped, p1, p2) end

--- cpp enum ePedMotionState { MOTIONSTATE_NONE = -294553821, // MotionState_None MOTIONSTATE_IDLE = -1871534317, // MotionState_Idle MOTIONSTATE_WALK = -668482597, // MotionState_Walk MOTIONSTATE_RUN = -530524, // MotionState_Run MOTIONSTATE_SPRINT = -1115154469, // MotionState_Sprint MOTIONSTATE_CROUCH_IDLE = 1140525470, // MotionState_Crouch_Idle MOTIONSTATE_CROUCH_WALK = 147004056, // MotionState_Crouch_Walk MOTIONSTATE_CROUCH_RUN = 898879241, // MotionState_Crouch_Run MOTIONSTATE_DONOTHING = 247561816, // MotionState_DoNothing MOTIONSTATE_ANIMATEDVELOCITY = 1427811395, // MotionState_AnimatedVelocity MOTIONSTATE_INVEHICLE = -1797663347, // MotionState_InVehicle MOTIONSTATE_AIMING = 1063765679, // MotionState_Aiming MOTIONSTATE_DIVING_IDLE = 1212730861, // MotionState_Diving_Idle MOTIONSTATE_DIVING_SWIM = -1855028596, // MotionState_Diving_Swim MOTIONSTATE_SWIMMING_TREADWATER = -776007225, // MotionState_Swimming_TreadWater MOTIONSTATE_DEAD = 230360860, // MotionState_Dead MOTIONSTATE_STEALTH_IDLE = 1110276645, // MotionState_Stealth_Idle MOTIONSTATE_STEALTH_WALK = 69908130, // MotionState_Stealth_Walk MOTIONSTATE_STEALTH_RUN = -83133983, // MotionState_Stealth_Run MOTIONSTATE_PARACHUTING = -1161760501, // MotionState_Parachuting MOTIONSTATE_ACTIONMODE_IDLE = -633298724, // MotionState_ActionMode_Idle MOTIONSTATE_ACTIONMODE_WALK = -762290521, // MotionState_ActionMode_Walk MOTIONSTATE_ACTIONMODE_RUN = 834330132, // MotionState_ActionMode_Run MOTIONSTATE_JETPACK = 1398696542 // MotionState_Jetpack }
--- @param ped integer
--- @param motionStateHash integer
--- @param shouldReset boolean
--- @param updateState integer
--- @param forceAIPreCameraUpdate boolean
--- @return any
function ForcePedMotionState(ped, motionStateHash, shouldReset, updateState, forceAIPreCameraUpdate) end

--- Forces the ambient peds into their panic walla state
function ForcePedPanicWalla() end

--- @param ped integer
function ForcePedToOpenParachute(ped) end

--- @param p0 any
function ForcePickupRegenerate(p0) end

--- Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
--- @param vehicle integer
--- @param p1 boolean
function ForcePlaybackRecordedVehicleUpdate(vehicle, p1) end

--- @param toggle boolean
function ForceRenderInGameUi(toggle) end

--- Forces the particular room in an interior to load incase not teleporting into the portal.
--- @param entity integer
--- @param interior integer
--- @param roomHashKey integer
function ForceRoomForEntity(entity, interior, roomHashKey) end

--- @param interiorID integer
--- @param roomHashKey integer
function ForceRoomForGameViewport(interiorID, roomHashKey) end

--- Forces the game snow pass to render.
--- @param enabled boolean
function ForceSnowPass(enabled) end

--- Doesn't actually return anything.
--- @return any
function ForceSonarBlipsThisFrame() end

--- Forces a submarine to maintain neutral buoyancy for a specified duration, preventing it from rising when unoccupied or without a driver. NativeDB Introduced: v2189
--- @param submarine integer
--- @param time integer
function ForceSubmarineNeurtalBuoyancy(submarine, time) end

--- @param vehicle integer
--- @param toggle boolean
function ForceSubmarineSurfaceMode(vehicle, toggle) end

--- This native sets the audio to the specific vehicle hash's audioNameHash.
--- @param vehicle integer
--- @param gameObjectName string
function ForceUseAudioGameObject(vehicle, gameObjectName) end

--- This native is used alongside with `SET_VEHICLE_TYRE_BURST`. NativeDB Introduced: v3258
--- @param vehicle integer
--- @param force boolean
function ForceVehicleEngineSynth(vehicle, force) end

function FreeMemoryForHighQualityPhoto() end

function FreeMemoryForLowQualityPhoto() end

function FreeMemoryForMissionCreatorPhoto() end

--- Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using `SET_ENTITY_COORDS`.
--- @param entity integer
--- @param toggle boolean
function FreezeEntityPosition(entity, toggle) end

--- Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using `SET_ENTITY_COORDS`. **This is the server-side RPC native equivalent of the client native FREEZE_ENTITY_POSITION.**
--- @param entity integer
--- @param toggle boolean
function FreezeEntityPosition(entity, toggle) end

--- Allows script to freeze the microphone for a single frame, mantaining its current transform/settings. This native should be called every frame you want to keep the microphone frozen, when you stop calling it it will automatically unfreeze
function FreezeMicrophone() end

--- @param ped integer
function FreezePedCameraRotation(ped) end

--- @param radioStation string
function FreezeRadioStation(radioStation) end

--- NativeDB Introduced: v3095 Recharges the nitrous system of the specified vehicle to its maximum capacity. This action sets the nitrous charge duration to the maximum limit defined by previous settings applied through `SET_OVERRIDE_NITROUS_LEVEL`.
--- @param vehicle integer
function FullyChargeNitrous(vehicle) end

--- p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference distToNxJunction seems to be the distance in metres * 10.0f direction: 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction." 1 = Route is being calculated or the player is going in the wrong direction 2 = Please Proceed the Highlighted Route 3 = In (distToNxJunction) Turn Left 4 = In (distToNxJunction) Turn Right 5 = In (distToNxJunction) Keep Straight 6 = In (distToNxJunction) Turn Sharply To The Left 7 = In (distToNxJunction) Turn Sharply To The Right 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now." return value set to 0 always
--- @param x number
--- @param y number
--- @param z number
--- @param p3 boolean
--- @return any
--- @return integer
--- @return number
--- @return number
function GenerateDirectionsToCoord(x, y, z, p3) end

--- For Steam. Always returns 0 in retail version of the game.
--- @param achievement integer
--- @return any
function GetAchievementProgress(achievement) end

--- Returns all player indices for 'active' physical players known to the client. The data returned adheres to the following layout: [127, 42, 13, 37]
--- @return any
function GetActivePlayers() end

--- https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
--- @param vehicle integer
--- @return any
function GetActiveVehicleMissionType(vehicle) end

--- Returns current screen resolution. NativeDB Introduced: v323
--- @return integer
--- @return integer
function GetActualScreenResolution() end

--- Returns the current AI BLIP for the specified ped
--- @param ped integer
--- @return any
function GetAiBlip(ped) end

--- @param ped integer
--- @return any
function GetAiBlip_2(ped) end

--- @param playerSrc integer
--- @return any
function GetAirDragMultiplierForPlayersVehicle(playerSrc) end

--- Returns all object handles known to the server. The data returned adheres to the following layout: [127, 42, 13, 37]
--- @return any
function GetAllObjects() end

--- @return any
function GetAllocatedStackSize() end

--- Returns profile setting 17.
--- @return any
function GetAllowMovementWhileZoomed() end

--- Returns all peds handles known to the server. The data returned adheres to the following layout: [127, 42, 13, 37]
--- @return any
function GetAllPeds() end

--- Returns all rope handles. The data returned adheres to the following layout: [ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]
--- @return any
function GetAllRopes() end

--- Returns all registered vehicle model names, including non-dlc vehicles and custom vehicles in no particular order. **Example output** ["dubsta", "dubsta2", "dubsta3", "myverycoolcar", "sultan", "sultanrs", ...] This native will not return vehicles that are unregistered (i.e from a resource being stopped) during runtime.
--- @return any
function GetAllVehicleModels() end

--- @return any
--- @return integer
function GetAllVehicles() end

--- Returns all vehicle handles known to the server. The data returned adheres to the following layout: [127, 42, 13, 37]
--- @return any
function GetAllVehicles() end

--- A getter for SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME.
--- @return any
function GetAmbientPedRangeMultiplier() end

--- A getter for SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME.
--- @return any
function GetAmbientVehicleRangeMultiplier() end

--- @param ped integer
--- @return any
function GetAmbientVoiceNameHash(ped) end

--- @param ped integer
--- @param weaponHash integer
--- @return any
--- @return integer
function GetAmmoInClip(ped, weaponHash) end

--- WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0) From decompiled scripts Returns total ammo in weapon GTALua Example : natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
--- @param ped integer
--- @param weaponhash integer
--- @return any
function GetAmmoInPedWeapon(ped, weaponhash) end

--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return any
function GetAngleBetween_2dVectors(x1, y1, x2, y2) end

--- Animations list
--- @param animDict string
--- @param animName string
--- @return any
function GetAnimDuration(animDict, animName) end

--- Animations list
--- @param animDict string
--- @param animName string
--- @param x number
--- @param y number
--- @param z number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param p8 number
--- @param p9 integer
--- @return any
function GetAnimInitialOffsetPosition(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) end

--- Animations list
--- @param animDict string
--- @param animName string
--- @param x number
--- @param y number
--- @param z number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param p8 number
--- @param p9 integer
--- @return any
function GetAnimInitialOffsetRotation(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9) end

--- This native retrieves the aspect ratio of the game window. If `physicalAspect` is `true`, it returns the physical aspect ratio of the game window, which is useful for 3x1 modes. Otherwise, it returns the aspect ratio of the main game window, considering any custom overrides from the settings menu. NativeDB Introduced: v323
--- @param physicalAspect boolean
--- @return any
function GetAspectRatio(physicalAspect) end

--- @return any
function GetAudibleMusicTrackTextId() end

--- @param p3 any
--- @param p4 boolean
--- @return any
--- @return any
--- @return any
function GetBaseElementMetadata(p3, p4) end

--- Returns value of the '-benchmarkIterations' command line option.
--- @return any
function GetBenchmarkIterationsFromCommandLine() end

--- Returns value of the '-benchmarkPass' command line option.
--- @return any
function GetBenchmarkPassFromCommandLine() end

--- @return any
function GetBenchmarkTime() end

--- @param ped integer
--- @param ignoreAmmoCount boolean
--- @return any
function GetBestPedWeapon(ped, ignoreAmmoCount) end

--- In percentage: 0.0 - 100.0 NativeDB Introduced: v1734
--- @param binkMovie integer
--- @return any
function GetBinkMovieTime(binkMovie) end

--- @param var integer
--- @param rangeStart integer
--- @param rangeEnd integer
--- @return any
function GetBitsInRange(var, rangeStart, rangeEnd) end

--- @param blip integer
--- @return any
function GetBlipAlpha(blip) end

--- @param blip integer
--- @return any
function GetBlipColour(blip) end

--- @param blip integer
--- @return any
function GetBlipCoords(blip) end

--- Returns the Blip handle of given Entity.
--- @param entity integer
--- @return any
function GetBlipFromEntity(entity) end

--- @param blip integer
--- @return any
function GetBlipHudColour(blip) end

--- @param blip integer
--- @return any
function GetBlipInfoIdCoord(blip) end

--- @param blip integer
--- @return any
function GetBlipInfoIdDisplay(blip) end

--- @param blip integer
--- @return any
function GetBlipInfoIdEntityIndex(blip) end

--- This function is hard-coded to always return 0.
--- @param blip integer
--- @return any
function GetBlipInfoIdPickupIndex(blip) end

--- Returns a value based on what the blip is attached to 1 - Vehicle 2 - Ped 3 - Object 4 - Coord 5 - unk 6 - Pickup 7 - Radius
--- @param blip integer
--- @return any
function GetBlipInfoIdType(blip) end

--- NativeDB Introduced: v2060
--- @param blip integer
--- @return any
function GetBlipRotation(blip) end

--- Gets the sprite id of the specified blip. Blip sprite ids and images can be found here.
--- @param blip integer
--- @return any
function GetBlipSprite(blip) end

--- @param vehicle integer
--- @return any
function GetBoatBoomPositionRatio(vehicle) end

--- Same call as VEHICLE::_0x0F3B4D4E43177236
--- @param vehicle integer
--- @param p1 boolean
function GetBoatBoomPositionRatio_2(vehicle, p1) end

--- @param vehicle integer
--- @param p1 boolean
function GetBoatBoomPositionRatio3(vehicle, p1) end

--- Retrieves the agility for a specific boat model, including any vehicle mods. Unlike other vehicles where Rockstar Games typically assess performance based on traction, boats use agility as a measure. This static value is distinct from the traction metrics used for other vehicle types. NativeDB Introduced: v323
--- @param modelHash integer
--- @return any
function GetBoatVehicleModelAgility(modelHash) end

--- This native returns the index of a calming quad if the given point is inside its bounds.
--- @param x number
--- @param y number
--- @return any
function GetCalmingQuadAtCoords(x, y) end

--- @param waterQuad integer
--- @return any
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetCalmingQuadBounds(waterQuad) end

--- @return any
function GetCalmingQuadCount() end

--- @param waterQuad integer
--- @return any
--- @return number
function GetCalmingQuadDampening(waterQuad) end

--- Enumerated type defined in camControlHelperMetadataViewModes: cpp enum eContext { ON_FOOT = 0, // [G|S]ET_FOLLOW_PED_CAM_* IN_VEHICLE = 1, // [G|S]ET_FOLLOW_VEHICLE_CAM_* ON_BIKE = 2, IN_BOAT = 3, IN_AIRCRAFT = 4, IN_SUBMARINE = 5, IN_HELI = 6, IN_TURRET = 7, }
--- @return any
function GetCamActiveViewModeContext() end

--- @param cam integer
--- @return any
function GetCamAnimCurrentPhase(cam) end

--- @param cam integer
--- @return any
function GetCamCoord(cam) end

--- NativeDB Introduced: v2699
--- @param cam integer
--- @return any
function GetCamDofStrength(cam) end

--- @param cam integer
--- @return any
function GetCamFarClip(cam) end

--- @param cam integer
--- @return any
function GetCamFarDof(cam) end

--- @param cam integer
--- @return any
function GetCamFov(cam) end

--- Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.
--- @param camera integer
--- @return vector3
--- @return vector3
--- @return vector3
--- @return vector3
function GetCamMatrix(camera) end

--- @param cam integer
--- @return any
function GetCamNearClip(cam) end

--- NativeDB Introduced: v2699
--- @param cam integer
--- @return any
function GetCamNearDof(cam) end

--- Gets a camera's rotation by handle (`cam`) lookup, outputs a `Vector3` in degrees.
--- @param cam integer
--- @param rotationOrder integer
--- @return any
function GetCamRot(cam, rotationOrder) end

--- @param cam integer
--- @return any
function GetCamSplineNodeIndex(cam) end

--- I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
--- @param cam integer
--- @return any
function GetCamSplineNodePhase(cam) end

--- Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns. (returns 1.0f when no nodes has been added, reached end of non existing spline)
--- @param cam integer
--- @return any
function GetCamSplinePhase(cam) end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the view mode enum.
--- @param context integer
--- @return any
function GetCamViewModeForContext(context) end

--- Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
--- @param vehicle integer
--- @return any
function GetCanVehicleJump(vehicle) end

--- Gets the position of the cargobob hook, in world coords.
--- @param cargobob integer
--- @return any
function GetCargobobHookPosition(cargobob) end

--- @return any
function GetCauseOfMostRecentForceCleanup() end

--- @param entity integer
--- @return any
function GetCgoffset(entity) end

--- @param p0 integer
--- @return any
function GetClipSetForScriptedGunTask(p0) end

--- @return any
function GetClockDayOfMonth() end

--- Gets the current day of the week. 0: Sunday 1: Monday 2: Tuesday 3: Wednesday 4: Thursday 5: Friday 6: Saturday
--- @return any
function GetClockDayOfWeek() end

--- Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
--- @return any
function GetClockHours() end

--- Gets the current ingame clock minute.
--- @return any
function GetClockMinutes() end

--- @return any
function GetClockMonth() end

--- Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
--- @return any
function GetClockSeconds() end

--- @return any
function GetClockYear() end

--- NativeDB Introduced: v1180
--- @param blipSprite integer
--- @return any
function GetClosestBlipOfType(blipSprite) end

--- Returns TRUE if it found something. FALSE if not.
--- @param x number
--- @param y number
--- @param z number
--- @return any
--- @return vector3
function GetClosestFirePos(x, y, z) end

--- Get the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0
--- @param x number
--- @param y number
--- @param z number
--- @param unknown1 number
--- @param unknown2 integer
--- @return any
--- @return vector3
function GetClosestMajorVehicleNode(x, y, z, unknown1, unknown2) end

--- Has 8 params in the latest patches. isMission - if true doesn't return mission objects
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelHash integer
--- @param isMission boolean
--- @param p6 boolean
--- @param p7 boolean
--- @return any
function GetClosestObjectOfType(x, y, z, radius, modelHash, isMission, p6, p7) end

--- Gets the closest ped in a radius. Ped Types: Any ped = -1 Player = 1 Male = 4 Female = 5 Cop = 6 Human = 26 SWAT = 27 Animal = 28 Army = 29 ------------------ P4 P5 P7 P8 1 0 x x = return nearest walking Ped 1 x 0 x = return nearest walking Ped x 1 1 x = return Ped you are using 0 0 x x = no effect 0 x 0 x = no effect x = can be 1 or 0. Does not have any obvious changes. This function does not return ped who is: 1. Standing still 2. Driving 3. Fleeing 4. Attacking This function only work if the ped is: 1. walking normally. 2. waiting to cross a road. Note: PED::GET_PED_NEARBY_PEDS works for more peds.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param pedType integer
--- @return any
--- @return integer
function GetClosestPed(x, y, z, radius, p4, p5, p7, p8, pedType) end

--- Finds an edge (node connection to another node) that satisfies the specified criteria.
--- @param x number
--- @param y number
--- @param z number
--- @param minimumEdgeLength number
--- @param minimumLaneCount integer
--- @param onlyMajorRoads boolean
--- @return any
--- @return vector3
--- @return vector3
--- @return integer
--- @return integer
--- @return number
function GetClosestRoad(x, y, z, minimumEdgeLength, minimumLaneCount, onlyMajorRoads) end

--- Get all track nodes and their track ids within the radius of the specified coordinates.
--- @param position vector3
--- @param radius number
--- @return any
function GetClosestTrackNodes(position, radius) end

--- Example usage VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70) x, y, z: Position to get closest vehicle to. radius: Max radius to get a vehicle. modelHash: Limit to vehicles with this model. 0 for any. flags: The bitwise flags altering the function's behaviour. Does not return police cars or helicopters. It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above. These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359. Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles Conversion of found flags to binary: pastebin.com/kghNFkRi At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned. It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT ------------------------------------------------------------------------- Conclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h Use flag 127 to return police cars
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelHash integer
--- @param flags integer
--- @return any
function GetClosestVehicle(x, y, z, radius, modelHash, flags) end

--- FYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is <= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node. ---------- Vector3 nodePos; GET_CLOSEST_VEHICLE_NODE(x,y,z,&nodePos,...) p4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road. p5, p6 are always the same: 0x40400000 (3.0), 0 p5 can also be 100.0 and p6 can be 2.5: PATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &v_5, v_9, 100.0, 2.5) Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords. The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types. Starting at 2, every fourth node is under the map, always same coords. Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc). gtaforums.com/topic/843561-pathfind-node-types
--- @param x number
--- @param y number
--- @param z number
--- @param nodeType integer
--- @param p5 number
--- @param p6 number
--- @return any
--- @return vector3
function GetClosestVehicleNode(x, y, z, nodeType, p5, p6) end

--- p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more. p5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road. p6 is always 3.0 p7 is always 0. Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords. The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types. Starting at 2, every fourth node is under the map, always same coords. Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc). gtaforums.com/topic/843561-pathfind-node-types Example of usage, moving vehicle to closest path/road: Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true); Vector3 closestVehicleNodeCoords; float roadHeading; PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0); ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading); ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1); VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh); ------------------------------------------------------------------ C# Example (ins1de) : pastebin.com/fxtMWAHD
--- @param x number
--- @param y number
--- @param z number
--- @param nodeType integer
--- @param p6 number
--- @param p7 integer
--- @return any
--- @return vector3
--- @return number
function GetClosestVehicleNodeWithHeading(x, y, z, nodeType, p6, p7) end

--- @return any
function GetCloudHatOpacity() end

--- Returns POSIX timestamp. Renamed from `_GET_POSIX_TIME` to `GET_CLOUD_TIME_AS_INT` because of conflicting native names (`0xDA488F299A5B164E`)
--- @return any
function GetCloudTimeAsInt() end

--- Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
--- @return any
function GetCloudTimeAsString() end

--- @param entity integer
--- @return any
function GetCollisionNormalOfLastHitForEntity(entity) end

--- p0: Ped Handle p1: int i | 0 <= i <= 27 p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example: <BlindFireChance value="0.1"/> <WeaponShootRateModifier value="1.0"/> <TimeBetweenBurstsInCover value="1.25"/> <BurstDurationInCover value="2.0"/> <TimeBetweenPeeks value="10.0"/> <WeaponAccuracy value="0.18"/> <FightProficiency value="0.8"/> <StrafeWhenMovingChance value="1.0"/> <WalkWhenStrafingChance value="0.0"/> <AttackWindowDistanceForCover value="55.0"/> <TimeToInvalidateInjuredTarget value="9.0"/> <TriggerChargeTime_Near value="4.0"/> <TriggerChargeTime_Far value="10.0"/> -------------Confirmed by editing combatbehavior.meta: p1: 0=BlindFireChance 1=BurstDurationInCover 3=TimeBetweenBurstsInCover 4=TimeBetweenPeeks 5=StrafeWhenMovingChance 8=WalkWhenStrafingChance 11=AttackWindowDistanceForCover 12=TimeToInvalidateInjuredTarget 16=OptimalCoverDistance
--- @param ped integer
--- @param p1 integer
--- @return any
function GetCombatFloat(ped, p1) end

--- index2 is unused
--- @param index integer
--- @param index2 integer
--- @return any
function GetCommerceItemCat(index, index2) end

--- @param index integer
--- @return any
function GetCommerceItemId(index) end

--- @param index integer
--- @return any
function GetCommerceItemName(index) end

--- @param index integer
--- @return any
function GetCommerceItemNumCats(index) end

--- NativeDB Added Parameter 3: int p2
--- @param index integer
--- @return any
function GetCommerceItemTexturename(index) end

--- @param index integer
--- @return any
function GetCommerceProductPrice(index) end

--- Returns the current console output buffer.
--- @return any
function GetConsoleBuffer() end

--- @param padIndex integer
--- @param controlGroup integer
--- @param p2 boolean
--- @return any
function GetControlGroupInstructionalButton(padIndex, controlGroup, p2) end

--- formerly called _GET_CONTROL_ACTION_NAME incorrectly p2 appears to always be true. p2 is unused variable in function. EG: GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/ GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/ GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/ gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
--- @param padIndex integer
--- @param control integer
--- @param p2 boolean
--- @return any
function GetControlInstructionalButton(padIndex, control, p2) end

--- @param padIndex integer
--- @param control integer
--- @return any
function GetControlNormal(padIndex, control) end

--- Seems to return values between -1 and 1 for controls like gas and steering.
--- @param padIndex integer
--- @param control integer
--- @return any
function GetControlUnboundNormal(padIndex, control) end

--- @param padIndex integer
--- @param control integer
--- @return any
function GetControlValue(padIndex, control) end

--- Can be used to get a console variable of type `char*`, for example a string.
--- @param varName string
--- @param default_ string
--- @return any
function GetConvar(varName, default_) end

--- Can be used to get a console variable casted back to `bool`.
--- @param varName string
--- @param defaultValue boolean
--- @return any
function GetConvarBool(varName, defaultValue) end

--- This will have floating point inaccuracy.
--- @param varName string
--- @param defaultValue number
--- @return any
function GetConvarFloat(varName, defaultValue) end

--- Can be used to get a console variable casted back to `int` (an integer value).
--- @param varName string
--- @param default_ integer
--- @return any
function GetConvarInt(varName, default_) end

--- Returns the convertible state of the specified vehicle. cpp enum eRoofState { RAISED = 0, LOWERING = 1, LOWERED = 2, RAISING = 3, CLOSING_BOOT = 4, ROOF_STUCK_RAISED = 5, ROOF_STUCK_LOWERED = 6 }
--- @param vehicle integer
--- @return any
function GetConvertibleRoofState(vehicle) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelHash integer
--- @param rotationOrder integer
--- @return any
--- @return vector3
--- @return vector3
function GetCoordsAndRotationOfClosestObjectOfType(x, y, z, radius, modelHash, rotationOrder) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param projectileHash integer
--- @param ownedByPlayer boolean
--- @return any
--- @return vector3
function GetCoordsOfProjectileTypeInArea(x1, y1, z1, x2, y2, z2, projectileHash, ownedByPlayer) end

--- @param ped integer
--- @param weaponHash integer
--- @param distance number
--- @param ownedByPlayer boolean
--- @return any
--- @return vector3
function GetCoordsOfProjectileTypeWithinDistance(ped, weaponHash, distance, ownedByPlayer) end

--- if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
--- @return any
function GetCurrentFrontendMenuVersion() end

--- This native returns the currently used game's name.
--- @return any
function GetCurrentGameName() end

--- 0 = american (en-US) 1 = french (fr-FR) 2 = german (de-DE) 3 = italian (it-IT) 4 = spanish (es-ES) 5 = brazilian (pt-BR) 6 = polish (pl-PL) 7 = russian (ru-RU) 8 = korean (ko-KR) 9 = chinesetrad (zh-TW) 10 = japanese (ja-JP) 11 = mexican (es-MX) 12 = chinesesimp (zh-CN)
--- @return any
function GetCurrentLanguage() end

--- @return any
function GetCurrentNumberOfCloudPhotos() end

--- @param ped integer
--- @return any
--- @return integer
function GetCurrentPedVehicleWeapon(ped) end

--- The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash. p2 seems to be 1 most of the time; and is not implemented.
--- @param ped integer
--- @param p2 boolean
--- @return any
--- @return integer
function GetCurrentPedWeapon(ped, p2) end

--- Returns the hash of weapon the Ped is currently using.
--- @param ped integer
--- @return any
function GetCurrentPedWeapon(ped) end

--- NativeDB Added Parameter 2: Any p1
--- @param ped integer
--- @return any
function GetCurrentPedWeaponEntityIndex(ped) end

--- @param vehicle integer
--- @return any
function GetCurrentPlaybackForVehicle(vehicle) end

--- Return the playback time (in milliseconds) of the radio stations current track. NativeDB Introduced: v1493
--- @param radioStationName string
--- @return any
function GetCurrentRadioTrackPlaybackTime(radioStationName) end

--- Returns the name of the currently executing resource.
--- @return any
function GetCurrentResourceName() end

--- @return any
function GetCurrentScriptedConversationLine() end

--- Returns the peer address of the remote game server that the user is currently connected to.
--- @return any
function GetCurrentServerEndpoint() end

--- @param radioStationName string
--- @return any
function GetCurrentTrackSoundName(radioStationName) end

--- @return any
function GetCurrentWebpageId() end

--- @return any
function GetCurrentWebsiteId() end

--- @param cutsceneName string
--- @return any
function GetCutFileNumSections(cutsceneName) end

--- Returns the time of the cutscene's end accounting for `REQUEST_CUTSCENE_WITH_PLAYBACK_LIST` If a cutscene is laid out with 10 second sections, and section 0 and 1 are enabled then it would be 20000ms. NativeDB Introduced: v1734
--- @return any
function GetCutsceneEndTime() end

--- Gets the current time of the cutscene. NativeDB Introduced: v3258
--- @return any
function GetCutscenePlayTime() end

--- @return any
function GetCutsceneSectionPlaying() end

--- Gets the elapsed time of the current cutscene in
--- @return any
function GetCutsceneTime() end

--- Gets the total length of the cutscene irrespective of playback list in milliseconds To account for sections, see `_GET_CUTSCENE_END_TIME`
--- @return any
function GetCutsceneTotalDuration() end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @return any
function GetDeadPedPickupCoords(ped, p1, p2) end

--- NativeDB Introduced: v2372
--- @return any
function GetDebugCamera() end

--- @param decal integer
--- @return any
function GetDecalWashLevel(decal) end

--- Gets the aggressiveness factor of the ocean waves.
--- @return any
function GetDeepOceanScaler() end

--- This function is hard-coded to always return 1.
--- @return any
function GetDefaultScriptRendertargetRenderId() end

--- @param padIndex integer
--- @param control integer
--- @return any
function GetDisabledControlNormal(padIndex, control) end

--- @param padIndex integer
--- @param control integer
--- @return any
function GetDisabledControlUnboundNormal(padIndex, control) end

--- Returns the display name/text label (`gameName` in `vehicles.meta`) for the specified vehicle model.
--- @param modelHash integer
--- @return any
function GetDisplayNameFromVehicleModel(modelHash) end

--- Returns the distance between two three-dimensional points, optionally ignoring the Z values. If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance. Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param useZ boolean
--- @return any
function GetDistanceBetweenCoords(x1, y1, z1, x2, y2, z2, useZ) end

--- The Second item in the struct `*(Hash *)(outData + 1)` is the vehicle hash.
--- @param dlcVehicleIndex integer
--- @return any
--- @return any
function GetDlcVehicleData(dlcVehicleIndex) end

--- @param dlcVehicleIndex integer
--- @return any
function GetDlcVehicleFlags(dlcVehicleIndex) end

--- dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()
--- @param dlcVehicleIndex integer
--- @return any
function GetDlcVehicleModel(dlcVehicleIndex) end

--- @param hash integer
--- @return any
function GetDlcVehicleModLockHash(hash) end

--- p0 seems to be the weapon index p1 seems to be the weapon component index struct DlcComponentData{ int attachBone; int padding1; int bActiveByDefault; int padding2; int unk; int padding3; int componentHash; int padding4; int unk2; int padding5; int componentCost; int padding6; char nameLabel[64]; char descLabel[64]; };
--- @param dlcWeaponIndex integer
--- @param dlcWeapCompIndex integer
--- @return any
--- @return integer
function GetDlcWeaponComponentData(dlcWeaponIndex, dlcWeapCompIndex) end

--- Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP. NativeDB Introduced: v2060
--- @param dlcWeaponIndex integer
--- @param dlcWeapCompIndex integer
--- @return any
--- @return integer
function GetDlcWeaponComponentDataSp(dlcWeaponIndex, dlcWeapCompIndex) end

--- dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1. struct DlcWeaponData { int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this int padding1; int weaponHash; int padding2; int unk; int padding3; int weaponCost; int padding4; int ammoCost; int padding5; int ammoType; int padding6; int defaultClipSize; int padding7; char nameLabel[64]; char descLabel[64]; char desc2Label[64]; // usually "the" + name char upperCaseNameLabel[64]; };
--- @param dlcWeaponIndex integer
--- @return any
--- @return integer
function GetDlcWeaponData(dlcWeaponIndex) end

--- Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP. NativeDB Introduced: v2060
--- @param dlcWeaponIndex integer
--- @return any
--- @return integer
function GetDlcWeaponDataSp(dlcWeaponIndex) end

--- NativeDB Introduced: v1604
--- @param vehicle integer
--- @return any
function GetDoesVehicleHaveTombstone(vehicle) end

--- NativeDB Introduced: v2372
--- @param vehicle integer
--- @return any
function GetDriftTyresEnabled(vehicle) end

--- Returns the NUI window handle for a specified DUI browser object.
--- @param duiObject integer
--- @return any
function GetDuiHandle(duiObject) end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Returns the memory address of an entity. This native is intended for singleplayer debugging, and may not be available during multiplayer.
--- @param entity integer
--- @return any
function GetEntityAddress(entity) end

--- @param entity integer
--- @return any
function GetEntityAlpha(entity) end

--- Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1. Example: 0.000000 - mark the starting of animation. 0.500000 - mark the midpoint of the animation. 1.000000 - mark the end of animation. Animations list
--- @param entity integer
--- @param animDict string
--- @param animName string
--- @return any
function GetEntityAnimCurrentTime(entity, animDict, animName) end

--- Returns a float value representing animation's total playtime in milliseconds. Example: GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b") return 20800.000000 Animations list
--- @param entity integer
--- @param animDict string
--- @param animName string
--- @return any
function GetEntityAnimTotalTime(entity, animDict, animName) end

--- Returns entity's archetype name, if available.
--- @param entity integer
--- @return any
function GetEntityArchetypeName(entity) end

--- @param entity integer
--- @return any
function GetEntityAttachedTo(entity) end

--- Gets the entity that this entity is attached to.
--- @param entity integer
--- @return any
function GetEntityAttachedTo(entity) end

--- @param vehicle integer
--- @return any
function GetEntityAttachedToCargobob(vehicle) end

--- @param towTruck integer
--- @return any
function GetEntityAttachedToTowTruck(towTruck) end

--- @param entity integer
--- @return any
function GetEntityBoneCount(entity) end

--- Returns the index of the bone. If the bone was not found, -1 will be returned. list: pastebin.com/D7JMnX1g BoneNames: chassis, windscreen, seat_pside_r, seat_dside_r, bodyshell, suspension_lm, suspension_lr, platelight, attach_female, attach_male, bonnet, boot, chassis_dummy, //Center of the dummy chassis_Control, //Not found yet door_dside_f, //Door left, front door_dside_r, //Door left, back door_pside_f, //Door right, front door_pside_r, //Door right, back Gun_GripR, windscreen_f, platelight, //Position where the light above the numberplate is located VFX_Emitter, window_lf, //Window left, front window_lr, //Window left, back window_rf, //Window right, front window_rr, //Window right, back engine, //Position of the engine gun_ammo, ROPE_ATTATCH, //Not misspelled. In script "finale_heist2b.c4". wheel_lf, //Wheel left, front wheel_lr, //Wheel left, back wheel_rf, //Wheel right, front wheel_rr, //Wheel right, back exhaust, //Exhaust. shows only the position of the stock-exhaust overheat, //A position on the engine(not exactly sure, how to name it) misc_e, //Not a car-bone. seat_dside_f, //Driver-seat seat_pside_f, //Seat next to driver Gun_Nuzzle, seat_r I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
--- @param entity integer
--- @param boneName string
--- @return any
function GetEntityBoneIndexByName(entity, boneName) end

--- Gets the world rotation of the specified bone of the specified entity. This native is used in casinoroulette.c but I don't know yet what is the difference with _GET_ENTITY_BONE_ROTATION
--- @param entity integer
--- @param boneIndex integer
--- @return any
function GetEntityBonePosition_2(entity, boneIndex) end

--- Gets the world rotation of the specified bone of the specified entity.
--- @param entity integer
--- @param boneIndex integer
--- @return any
function GetEntityBoneRotation(entity, boneIndex) end

--- Gets the local rotation of the specified bone of the specified entity. NativeDB Introduced: v1734
--- @param entity integer
--- @param boneIndex integer
--- @return any
function GetEntityBoneRotationLocal(entity, boneIndex) end

--- @param entity integer
--- @return any
function GetEntityCanBeDamaged(entity) end

--- @param entity integer
--- @return any
function GetEntityCollisionDisabled(entity) end

--- @param entity integer
--- @return any
function GetEntityCollisionDisabled(entity) end

--- Gets the current coordinates (world position) for a specified entity.
--- @param entity integer
--- @param alive boolean
--- @return any
function GetEntityCoords(entity, alive) end

--- Gets the current coordinates for a specified entity. This native is used server side when using OneSync. See GET_ENTITY_COORDS for client side.
--- @param entity integer
--- @return any
function GetEntityCoords(entity) end

--- Gets the entity's forward vector.
--- @param entity integer
--- @return any
function GetEntityForwardVector(entity) end

--- Gets the X-component of the entity's forward vector.
--- @param entity integer
--- @return any
function GetEntityForwardX(entity) end

--- Gets the Y-component of the entity's forward vector.
--- @param entity integer
--- @return any
function GetEntityForwardY(entity) end

--- Returns the entity handle for the specified state bag name. For use with ADD_STATE_BAG_CHANGE_HANDLER.
--- @param bagName string
--- @return any
function GetEntityFromStateBagName(bagName) end

--- Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
--- @param entity integer
--- @return any
function GetEntityHeading(entity) end

--- @param entity integer
--- @return any
function GetEntityHeading(entity) end

--- Gets the heading of the entity physics in degrees, which tends to be more accurate than just `GET_ENTITY_HEADING`. This can be clearly seen while, for example, ragdolling a ped/player.
--- @param entity integer
--- @return any
function GetEntityHeadingFromEulers(entity) end

--- Returns an integer value of entity's current health. Example of range for ped: - Player [0 to 200] - Ped [100 to 200] - Vehicle [0 to 1000] - Object [0 to 1000] Health is actually a float value but this native casts it to int. In order to get the actual value, do: float health = *(float *)(entityAddress + 0x280);
--- @param entity integer
--- @return any
function GetEntityHealth(entity) end

--- Only works for vehicle and peds
--- @param entity integer
--- @return any
function GetEntityHealth(entity) end

--- @param entity integer
--- @param X number
--- @param Y number
--- @param Z number
--- @param atTop boolean
--- @param inWorldCoords boolean
--- @return any
function GetEntityHeight(entity, X, Y, Z, atTop, inWorldCoords) end

--- Return height (z-dimension) above ground. Example: The pilot in a titan plane is 1.844176 above ground. How can i convert it to meters? Everything seems to be in meters, probably this too.
--- @param entity integer
--- @return any
function GetEntityHeightAboveGround(entity) end

--- Returns the transient entity index for a specified mapdata/entity pair. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param mapdata integer
--- @param entity integer
--- @return any
function GetEntityIndexFromMapdata(mapdata, entity) end

--- Returns the handle of a cutscene entity, can be ped
--- @param cutsceneEntName string
--- @param modelHash integer
--- @return any
function GetEntityIndexOfCutsceneEntity(cutsceneEntName, modelHash) end

--- @param cutsceneEntName string
--- @param modelHash integer
--- @return any
function GetEntityIndexOfRegisteredEntity(cutsceneEntName, modelHash) end

--- Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
--- @param explosionType integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius number
--- @return any
function GetEntityInsideExplosionArea(explosionType, x1, y1, z1, x2, y2, z2, radius) end

--- NativeDB Introduced: v1290
--- @param explosionType integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function GetEntityInsideExplosionSphere(explosionType, x, y, z, radius) end

--- Returns the LOD distance of an entity.
--- @param entity integer
--- @return any
function GetEntityLodDist(entity) end

--- Retrieves the map data and entity handles from a specific entity. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param entity integer
--- @return any
--- @return integer
--- @return integer
function GetEntityMapdataOwner(entity) end

--- @param entity integer
--- @return vector3
--- @return vector3
--- @return vector3
--- @return vector3
function GetEntityMatrix(entity) end

--- Return an integer value of entity's maximum health. Example: - Player = 200
--- @param entity integer
--- @return any
function GetEntityMaxHealth(entity) end

--- Currently it only works with peds.
--- @param entity integer
--- @return any
function GetEntityMaxHealth(entity) end

--- Returns the model hash from an entity.
--- @param entity integer
--- @return any
function GetEntityModel(entity) end

--- @param entity integer
--- @return any
function GetEntityModel(entity) end

--- @param entity integer
--- @return any
function GetEntityOrphanMode(entity) end

--- GET_ENTITY_* Seems to return the handle of the entity's portable pickup. NativeDB Introduced: v1180
--- @param entity integer
--- @param modelHash integer
--- @return any
function GetEntityPickup(entity, modelHash) end

--- @param entity integer
--- @return any
function GetEntityPitch(entity) end

--- Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it. Returns false if no entity found.
--- @param player integer
--- @return any
--- @return integer
function GetEntityPlayerIsFreeAimingAt(player) end

--- A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
--- @param entity integer
--- @return any
function GetEntityPopulationType(entity) end

--- This native gets an entity's population type.
--- @param entity integer
--- @return any
function GetEntityPopulationType(entity) end

--- NativeDB Introduced: v1604
--- @param entity integer
--- @return any
--- @return boolean
--- @return boolean
--- @return boolean
--- @return boolean
--- @return boolean
--- @return boolean
--- @return boolean
--- @return boolean
function GetEntityProofs(entity) end

--- w is the correct parameter name!
--- @param entity integer
--- @return number
--- @return number
--- @return number
--- @return number
function GetEntityQuaternion(entity) end

--- Displays the current ROLL axis of the entity [-180.0000/180.0000+] (Sideways Roll) such as a vehicle tipped on its side
--- @param entity integer
--- @return any
function GetEntityRoll(entity) end

--- **NOTE**: What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation. cpp enum eRotationOrder { // Rotate around the z-axis, then the y-axis and finally the x-axis. ROT_ZYX = 0, // Rotate around the y-axis, then the z-axis and finally the x-axis. ROT_YZX = 1, // Rotate around the z-axis, then the x-axis and finally the y-axis. ROT_ZXY = 2, // Rotate around the x-axis, then the z-axis and finally the y-axis. ROT_XZY = 3, // Rotate around the y-axis, then the x-axis and finally the z-axis. ROT_YXZ = 4, // Rotate around the x-axis, then the y-axis and finally the z-axis. ROT_XYZ = 5, }
--- @param entity integer
--- @param rotationOrder integer
--- @return any
function GetEntityRotation(entity, rotationOrder) end

--- @param entity integer
--- @return any
function GetEntityRotation(entity) end

--- @param entity integer
--- @return any
function GetEntityRotationVelocity(entity) end

--- @param entity integer
--- @return any
function GetEntityRotationVelocity(entity) end

--- Gets the routing bucket for the specified entity. Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
--- @param entity integer
--- @return any
function GetEntityRoutingBucket(entity) end

--- All ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.
--- @param entity integer
--- @return any
--- @return integer
function GetEntityScript(entity) end

--- @param entity integer
--- @return any
function GetEntityScript(entity) end

--- Get the speed of a entity.
--- @param entity integer
--- @return any
function GetEntitySpeed(entity) end

--- Gets the current speed of the entity in meters per second. To convert to MPH: speed * 2.236936 To convert to KPH: speed * 3.6
--- @param entity integer
--- @return any
function GetEntitySpeed(entity) end

--- Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
--- @param entity integer
--- @param relative boolean
--- @return any
function GetEntitySpeedVector(entity, relative) end

--- Get how much of the entity is submerged. 1.0f is whole entity.
--- @param entity integer
--- @return any
function GetEntitySubmergedLevel(entity) end

--- Returns: 0 = no entity 1 = ped 2 = vehicle 3 = object
--- @param entity integer
--- @return any
function GetEntityType(entity) end

--- Gets the entity type (as an integer), which can be one of the following defined down below: **The following entities will return type `1`:** * Ped * Player * Animal (Red Dead Redemption 2) * Horse (Red Dead Redemption 2) **The following entities will return type `2`:** * Automobile * Bike * Boat * Heli * Plane * Submarine * Trailer * Train * DraftVeh (Red Dead Redemption 2) **The following entities will return type `3`:** * Object * Door * Pickup Otherwise, a value of `0` will be returned.
--- @param entity integer
--- @return any
function GetEntityType(entity) end

--- @param entity integer
--- @return any
function GetEntityUprightValue(entity) end

--- @param entity integer
--- @return any
function GetEntityVelocity(entity) end

--- @param entity integer
--- @return any
function GetEntityVelocity(entity) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function GetEntryPositionOfDoor(vehicle, doorIndex) end

--- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
--- @param eventGroup integer
--- @param eventIndex integer
--- @return any
function GetEventAtIndex(eventGroup, eventIndex) end

--- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork) Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
--- @param eventGroup integer
--- @param eventIndex integer
--- @param eventDataSize integer
--- @return any
--- @return integer
function GetEventData(eventGroup, eventIndex, eventDataSize) end

--- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
--- @param eventGroup integer
--- @param eventIndex integer
--- @return any
function GetEventExists(eventGroup, eventIndex) end

--- A getter for SET_RESOURCE_KVP_FLOAT, but for a specified resource.
--- @param resource string
--- @param key string
--- @return any
function GetExternalKvpFloat(resource, key) end

--- A getter for SET_RESOURCE_KVP_INT, but for a specified resource.
--- @param resource string
--- @param key string
--- @return any
function GetExternalKvpInt(resource, key) end

--- A getter for SET_RESOURCE_KVP, but for a specified resource.
--- @param resource string
--- @param key string
--- @return any
function GetExternalKvpString(resource, key) end

--- @return any
function GetExtraContentPackHasBeenInstalled() end

--- See `GET_TIMECYCLE_MODIFIER_INDEX` for use, works the same just for the secondary timecycle modifier.
--- @return any
function GetExtraTimecycleModifierIndex() end

--- @return any
function GetFakeWantedLevel() end

--- Gets a localized string literal from a label name. This is used to get the filename of the audio conversation associated with the provided label name.
--- @param labelName string
--- @return any
function GetFilenameForAudioConversation(labelName) end

--- @return any
function GetFinalRenderedCamCoord() end

--- @return any
function GetFinalRenderedCamFarClip() end

--- @return any
function GetFinalRenderedCamFarDof() end

--- @return any
function GetFinalRenderedCamFov() end

--- @return any
function GetFinalRenderedCamMotionBlurStrength() end

--- @return any
function GetFinalRenderedCamNearClip() end

--- @return any
function GetFinalRenderedCamNearDof() end

--- @param rotationOrder integer
--- @return any
function GetFinalRenderedCamRot(rotationOrder) end

--- @param player integer
--- @return any
function GetFinalRenderedInWhenFriendlyFov(player) end

--- @param player integer
--- @param rotationOrder integer
--- @return any
function GetFinalRenderedInWhenFriendlyRot(player, rotationOrder) end

--- Also see `GET_NEXT_BLIP_INFO_ID` for an example.
--- @param blipSprite integer
--- @return any
function GetFirstBlipInfoId(blipSprite) end

--- @return any
function GetFirstPersonAimCamZoomFactor() end

--- @param p0 number
--- @param p1 integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 integer
--- @param p8 integer
--- @return any
function GetFocusPedOnScreen(p0, p1, p2, p3, p4, p5, p6, p7, p8) end

--- cpp // view mode enumeration enum eCamViewMode { THIRD_PERSON_NEAR = 0, THIRD_PERSON_MEDIUM = 1, THIRD_PERSON_FAR = 2, CINEMATIC = 3, FIRST_PERSON = 4, };
--- @return any
function GetFollowPedCamViewMode() end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the follow mode enum.
--- @return any
function GetFollowPedCamZoomLevel() end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the follow mode enum.
--- @return any
function GetFollowVehicleCamViewMode() end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the follow mode enum.
--- @return any
function GetFollowVehicleCamZoomLevel() end

--- @param componentHash integer
--- @param forcedComponentIndex integer
--- @return integer
--- @return integer
--- @return integer
function GetForcedComponent(componentHash, forcedComponentIndex) end

--- @param componentHash integer
--- @param forcedPropIndex integer
--- @return integer
--- @return integer
--- @return integer
function GetForcedProp(componentHash, forcedPropIndex) end

--- Gets the number of the current frame being displayed.
--- @return any
function GetFrameCount() end

--- Gets the high precision frame time of the last frame in seconds. *note: the example above is way less precise.*
--- @return any
function GetFrameTime() end

--- @return any
function GetFuelConsumptionRateMultiplier() end

--- @return any
function GetFuelConsumptionState() end

--- Returns the internal build number of the current game being executed. Possible values: * FiveM * 1604 * 2060 * 2189 * 2372 * 2545 * 2612 * 2699 * 2802 * 2944 * 3095 * 3258 * 3323 * 3407 * RedM * 1311 * 1355 * 1436 * 1491 * LibertyM * 43 * FXServer * 0
--- @return any
function GetGameBuildNumber() end

--- Returns the current game being executed. Possible values: | Return value | Meaning | | ------------ | ------------------------------ | | `fxserver` | Server-side code ('Duplicity') | | `fivem` | FiveM for GTA V | | `libertym` | LibertyM for GTA IV | | `redm` | RedM for Red Dead Redemption 2 |
--- @return any
function GetGameName() end

--- @return any
function GetGameplayCamCoord() end

--- @return any
function GetGameplayCamFov() end

--- @return any
function GetGameplayCamRelativeHeading() end

--- @return any
function GetGameplayCamRelativePitch() end

--- This function takes a rotation order and outputs a `Vector3` in degrees. It first calls a game function to calculate these values given the rotation order and effectively multiplies those values by `180/PI`, hence degrees since the function it calls outputs radians which are then converted to degrees.
--- @param rotationOrder integer
--- @return any
function GetGameplayCamRot(rotationOrder) end

--- Returns a list of entity handles (script GUID) for all entities in the specified pool - the data returned is an array as follows: json [ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...] ### Supported pools * `CPed`: Peds (including animals) and players. * `CObject`: Objects (props), doors, and projectiles. * `CNetObject`: Networked objects * `CVehicle`: Vehicles. * `CPickup`: Pickups.
--- @param poolName string
--- @return any
function GetGamePool(poolName) end

--- @return any
function GetGameTimer() end

--- Gets the current game timer in milliseconds.
--- @return any
function GetGameTimer() end

--- Returns the ActionScript flagValue. ActionScript flags are global flags that scaleforms use Flags found during testing 0: Returns 1 if the web_browser keyboard is open, otherwise 0 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser) 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed 9: Returns the current selection on the mobile phone scaleform There are 20 flags in total.
--- @param flagIndex integer
--- @return any
function GetGlobalActionscriptFlag(flagIndex) end

--- Returns pointer to an empty string. GET_C*
--- @return any
function GetGlobalCharBuffer() end

--- A getter for SET_GLOBAL_PASSENGER_MASS_MULTIPLIER.
--- @return any
function GetGlobalPassengerMassMultiplier() end

--- NativeDB Introduced: v2189
--- @return any
function GetGlobalWaterType() end

--- @return any
function GetGpsBlipRouteFound() end

--- @return any
function GetGpsBlipRouteLength() end

--- Attempts to identify the highest ground Z-coordinate and determine the corresponding surface normal directly beneath a specified 3D coordinate. NativeDB Introduced: v323
--- @param x number
--- @param y number
--- @param z number
--- @return any
--- @return number
--- @return vector3
function GetGroundZAndNormalFor_3dCoord(x, y, z) end

--- Determines the highest ground Z-coordinate directly below a specified 3D coordinate, excluding any objects at that point. Optionally, water can be considered as ground when determining the highest point. NativeDB Added Parameter 6: BOOL ignoreDistToWaterLevelCheck - If set to true, the distance to the water level will be ignored when checking for water as ground. NativeDB Introduced: v505
--- @param x number
--- @param y number
--- @param z number
--- @param waterAsGround boolean
--- @return any
--- @return number
function GetGroundZExcludingObjectsFor_3dCoord(x, y, z, waterAsGround) end

--- This native gets the ground level (ground elevation) and returns the Z coordinate that represents it. Note: This native can only calculate the elevation when the coordinates are within the render distance of the client. NativeDB Added Parameter 6: BOOL p5
--- @param x number
--- @param y number
--- @param z number
--- @param includeWater boolean
--- @return any
--- @return number
function GetGroundZFor_3dCoord(x, y, z, includeWater) end

--- p1 may be a BOOL representing whether or not the group even exists
--- @param groupID integer
--- @return any
--- @return integer
function GetGroupSize(groupID) end

--- This native converts its past string to hash. It is hashed using jenkins one at a time method.
--- @param string string
--- @return any
function GetHashKey(string) end

--- This native converts the passed string to a hash.
--- @param model string
--- @return any
function GetHashKey(model) end

--- @param entity integer
--- @param componentId integer
--- @param drawableVariant integer
--- @param textureVariant integer
--- @return any
function GetHashNameForComponent(entity, componentId, drawableVariant, textureVariant) end

--- @param entity integer
--- @param componentId integer
--- @param propIndex integer
--- @param propTextureIndex integer
--- @return any
function GetHashNameForProp(entity, componentId, propIndex, propTextureIndex) end

--- Returns a hash representing which part of the map the given coords are located. Possible return values: (Hash of) city -> -289320599 (Hash of) countryside -> 2072609373 C# Example : Ped player = Game.Player.Character; Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetHashOfMapAreaAtCoords(x, y, z) end

--- @return any
function GetHashOfThisScriptName() end

--- GET_*
--- @param object integer
--- @return any
function GetHasObjectFragInst(object) end

--- @param vehicle integer
--- @return any
function GetHasRetractableWheels(vehicle) end

--- @param vehicle integer
--- @return any
function GetHasRocketBoost(vehicle) end

--- dx = x1 - x2 dy = y1 - y2
--- @param dx number
--- @param dy number
--- @return any
function GetHeadingFromVector_2d(dx, dy) end

--- Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return any
function GetHeightmapBottomZForArea(x1, y1, x2, y2) end

--- Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
--- @param x number
--- @param y number
--- @return any
function GetHeightmapBottomZForPosition(x, y) end

--- Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return any
function GetHeightmapTopZForArea(x1, y1, x2, y2) end

--- Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
--- @param x number
--- @param y number
--- @return any
function GetHeightmapTopZForPosition(x, y) end

--- **Note** This native will always return `1000.0` unless SET_VEHICLE_BODY_HEALTH, SET_VEHICLE_ENGINE_HEALTH, or SET_VEHICLE_PETROL_TANK_HEALTH have been called with a value greater than `1000.0`.
--- @param heli integer
--- @return any
function GetHeliBodyHealth(heli) end

--- This is a getter for SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE
--- @param heli integer
--- @return any
function GetHeliDisableExplodeFromBodyDamage(heli) end

--- **Note** This native will always return `1000.0` unless SET_VEHICLE_BODY_HEALTH, SET_VEHICLE_ENGINE_HEALTH, or SET_VEHICLE_PETROL_TANK_HEALTH have been called with a value greater than `1000.0`.
--- @param heli integer
--- @return any
function GetHeliEngineHealth(heli) end

--- **Note** This native will always return `1000.0` unless SET_VEHICLE_BODY_HEALTH, SET_VEHICLE_ENGINE_HEALTH, or SET_VEHICLE_PETROL_TANK_HEALTH have been called with a value greater than `1000.0`.
--- @param heli integer
--- @return any
function GetHeliGasTankHealth(heli) end

--- @param heli integer
--- @return any
function GetHeliMainRotorDamageScale(heli) end

--- Max 1000. At 0 the main rotor will stall.
--- @param vehicle integer
--- @return any
function GetHeliMainRotorHealth(vehicle) end

--- @param vehicle integer
--- @return any
function GetHeliMainRotorHealth(vehicle) end

--- @param heli integer
--- @return any
function GetHeliPitchControl(heli) end

--- @param heli integer
--- @return any
function GetHeliRearRotorDamageScale(heli) end

--- This native is a getter for SET_HELI_TAIL_ROTOR_HEALTH
--- @param vehicle integer
--- @return any
function GetHeliRearRotorHealth(vehicle) end

--- @param heli integer
--- @return any
function GetHeliRollControl(heli) end

--- Max 1000. At -100 both helicopter rotors will stall.
--- @param vehicle integer
--- @return any
function GetHeliTailBoomHealth(vehicle) end

--- @param heli integer
--- @return any
function GetHeliTailRotorDamageScale(heli) end

--- NativeDB Introduced: v323
--- @param heli integer
--- @return any
function GetHeliTailRotorHealth(heli) end

--- **Note**: This native is deprecated, please use `GET_HELI_REAR_ROTOR_HEALTH` instead.
--- @param vehicle integer
--- @return any
function GetHeliTailRotorHealth(vehicle) end

--- @param heli integer
--- @return any
function GetHeliThrottleControl(heli) end

--- @param heli integer
--- @return any
function GetHeliYawControl(heli) end

--- @return any
function GetHostId() end

--- Gets hud color RGBA parameter values by passing a hud color index (hudColorIndex). HUD colors can be found here
--- @param hudColorIndex integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetHudColour(hudColorIndex) end

--- See SET_SCRIPT_GFX_ALIGN for details about how gfx align works.
--- @param id integer
--- @return integer
--- @return integer
function GetHudComponentAlign(id) end

--- @param id integer
--- @return any
function GetHudComponentName(id) end

--- @param id integer
--- @return any
function GetHudComponentPosition(id) end

--- @param id integer
--- @return any
function GetHudComponentSize(id) end

--- World to relative screen coords this world to screen will keep the text on screen. it will keep it in the screen pos
--- @param worldX number
--- @param worldY number
--- @param worldZ number
--- @return any
--- @return number
--- @return number
function GetHudScreenPositionFromWorldPosition(worldX, worldY, worldZ) end

--- NativeDB Introduced: v2372
--- @param vehicle integer
--- @param wheelId integer
--- @return any
function GetHydraulicWheelValue(vehicle, wheelId) end

--- x1, y1, z1 -- Coords of your ped model x2, y2, z2 -- Coords of the ped you want to switch to
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function GetIdealPlayerSwitchType(x1, y1, z1, x2, y2, z2) end

--- @return any
function GetIdOfThisThread() end

--- @param p0 any
--- @param p1 any
--- @return any
function GetIndexedItemInItemset(p0, p1) end

--- @return any
function GetIndexOfCurrentLevel() end

--- @return any
function GetInstanceId() end

--- Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0. Example for VB.NET Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetInteriorAtCoords(x, y, z) end

--- Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior. Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior)) Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts. Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
--- @param x number
--- @param y number
--- @param z number
--- @param interiorType string
--- @return any
function GetInteriorAtCoordsWithType(x, y, z, interiorType) end

--- Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
--- @param x number
--- @param y number
--- @param z number
--- @param typeHash integer
--- @return any
function GetInteriorAtCoordsWithTypehash(x, y, z, typeHash) end

--- @param interiorId integer
--- @return number
--- @return number
--- @return number
--- @return number
--- @return number
--- @return number
function GetInteriorEntitiesExtents(interiorId) end

--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetInteriorFromCollision(x, y, z) end

--- Returns the handle of the interior that the entity is in. Returns 0 if outside.
--- @param entity integer
--- @return any
function GetInteriorFromEntity(entity) end

--- NativeDB Introduced: v1604
--- @return any
function GetInteriorFromPrimaryView() end

--- Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.
--- @param interior integer
--- @return any
function GetInteriorGroupId(interior) end

--- NativeDB Introduced: v1493
--- @param interior integer
--- @return any
function GetInteriorHeading(interior) end

--- NativeDB Introduced: v1290
--- @param interior integer
--- @return vector3
--- @return integer
function GetInteriorLocationAndNamehash(interior) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param cornerIndex integer
--- @return number
--- @return number
--- @return number
function GetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex) end

--- @param interiorId integer
--- @return any
function GetInteriorPortalCount(interiorId) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param entityIndex integer
--- @return any
function GetInteriorPortalEntityArchetype(interiorId, portalIndex, entityIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @return any
function GetInteriorPortalEntityCount(interiorId, portalIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param entityIndex integer
--- @return any
function GetInteriorPortalEntityFlag(interiorId, portalIndex, entityIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param entityIndex integer
--- @return number
--- @return number
--- @return number
function GetInteriorPortalEntityPosition(interiorId, portalIndex, entityIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param entityIndex integer
--- @return number
--- @return number
--- @return number
--- @return number
function GetInteriorPortalEntityRotation(interiorId, portalIndex, entityIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @return any
function GetInteriorPortalFlag(interiorId, portalIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @return any
function GetInteriorPortalRoomFrom(interiorId, portalIndex) end

--- @param interiorId integer
--- @param portalIndex integer
--- @return any
function GetInteriorPortalRoomTo(interiorId, portalIndex) end

--- @param interiorId integer
--- @return number
--- @return number
--- @return number
function GetInteriorPosition(interiorId) end

--- @param interiorId integer
--- @return any
function GetInteriorRoomCount(interiorId) end

--- @param interiorId integer
--- @param roomIndex integer
--- @return number
--- @return number
--- @return number
--- @return number
--- @return number
--- @return number
function GetInteriorRoomExtents(interiorId, roomIndex) end

--- @param interiorId integer
--- @param roomIndex integer
--- @return any
function GetInteriorRoomFlag(interiorId, roomIndex) end

--- @param interiorId integer
--- @param roomHash integer
--- @return any
function GetInteriorRoomIndexByHash(interiorId, roomHash) end

--- @param interiorId integer
--- @param roomIndex integer
--- @return any
function GetInteriorRoomName(interiorId, roomIndex) end

--- @param interiorId integer
--- @param roomIndex integer
--- @return any
function GetInteriorRoomTimecycle(interiorId, roomIndex) end

--- @param interiorId integer
--- @return number
--- @return number
--- @return number
--- @return number
function GetInteriorRotation(interiorId) end

--- @return any
function GetInvokingResource() end

--- NativeDB Introduced: v1604
--- @param entity integer
--- @param p1 any
--- @return any
function GetIsArenaPropPhysicsDisabled(entity, p1) end

--- Returns true if profile setting 208 is equal to 0.
--- @return any
function GetIsAutoSaveOff() end

--- Checks whether the specified boat vehicle is capsized, meaning it has overturned or is upside down in the water.
--- @param vehicle integer
--- @return any
function GetIsBoatCapsized(vehicle) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function GetIsDoorValid(vehicle, doorIndex) end

--- @param heli integer
--- @return any
function GetIsHeliEngineRunning(heli) end

--- This native indicates whether the game is running in high-definition (HD) resolution. It returns `false` if the resolution is less than `1280x720` and `true` if it's equal to or greater than `1280x720`. NativeDB Introduced: v323
--- @return any
function GetIsHidef() end

--- From the driver's perspective, is the left headlight broken.
--- @param vehicle integer
--- @return any
function GetIsLeftVehicleHeadlightDamaged(vehicle) end

--- @return any
function GetIsLoadingScreenActive() end

--- gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
--- @param ped integer
--- @param gadgetHash integer
--- @return any
function GetIsPedGadgetEquipped(ped, gadgetHash) end

--- @param xCoord number
--- @param yCoord number
--- @param zCoord number
--- @param radius number
--- @return any
function GetIsPetrolDecalInRange(xCoord, yCoord, zCoord, radius) end

--- @param playerId integer
--- @return any
function GetIsPlayerDrivingOnHighway(playerId) end

--- Although we don't have a jenkins hash for this one, the name is 100% confirmed.
--- @return any
function GetIsPlayerInAnimalForm() end

--- @return any
function GetIsPreloadedConversationReady() end

--- From the driver's perspective, is the right headlight broken.
--- @param vehicle integer
--- @return any
function GetIsRightVehicleHeadlightDamaged(vehicle) end

--- Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
--- @param ped integer
--- @param taskIndex integer
--- @return any
function GetIsTaskActive(ped, taskIndex) end

--- Returns profile setting 225.
--- @return any
function GetIsUsingAlternateDriveby() end

--- Checks if the vehicle is electric. NativeDB Introduced: v3258
--- @param vehicleModel integer
--- @return any
function GetIsVehicleElectric(vehicleModel) end

--- Returns whether this vehicle is currently disabled by an EMP mine. NativeDB Introduced: v1604
--- @param vehicle integer
--- @return any
function GetIsVehicleEmpDisabled(vehicle) end

--- Returns true when in a vehicle, false whilst entering/exiting.
--- @param vehicle integer
--- @return any
function GetIsVehicleEngineRunning(vehicle) end

--- @param vehicle integer
--- @return any
function GetIsVehicleEngineRunning(vehicle) end

--- @param vehicle integer
--- @return any
function GetIsVehiclePrimaryColourCustom(vehicle) end

--- @param vehicle integer
--- @return any
function GetIsVehiclePrimaryColourCustom(vehicle) end

--- Check if Vehicle Secondary is avaliable for customize
--- @param vehicle integer
--- @return any
function GetIsVehicleSecondaryColourCustom(vehicle) end

--- @param vehicle integer
--- @return any
function GetIsVehicleSecondaryColourCustom(vehicle) end

--- NativeDB Introduced: v1604
--- @param vehicle integer
--- @return any
function GetIsVehicleShuntBoostActive(vehicle) end

--- @param name string
--- @return any
function GetIsWaypointRecordingLoaded(name) end

--- @param vehicle integer
--- @return any
function GetIsWheelsLoweredStateActive(vehicle) end

--- This native retrieves whether the game is running in widescreen mode or not. NativeDB Introduced: v323
--- @return any
function GetIsWidescreen() end

--- @param x integer
--- @return any
function GetItemsetSize(x) end

--- @param ped integer
--- @return any
function GetJackTarget(ped) end

--- Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
--- @param entity integer
--- @return any
function GetKeyForEntityInRoom(entity) end

--- Landing gear states: 0: Deployed 1: Closing (Retracting) 3: Opening (Deploying) 4: Retracted 5: Broken Landing gear state 2 is never used.
--- @param vehicle integer
--- @return any
function GetLandingGearState(vehicle) end

--- See the client-side GET_LANDING_GEAR_STATE native for a description of landing gear states.
--- @param vehicle integer
--- @return any
function GetLandingGearState(vehicle) end

--- @return any
function GetLastDrivenVehicle() end

--- @param entity integer
--- @return any
function GetLastMaterialHitByEntity(entity) end

--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function GetLastPedInVehicleSeat(vehicle, seatIndex) end

--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function GetLastPedInVehicleSeat(vehicle, seatIndex) end

--- Returns last vehicle that was rammed by the given vehicle using the shunt boost. NativeDB Introduced: v1604
--- @param vehicle integer
--- @return any
function GetLastRammedVehicle(vehicle) end

--- Returns the length of the string passed (much like strlen).
--- @param string string
--- @return any
function GetLengthOfLiteralString(string) end

--- @param string string
--- @return any
function GetLengthOfLiteralStringInBytes(string) end

--- Returns the string length of the string from the gxt string .
--- @param gxt string
--- @return any
function GetLengthOfStringWithThisTextLabel(gxt) end

--- Determines whether a line segment intersects a plane and, if so, returns the parameter value at which this intersection occurs. NativeDB Introduced: v323
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param planeX number
--- @param planeY number
--- @param planeZ number
--- @param planeNormalX number
--- @param planeNormalY number
--- @param planeNormalZ number
--- @return any
--- @return number
function GetLinePlaneIntersection(x1, y1, z1, x2, y2, z2, planeX, planeY, planeZ, planeNormalX, planeNormalY, planeNormalZ) end

--- Second Param = LiveryIndex example int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh); for (int i = 0; i < count; i++) { char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i); } this example will work fine to fetch all names for example for Sanchez we get SANC_LV1 SANC_LV2 SANC_LV3 SANC_LV4 SANC_LV5 Use _GET_LABEL_TEXT, to get the localized livery name. ----------- NOTE: You may need to set the vehicle's modKit to 0 by using this function: SET_VEHICLE_MOD_KIT() before getting the name, otherwise this native may return NULL. dev-c.com/nativedb/func/info/1f2aa07f00b3217a
--- @param vehicle integer
--- @param liveryIndex integer
--- @return any
function GetLiveryName(vehicle, liveryIndex) end

--- Returns the local player's targeting mode. See `SET_PLAYER_TARGETING_MODE`.
--- @return any
function GetLocalPlayerAimState() end

--- Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.
--- @return any
function GetLocalPlayerAimState_2() end

--- Gets local system time as year, month, day, hour, minute and second. Example usage: int year; int month; int day; int hour; int minute; int second; or use std::tm struct TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetLocalTime() end

--- @param ped integer
--- @return any
function GetLockonDistanceOfCurrentPedWeapon(ped) end

--- @return any
function GetLodscale() end

--- @return any
function GetMainPlayerBlipId() end

--- Retrieves the manufacturer's name for a specified vehicle. NativeDB Introduced: v1868
--- @param modelHash integer
--- @return any
function GetMakeNameFromVehicleModel(modelHash) end

--- Retrieves the map data entity handle. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param mapDataHash integer
--- @param entityInternalIdx integer
--- @return any
--- @return integer
function GetMapdataEntityHandle(mapDataHash, entityInternalIdx) end

--- Returns mapdata's entity matrix. This function supports SDK infrastructure and is not intended to be used directly from your code. This should be used from JavaScript or another language supporting mutable buffers like ArrayBuffer. Matrix layout is as follows: * Element \[0], \[1] and \[2] should represent the right vector. * Element \[4], \[5] and \[6] should represent the forward vector. * Element \[8], \[9] and \[10] should represent the up vector. * Element \[12], \[13] and \[14] should represent X, Y and Z translation coordinates. * All other elements should be \[0, 0, 0, 1].
--- @param mapDataHash integer
--- @param entityInternalIdx integer
--- @param matrixPtr integer
--- @return any
function GetMapdataEntityMatrix(mapDataHash, entityInternalIdx, matrixPtr) end

--- Returns the transient map data index for a specified hash. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param mapdataHandle integer
--- @return any
function GetMapdataFromHashKey(mapdataHandle) end

--- Returns the zoom level data by index from mapzoomdata.meta file.
--- @param index integer
--- @return any
--- @return number
--- @return number
--- @return number
--- @return number
--- @return number
function GetMapZoomDataLevel(index) end

--- @param ped integer
--- @param weaponHash integer
--- @return any
--- @return integer
function GetMaxAmmo(ped, weaponHash) end

--- @param ped integer
--- @param ammoType integer
--- @return any
--- @return integer
function GetMaxAmmoByType(ped, ammoType) end

--- p2 is mostly 1 in the scripts.
--- @param ped integer
--- @param weaponHash integer
--- @param p2 boolean
--- @return any
function GetMaxAmmoInClip(ped, weaponHash, p2) end

--- This function is hard-coded to always return 96.
--- @return any
function GetMaximumNumberOfCloudPhotos() end

--- This function is hard-coded to always return 0.
--- @return any
function GetMaximumNumberOfPhotos() end

--- @return any
function GetMaxNumNetworkObjects() end

--- @return any
function GetMaxNumNetworkPeds() end

--- @return any
function GetMaxNumNetworkPickups() end

--- @return any
function GetMaxNumNetworkVehicles() end

--- @param ped integer
--- @return any
function GetMaxRangeOfCurrentPedWeapon(ped) end

--- Gets the maximum wanted level the player can get. Ranges from 0 to 5.
--- @return any
function GetMaxWantedLevel() end

--- @param ped integer
--- @return any
function GetMeleeTargetForPed(ped) end

--- p0 was always 0xAE2602A3.
--- @param p0 integer
--- @return any
--- @return any
function GetMenuPedBoolStat(p0) end

--- @param p0 any
--- @return any
--- @return number
function GetMenuPedFloatStat(p0) end

--- @param p0 any
--- @return any
--- @return any
function GetMenuPedIntStat(p0) end

--- @param p0 any
--- @param p2 any
--- @param p3 any
--- @return any
--- @return any
function GetMenuPedMaskedIntStat(p0, p2, p3) end

--- Returns how many real ms are equal to one game minute. A getter for `SetMillisecondsPerGameMinute`.
--- @return any
function GetMillisecondsPerGameMinute() end

--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetMinimapFowCoordinateIsRevealed(x, y, z) end

--- @return any
function GetMinimapFowDiscoveryRatio() end

--- @return any
function GetMissionFlag() end

--- @return vector3
function GetMobilePhonePosition() end

--- @return integer
function GetMobilePhoneRenderId() end

--- @param p1 integer
--- @return vector3
function GetMobilePhoneRotation(p1) end

--- Gets the dimensions of a model. Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is. Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
--- @param modelHash integer
--- @return vector3
--- @return vector3
function GetModelDimensions(modelHash) end

--- @param vehicle integer
--- @param modType integer
--- @return any
function GetModSlotName(vehicle, modType) end

--- Returns the text label of a mod type for a given vehicle Use _GET_LABEL_TEXT to get the part name in the game's language
--- @param vehicle integer
--- @param modType integer
--- @param modValue integer
--- @return any
function GetModTextLabel(vehicle, modType, modValue) end

--- Function just returns 0 void __fastcall ped__get_mount(NativeContext *a1) { NativeContext *v1; // rbx@1 v1 = a1; GetAddressOfPedFromScriptHandle(a1->Args->Arg1); v1->Returns->Item1= 0; }
--- @param ped integer
--- @return any
function GetMount(ped) end

--- @return any
function GetMusicPlaytime() end

--- @return any
function GetMusicVolSlider() end

--- @param name string
--- @return any
function GetNamedRendertargetRenderId(name) end

--- @param threadId integer
--- @return any
function GetNameOfThread(threadId) end

--- AIRP = Los Santos International Airport ALAMO = Alamo Sea ALTA = Alta ARMYB = Fort Zancudo BANHAMC = Banham Canyon Dr BANNING = Banning BEACH = Vespucci Beach BHAMCA = Banham Canyon BRADP = Braddock Pass BRADT = Braddock Tunnel BURTON = Burton CALAFB = Calafia Bridge CANNY = Raton Canyon CCREAK = Cassidy Creek CHAMH = Chamberlain Hills CHIL = Vinewood Hills CHU = Chumash CMSW = Chiliad Mountain State Wilderness CYPRE = Cypress Flats DAVIS = Davis DELBE = Del Perro Beach DELPE = Del Perro DELSOL = La Puerta DESRT = Grand Senora Desert DOWNT = Downtown DTVINE = Downtown Vinewood EAST_V = East Vinewood EBURO = El Burro Heights ELGORL = El Gordo Lighthouse ELYSIAN = Elysian Island GALFISH = Galilee GOLF = GWC and Golfing Society GRAPES = Grapeseed GREATC = Great Chaparral HARMO = Harmony HAWICK = Hawick HORS = Vinewood Racetrack HUMLAB = Humane Labs and Research JAIL = Bolingbroke Penitentiary KOREAT = Little Seoul LACT = Land Act Reservoir LAGO = Lago Zancudo LDAM = Land Act Dam LEGSQU = Legion Square LMESA = La Mesa LOSPUER = La Puerta MIRR = Mirror Park MORN = Morningwood MOVIE = Richards Majestic MTCHIL = Mount Chiliad MTGORDO = Mount Gordo MTJOSE = Mount Josiah MURRI = Murrieta Heights NCHU = North Chumash NOOSE = N.O.O.S.E OCEANA = Pacific Ocean PALCOV = Paleto Cove PALETO = Paleto Bay PALFOR = Paleto Forest PALHIGH = Palomino Highlands PALMPOW = Palmer-Taylor Power Station PBLUFF = Pacific Bluffs PBOX = Pillbox Hill PROCOB = Procopio Beach RANCHO = Rancho RGLEN = Richman Glen RICHM = Richman ROCKF = Rockford Hills RTRAK = Redwood Lights Track SANAND = San Andreas SANCHIA = San Chianski Mountain Range SANDY = Sandy Shores SKID = Mission Row SLAB = Stab City STAD = Maze Bank Arena STRAW = Strawberry TATAMO = Tataviam Mountains TERMINA = Terminal TEXTI = Textile City TONGVAH = Tongva Hills TONGVAV = Tongva Valley VCANA = Vespucci Canals VESP = Vespucci VINE = Vinewood WINDF = Ron Alternates Wind Farm WVINE = West Vinewood ZANCUDO = Zancudo River ZP_ORT = Port of South Los Santos ZQ_UAR = Davis Quartz PROL = Prologue / North Yankton ISHeist = Cayo Perico Island
--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetNameOfZone(x, y, z) end

--- Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path. Return value of native is the same as GET_NAVMESH_ROUTE_RESULT Looks like the native returns an int for the path's state: 1 - ??? 2 - ??? 3 - Finished Generating
--- @param ped integer
--- @return any
--- @return number
--- @return boolean
function GetNavmeshRouteDistanceRemaining(ped) end

--- See `GET_NAVMESH_ROUTE_DISTANCE_REMAINING` for more details.
--- @param ped integer
--- @return any
function GetNavmeshRouteResult(ped) end

--- @param entity integer
--- @return any
function GetNearestPlayerToEntity(entity) end

--- @param entity integer
--- @param team integer
--- @return any
function GetNearestPlayerToEntityOnTeam(entity, team) end

--- @param soundId integer
--- @return any
function GetNetworkIdFromSoundId(soundId) end

--- @return any
function GetNetworkTime() end

--- Returns the same value as `GetNetworkTime` in freemode, but as opposed to `GetNetworkTime` it always gets the most recent time, instead of once per tick. Could be used for benchmarking since it can return times in ticks.
--- @return any
function GetNetworkTimeAccurate() end

--- @return any
function GetNetworkWalkMode() end

--- @return any
function GetNewSelectedMissionCreatorBlip() end

--- @return any
--- @return number
--- @return number
--- @return integer
function GetNextAudibleBeat() end

--- @param blipSprite integer
--- @return any
function GetNextBlipInfoId(blipSprite) end

--- Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX. NativeDB Removed Parameter 1: int index
--- @param index integer
--- @return any
function GetNextGpsDisabledZoneIndex(index) end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @return any
function GetNextWeatherTypeHashName() end

--- Needs more research. Gets the stat name of a masked bool? section - values used in the decompiled scripts: "_NGPSTAT_BOOL" "_NGTATPSTAT_BOOL" "_NGDLCPSTAT_BOOL" "_DLCBIKEPSTAT_BOOL" "_DLCGUNPSTAT_BOOL" "_GUNTATPSTAT_BOOL" "_DLCSMUGCHARPSTAT_BOOL" "_GANGOPSPSTAT_BOOL" "_BUSINESSBATPSTAT_BOOL" "_ARENAWARSPSTAT_BOOL" "_CASINOPSTAT_BOOL" "_CASINOHSTPSTAT_BOOL" "_HEIST3TATTOOSTAT_BOOL"
--- @param index integer
--- @param spStat boolean
--- @param charStat boolean
--- @param character integer
--- @param section string
--- @return any
function GetNgstatBoolHash(index, spStat, charStat, character, section) end

--- Needs more research. Gets the stat name of a masked int? section - values used in the decompiled scripts: "_NGPSTAT_INT" "_MP_NGPSTAT_INT" "_MP_LRPSTAT_INT" "_MP_APAPSTAT_INT" "_MP_LR2PSTAT_INT" "_MP_BIKEPSTAT_INT" "_MP_IMPEXPPSTAT_INT" "_MP_GUNRPSTAT_INT" "_NGDLCPSTAT_INT" "_MP_NGDLCPSTAT_INT" "_DLCSMUGCHARPSTAT_INT" "_GANGOPSPSTAT_INT" "_BUSINESSBATPSTAT_INT" "_ARENAWARSPSTAT_INT" "_CASINOPSTAT_INT" "_CASINOHSTPSTAT_INT"
--- @param index integer
--- @param spStat boolean
--- @param charStat boolean
--- @param character integer
--- @param section string
--- @return any
function GetNgstatIntHash(index, spStat, charStat, character, section) end

--- @return any
function GetNoLoadingScreen() end

--- @return any
function GetNorthRadarBlip() end

--- @param x number
--- @param y number
--- @param z number
--- @param nthClosest integer
--- @param unknown1 any
--- @param unknown2 any
--- @param unknown3 any
--- @return any
--- @return vector3
function GetNthClosestVehicleNode(x, y, z, nthClosest, unknown1, unknown2, unknown3) end

--- See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water p10 always equal 0x40400000 p11 always equal 0
--- @param x number
--- @param y number
--- @param z number
--- @param desiredX number
--- @param desiredY number
--- @param desiredZ number
--- @param nthClosest integer
--- @param nodetype integer
--- @param p10 number
--- @param p11 any
--- @return any
--- @return vector3
--- @return number
function GetNthClosestVehicleNodeFavourDirection(x, y, z, desiredX, desiredY, desiredZ, nthClosest, nodetype, p10, p11) end

--- Returns the id.
--- @param x number
--- @param y number
--- @param z number
--- @param nth integer
--- @param nodetype integer
--- @param p5 number
--- @param p6 number
--- @return any
function GetNthClosestVehicleNodeId(x, y, z, nth, nodetype, p5, p6) end

--- @param x number
--- @param y number
--- @param z number
--- @param nthClosest integer
--- @param p6 any
--- @param p7 number
--- @param p8 number
--- @return any
--- @return vector3
--- @return number
function GetNthClosestVehicleNodeIdWithHeading(x, y, z, nthClosest, p6, p7, p8) end

--- Get the nth closest vehicle node with its heading and total lane count. If you need specific forward and backward lane counts use GET_CLOSEST_ROAD cpp enum eNodeFlags { NONE = 0, INCLUDE_SWITCHED_OFF_NODES = 1, INCLUDE_BOAT_NODES = 2, IGNORE_SLIPLANES = 4, IGNORE_SWITCHED_OFF_DEAD_ENDS = 8, }
--- @param x number
--- @param y number
--- @param z number
--- @param nthClosest integer
--- @param searchFlags integer
--- @param zMeasureMult number
--- @param zTolerance number
--- @return any
--- @return vector3
--- @return number
--- @return integer
function GetNthClosestVehicleNodeWithHeading(x, y, z, nthClosest, searchFlags, zMeasureMult, zTolerance) end

--- @return integer
--- @return integer
function GetNuiCursorPosition() end

--- @return any
function GetNumberOfActiveBlips() end

--- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
--- @param eventGroup integer
--- @return any
function GetNumberOfEvents(eventGroup) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function GetNumberOfFiresInRange(x, y, z, radius) end

--- @param stackSize integer
--- @return any
function GetNumberOfFreeStacksOfThisSize(stackSize) end

--- An analogue of GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS that returns number of drawable variations inside a single collection instead of the total number across all collections.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @return any
function GetNumberOfPedCollectionDrawableVariations(ped, componentId, collection) end

--- An analogue of GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS that returns number of prop variations inside a single collection instead of the total number across all collections.
--- @param ped integer
--- @param anchorPoint integer
--- @param collection string
--- @return any
function GetNumberOfPedCollectionPropDrawableVariations(ped, anchorPoint, collection) end

--- An alternative to GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS that uses local collection indexing instead of the global one.
--- @param ped integer
--- @param anchorPoint integer
--- @param collection string
--- @param propIndex integer
--- @return any
function GetNumberOfPedCollectionPropTextureVariations(ped, anchorPoint, collection, propIndex) end

--- An alternative to GET_NUMBER_OF_PED_TEXTURE_VARIATIONS that uses local collection indexing instead of the global one.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @param drawableId integer
--- @return any
function GetNumberOfPedCollectionTextureVariations(ped, componentId, collection, drawableId) end

--- @param ped integer
--- @param componentId integer
--- @return any
function GetNumberOfPedDrawableVariations(ped, componentId) end

--- @param ped integer
--- @param propId integer
--- @return any
function GetNumberOfPedPropDrawableVariations(ped, propId) end

--- Need to check behavior when drawableId = -1
--- @param ped integer
--- @param propId integer
--- @param drawableId integer
--- @return any
function GetNumberOfPedPropTextureVariations(ped, propId, drawableId) end

--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @return any
function GetNumberOfPedTextureVariations(ped, componentId, drawableId) end

--- Gets the number of players in the current session. If not multiplayer, always returns 1.
--- @return any
function GetNumberOfPlayers() end

--- NativeDB Introduced: v1180
--- @param team integer
--- @return any
function GetNumberOfPlayersInTeam(team) end

--- Gets the number of instances of the specified script is currently running. Actually returns numRefs - 1. if (program) v3 = rage::scrProgram::GetNumRefs(program) - 1; return v3;
--- @param scriptHash integer
--- @return any
function GetNumberOfReferencesOfScriptWithNameHash(scriptHash) end

--- @return any
function GetNumberOfStreamingRequests() end

--- Actually number of color combinations
--- @param vehicle integer
--- @return any
function GetNumberOfVehicleColours(vehicle) end

--- @param vehicle integer
--- @return any
function GetNumberOfVehicleDoors(vehicle) end

--- Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
--- @return any
function GetNumberOfVehicleNumberPlates() end

--- @return any
function GetNumCommerceItems() end

--- @param p0 boolean
--- @return any
function GetNumCreatedMissionObjects(p0) end

--- @param p0 boolean
--- @return any
function GetNumCreatedMissionPeds(p0) end

--- @param p0 boolean
--- @return any
function GetNumCreatedMissionVehicles(p0) end

--- @param dispatchService integer
--- @return any
function GetNumDispatchedUnitsForPlayer(dispatchService) end

--- Returns the total number of DLC vehicles.
--- @return any
function GetNumDlcVehicles() end

--- Returns the total number of DLC weapon components.
--- @param dlcWeaponIndex integer
--- @return any
function GetNumDlcWeaponComponents(dlcWeaponIndex) end

--- Returns the total number of DLC weapon components that are available in SP. NativeDB Introduced: v2060
--- @param dlcWeaponIndex integer
--- @return any
function GetNumDlcWeaponComponentsSp(dlcWeaponIndex) end

--- Returns the total number of DLC weapons.
--- @return any
function GetNumDlcWeapons() end

--- Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta). NativeDB Introduced: v2060
--- @return any
function GetNumDlcWeaponsSp() end

--- Used for freemode (online) characters.
--- @return any
function GetNumHairColors() end

--- @return any
function GetNumMakeupColors() end

--- paintType: 0: Normal 1: Metallic 2: Pearl 3: Matte 4: Metal 5: Chrome
--- @param paintType integer
--- @param p1 boolean
--- @return any
function GetNumModColors(paintType, p1) end

--- @param vehicle integer
--- @return any
function GetNumModKits(vehicle) end

--- @param posMinX number
--- @param posMinY number
--- @param posMinZ number
--- @param posMaxX number
--- @param posMaxY number
--- @param posMaxZ number
--- @return any
function GetNumNavmeshesExistingInArea(posMinX, posMinY, posMinZ, posMaxX, posMaxY, posMaxZ) end

--- @param playerSrc integer+
--- @return any
function GetNumPlayerIdentifiers(playerSrc) end

--- @return any
function GetNumPlayerIndices() end

--- @param playerSrc integer+
--- @return any
function GetNumPlayerTokens(playerSrc) end

--- p0 appears to be for MP NativeDB Added Parameter 2: Any p1
--- @param p0 boolean
--- @return any
function GetNumReservedMissionObjects(p0) end

--- p0 appears to be for MP NativeDB Added Parameter 2: Any p1
--- @param p0 boolean
--- @return any
function GetNumReservedMissionPeds(p0) end

--- p0 appears to be for MP NativeDB Added Parameter 2: Any p1
--- @param p0 boolean
--- @return any
function GetNumReservedMissionVehicles(p0) end

--- Gets the amount of metadata values with the specified key existing in the specified resource's manifest. See also: Resource manifest
--- @param resourceName string
--- @param metadataKey string
--- @return any
function GetNumResourceMetadata(resourceName, metadataKey) end

--- @return any
function GetNumResources() end

--- @return any
function GetNumSuccessfulStuntJumps() end

--- Character types: 0 = Michael, 1 = Franklin, 2 = Trevor, 3 = MPMale, 4 = MPFemale
--- @param character integer
--- @return any
function GetNumTattooShopDlcItems(character) end

--- @return any
function GetNumUnlockedRadioStations() end

--- Returns how many possible mods a vehicle has for a given mod type
--- @param vehicle integer
--- @param modType integer
--- @return any
function GetNumVehicleMods(vehicle, modType) end

--- @return any
function GetNumVehicleWindowTints() end

--- @param p0 any
--- @param p1 boolean
--- @return any
function GetObjectFragmentDamageHealth(p0, p1) end

--- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param entity integer
--- @return any
function GetObjectIndexFromEntityIndex(entity) end

--- @param object integer
--- @return any
function GetObjectTextureVariation(object) end

--- Calculates the world coordinates after applying the specified offsets to the given position, relative to a certain heading. This native is similar to `GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS`, but uses a world position and heading as the reference point.
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param heading number
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @return any
function GetOffsetFromCoordAndHeadingInWorldCoords(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset) end

--- Converts world coords (posX - Z) to coords relative to the entity Example: posX = 50 posY = 1000 posZ = 60 Entity's coords are: x=30, y=1000, z=60. All three returned coords will then be in range of [-20,20] depending on rotation of the entity.
--- @param entity integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @return any
function GetOffsetFromEntityGivenWorldCoords(entity, posX, posY, posZ) end

--- Offset values are relative to the entity. x = left/right y = forward/backward z = up/down
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @return any
function GetOffsetFromEntityInWorldCoords(entity, offsetX, offsetY, offsetZ) end

--- @param interior integer
--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetOffsetFromInteriorInWorldCoords(interior, x, y, z) end

--- Online version is defined here: update\update.rpf\common\data\version.txt Example: [ONLINE_VERSION_NUMBER] 1.33 _GET_ONLINE_VERSION() will return "1.33"
--- @return any
function GetOnlineVersion() end

--- Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
--- @return any
function GetOnscreenKeyboardResult() end

--- @param index integer
--- @param spStat boolean
--- @param charStat boolean
--- @param character integer
--- @return any
function GetPackedBoolStatKey(index, spStat, charStat, character) end

--- @param index integer
--- @param spStat boolean
--- @param charStat boolean
--- @param character integer
--- @return any
function GetPackedIntStatKey(index, spStat, charStat, character) end

--- @param index integer
--- @param spStat boolean
--- @param charStat boolean
--- @param character integer
--- @return any
function GetPackedTuBoolStatKey(index, spStat, charStat, character) end

--- @param index integer
--- @param spStat boolean
--- @param charStat boolean
--- @param character integer
--- @return any
function GetPackedTuIntStatKey(index, spStat, charStat, character) end

--- A getter for SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME.
--- @return any
function GetParkedVehicleDensityMultiplier() end

--- @param password string
--- @return any
function GetPasswordHash(password) end

--- Returns the world position the pointer is hovering on the pause map.
--- @return any
function GetPauseMapPointerWorldPosition() end

--- Name between `GET_ONSCREEN_KEYBOARD_RESULT` and `GET_PAUSE_MENU_STATE`. Likely, `GET_PAUSE_MENU_*`.
--- @return any
function GetPauseMenuCursorPosition() end

--- @return integer
--- @return integer
function GetPauseMenuSelection() end

--- lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000) selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item selectedItemUniqueId: this is uniqueID of the currently selected menu item when the pausemenu is closed: lastItemMenuId = -1 selectedItemMenuId = -1 selectedItemUniqueId = 0 when the header gains focus: lastItemMenuId updates as normal or 0 if the pausemenu was just opened selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened selectedItemUniqueId = -1 when focus is moved from the header to a pausemenu page: lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?) selectedItemMenuId = -1 selectedItemUniqueId updates as normal
--- @return integer
--- @return integer
--- @return integer
function GetPauseMenuSelectionData() end

--- cpp enum ePauseMenuState { PM_INACTIVE = 0, PM_STARTING_UP = 5, PM_RESTARTING = 10, PM_READY = 15, PM_IN_STORE = 20, PM_IN_SC_MENU = 25, PM_SHUTTING_DOWN = 30, PM_IN_VIDEOEDITOR = 35, }
--- @return any
function GetPauseMenuState() end

--- @param ped integer
--- @return any
function GetPedAccuracy(ped) end

--- Returns the ped's alertness (0-3). Values : 0 : Neutral 1 : Heard something (gun shot, hit, etc) 2 : Knows (the origin of the event) 3 : Fully alerted (is facing the event?) If the Ped does not exist, returns -1.
--- @param ped integer
--- @return any
function GetPedAlertness(ped) end

--- @param ped integer
--- @param ammoType integer
--- @return any
function GetPedAmmoByType(ped, ammoType) end

--- Returns the current ammo type of the specified ped's specified weapon. MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached. Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
--- @param ped integer
--- @param weaponHash integer
--- @return any
function GetPedAmmoTypeFromWeapon(ped, weaponHash) end

--- Returns the base/default ammo type of the specified ped's specified weapon. Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
--- @param ped integer
--- @param weaponHash integer
--- @return any
function GetPedAmmoTypeFromWeapon_2(ped, weaponHash) end

--- @param ped integer
--- @return any
function GetPedArmour(ped) end

--- @param ped integer
--- @return any
function GetPedArmour(ped) end

--- @param groupID integer
--- @return any
function GetPedAsGroupLeader(groupID) end

--- from fm_mission_controller.c4 (variable names changed for clarity): int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID()); PED::GET_GROUP_SIZE(group, &unused, &groupSize); if (groupSize >= 1) { . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) { . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber); . . . . . . . . //and so on
--- @param groupID integer
--- @param memberNumber integer
--- @return any
function GetPedAsGroupMember(groupID, memberNumber) end

--- Gets the position of the specified bone of the specified ped. ped: The ped to get the position of a bone from. boneId: The ID of the bone to get the position from. This is NOT the index. offsetX: The X-component of the offset to add to the position relative to the bone's rotation. offsetY: The Y-component of the offset to add to the position relative to the bone's rotation. offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
--- @param ped integer
--- @param boneId integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @return any
function GetPedBoneCoords(ped, boneId, offsetX, offsetY, offsetZ) end

--- cpp enum ePedBoneId : uint16_t { SKEL_ROOT = 0x0, SKEL_Pelvis = 0x2E28, SKEL_L_Thigh = 0xE39F, SKEL_L_Calf = 0xF9BB, SKEL_L_Foot = 0x3779, SKEL_L_Toe0 = 0x83C, EO_L_Foot = 0x84C5, EO_L_Toe = 0x68BD, IK_L_Foot = 0xFEDD, PH_L_Foot = 0xE175, MH_L_Knee = 0xB3FE, SKEL_R_Thigh = 0xCA72, SKEL_R_Calf = 0x9000, SKEL_R_Foot = 0xCC4D, SKEL_R_Toe0 = 0x512D, EO_R_Foot = 0x1096, EO_R_Toe = 0x7163, IK_R_Foot = 0x8AAE, PH_R_Foot = 0x60E6, MH_R_Knee = 0x3FCF, RB_L_ThighRoll = 0x5C57, RB_R_ThighRoll = 0x192A, SKEL_Spine_Root = 0xE0FD, SKEL_Spine0 = 0x5C01, SKEL_Spine1 = 0x60F0, SKEL_Spine2 = 0x60F1, SKEL_Spine3 = 0x60F2, SKEL_L_Clavicle = 0xFCD9, SKEL_L_UpperArm = 0xB1C5, SKEL_L_Forearm = 0xEEEB, SKEL_L_Hand = 0x49D9, SKEL_L_Finger00 = 0x67F2, SKEL_L_Finger01 = 0xFF9, SKEL_L_Finger02 = 0xFFA, SKEL_L_Finger10 = 0x67F3, SKEL_L_Finger11 = 0x1049, SKEL_L_Finger12 = 0x104A, SKEL_L_Finger20 = 0x67F4, SKEL_L_Finger21 = 0x1059, SKEL_L_Finger22 = 0x105A, SKEL_L_Finger30 = 0x67F5, SKEL_L_Finger31 = 0x1029, SKEL_L_Finger32 = 0x102A, SKEL_L_Finger40 = 0x67F6, SKEL_L_Finger41 = 0x1039, SKEL_L_Finger42 = 0x103A, PH_L_Hand = 0xEB95, IK_L_Hand = 0x8CBD, RB_L_ForeArmRoll = 0xEE4F, RB_L_ArmRoll = 0x1470, MH_L_Elbow = 0x58B7, SKEL_R_Clavicle = 0x29D2, SKEL_R_UpperArm = 0x9D4D, SKEL_R_Forearm = 0x6E5C, SKEL_R_Hand = 0xDEAD, SKEL_R_Finger00 = 0xE5F2, SKEL_R_Finger01 = 0xFA10, SKEL_R_Finger02 = 0xFA11, SKEL_R_Finger10 = 0xE5F3, SKEL_R_Finger11 = 0xFA60, SKEL_R_Finger12 = 0xFA61, SKEL_R_Finger20 = 0xE5F4, SKEL_R_Finger21 = 0xFA70, SKEL_R_Finger22 = 0xFA71, SKEL_R_Finger30 = 0xE5F5, SKEL_R_Finger31 = 0xFA40, SKEL_R_Finger32 = 0xFA41, SKEL_R_Finger40 = 0xE5F6, SKEL_R_Finger41 = 0xFA50, SKEL_R_Finger42 = 0xFA51, PH_R_Hand = 0x6F06, IK_R_Hand = 0x188E, RB_R_ForeArmRoll = 0xAB22, RB_R_ArmRoll = 0x90FF, MH_R_Elbow = 0xBB0, SKEL_Neck_1 = 0x9995, SKEL_Head = 0x796E, IK_Head = 0x322C, FACIAL_facialRoot = 0xFE2C, FB_L_Brow_Out_000 = 0xE3DB, FB_L_Lid_Upper_000 = 0xB2B6, FB_L_Eye_000 = 0x62AC, FB_L_CheekBone_000 = 0x542E, FB_L_Lip_Corner_000 = 0x74AC, FB_R_Lid_Upper_000 = 0xAA10, FB_R_Eye_000 = 0x6B52, FB_R_CheekBone_000 = 0x4B88, FB_R_Brow_Out_000 = 0x54C, FB_R_Lip_Corner_000 = 0x2BA6, FB_Brow_Centre_000 = 0x9149, FB_UpperLipRoot_000 = 0x4ED2, FB_UpperLip_000 = 0xF18F, FB_L_Lip_Top_000 = 0x4F37, FB_R_Lip_Top_000 = 0x4537, FB_Jaw_000 = 0xB4A0, FB_LowerLipRoot_000 = 0x4324, FB_LowerLip_000 = 0x508F, FB_L_Lip_Bot_000 = 0xB93B, FB_R_Lip_Bot_000 = 0xC33B, FB_Tongue_000 = 0xB987, RB_Neck_1 = 0x8B93, SPR_L_Breast = 0xFC8E, SPR_R_Breast = 0x885F, IK_Root = 0xDD1C, SKEL_Neck_2 = 0x5FD4, SKEL_Pelvis1 = 0xD003, SKEL_PelvisRoot = 0x45FC, SKEL_SADDLE = 0x9524, MH_L_CalfBack = 0x1013, MH_L_ThighBack = 0x600D, SM_L_Skirt = 0xC419, MH_R_CalfBack = 0xB013, MH_R_ThighBack = 0x51A3, SM_R_Skirt = 0x7712, SM_M_BackSkirtRoll = 0xDBB, SM_L_BackSkirtRoll = 0x40B2, SM_R_BackSkirtRoll = 0xC141, SM_M_FrontSkirtRoll = 0xCDBB, SM_L_FrontSkirtRoll = 0x9B69, SM_R_FrontSkirtRoll = 0x86F1, SM_CockNBalls_ROOT = 0xC67D, SM_CockNBalls = 0x9D34, MH_L_Finger00 = 0x8C63, MH_L_FingerBulge00 = 0x5FB8, MH_L_Finger10 = 0x8C53, MH_L_FingerTop00 = 0xA244, MH_L_HandSide = 0xC78A, MH_Watch = 0x2738, MH_L_Sleeve = 0x933C, MH_R_Finger00 = 0x2C63, MH_R_FingerBulge00 = 0x69B8, MH_R_Finger10 = 0x2C53, MH_R_FingerTop00 = 0xEF4B, MH_R_HandSide = 0x68FB, MH_R_Sleeve = 0x92DC, FACIAL_jaw = 0xB21, FACIAL_underChin = 0x8A95, FACIAL_L_underChin = 0x234E, FACIAL_chin = 0xB578, FACIAL_chinSkinBottom = 0x98BC, FACIAL_L_chinSkinBottom = 0x3E8F, FACIAL_R_chinSkinBottom = 0x9E8F, FACIAL_tongueA = 0x4A7C, FACIAL_tongueB = 0x4A7D, FACIAL_tongueC = 0x4A7E, FACIAL_tongueD = 0x4A7F, FACIAL_tongueE = 0x4A80, FACIAL_L_tongueE = 0x35F2, FACIAL_R_tongueE = 0x2FF2, FACIAL_L_tongueD = 0x35F1, FACIAL_R_tongueD = 0x2FF1, FACIAL_L_tongueC = 0x35F0, FACIAL_R_tongueC = 0x2FF0, FACIAL_L_tongueB = 0x35EF, FACIAL_R_tongueB = 0x2FEF, FACIAL_L_tongueA = 0x35EE, FACIAL_R_tongueA = 0x2FEE, FACIAL_chinSkinTop = 0x7226, FACIAL_L_chinSkinTop = 0x3EB3, FACIAL_chinSkinMid = 0x899A, FACIAL_L_chinSkinMid = 0x4427, FACIAL_L_chinSide = 0x4A5E, FACIAL_R_chinSkinMid = 0xF5AF, FACIAL_R_chinSkinTop = 0xF03B, FACIAL_R_chinSide = 0xAA5E, FACIAL_R_underChin = 0x2BF4, FACIAL_L_lipLowerSDK = 0xB9E1, FACIAL_L_lipLowerAnalog = 0x244A, FACIAL_L_lipLowerThicknessV = 0xC749, FACIAL_L_lipLowerThicknessH = 0xC67B, FACIAL_lipLowerSDK = 0x7285, FACIAL_lipLowerAnalog = 0xD97B, FACIAL_lipLowerThicknessV = 0xC5BB, FACIAL_lipLowerThicknessH = 0xC5ED, FACIAL_R_lipLowerSDK = 0xA034, FACIAL_R_lipLowerAnalog = 0xC2D9, FACIAL_R_lipLowerThicknessV = 0xC6E9, FACIAL_R_lipLowerThicknessH = 0xC6DB, FACIAL_nose = 0x20F1, FACIAL_L_nostril = 0x7322, FACIAL_L_nostrilThickness = 0xC15F, FACIAL_noseLower = 0xE05A, FACIAL_L_noseLowerThickness = 0x79D5, FACIAL_R_noseLowerThickness = 0x7975, FACIAL_noseTip = 0x6A60, FACIAL_R_nostril = 0x7922, FACIAL_R_nostrilThickness = 0x36FF, FACIAL_noseUpper = 0xA04F, FACIAL_L_noseUpper = 0x1FB8, FACIAL_noseBridge = 0x9BA3, FACIAL_L_nasolabialFurrow = 0x5ACA, FACIAL_L_nasolabialBulge = 0xCD78, FACIAL_L_cheekLower = 0x6907, FACIAL_L_cheekLowerBulge1 = 0xE3FB, FACIAL_L_cheekLowerBulge2 = 0xE3FC, FACIAL_L_cheekInner = 0xE7AB, FACIAL_L_cheekOuter = 0x8161, FACIAL_L_eyesackLower = 0x771B, FACIAL_L_eyeball = 0x1744, FACIAL_L_eyelidLower = 0x998C, FACIAL_L_eyelidLowerOuterSDK = 0xFE4C, FACIAL_L_eyelidLowerOuterAnalog = 0xB9AA, FACIAL_L_eyelashLowerOuter = 0xD7F6, FACIAL_L_eyelidLowerInnerSDK = 0xF151, FACIAL_L_eyelidLowerInnerAnalog = 0x8242, FACIAL_L_eyelashLowerInner = 0x4CCF, FACIAL_L_eyelidUpper = 0x97C1, FACIAL_L_eyelidUpperOuterSDK = 0xAF15, FACIAL_L_eyelidUpperOuterAnalog = 0x67FA, FACIAL_L_eyelashUpperOuter = 0x27B7, FACIAL_L_eyelidUpperInnerSDK = 0xD341, FACIAL_L_eyelidUpperInnerAnalog = 0xF092, FACIAL_L_eyelashUpperInner = 0x9B1F, FACIAL_L_eyesackUpperOuterBulge = 0xA559, FACIAL_L_eyesackUpperInnerBulge = 0x2F2A, FACIAL_L_eyesackUpperOuterFurrow = 0xC597, FACIAL_L_eyesackUpperInnerFurrow = 0x52A7, FACIAL_forehead = 0x9218, FACIAL_L_foreheadInner = 0x843, FACIAL_L_foreheadInnerBulge = 0x767C, FACIAL_L_foreheadOuter = 0x8DCB, FACIAL_skull = 0x4221, FACIAL_foreheadUpper = 0xF7D6, FACIAL_L_foreheadUpperInner = 0xCF13, FACIAL_L_foreheadUpperOuter = 0x509B, FACIAL_R_foreheadUpperInner = 0xCEF3, FACIAL_R_foreheadUpperOuter = 0x507B, FACIAL_L_temple = 0xAF79, FACIAL_L_ear = 0x19DD, FACIAL_L_earLower = 0x6031, FACIAL_L_masseter = 0x2810, FACIAL_L_jawRecess = 0x9C7A, FACIAL_L_cheekOuterSkin = 0x14A5, FACIAL_R_cheekLower = 0xF367, FACIAL_R_cheekLowerBulge1 = 0x599B, FACIAL_R_cheekLowerBulge2 = 0x599C, FACIAL_R_masseter = 0x810, FACIAL_R_jawRecess = 0x93D4, FACIAL_R_ear = 0x1137, FACIAL_R_earLower = 0x8031, FACIAL_R_eyesackLower = 0x777B, FACIAL_R_nasolabialBulge = 0xD61E, FACIAL_R_cheekOuter = 0xD32, FACIAL_R_cheekInner = 0x737C, FACIAL_R_noseUpper = 0x1CD6, FACIAL_R_foreheadInner = 0xE43, FACIAL_R_foreheadInnerBulge = 0x769C, FACIAL_R_foreheadOuter = 0x8FCB, FACIAL_R_cheekOuterSkin = 0xB334, FACIAL_R_eyesackUpperInnerFurrow = 0x9FAE, FACIAL_R_eyesackUpperOuterFurrow = 0x140F, FACIAL_R_eyesackUpperInnerBulge = 0xA359, FACIAL_R_eyesackUpperOuterBulge = 0x1AF9, FACIAL_R_nasolabialFurrow = 0x2CAA, FACIAL_R_temple = 0xAF19, FACIAL_R_eyeball = 0x1944, FACIAL_R_eyelidUpper = 0x7E14, FACIAL_R_eyelidUpperOuterSDK = 0xB115, FACIAL_R_eyelidUpperOuterAnalog = 0xF25A, FACIAL_R_eyelashUpperOuter = 0xE0A, FACIAL_R_eyelidUpperInnerSDK = 0xD541, FACIAL_R_eyelidUpperInnerAnalog = 0x7C63, FACIAL_R_eyelashUpperInner = 0x8172, FACIAL_R_eyelidLower = 0x7FDF, FACIAL_R_eyelidLowerOuterSDK = 0x1BD, FACIAL_R_eyelidLowerOuterAnalog = 0x457B, FACIAL_R_eyelashLowerOuter = 0xBE49, FACIAL_R_eyelidLowerInnerSDK = 0xF351, FACIAL_R_eyelidLowerInnerAnalog = 0xE13, FACIAL_R_eyelashLowerInner = 0x3322, FACIAL_L_lipUpperSDK = 0x8F30, FACIAL_L_lipUpperAnalog = 0xB1CF, FACIAL_L_lipUpperThicknessH = 0x37CE, FACIAL_L_lipUpperThicknessV = 0x38BC, FACIAL_lipUpperSDK = 0x1774, FACIAL_lipUpperAnalog = 0xE064, FACIAL_lipUpperThicknessH = 0x7993, FACIAL_lipUpperThicknessV = 0x7981, FACIAL_L_lipCornerSDK = 0xB1C, FACIAL_L_lipCornerAnalog = 0xE568, FACIAL_L_lipCornerThicknessUpper = 0x7BC, FACIAL_L_lipCornerThicknessLower = 0xDD42, FACIAL_R_lipUpperSDK = 0x7583, FACIAL_R_lipUpperAnalog = 0x51CF, FACIAL_R_lipUpperThicknessH = 0x382E, FACIAL_R_lipUpperThicknessV = 0x385C, FACIAL_R_lipCornerSDK = 0xB3C, FACIAL_R_lipCornerAnalog = 0xEE0E, FACIAL_R_lipCornerThicknessUpper = 0x54C3, FACIAL_R_lipCornerThicknessLower = 0x2BBA, MH_MulletRoot = 0x3E73, MH_MulletScaler = 0xA1C2, MH_Hair_Scale = 0xC664, MH_Hair_Crown = 0x1675, SM_Torch = 0x8D6, FX_Light = 0x8959, FX_Light_Scale = 0x5038, FX_Light_Switch = 0xE18E, BagRoot = 0xAD09, BagPivotROOT = 0xB836, BagPivot = 0x4D11, BagBody = 0xAB6D, BagBone_R = 0x937, BagBone_L = 0x991, SM_LifeSaver_Front = 0x9420, SM_R_Pouches_ROOT = 0x2962, SM_R_Pouches = 0x4141, SM_L_Pouches_ROOT = 0x2A02, SM_L_Pouches = 0x4B41, SM_Suit_Back_Flapper = 0xDA2D, SPR_CopRadio = 0x8245, SM_LifeSaver_Back = 0x2127, MH_BlushSlider = 0xA0CE, SKEL_Tail_01 = 0x347, SKEL_Tail_02 = 0x348, MH_L_Concertina_B = 0xC988, MH_L_Concertina_A = 0xC987, MH_R_Concertina_B = 0xC8E8, MH_R_Concertina_A = 0xC8E7, MH_L_ShoulderBladeRoot = 0x8711, MH_L_ShoulderBlade = 0x4EAF, MH_R_ShoulderBladeRoot = 0x3A0A, MH_R_ShoulderBlade = 0x54AF, FB_R_Ear_000 = 0x6CDF, SPR_R_Ear = 0x63B6, FB_L_Ear_000 = 0x6439, SPR_L_Ear = 0x5B10, FB_TongueA_000 = 0x4206, FB_TongueB_000 = 0x4207, FB_TongueC_000 = 0x4208, SKEL_L_Toe1 = 0x1D6B, SKEL_R_Toe1 = 0xB23F, SKEL_Tail_03 = 0x349, SKEL_Tail_04 = 0x34A, SKEL_Tail_05 = 0x34B, SPR_Gonads_ROOT = 0xBFDE, SPR_Gonads = 0x1C00, FB_L_Brow_Out_001 = 0xE3DB, FB_L_Lid_Upper_001 = 0xB2B6, FB_L_Eye_001 = 0x62AC, FB_L_CheekBone_001 = 0x542E, FB_L_Lip_Corner_001 = 0x74AC, FB_R_Lid_Upper_001 = 0xAA10, FB_R_Eye_001 = 0x6B52, FB_R_CheekBone_001 = 0x4B88, FB_R_Brow_Out_001 = 0x54C, FB_R_Lip_Corner_001 = 0x2BA6, FB_Brow_Centre_001 = 0x9149, FB_UpperLipRoot_001 = 0x4ED2, FB_UpperLip_001 = 0xF18F, FB_L_Lip_Top_001 = 0x4F37, FB_R_Lip_Top_001 = 0x4537, FB_Jaw_001 = 0xB4A0, FB_LowerLipRoot_001 = 0x4324, FB_LowerLip_001 = 0x508F, FB_L_Lip_Bot_001 = 0xB93B, FB_R_Lip_Bot_001 = 0xC33B, FB_Tongue_001 = 0xB987 };
--- @param ped integer
--- @param boneId integer
--- @return any
function GetPedBoneIndex(ped, boneId) end

--- Returns the hash of the weapon/model/object that killed the ped.
--- @param ped integer
--- @return any
function GetPedCauseOfDeath(ped) end

--- @param ped integer
--- @return any
function GetPedCauseOfDeath(ped) end

--- Gets local index inside a collection (which can be obtained using GET_PED_COLLECTION_NAME_FROM_DRAWABLE) for the given global drawable ID. The collection name and index are used in functions like SET_PED_COLLECTION_COMPONENT_VARIATION.
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @return any
function GetPedCollectionLocalIndexFromDrawable(ped, componentId, drawableId) end

--- Gets local index inside a collection (which can be obtained using GET_PED_COLLECTION_NAME_FROM_PROP) for the given global prop index. The collection name and index are used in functions like SET_PED_COLLECTION_PROP_INDEX.
--- @param ped integer
--- @param anchorPoint integer
--- @param propIndex integer
--- @return any
function GetPedCollectionLocalIndexFromProp(ped, anchorPoint, propIndex) end

--- Returns name of collection under given index for the given Ped. Collections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See SET_PED_COLLECTION_COMPONENT_VARIATION, SET_PED_COLLECTION_PROP_INDEX, GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS etc natives for more details on how to work with collections. `GET_PED_COLLECTION_NAME` can be used together with GET_PED_COLLECTIONS_COUNT to list all collections attached to Ped.
--- @param ped integer
--- @param index integer
--- @return any
function GetPedCollectionName(ped, index) end

--- Gets collection name for the given global drawable ID. Together with GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE is used to get collection and local index (inside the given collection) of the drawable. The collection name and index are used in functions like SET_PED_COLLECTION_COMPONENT_VARIATION.
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @return any
function GetPedCollectionNameFromDrawable(ped, componentId, drawableId) end

--- Gets collection name for the given global prop index. Together with GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP is used to get collection and local index (inside the given collection) of the prop. The collection name and index are used in functions like SET_PED_COLLECTION_PROP_INDEX.
--- @param ped integer
--- @param anchorPoint integer
--- @param propIndex integer
--- @return any
function GetPedCollectionNameFromProp(ped, anchorPoint, propIndex) end

--- Returns number of variation collections available for the given Ped. Collections are groups of drawable components or props available for the given Ped. Usually collection corresponds to a certain DLC or the base game. See SET_PED_COLLECTION_COMPONENT_VARIATION, SET_PED_COLLECTION_PROP_INDEX, GET_NUMBER_OF_PED_COLLECTION_DRAWABLE_VARIATIONS etc natives for more details on how to work with collections. `GET_PED_COLLECTIONS_COUNT` can be used together with GET_PED_COLLECTION_NAME to list all collections attached to Ped.
--- @param ped integer
--- @return any
function GetPedCollectionsCount(ped) end

--- @param ped integer
--- @return any
function GetPedCombatMovement(ped) end

--- @param ped integer
--- @return any
function GetPedCombatRange(ped) end

--- See `SET_PED_CONFIG_FLAG`.
--- @param ped integer
--- @param flagId integer
--- @param p2 boolean
--- @return any
function GetPedConfigFlag(ped, flagId, p2) end

--- @param ped integer
--- @return any
--- @return number
--- @return number
function GetPedCurrentMovementSpeed(ped) end

--- Returns a list of decorations applied to a ped. The data returned adheres to the following layout: [ [ collectionHash1, overlayHash1 ], ..., [c ollectionHashN, overlayHashN ] ] This command will return undefined data if invoked on a remote player ped.
--- @param ped integer
--- @return any
function GetPedDecorations(ped) end

--- @param ped integer
--- @return any
function GetPedDecorationsState(ped) end

--- cpp enum ePedDecorationZone { ZONE_TORSO = 0, ZONE_HEAD = 1, ZONE_LEFT_ARM = 2, ZONE_RIGHT_ARM = 3, ZONE_LEFT_LEG = 4, ZONE_RIGHT_LEG = 5, ZONE_UNKNOWN = 6, ZONE_NONE = 7 };
--- @param collection integer
--- @param overlay integer
--- @return any
function GetPedDecorationZoneFromHashes(collection, overlay) end

--- @param ped integer
--- @param p1 boolean
--- @return any
function GetPedDefensiveAreaPosition(ped, p1) end

--- A getter for SET_PED_DENSITY_MULTIPLIER_THIS_FRAME.
--- @return any
function GetPedDensityMultiplier() end

--- @param ped integer
--- @return any
function GetPedDesiredHeading(ped) end

--- @param ped integer
--- @return any
function GetPedDesiredMoveBlendRatio(ped) end

--- NativeDB Introduced: v2699
--- @param ped integer
--- @return any
function GetPedDiesInWater(ped) end

--- Returns global drawable index based on the local one. Is it a reverse to GET_PED_COLLECTION_NAME_FROM_DRAWABLE and GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE natives. Drawables are stored inside collections. Each collection usually corresponds to a certain DCL or the base game. If all drawables from all collections are placed into one continuous array - the global index will correspond to the index of drawable in such array. Local index is index of drawable in this array relative to the start of the given collection.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @param drawableId integer
--- @return any
function GetPedDrawableGlobalIndexFromCollection(ped, componentId, collection, drawableId) end

--- Ids 0 - Head 1 - Beard 2 - Hair 3 - Torso 4 - Legs 5 - Hands 6 - Foot 7 - Scarfs/Neck Accessories 8 - Accessories 1 9 - Accessories 2 10- Decals 11 - Auxiliary parts for torso
--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedDrawableVariation(ped, componentId) end

--- An analogue to GET_PED_DRAWABLE_VARIATION that returns collection local drawable index (inside GET_PED_DRAWABLE_VARIATION_COLLECTION_NAME collection) instead of the global drawable index.
--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedDrawableVariationCollectionLocalIndex(ped, componentId) end

--- An analogue to GET_PED_DRAWABLE_VARIATION that returns collection name instead of the global drawable index. Should be used together with GET_PED_DRAWABLE_VARIATION_COLLECTION_LOCAL_INDEX.
--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedDrawableVariationCollectionName(ped, componentId) end

--- Use `SetPedIlluminatedClothingGlowIntensity` to set the illuminated clothing glow intensity for a specific ped.
--- @param ped integer
--- @return any
function GetPedEmissiveIntensity(ped) end

--- @param ped integer
--- @return any
function GetPedEnveffScale(ped) end

--- NativeDB Introduced: v2189
--- @param ped integer
--- @param eventType integer
--- @return any
--- @return any
function GetPedEventData(ped, eventType) end

--- Gets the offset the specified ped has moved since the previous tick. If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0. If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
--- @param ped integer
--- @param worldSpace boolean
--- @return any
function GetPedExtractedDisplacement(ped, worldSpace) end

--- A getter for `_SET_PED_EYE_COLOR`.
--- @param ped integer
--- @return any
function GetPedEyeColor(ped) end

--- A getter for \_SET_PED_EYE_COLOR. Returns -1 if fails to get.
--- @param ped integer
--- @return any
function GetPedEyeColor(ped) end

--- A getter for \_SET_PED_FACE_FEATURE. Returns 0.0 if fails to get.
--- @param ped integer
--- @param index integer
--- @return any
function GetPedFaceFeature(ped, index) end

--- Returns the group id of which the specified ped is a member of.
--- @param ped integer
--- @return any
function GetPedGroupIndex(ped) end

--- A getter for \_SET_PED_HAIR_COLOR. Returns -1 if fails to get.
--- @param ped integer
--- @return any
function GetPedHairColor(ped) end

--- A getter for \_SET_PED_HAIR_COLOR. Returns -1 if fails to get.
--- @param ped integer
--- @return any
function GetPedHairHighlightColor(ped) end

--- Input: Haircolor index, value between 0 and 63 (inclusive). Output: RGB values for the haircolor specified in the input. This is used with the hair color swatches scaleform. Use `_0x013E5CFC38CD5387` to get the makeup colors.
--- @param hairColorIndex integer
--- @return integer
--- @return integer
--- @return integer
function GetPedHairRgbColor(hairColorIndex) end

--- The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field. pass this struct in the second parameter typedef struct { int shapeFirst, shapeSecond, shapeThird; int skinFirst, skinSecond, skinThird; float shapeMix, skinMix, thirdMix; } headBlendData;
--- @param ped integer
--- @return any
--- @return any
function GetPedHeadBlendData(ped) end

--- Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc. Used when calling SET_PED_HEAD_BLEND_DATA.
--- @param type integer
--- @return any
function GetPedHeadBlendFirstIndex(type) end

--- Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
--- @param type integer
--- @return any
function GetPedHeadBlendNumHeads(type) end

--- A getter for SET_PED_HEAD_OVERLAY and \_SET_PED_HEAD_OVERLAY_COLOR natives.
--- @param ped integer
--- @param index integer
--- @return any
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return number
function GetPedHeadOverlayData(ped, index) end

--- Used with freemode (online) characters.
--- @param overlayID integer
--- @return any
function GetPedHeadOverlayNum(overlayID) end

--- Likely a char, if that overlay is not set, e.i. "None" option, returns 255; This might be the once removed native GET_PED_HEAD_OVERLAY.
--- @param ped integer
--- @param overlayID integer
--- @return any
function GetPedHeadOverlayValue(ped, overlayID) end

--- gtaforums.com/topic/885580-ped-headshotmugshot-txd/
--- @param id integer
--- @return any
function GetPedheadshotTxdString(id) end

--- @param ped integer
--- @return any
function GetPedHelmetStoredHatPropIndex(ped) end

--- @param ped integer
--- @return any
function GetPedHelmetStoredHatTexIndex(ped) end

--- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param entity integer
--- @return any
function GetPedIndexFromEntityIndex(entity) end

--- Gets the ped in the specified seat of the passed vehicle. If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity. **NativeDB Added Parameter 3**: BOOL p2 (uses a different GetOccupant function)
--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function GetPedInVehicleSeat(vehicle, seatIndex) end

--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function GetPedInVehicleSeat(vehicle, seatIndex) end

--- @param ped integer
--- @return any
--- @return integer
function GetPedLastDamageBone(ped) end

--- Pass ped. Pass address of Vector3. The coord will be put into the Vector3. The return will determine whether there was a coord found or not.
--- @param ped integer
--- @return any
--- @return vector3
function GetPedLastWeaponImpactCoord(ped) end

--- Input: Makeup color index, value between 0 and 63 (inclusive). Output: RGB values for the makeup color specified in the input. This is used with the makeup color swatches scaleform. Use `_0x4852FC386E2E1BB5` to get the hair colors.
--- @param makeupColorIndex integer
--- @return integer
--- @return integer
--- @return integer
function GetPedMakeupRgbColor(makeupColorIndex) end

--- @param ped integer
--- @return any
function GetPedMaxHealth(ped) end

--- @param ped integer
--- @return any
function GetPedMaxHealth(ped) end

--- Gets a ped model's personality type.
--- @param modelHash integer
--- @return any
function GetPedModelPersonality(modelHash) end

--- @param ped integer
--- @return any
function GetPedMoney(ped) end

--- @param ped integer
--- @return any
function GetPedMovementClipset(ped) end

--- Console/PC structure definitions and example: pastebin.com/SsFej963 For FiveM/Cfx.Re use-cases refer to: `GET_GAME_POOL`.
--- @param ped integer
--- @param ignore integer
--- @return any
--- @return integer
function GetPedNearbyPeds(ped, ignore) end

--- Returns size of array, passed into the second variable. See below for usage information. This function actually requires a struct, where the first value is the maximum number of elements to return. Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format. //Setup the array const int numElements = 10; const int arrSize = numElements * 2 + 2; Any veh[arrSize]; //0 index is the size of the array veh[0] = numElements; int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh); if (veh != NULL) { //Simple loop to go through results for (int i = 0; i < count; i++) { int offsettedID = i * 2 + 2; //Make sure it exists if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID])) { //Do something } } } Here's the right way to do it (console and pc): pastebin.com/SsFej963
--- @param ped integer
--- @return any
--- @return integer
function GetPedNearbyVehicles(ped) end

--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedPaletteVariation(ped, componentId) end

--- -1: no landing 0: landing on both feet 1: stumbling 2: rolling 3: ragdoll
--- @param ped integer
--- @return any
function GetPedParachuteLandingType(ped) end

--- Returns: -1: Normal 0: Wearing parachute on back 1: Parachute opening 2: Parachute open 3: Falling to doom (e.g. after exiting parachute) Normal means no parachute?
--- @param ped integer
--- @return any
function GetPedParachuteState(ped) end

--- @param ped integer
--- @return integer
function GetPedParachuteTintIndex(ped) end

--- An analogue to GET_PED_PROP_INDEX that returns collection local prop index (inside GET_PED_PROP_COLLECTION_NAME collection) instead of the global prop index.
--- @param ped integer
--- @param anchorPoint integer
--- @return any
function GetPedPropCollectionLocalIndex(ped, anchorPoint) end

--- An analogue to GET_PED_PROP_INDEX that returns collection name instead of the global drawable index. Should be used together with GET_PED_PROP_COLLECTION_LOCAL_INDEX.
--- @param ped integer
--- @param anchorPoint integer
--- @return any
function GetPedPropCollectionName(ped, anchorPoint) end

--- Returns global prop index based on the local one. Is it a reverse to GET_PED_COLLECTION_NAME_FROM_PROP and GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP natives. Props are stored inside collections. Each collection usually corresponds to a certain DCL or the base game. If all props from all collections are placed into one continuous array - the global index will correspond to the index of the prop in such array. Local index is index of the prop in this array relative to the start of the given collection.
--- @param ped integer
--- @param anchorPoint integer
--- @param collection string
--- @param propIndex integer
--- @return any
function GetPedPropGlobalIndexFromCollection(ped, anchorPoint, collection, propIndex) end

--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedPropIndex(ped, componentId) end

--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedPropTextureIndex(ped, componentId) end

--- @param ped integer
--- @param bone integer
--- @return any
function GetPedRagdollBoneIndex(ped, bone) end

--- @param ped integer
--- @return any
function GetPedRelationshipGroupDefaultHash(ped) end

--- @param ped integer
--- @return any
function GetPedRelationshipGroupHash(ped) end

--- Gets the current relationship group hash of a ped.
--- @param ped integer
--- @return any
function GetPedRelationshipGroupHash(ped) end

--- @param ped integer
--- @param flagId integer
--- @return any
function GetPedResetFlag(ped, flagId) end

--- Gets the script task command currently assigned to the ped.
--- @param ped integer
--- @return any
function GetPedScriptTaskCommand(ped) end

--- Gets the stage of the peds scripted task.
--- @param ped integer
--- @return any
function GetPedScriptTaskStage(ped) end

--- @param ped integer
--- @return any
function GetPedsJacker(ped) end

--- Get the last entity that damaged the ped. This native is used server side when using OneSync.
--- @param ped integer
--- @return any
function GetPedSourceOfDamage(ped) end

--- Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped' Is best to check if the Ped is dead before asking for its killer.
--- @param ped integer
--- @return any
function GetPedSourceOfDeath(ped) end

--- Get the entity that killed the ped. This native is used server side when using OneSync.
--- @param ped integer
--- @return any
function GetPedSourceOfDeath(ped) end

--- Gets the type of a ped's specific task given an index of the CPedTaskSpecificDataNode nodes. A ped will typically have a task at index 0, if a ped has multiple tasks at once they will be in the order 0, 1, 2, etc.
--- @param ped integer
--- @param index integer
--- @return any
function GetPedSpecificTaskType(ped, index) end

--- Returns whether the entity is in stealth mode
--- @param ped integer
--- @return any
function GetPedStealthMovement(ped) end

--- @param ped integer
--- @return any
function GetPedStealthMovement(ped) end

--- A getter for SET_PED_SWEAT.
--- @param ped integer
--- @return any
function GetPedSweat(ped) end

--- NativeDB Introduced: v2372
--- @param ped integer
--- @param p1 any
--- @return any
function GetPedTaskCombatTarget(ped, p1) end

--- @param ped integer
--- @param componentId integer
--- @return any
function GetPedTextureVariation(ped, componentId) end

--- @param ped integer
--- @return any
function GetPedTimeOfDeath(ped) end

--- Ped types: cpp enum ePedType { PED_TYPE_PLAYER_0 = 0, PED_TYPE_PLAYER_1 = 1, PED_TYPE_NETWORK_PLAYER = 2, PED_TYPE_PLAYER_2 = 3, PED_TYPE_CIVMALE = 4, PED_TYPE_CIVFEMALE = 5, PED_TYPE_COP = 6, PED_TYPE_GANG_ALBANIAN = 7, PED_TYPE_GANG_BIKER_1 = 8, PED_TYPE_GANG_BIKER_2 = 9, PED_TYPE_GANG_ITALIAN = 10, PED_TYPE_GANG_RUSSIAN = 11, PED_TYPE_GANG_RUSSIAN_2 = 12, PED_TYPE_GANG_IRISH = 13, PED_TYPE_GANG_JAMAICAN = 14, PED_TYPE_GANG_AFRICAN_AMERICAN = 15, PED_TYPE_GANG_KOREAN = 16, PED_TYPE_GANG_CHINESE_JAPANESE = 17, PED_TYPE_GANG_PUERTO_RICAN = 18, PED_TYPE_DEALER = 19, PED_TYPE_MEDIC = 20, PED_TYPE_FIREMAN = 21, PED_TYPE_CRIMINAL = 22, PED_TYPE_BUM = 23, PED_TYPE_PROSTITUTE = 24, PED_TYPE_SPECIAL = 25, PED_TYPE_MISSION = 26, PED_TYPE_SWAT = 27, PED_TYPE_ANIMAL = 28, PED_TYPE_ARMY = 29 };
--- @param ped integer
--- @return any
function GetPedType(ped) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function GetPedUsingVehicleDoor(vehicle, doorIndex) end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @return any
function GetPedVisualFieldCenterAngle(ped) end

--- @param p0 any
--- @return any
function GetPedWaypointDistance(p0) end

--- @param ped integer
--- @return any
function GetPedWaypointProgress(ped) end

--- @param ped integer
--- @param weaponHash integer
--- @param camoComponentHash integer
--- @return any
function GetPedWeaponLiveryColor(ped, weaponHash, camoComponentHash) end

--- @param ped integer
--- @param weaponHash integer
--- @return any
function GetPedWeaponTintIndex(ped, weaponHash) end

--- @param ped integer
--- @param weaponSlot integer
--- @return any
function GetPedWeapontypeInSlot(ped, weaponSlot) end

--- @param ped integer
--- @return any
function GetPhoneGestureAnimCurrentTime(ped) end

--- @param ped integer
--- @return any
function GetPhoneGestureAnimTotalTime(ped) end

--- @param pickup integer
--- @return any
function GetPickupCoords(pickup) end

--- @return any
function GetPickupGenerationRangeMultiplier() end

--- returns pickup hash.
--- @param pickupHash integer
--- @return any
function GetPickupHash(pickupHash) end

--- NativeDB Introduced: v1290
--- @param weapon integer
--- @return any
function GetPickupHashFromWeapon(weapon) end

--- @param pickup integer
--- @return any
function GetPickupObject(pickup) end

--- Gets the current camera rotation for a specified player. This native is used server side when using OneSync.
--- @param playerSrc integer
--- @return any
function GetPlayerCameraRotation(playerSrc) end

--- @param player integer
--- @return any
function GetPlayerCurrentStealthNoise(player) end

--- @param playerSrc integer+
--- @return any
function GetPlayerEndpoint(playerSrc) end

--- @param player integer
--- @return any
function GetPlayerFakeWantedLevel(player) end

--- Gets the current fake wanted level for a specified player. This native is used server side when using OneSync.
--- @param playerSrc integer
--- @return any
function GetPlayerFakeWantedLevel(playerSrc) end

--- Gets the focus position (i.e. the position of the active camera in the game world) of a player.
--- @param playerSrc integer
--- @return any
function GetPlayerFocusPos(playerSrc) end

--- @param index integer
--- @return any
function GetPlayerFromIndex(index) end

--- Gets a local client's Player ID from its server ID counterpart, assuming the passed `serverId` exists on the client. If no matching client is found, or an invalid value is passed over as the `serverId` native's parameter, the native result will be `-1`. It's worth noting that this native method can only retrieve information about clients that are culled to the connected client.
--- @param serverId integer
--- @return any
function GetPlayerFromServerId(serverId) end

--- On the server this will return the players source, on the client it will return the player handle.
--- @param bagName string
--- @return any
function GetPlayerFromStateBagName(bagName) end

--- Returns the group ID the player is member of.
--- @param player integer
--- @return any
function GetPlayerGroup(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerGuid(playerSrc) end

--- @param player integer
--- @return any
function GetPlayerHasReserveParachute(player) end

--- @param player integer
--- @return any
function GetPlayerHealthRechargeLimit(player) end

--- To get the number of identifiers, use GET_NUM_PLAYER_IDENTIFIERS To get a specific type of identifier, use GET_PLAYER_IDENTIFIER_BY_TYPE
--- @param playerSrc integer+
--- @param identiferIndex integer+
--- @return any
function GetPlayerIdentifier(playerSrc, identiferIndex) end

--- Get an identifier from a player by the type of the identifier. Known Identifiers
--- @param playerSrc integer
--- @param identifierType string
--- @return any
function GetPlayerIdentifierByType(playerSrc, identifierType) end

--- Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
--- @return any
function GetPlayerIndex() end

--- Returns the Player's Invincible status. This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this: bool IsPlayerInvincible(Player player) { auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player)); if (addr) { DWORD flag = *(DWORD *)(addr + 0x188); return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0); } return false; } ============================================================ This has bothered me for too long, whoever may come across this, where did anyone ever come up with this made up hash? 0x733A643B5B0C53C1 I've looked all over old hash list, and this nativedb I can not find that PC hash anywhere. What native name is it now or was it?
--- @param player integer
--- @return any
function GetPlayerInvincible(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerInvincible(playerSrc) end

--- Unlike GET_PLAYER_INVINCIBLE this native gets both SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED and SET_PLAYER_INVINCIBLE invincibility state.
--- @param player integer
--- @return any
function GetPlayerInvincible_2(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerLastMsg(playerSrc) end

--- @param player integer
--- @return any
function GetPlayerMaxArmour(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerMaxArmour(playerSrc) end

--- @param playerSrc integer
--- @return any
function GetPlayerMaxHealth(playerSrc) end

--- @param playerId integer
--- @return any
function GetPlayerMaxStamina(playerId) end

--- A getter for SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER.
--- @param playerId integer
--- @return any
function GetPlayerMeleeWeaponDamageModifier(playerId) end

--- A getter for SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER.
--- @param playerId integer
--- @return any
function GetPlayerMeleeWeaponDefenseModifier(playerId) end

--- Returns the players name from a specified player index
--- @param player integer
--- @return any
function GetPlayerName(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerName(playerSrc) end

--- NativeDB Introduced: v2372
--- @param player integer
--- @return any
function GetPlayerParachuteModelOverride(player) end

--- @param player integer
--- @return integer
function GetPlayerParachutePackTintIndex(player) end

--- @param player integer
--- @return integer
--- @return integer
--- @return integer
function GetPlayerParachuteSmokeTrailColor(player) end

--- Tints: None = -1, Rainbow = 0, Red = 1, SeasideStripes = 2, WidowMaker = 3, Patriot = 4, Blue = 5, Black = 6, Hornet = 7, AirFocce = 8, Desert = 9, Shadow = 10, HighAltitude = 11, Airbone = 12, Sunrise = 13,
--- @param player integer
--- @return integer
function GetPlayerParachuteTintIndex(player) end

--- Gets the ped for a specified player index.
--- @param playerId integer
--- @return any
function GetPlayerPed(playerId) end

--- Used to get the player's Ped Entity ID when a valid `playerSrc` is passed.
--- @param playerSrc integer
--- @return any
function GetPlayerPed(playerSrc) end

--- @param ped integer
--- @return any
function GetPlayerPedIsFollowing(ped) end

--- Does the same like PLAYER::GET_PLAYER_PED
--- @param player integer
--- @return any
function GetPlayerPedScriptIndex(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerPing(playerSrc) end

--- @return any
function GetPlayerRadioStationGenre() end

--- @return any
function GetPlayerRadioStationIndex() end

--- @return any
function GetPlayerRadioStationName() end

--- NativeDB Introduced: v2372
--- @param player integer
--- @return any
function GetPlayerReserveParachuteModelOverride(player) end

--- Tints: None = -1, Rainbow = 0, Red = 1, SeasideStripes = 2, WidowMaker = 3, Patriot = 4, Blue = 5, Black = 6, Hornet = 7, AirFocce = 8, Desert = 9, Shadow = 10, HighAltitude = 11, Airbone = 12, Sunrise = 13,
--- @param player integer
--- @return integer
function GetPlayerReserveParachuteTintIndex(player) end

--- @param player integer
--- @return integer
--- @return integer
--- @return integer
function GetPlayerRgbColour(player) end

--- Gets the routing bucket for the specified player. Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
--- @param playerSrc integer
--- @return any
function GetPlayerRoutingBucket(playerSrc) end

--- @param player integer
--- @return any
function GetPlayerServerId(player) end

--- @return any
function GetPlayerShortSwitchState() end

--- ### Warning This native will return `0` if the last vehicle the player was in was destroyed. ### Alternative You can use GET_VEHICLE_PED_IS_IN, which will actually get the last vehicle, even if it was destroyed.
--- @return any
function GetPlayersLastVehicle() end

--- @param player integer
--- @return any
function GetPlayerSprintStaminaRemaining(player) end

--- @param player integer
--- @return any
function GetPlayerSprintTimeRemaining(player) end

--- @param playerId integer
--- @return any
function GetPlayerStamina(playerId) end

--- @return any
function GetPlayerSwitchInterpOutCurrentTime() end

--- @return any
function GetPlayerSwitchInterpOutDuration() end

--- @return any
function GetPlayerSwitchJumpCutIndex() end

--- @return any
function GetPlayerSwitchState() end

--- @return any
function GetPlayerSwitchType() end

--- Assigns the handle of locked-on melee target to *entity that you pass it. Returns false if no entity found.
--- @param player integer
--- @return any
--- @return integer
function GetPlayerTargetEntity(player) end

--- Gets the player's team. Does nothing in singleplayer.
--- @param player integer
--- @return any
function GetPlayerTeam(player) end

--- @param playerSrc integer
--- @return any
function GetPlayerTeam(playerSrc) end

--- Gets the amount of time player has spent evading the cops. Counter starts and increments only when cops are chasing the player. If the player is evading, the timer will pause.
--- @param playerSrc integer
--- @param lastPursuit boolean
--- @return any
function GetPlayerTimeInPursuit(playerSrc, lastPursuit) end

--- Gets the current time online for a specified player.
--- @param playerSrc integer
--- @return any
function GetPlayerTimeOnline(playerSrc) end

--- Gets a player's token. Tokens can be used to enhance banning logic, however are specific to a server.
--- @param playerSrc integer+
--- @param index integer+
--- @return any
function GetPlayerToken(playerSrc, index) end

--- @param player integer
--- @return any
function GetPlayerUnderwaterTimeRemaining(player) end

--- A getter for SET_PLAYER_VEHICLE_DAMAGE_MODIFIER.
--- @param playerId integer
--- @return any
function GetPlayerVehicleDamageModifier(playerId) end

--- A getter for SET_PLAYER_VEHICLE_DEFENSE_MODIFIER.
--- @param playerId integer
--- @return any
function GetPlayerVehicleDefenseModifier(playerId) end

--- @param player integer
--- @return any
function GetPlayerWantedCentrePosition(player) end

--- Gets the current known coordinates for the specified player from cops perspective. This native is used server side when using OneSync.
--- @param playerSrc integer
--- @return any
function GetPlayerWantedCentrePosition(playerSrc) end

--- @param player integer
--- @return any
function GetPlayerWantedLevel(player) end

--- Returns given players wanted level server-side.
--- @param playerSrc integer
--- @return any
function GetPlayerWantedLevel(playerSrc) end

--- A getter for SET_PLAYER_WEAPON_DAMAGE_MODIFIER.
--- @param playerId integer
--- @return any
function GetPlayerWeaponDamageModifier(playerId) end

--- A getter for SET_PLAYER_WEAPON_DEFENSE_MODIFIER.
--- @param playerId integer
--- @return any
function GetPlayerWeaponDefenseModifier(playerId) end

--- A getter for \_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\_2.
--- @param playerId integer
--- @return any
function GetPlayerWeaponDefenseModifier_2(playerId) end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 integer
--- @return any
--- @return vector3
function GetPointOnRoadSide(x, y, z, p3) end

--- Native to get a position along current player GPS route using supplied slot. This native was previously named `GET_GPS_WAYPOINT_ROUTE_END`, but its named changed. cpp enum eGpsSlotType { GPS_SLOT_WAYPOINT = 0, GPS_SLOT_RADAR_BLIP = 1, GPS_SLOT_DISCRETE = 2 }
--- @param bStartAtPlayerPos boolean
--- @param fDistanceAlongRoute number
--- @param slotType integer
--- @return any
--- @return vector3
function GetPosAlongGpsTypeRoute(bStartAtPlayerPos, fDistanceAlongRoute, slotType) end

--- Distance traveled in the vehicles current recording.
--- @param vehicle integer
--- @return any
function GetPositionInRecording(vehicle) end

--- This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording. See `REQUEST_VEHICLE_RECORDING`.
--- @param recording integer
--- @param time number
--- @param script string
--- @return any
function GetPositionOfVehicleRecordingAtTime(recording, time, script) end

--- @param id integer
--- @param time number
--- @return any
function GetPositionOfVehicleRecordingIdAtTime(id, time) end

--- Gets system time as year, month, day, hour, minute and second. Example usage: int year; int month; int day; int hour; int minute; int second; TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetPosixTime() end

--- Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
--- @return any
function GetPowerSavingModeDuration() end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @return any
function GetPrevWeatherTypeHashName() end

--- @param profileSetting integer
--- @return any
function GetProfileSetting(profileSetting) end

--- @param ped integer
--- @param weaponHash integer
--- @param distance number
--- @param ownedByPlayer boolean
--- @return any
--- @return vector3
--- @return integer
function GetProjectileNearPed(ped, weaponHash, distance, ownedByPlayer) end

--- @param stationIndex integer
--- @return any
function GetRadioStationName(stationIndex) end

--- @return any
function GetRainLevel() end

--- @return any
function GetRandomEventFlag() end

--- @param startRange number
--- @param endRange number
--- @return any
function GetRandomFloatInRange(startRange, endRange) end

--- @param startRange integer
--- @param endRange integer
--- @return any
function GetRandomIntInRange(startRange, endRange) end

--- NativeDB Introduced: v1734
--- @param startRange integer
--- @param endRange integer
--- @return any
function GetRandomIntInRange_2(startRange, endRange) end

--- Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed. Ped Types: Any = -1 Player = 1 Male = 4 Female = 5 Cop = 6 Human = 26 SWAT = 27 Animal = 28 Army = 29
--- @param x number
--- @param y number
--- @param z number
--- @param xRadius number
--- @param yRadius number
--- @param zRadius number
--- @param pedType integer
--- @return any
function GetRandomPedAtCoord(x, y, z, xRadius, yRadius, zRadius, pedType) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
--- @return any
function GetRandomVehicleBackBumperInSphere(p0, p1, p2, p3, p4, p5, p6) end

--- A getter for SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME. Same as vehicle density multiplier.
--- @return any
function GetRandomVehicleDensityMultiplier() end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
--- @return any
function GetRandomVehicleFrontBumperInSphere(p0, p1, p2, p3, p4, p5, p6) end

--- Gets a random vehicle in a sphere at the specified position, of the specified radius. x: The X-component of the position of the sphere. y: The Y-component of the position of the sphere. z: The Z-component of the position of the sphere. radius: The radius of the sphere. Max is 9999.9004. modelHash: The vehicle model to limit the selection to. Pass 0 for any model. flags: The bitwise flags that modifies the behaviour of this function.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelHash integer
--- @param flags integer
--- @return any
function GetRandomVehicleInSphere(x, y, z, radius, modelHash, flags) end

--- Not present in the retail version! It's just a nullsub. p0 always true (except in one case) p1 a random vehicle hash loaded in memory successIndicator: 0 if success, -1 if failed
--- @param p0 boolean
--- @return integer
--- @return integer
function GetRandomVehicleModelInMemory(p0) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @return any
--- @return vector3
--- @return integer
function GetRandomVehicleNode(x, y, z, radius, p4, p5, p6) end

--- Example: OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param name string
--- @return any
function GetRayfireMapObject(x, y, z, radius, name) end

--- `object`: The des-object handle to get the animation progress from. Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
--- @param object integer
--- @return any
function GetRayfireMapObjectAnimPhase(object) end

--- Returns all commands that are registered in the command system. The data returned adheres to the following layout: [ { "name": "cmdlist", "resource": "resource", "arity" = -1, }, { "name": "command1" "resource": "resource_2", "arity" = -1, } ]
--- @return any
function GetRegisteredCommands() end

--- Gets the relationship between two groups. This should be called twice (once for each group). Relationship types: 0 = Companion 1 = Respect 2 = Like 3 = Neutral 4 = Dislike 5 = Hate 255 = Pedestrians Example: PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C); PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
--- @param group1 integer
--- @param group2 integer
--- @return any
function GetRelationshipBetweenGroups(group1, group2) end

--- Gets the relationship between two peds. This should be called twice (once for each ped). Relationship types: 0 = Companion 1 = Respect 2 = Like 3 = Neutral 4 = Dislike 5 = Hate 255 = Pedestrians (Credits: Inco) Example: PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C); PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
--- @param ped1 integer
--- @param ped2 integer
--- @return any
function GetRelationshipBetweenPeds(ped1, ped2) end

--- NativeDB Introduced: 3095 Retrieves the remaining duration of nitrous boost available for the specified vehicle.
--- @param vehicle integer
--- @return any
function GetRemainingNitrousDuration(vehicle) end

--- This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height. Old name: _GET_TEXT_SCALE_HEIGHT
--- @param size number
--- @param font integer
--- @return any
function GetRenderedCharacterHeight(size, font) end

--- @return any
function GetRenderingCam() end

--- @param index integer
--- @return any
function GetReplayStatAtIndex(index) end

--- @return any
function GetReplayStatCount() end

--- @return any
function GetReplayStatMissionType() end

--- @return any
function GetRequestingnightvision() end

--- @param findIndex integer
--- @return any
function GetResourceByFindIndex(findIndex) end

--- Returns all commands registered by the specified resource. The data returned adheres to the following layout: [ { "name": "cmdlist", "resource": "example_resource", "arity" = -1, }, { "name": "command1" "resource": "example_resource2", "arity" = -1, } ]
--- @param resource string
--- @return any
function GetResourceCommands(resource) end

--- A getter for SET_RESOURCE_KVP_FLOAT.
--- @param key string
--- @return any
function GetResourceKvpFloat(key) end

--- A getter for SET_RESOURCE_KVP_INT.
--- @param key string
--- @return any
function GetResourceKvpInt(key) end

--- A getter for SET_RESOURCE_KVP.
--- @param key string
--- @return any
function GetResourceKvpString(key) end

--- Gets the metadata value at a specified key/index from a resource's manifest. See also: Resource manifest
--- @param resourceName string
--- @param metadataKey string
--- @param index integer
--- @return any
function GetResourceMetadata(resourceName, metadataKey, index) end

--- Returns the physical on-disk path of the specified resource.
--- @param resourceName string
--- @return any
function GetResourcePath(resourceName) end

--- Returns the current state of the specified resource.
--- @param resourceName string
--- @return any
function GetResourceState(resourceName) end

--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @return any
--- @return vector3
function GetRoadBoundaryUsingHeading(x, y, z, heading) end

--- @return any
function GetRoomKeyForGameViewport() end

--- Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
--- @param entity integer
--- @return any
function GetRoomKeyFromEntity(entity) end

--- cpp enum eRopeFlags { DrawShadowEnabled = 2, Breakable = 4, RopeUnwindingFront = 8, RopeWinding = 32 }
--- @param rope integer
--- @return any
function GetRopeFlags(rope) end

--- @param ropeId integer
--- @return any
function GetRopeLastVertexCoord(ropeId) end

--- @param rope integer
--- @return any
function GetRopeLengthChangeRate(rope) end

--- @param rope integer
--- @return any
function GetRopeTimeMultiplier(rope) end

--- @param rope integer
--- @return any
function GetRopeUpdateOrder(rope) end

--- @param ropeId integer
--- @param vertex integer
--- @return any
function GetRopeVertexCoord(ropeId, vertex) end

--- @param ropeId integer
--- @return any
function GetRopeVertexCount(ropeId) end

--- @param recording integer
--- @param time number
--- @param script string
--- @return any
function GetRotationOfVehicleRecordingAtTime(recording, time, script) end

--- @param id integer
--- @param time number
--- @return any
function GetRotationOfVehicleRecordingIdAtTime(id, time) end

--- Gets the height of the specified runtime texture.
--- @param tex integer
--- @return any
function GetRuntimeTextureHeight(tex) end

--- Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`.
--- @param tex integer
--- @return any
function GetRuntimeTexturePitch(tex) end

--- Gets the width of the specified runtime texture.
--- @param tex integer
--- @return any
function GetRuntimeTextureWidth(tex) end

--- Flags are: 1 = 1 = B02_IsFootpath 2 = 4 = !B15_InteractionUnk 4 = 0x20 = !B14_IsInterior 8 = 0x40 = !B07_IsWater 16 = 0x200 = B17_IsFlatGround When onGround == true outPosition is a position located on the nearest pavement. When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero. In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16. 16 works for me, 0 crashed the script.
--- @param x number
--- @param y number
--- @param z number
--- @param onGround boolean
--- @param flags integer
--- @return any
--- @return vector3
function GetSafeCoordForPed(x, y, z, onGround, flags) end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 number
--- @return any
function GetSafePickupCoords(x, y, z, p3, p4) end

--- Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
--- @return any
function GetSafeZoneSize() end

--- Gets mouse selection data from scaleforms with mouse support. Must be checked every frame. Returns item index if using the COLOUR_SWITCHER\_02 scaleform. Selection types, found in MOUSE_EVENTS.as: MOUSE_DRAG_OUT = 0; MOUSE_DRAG_OVER = 1; MOUSE_DOWN = 2; MOUSE_MOVE = 3; MOUSE_UP = 4; MOUSE_PRESS = 5; MOUSE_RELEASE = 6; MOUSE_RELEASE_OUTSIDE = 7; MOUSE_ROLL_OUT = 8; MOUSE_ROLL_OVER = 9; MOUSE_WHEEL_UP = 10; MOUSE_WHEEL_DOWN = 11; Scaleforms that this works with: * COLOUR_SWITCHER\_02 * MP_RESULTS_PANEL * MP_NEXT_JOB_SELECTION * SC_LEADERBOARD Probably works with other scaleforms, needs more research. In order to use this Native you MUST have controls 239, 240, 237, 238 enabled! This native, due to its erroneous redundancy of the returned boolean value, works differently in C#: shifting the parameters (where `received` becomes `selectionType` and so on making the fourth parameter unused and always 0).
--- @param scaleformHandle integer
--- @return any
--- @return boolean
--- @return integer
--- @return integer
--- @return integer
function GetScaleformMovieCursorSelection(scaleformHandle) end

--- @param methodReturn integer
--- @return any
function GetScaleformMovieMethodReturnValueBool(methodReturn) end

--- Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
--- @param method_return integer
--- @return any
function GetScaleformMovieMethodReturnValueInt(method_return) end

--- Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
--- @param method_return integer
--- @return any
function GetScaleformMovieMethodReturnValueString(method_return) end

--- A getter for SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME.
--- @return any
function GetScenarioPedDensityMultiplier() end

--- @return any
function GetScreenblurFadeCurrentTime() end

--- Convert a world coordinate into its relative screen coordinate. (WorldToScreen) Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera. For .NET users... VB: Public Shared Function World3DToScreen2d(pos as vector3) As Vector2 Dim x2dp, y2dp As New Native.OutputArgument Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp) Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single)) End Function C#: Vector2 World3DToScreen2d(Vector3 pos) { var x2dp = new OutputArgument(); var y2dp = new OutputArgument(); Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp); return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>()); } //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small. Used to be called _WORLD3D_TO_SCREEN2D I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
--- @param worldX number
--- @param worldY number
--- @param worldZ number
--- @return any
--- @return number
--- @return number
function GetScreenCoordFromWorldCoord(worldX, worldY, worldZ) end

--- Hardcoded to always return 1280x720. Use `_GET_ACTIVE_SCREEN_RESOLUTION` to retrieve the correct screen resolution.
--- @return integer
--- @return integer
function GetScreenResolution() end

--- @param coverpoint integer
--- @return any
function GetScriptedCoverPointCoords(coverpoint) end

--- Calculates the effective X/Y fractions when applying the values set by `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS`.
--- @param x number
--- @param y number
--- @return number
--- @return number
function GetScriptGfxPosition(x, y) end

--- Gets the status of a spesifed script-assigned task on the given ped. The return value is always an int between 0-7. You can set taskHash to `SCRIPT_TASK_ANY` to check if any task is active, it will return 1 for active, 3 for no active. `SCRIPT_TASK_INVALID` can be similarly used, it returns 7 if there are any active task, and 3 if there are no active tasks. taskHash list: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt Returns: 0 = WAITING_TO_START_TASK 1 = PERFORMING_TASK 2 = DORMANT_TASK 3 = VACANT_STAGE 7 = TASK_FINISHED_OR_NOT_FOUND
--- @param ped integer
--- @param taskHash integer
--- @return any
function GetScriptTaskStatus(ped, taskHash) end

--- @param ped integer
--- @return any
function GetSeatPedIsTryingToEnter(ped) end

--- @param ped integer
--- @return any
function GetSelectedPedWeapon(ped) end

--- An alias of GET_CURRENT_PED_WEAPON. Note, the client-side GET_SELECTED_PED_WEAPON native returns the weapon selected via the HUD (weapon wheel). This data is not available to FXServer.
--- @param ped integer
--- @return any
function GetSelectedPedWeapon(ped) end

--- returned values: 0 to 7 = task that's currently in progress, 0 meaning the first one. -1 no task sequence in progress.
--- @param ped integer
--- @return any
function GetSequenceProgress(ped) end

--- Returns the result of a shape test. When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated. Unless the return value is 2, the other return values are undefined.
--- @param shapeTestHandle integer
--- @return any
--- @return boolean
--- @return vector3
--- @return vector3
--- @return integer
function GetShapeTestResult(shapeTestHandle) end

--- Returns the result of a shape test, also returning the material of any touched surface. When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated. Unless the return value is 2, the other return values are undefined.
--- @param shapeTestHandle integer
--- @return any
--- @return boolean
--- @return vector3
--- @return vector3
--- @return integer
--- @return integer
function GetShapeTestResultIncludingMaterial(shapeTestHandle) end

--- Returns the result of a shape test, also returning the material of any touched surface. When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated. Unless the return value is 2, the other return values are undefined.
--- @param shapeTestHandle integer
--- @return any
--- @return boolean
--- @return vector3
--- @return vector3
--- @return integer
--- @return integer
function GetShapeTestResultIncludingMaterial(shapeTestHandle) end

--- Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
--- @param componentHash integer
--- @return any
function GetShopPedApparelForcedComponentCount(componentHash) end

--- Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
--- @param componentHash integer
--- @return any
function GetShopPedApparelForcedPropCount(componentHash) end

--- @param componentHash integer
--- @return any
function GetShopPedApparelVariantComponentCount(componentHash) end

--- @param propHash integer
--- @return any
function GetShopPedApparelVariantPropCount(propHash) end

--- More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
--- @param componentHash integer
--- @return any
function GetShopPedComponent(componentHash) end

--- @param p0 any
--- @return any
function GetShopPedOutfit(p0) end

--- @param outfit integer
--- @param slot integer
--- @return any
--- @return any
function GetShopPedOutfitComponentVariant(outfit, slot) end

--- @param p0 any
--- @return any
function GetShopPedOutfitLocate(p0) end

--- @param outfitHash integer
--- @param variantIndex integer
--- @return any
--- @return any
function GetShopPedOutfitPropVariant(outfitHash, variantIndex) end

--- @param componentHash integer
--- @return any
function GetShopPedProp(componentHash) end

--- @param componentId integer
--- @return integer
function GetShopPedQueryComponent(componentId) end

--- struct Outfit_s { int mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece; int maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture, armourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture; };
--- @param outfitIndex integer
--- @return any
function GetShopPedQueryOutfit(outfitIndex) end

--- @param componentId integer
--- @return any
function GetShopPedQueryProp(componentId) end

--- @param p0 boolean
--- @return any
function GetSizeOfSaveData(p0) end

--- @return any
function GetSnowLevel() end

--- If a playback function has a soundId field but the sound doesn't need to be altered after triggering then pass a value of -1 for fire-and-forget playback, rather than getting a soundId. SoundId's can be reused, without needing to release them and grab a new one. If a sound's finished playing, you can reuse its SoundId to kick off another one. If the sound's not finished playing, it'll be stopped first (fading out or whatever is set up in RAVE by the sound designer), and the new one kicked off; usually it is safer to just get a new SoundId. SoundId's are not automatically cleaned up, you must use RELEASE_SOUND_ID after you've finished using them to allow the engine to recycle the sound id.
--- @return any
function GetSoundId() end

--- Counterpart: `GET_NETWORK_ID_FROM_SOUND_ID`.
--- @param netId integer
--- @return any
function GetSoundIdFromNetworkId(netId) end

--- @return any
function GetStandardBlipEnumId() end

--- @param bagName string
--- @return any
function GetStateBagKeys(bagName) end

--- Returns the value of a state bag key.
--- @param bagName string
--- @param key string
--- @return any
function GetStateBagValue(bagName, key) end

--- locked is 0 if no door is found locked is 0 if door is unlocked locked is 1 if door is found and unlocked. ------------- the locked bool is either 0(unlocked)(false) or 1(locked)(true)
--- @param type integer
--- @param x number
--- @param y number
--- @param z number
--- @return boolean
--- @return number
function GetStateOfClosestDoorOfType(type, x, y, z) end

--- See `SET_STATE_OF_RAYFIRE_MAP_OBJECT` to see the different states Get a destructible object's state. Substract 1 to get the real state. For example, if the object just spawned (state 2), the native will return 3.
--- @param object integer
--- @return any
function GetStateOfRayfireMapObject(object) end

--- @param p0 string
--- @return any
function GetStatusOfLoadMissionCreatorPhoto(p0) end

--- @return any
function GetStatusOfMissionRepeatSave() end

--- @return any
function GetStatusOfSaveHighQualityPhoto() end

--- Returns status of gallery photo fetch, which was requested by `QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS`.
--- @param scanForSaving boolean
--- @return any
function GetStatusOfSortedListOperation(scanForSaving) end

--- @return any
function GetStatusOfTakeHighQualityPhoto() end

--- @return any
function GetStatusOfTakeMissionCreatorPhoto() end

--- 0 = succeeded 1 = pending 2 = failed
--- @param p0 integer
--- @return any
function GetStatusOfTextureDownload(p0) end

--- @return any
function GetStreamPlayTime() end

--- Determines the name of the street which is the closest to the given coordinates. x,y,z - the coordinates of the street streetName - returns a hash to the name of the street the coords are on crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
--- @param x number
--- @param y number
--- @param z number
--- @return integer
--- @return integer
function GetStreetNameAtCoord(x, y, z) end

--- Converts the hash of a street name into a readable string. To retrieve a hash for a given (street) coordinate, see `GET_STREET_NAME_AT_COORD`.
--- @param hash integer
--- @return any
function GetStreetNameFromHashKey(hash) end

--- Determines if the submarine is operating below its designated crush depth. NativeDB Introduced: v2189
--- @param submarine integer
--- @return any
function GetSubmarineIsUnderDesignDepth(submarine) end

--- Checks if a Submarine has any air leaks, when there is more than 4 the player will drown. NativeDB Introduced: v2189
--- @param submarine integer
--- @return any
function GetSubmarineNumberOfAirLeaks(submarine) end

--- @param sceneID integer
--- @return any
function GetSynchronizedScenePhase(sceneID) end

--- @param sceneID integer
--- @return any
function GetSynchronizedSceneRate(sceneID) end

--- @param ped integer
--- @param eventName string
--- @return any
function GetTaskMoveNetworkEvent(ped, eventName) end

--- @param ped integer
--- @param signalName string
--- @return any
function GetTaskMoveNetworkSignalBool(ped, signalName) end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @param signalName string
--- @return any
function GetTaskMoveNetworkSignalFloat(ped, signalName) end

--- @param ped integer
--- @return any
function GetTaskMoveNetworkState(ped) end

--- Returns data that adheres to the tattoo shop item data that is used in shop_tattoo.meta Character types: cpp enum eTattooFaction { TATTOO_SP_MICHAEL = 0, TATTOO_SP_FRANKLIN = 1, TATTOO_SP_TREVOR = 2, TATTOO_MP_FM = 3, TATTOO_MP_FM_F = 4 } Returned struct properties: cpp struct sTattooShopItemValues { // Lock hash, used with IS_CONTENT_ITEM_LOCKED int LockHash; // Unique ID of this slot. It can also be 0. int Index; // Collection hash of this tattoo int CollectionHash; // Preset hash of this tattoo int PresetHash; // Cost of this tattoo in shops. int Cost; // Secondary placement of this tattoo. int eFacing; // Location of this tattoo on the body (for example, for torso there would be chest upper, stomach, etc) int UpdateGroup; // This tattoo's name in the form of a text label. const char* NameTextLabel; };
--- @param characterType integer
--- @param decorationIndex integer
--- @return any
--- @return any
function GetTattooShopDlcItemData(characterType, decorationIndex) end

--- NativeDB Introduced: v2189
--- @param character integer
--- @param collection integer
--- @param preset integer
--- @return any
function GetTattooShopDlcItemIndex(character, collection, preset) end

--- @param ped integer
--- @return any
function GetTennisSwingAnimComplete(ped) end

--- Returns a substring of a specified length starting at a specified position. Example: // Get "STRING" text from "MY_STRING" subStr = HUD::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6);
--- @param text string
--- @param position integer
--- @param length integer
--- @return any
function GetTextSubstring(text, position, length) end

--- Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length. NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69 Example: // Condensed example of how Rockstar uses this function strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT()); subStr = HUD::_GET_TEXT_SUBSTRING_SAFE(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63); -- "fm_race_creator.ysc", line 85115: // parameters modified for clarity BOOL sub_8e5aa(char *text, int length) { for (i = 0; i <= (length - 2); i += 1) { if (!MISC::ARE_STRINGS_EQUAL(HUD::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), " ")) { return FALSE; } } return TRUE; }
--- @param text string
--- @param position integer
--- @param length integer
--- @param maxLength integer
--- @return any
function GetTextSubstringSafe(text, position, length, maxLength) end

--- Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition). Example: // Get "STRING" text from "MY_STRING" subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9); // Overflows are possibly replaced with underscores (needs verification) subStr = HUD::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"?
--- @param text string
--- @param startPosition integer
--- @param endPosition integer
--- @return any
function GetTextSubstringSlice(text, startPosition, endPosition) end

--- Returns the texture resolution of the passed texture dict+name. Note: Most texture resolutions are doubled compared to the console version of the game.
--- @param textureDict string
--- @param textureName string
--- @return any
function GetTextureResolution(textureDict, textureName) end

--- @return any
function GetThisScriptName() end

--- @param jetpack integer
--- @return any
function GetThrusterSideRcsThrottle(jetpack) end

--- @param jetpack integer
--- @return any
function GetThrusterThrottle(jetpack) end

--- @param time integer
--- @return any
function GetTimeAsString(time) end

--- @return any
function GetTimecycleModifierCount() end

--- Only use for this in the PC scripts is: if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1) For a full list, see here: pastebin.com/cnk7FTF2
--- @return any
function GetTimecycleModifierIndex() end

--- @param modifierName string
--- @return any
function GetTimecycleModifierIndexByName(modifierName) end

--- @param modifierIndex integer
--- @return any
function GetTimecycleModifierNameByIndex(modifierIndex) end

--- A getter for SET_TIMECYCLE_MODIFIER_STRENGTH.
--- @return any
function GetTimecycleModifierStrength() end

--- @param modifierName string
--- @param varName string
--- @return any
--- @return number
--- @return number
function GetTimecycleModifierVar(modifierName, varName) end

--- @param modifierName string
--- @return any
function GetTimecycleModifierVarCount(modifierName) end

--- @param modifierName string
--- @param modifierVarIndex integer
--- @return any
function GetTimecycleModifierVarNameByIndex(modifierName, modifierVarIndex) end

--- @return any
function GetTimecycleTransitionModifierIndex() end

--- Returns the amount of variables available to be applied on timecycle modifiers.
--- @return any
function GetTimecycleVarCount() end

--- See GET_TIMECYCLE_VAR_COUNT.
--- @param varIndex integer
--- @return any
function GetTimecycleVarDefaultValueByIndex(varIndex) end

--- See GET_TIMECYCLE_VAR_COUNT.
--- @param varIndex integer
--- @return any
function GetTimecycleVarNameByIndex(varIndex) end

--- Subtracts the second argument from the first.
--- @param timeA integer
--- @param timeB integer
--- @return any
function GetTimeDifference(timeA, timeB) end

--- Adds the first argument to the second.
--- @param timeA integer
--- @param timeB integer
--- @return any
function GetTimeOffset(timeA, timeB) end

--- GET_TIME_*
--- @param ped integer
--- @param weaponHash integer
--- @return any
function GetTimeOfLastPedWeaponDamage(ped, weaponHash) end

--- Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
--- @param vehicle integer
--- @return any
function GetTimePositionInRecording(vehicle) end

--- Returns the time since the character was arrested in (ms) milliseconds. example var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST(); UI.DrawSubtitle(time.ToString()); if player has not been arrested, the int returned will be -1.
--- @return any
function GetTimeSinceLastArrest() end

--- Returns the time since the character died in (ms) milliseconds. example var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH(); UI.DrawSubtitle(time.ToString()); if player has not died, the int returned will be -1.
--- @return any
function GetTimeSinceLastDeath() end

--- The number of milliseconds since last padIndex registered pressed
--- @param padIndex integer
--- @return any
function GetTimeSinceLastInput(padIndex) end

--- @param player integer
--- @return any
function GetTimeSincePlayerDroveAgainstTraffic(player) end

--- @param player integer
--- @return any
function GetTimeSincePlayerDroveOnPavement(player) end

--- @param player integer
--- @return any
function GetTimeSincePlayerHitPed(player) end

--- @param player integer
--- @return any
function GetTimeSincePlayerHitVehicle(player) end

--- @return any
function GetTogglePausedRenderphasesStatus() end

--- @param recording integer
--- @param script string
--- @return any
function GetTotalDurationOfVehicleRecording(recording, script) end

--- @param id integer
--- @return any
function GetTotalDurationOfVehicleRecordingId(id) end

--- @return any
function GetTotalSuccessfulStuntJumps() end

--- @param track integer
--- @return any
function GetTrackBrakingDistance(track) end

--- @param track integer
--- @return any
function GetTrackMaxSpeed(track) end

--- Gets the coordinates of a specific track node.
--- @param trackIndex integer
--- @param trackNode integer
--- @return any
--- @return vector3
function GetTrackNodeCoords(trackIndex, trackNode) end

--- Gets the specified tracks node count.
--- @param trackIndex integer
--- @return any
function GetTrackNodeCount(trackIndex) end

--- Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
--- @param train integer
--- @param trailerNumber integer
--- @return any
function GetTrainCarriage(train, trailerNumber) end

--- @param train integer
--- @return any
function GetTrainCarriageEngine(train) end

--- @param train integer
--- @return any
function GetTrainCarriageIndex(train) end

--- Gets the trains desired speed.
--- @param train integer
--- @return any
function GetTrainCruiseSpeed(train) end

--- @param train integer
--- @return any
function GetTrainCurrentTrackNode(train) end

--- Gets the direction the train is facing
--- @param train integer
--- @return any
function GetTrainDirection(train) end

--- Gets the door count for the specified train.
--- @param train integer
--- @return any
function GetTrainDoorCount(train) end

--- Gets the ratio that a door is open for on a train.
--- @param train integer
--- @param doorIndex integer
--- @return any
function GetTrainDoorOpenRatio(train, doorIndex) end

--- Gets the speed the train is currently going.
--- @param train integer
--- @return any
function GetTrainSpeed(train) end

--- @param train integer
--- @return any
function GetTrainState(train) end

--- @return any
function GetTvChannel() end

--- @return any
function GetTvVolume() end

--- NativeDB Introduced: v1868
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetTyreHealth(vehicle, wheelIndex) end

--- NativeDB Introduced: v2060
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetTyreWearMultiplier(vehicle, wheelIndex) end

--- 0.0 = no memory used 1.0 = all memory used Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB GET_*
--- @return any
function GetUsedCreatorModelMemoryPercentage() end

--- @return any
function GetUsingnightvision() end

--- @return any
function GetUsingseethrough() end

--- Gets current UTC time
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetUtcTime() end

--- @param componentHash integer
--- @param variantComponentIndex integer
--- @return integer
--- @return integer
--- @return integer
function GetVariantComponent(componentHash, variantComponentIndex) end

--- @param componentHash integer
--- @param variantPropIndex integer
--- @return integer
--- @return integer
--- @return integer
function GetVariantProp(componentHash, variantPropIndex) end

--- @param textLabel string
--- @return any
function GetVariationChosenForScriptedLine(textLabel) end

--- Retrieves a static value representing the maximum drive force of specific a vehicle, including any vehicle mods. This value does not change dynamically during gameplay. This value provides an approximation and should be considered alongside other performance metrics like top speed for a more comprehensive understanding of the vehicle's capabilities. NativeDB Introduced: v323
--- @param vehicle integer
--- @return any
function GetVehicleAcceleration(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleAlarmTimeLeft(vehicle) end

--- Returns attached vehicle (Vehicle in parameter must be cargobob)
--- @param cargobob integer
--- @return any
function GetVehicleAttachedToCargobob(cargobob) end

--- Seems related to vehicle health, like the one in IV. Max 1000, min 0. Vehicle does not necessarily explode or become undrivable at 0.
--- @param vehicle integer
--- @return any
function GetVehicleBodyHealth(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleBodyHealth(vehicle) end

--- Gets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. In decompiled scripts this is used to check if the vehicle has enough bombs before a bomb can be dropped (bombs are dropped by using `_SHOOT_SINGLE_BULLET_BETWEEN_COORDS_WITH_EXTRA_PARAMS`). Use `_SET_AIRCRAFT_BOMB_COUNT` to set the amount of bombs on that vehicle.
--- @param aircraft integer
--- @return any
function GetVehicleBombCount(aircraft) end

--- @param vehicle integer
--- @return any
function GetVehicleCanActivateParachute(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleCauseOfDestruction(vehicle) end

--- A getter for SET_VEHICLE_CHEAT_POWER_INCREASE.
--- @param vehicle integer
--- @return any
function GetVehicleCheatPowerIncrease(vehicle) end

--- Returns an int Vehicle Classes: 0: Compacts 1: Sedans 2: SUVs 3: Coupes 4: Muscle 5: Sports Classics 6: Sports 7: Super 8: Motorcycles 9: Off-road 10: Industrial 11: Utility 12: Vans 13: Cycles 14: Boats 15: Helicopters 16: Planes 17: Service 18: Emergency 19: Military 20: Commercial 21: Trains 22: Open Wheel char buffer[128]; std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle)); char* className = UI::_GET_LABEL_TEXT(buffer);
--- @param vehicle integer
--- @return any
function GetVehicleClass(vehicle) end

--- @param vehicleClass integer
--- @return any
function GetVehicleClassEstimatedMaxSpeed(vehicleClass) end

--- For a full enum, see here : pastebin.com/i2GGAjY0 char buffer[128]; std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash)); const char* className = HUD::_GET_LABEL_TEXT(buffer);
--- @param modelHash integer
--- @return any
function GetVehicleClassFromName(modelHash) end

--- @param vehicleClass integer
--- @return any
function GetVehicleClassMaxAcceleration(vehicleClass) end

--- @param vehicleClass integer
--- @return any
function GetVehicleClassMaxAgility(vehicleClass) end

--- @param vehicleClass integer
--- @return any
function GetVehicleClassMaxBraking(vehicleClass) end

--- @param vehicleClass integer
--- @return any
function GetVehicleClassMaxTraction(vehicleClass) end

--- @param vehicle integer
--- @return any
function GetVehicleClutch(vehicle) end

--- See `SET_VEHICLE_CUSTOM_PRIMARY_COLOUR` and `SET_VEHICLE_CUSTOM_SECONDARY_COLOUR`.
--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleColor(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleColourCombination(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
function GetVehicleColours(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
function GetVehicleColours(vehicle) end

--- Similar to `_GET_AIRCRAFT_BOMB_COUNT`, this gets the amount of countermeasures that are present on this vehicle. Use `_SET_AIRCRAFT_COUNTERMEASURE_COUNT` to set the current amount.
--- @param aircraft integer
--- @return any
function GetVehicleCountermeasureCount(aircraft) end

--- @param vehicle integer
--- @param p1 integer
--- @return any
function GetVehicleCrewEmblemRequestState(vehicle, p1) end

--- @param vehicle integer
--- @return any
function GetVehicleCurrentGear(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleCurrentRpm(vehicle) end

--- Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup). GET_VEHICLE_*
--- @param vehicle integer
--- @return any
function GetVehicleCurrentSlipstreamDraft(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleCustomPrimaryColour(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleCustomPrimaryColour(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleCustomSecondaryColour(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleCustomSecondaryColour(vehicle) end

--- @return any
function GetVehicleDashboardBoost() end

--- @param vehicle integer
--- @return integer
function GetVehicleDashboardColor(vehicle) end

--- @param vehicle integer
--- @return integer
function GetVehicleDashboardColour(vehicle) end

--- Retrieves the current gear displayed on the dashboard of the vehicle the player is in, returned as a float. This value represents the gear shown in the instrument cluster, such as "R" (0.0) or positive values (e.g., 1.0, 2.0, etc.) for drive gears.
--- @return any
function GetVehicleDashboardCurrentGear() end

--- @return any
function GetVehicleDashboardFuel() end

--- Gets the state of the player vehicle's dashboard lights as a bit set indicator_left = 1 indicator_right = 2 handbrakeLight = 4 engineLight = 8 ABSLight = 16 gasLight = 32 oilLight = 64 headlights = 128 highBeam = 256 batteryLight = 512
--- @return any
function GetVehicleDashboardLights() end

--- @return any
function GetVehicleDashboardOilPressure() end

--- @return any
function GetVehicleDashboardOilTemp() end

--- @return any
function GetVehicleDashboardRpm() end

--- @param vehicle integer
--- @return any
function GetVehicleDashboardSpeed(vehicle) end

--- @return any
function GetVehicleDashboardTemp() end

--- @return any
function GetVehicleDashboardVacuum() end

--- @param vehicle integer
--- @return any
function GetVehicleDefaultHorn(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleDefaultHornIgnoreMods(vehicle) end

--- The only example I can find of this function in the scripts, is this: struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f); ----------------------------------------------------------------------------------------------------------------------------------------- PC scripts: v_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
--- @param vehicle integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @return any
function GetVehicleDeformationAtPos(vehicle, offsetX, offsetY, offsetZ) end

--- A getter for SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME.
--- @return any
function GetVehicleDensityMultiplier() end

--- A getter for `SET_VEHICLE_DIRT_LEVEL`.
--- @param vehicle integer
--- @return any
function GetVehicleDirtLevel(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleDirtLevel(vehicle) end

--- Checks the angle of the door mapped from 0.0 - 1.0 where 0.0 is fully closed and 1.0 is fully open. See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function GetVehicleDoorAngleRatio(vehicle, doorIndex) end

--- @param vehicle integer
--- @return any
function GetVehicleDoorLockStatus(vehicle) end

--- lua enum_VehicleLockStatus = { None = 0, Locked = 2, LockedForPlayer = 3, StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key. CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1 CanBeBrokenIntoPersist = 8, -- Can be broken into persist CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key). } It should be noted that while the client-side command and its setter distinguish between states 0 (unset) and 1 (unlocked), the game will synchronize both as state 0, so the server-side command will return only '0' if unlocked.
--- @param vehicle integer
--- @return any
function GetVehicleDoorLockStatus(vehicle) end

--- @param vehicle integer
--- @param player integer
--- @return any
function GetVehicleDoorsLockedForPlayer(vehicle, player) end

--- Currently it only works when set to "all players".
--- @param vehicle integer
--- @return any
function GetVehicleDoorsLockedForPlayer(vehicle) end

--- Returns the open position of the specified door on the target vehicle.
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function GetVehicleDoorStatus(vehicle, doorIndex) end

--- Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered.
--- @param vehicle integer
--- @return any
function GetVehicleDrawnWheelAngleMult(vehicle) end

--- NativeDB Introduced: v3258 **Note**: When using this native, the hash of the vehicle needs to be loaded into the client's memory. This can be done by requesting the model with `REQUEST_MODEL` or by simply having the vehicle spawned. cpp enum eVehicleDrivetrainType { INVALID = 0, FWD = 1, RWD = 2, AWD = 3 }; NativeDB Introduced: v3258
--- @param vehicleModel integer
--- @return any
function GetVehicleDrivetrainType(vehicleModel) end

--- Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle. Minimum: -4000 Maximum: 1000 -4000: Engine is destroyed 0 and below: Engine catches fire and health rapidly declines 300: Engine is smoking and losing functionality 1000: Engine is perfect
--- @param vehicle integer
--- @return any
function GetVehicleEngineHealth(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleEngineHealth(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleEngineTemperature(vehicle) end

--- formerly known as _GET_VEHICLE_PAINT_FADE The result is a value from 0-1, where 0 is fresh paint.
--- @param vehicle integer
--- @return any
function GetVehicleEnveffScale(vehicle) end

--- Retrieves a static value representing the estimated max speed of a specific vehicle, including any vehicle mods. This value does not change dynamically during gameplay. NativeDB Introduced: v323
--- @param vehicle integer
--- @return any
function GetVehicleEstimatedMaxSpeed(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
function GetVehicleExtraColours(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
function GetVehicleExtraColours(vehicle) end

--- @param aircraft integer
--- @return any
function GetVehicleFlightNozzlePosition(aircraft) end

--- Gets the flight nozzel position for the specified vehicle. See the client-side \_GET_VEHICLE_FLIGHT_NOZZLE_POSITION native for usage examples.
--- @param vehicle integer
--- @return any
function GetVehicleFlightNozzlePosition(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleFuelLevel(vehicle) end

--- Gets vehicles gear ratio on choosen gear.
--- @param vehicle integer
--- @param gear integer
--- @return any
function GetVehicleGearRatio(vehicle, gear) end

--- @param vehicle integer
--- @return any
function GetVehicleGravityAmount(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleHandbrake(vehicle) end

--- Returns the effective handling data of a vehicle as a floating-point value. Example: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @return any
function GetVehicleHandlingFloat(vehicle, class_, fieldName) end

--- Returns the effective handling data of a vehicle as an integer value. Example: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @return any
function GetVehicleHandlingInt(vehicle, class_, fieldName) end

--- Returns the effective handling data of a vehicle as a vector value. Example: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @return any
function GetVehicleHandlingVector(vehicle, class_, fieldName) end

--- **Note**: Flags are not the same based on your `gamebuild`. Please see here to see a complete list of all vehicle flags. Get vehicle.meta flag by index. Useful examples include `FLAG_LAW_ENFORCEMENT` (31), `FLAG_RICH_CAR` (36), `FLAG_IS_ELECTRIC` (43), `FLAG_IS_OFFROAD_VEHICLE` (48).
--- @param vehicle integer
--- @param flagIndex integer
--- @return any
function GetVehicleHasFlag(vehicle, flagIndex) end

--- @param vehicle integer
--- @return any
function GetVehicleHasKers(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleHasParachute(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleHeadlightsColour(vehicle) end

--- NativeDB Added Parameter 2: float maxEngineHealth NativeDB Added Parameter 3: float maxPetrolTankHealth NativeDB Added Parameter 4: float maxBodyHealth NativeDB Added Parameter 5: float maxMainRotorHealth NativeDB Added Parameter 6: float maxTailRotorHealth NativeDB Added Parameter 7: float maxUnkHealth
--- @param vehicle integer
--- @return any
function GetVehicleHealthPercentage(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleHighGear(vehicle) end

--- Returns a value depending on the lock-on state of vehicle weapons. 0: not locked on 1: locking on 2: locked on
--- @param vehicle integer
--- @return any
function GetVehicleHomingLockonState(vehicle) end

--- Gets the lock on state for the specified vehicle. See the client-side GET_VEHICLE_HOMING_LOCKON_STATE native for a description of lock on states.
--- @param vehicle integer
--- @return any
function GetVehicleHomingLockonState(vehicle) end

--- NativeDB Introduced: v1365
--- @param vehicle integer
--- @return any
function GetVehicleHornSoundIndex(vehicle) end

--- This is a getter for the client-side native `START_VEHICLE_HORN`, which allows you to return the horn type of the vehicle. **Note**: This native only gets the hash value set with `START_VEHICLE_HORN`. If a wrong hash is passed into `START_VEHICLE_HORN`, it will return this wrong hash. cpp enum eHornTypes { NORMAL = 1330140148, HELDDOWN = -2087385909, AGGRESSIVE = -92810745 }
--- @param vehicle integer
--- @return any
function GetVehicleHornType(vehicle) end

--- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param entity integer
--- @return any
function GetVehicleIndexFromEntityIndex(entity) end

--- Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both
--- @param vehicle integer
--- @return any
function GetVehicleIndicatorLights(vehicle) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function GetVehicleIndividualDoorLockStatus(vehicle, doorIndex) end

--- @param vehicle integer
--- @return integer
function GetVehicleInteriorColor(vehicle) end

--- @param vehicle integer
--- @return integer
function GetVehicleInteriorColour(vehicle) end

--- Returns whether the specified vehicle is designated as a mercenary vehicle
--- @param vehicle integer
--- @return any
function GetVehicleIsMercenary(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleLayoutHash(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleLightMultiplier(vehicle) end

--- @param vehicle integer
--- @return any
--- @return boolean
--- @return boolean
function GetVehicleLightsState(vehicle) end

--- @param vehicle integer
--- @return any
--- @return boolean
--- @return boolean
function GetVehicleLightsState(vehicle) end

--- -1 = no livery
--- @param vehicle integer
--- @return any
function GetVehicleLivery(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleLivery(vehicle) end

--- Returns -1 if the vehicle has no livery
--- @param vehicle integer
--- @return any
function GetVehicleLiveryCount(vehicle) end

--- @param vehicle integer
--- @return any
--- @return integer
function GetVehicleLockOnTarget(vehicle) end

--- Gets the vehicle that is locked on to for the specified vehicle.
--- @param vehicle integer
--- @return any
function GetVehicleLockOnTarget(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleMaxBraking(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleMaxNumberOfPassengers(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleMaxTraction(vehicle) end

--- @param vehicle integer
--- @param modType integer
--- @return any
function GetVehicleMod(vehicle, modType) end

--- @param vehicle integer
--- @return integer
--- @return integer
function GetVehicleModColor_2(vehicle) end

--- returns a string which is the codename of the vehicle's currently selected secondary color
--- @param vehicle integer
--- @return any
function GetVehicleModColor_2Name(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleModColor1(vehicle) end

--- returns a string which is the codename of the vehicle's currently selected primary color p1 is always 0
--- @param vehicle integer
--- @param p1 boolean
--- @return any
function GetVehicleModColor1Name(vehicle, p1) end

--- Returns the acceleration of the specified model.
--- @param modelHash integer
--- @return any
function GetVehicleModelAcceleration(modelHash) end

--- GET_VEHICLE_MODEL_* 9.8 * thrust if air vehicle, else 0.38 + drive force?
--- @param modelHash integer
--- @return any
function GetVehicleModelEstimatedAgility(modelHash) end

--- Returns max speed (without mods) of the specified vehicle model in m/s.
--- @param modelHash integer
--- @return any
function GetVehicleModelEstimatedMaxSpeed(modelHash) end

--- Returns max braking of the specified vehicle model.
--- @param modelHash integer
--- @return any
function GetVehicleModelMaxBraking(modelHash) end

--- @param modelHash integer
--- @return any
function GetVehicleModelMaxBrakingMaxMods(modelHash) end

--- GET_VEHICLE_MODEL_* Function pertains only to aviation vehicles.
--- @param modelHash integer
--- @return any
function GetVehicleModelMaxKnots(modelHash) end

--- Returns max traction of the specified vehicle model.
--- @param modelHash integer
--- @return any
function GetVehicleModelMaxTraction(modelHash) end

--- Returns max number of passengers (including the driver) for the specified vehicle model.
--- @param modelHash integer
--- @return any
function GetVehicleModelNumberOfSeats(modelHash) end

--- Returns `nMonetaryValue` from handling.meta for specific model, which is the vehicle's monetary value.
--- @param vehicleModel integer
--- @return any
function GetVehicleModelValue(vehicleModel) end

--- Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
--- @param vehicle integer
--- @param modType integer
--- @param modIndex integer
--- @return any
function GetVehicleModIdentifierHash(vehicle, modType, modIndex) end

--- @param vehicle integer
--- @return any
function GetVehicleModKit(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleModKitType(vehicle) end

--- @param vehicle integer
--- @param modType integer
--- @param modIndex integer
--- @return any
function GetVehicleModModifierValue(vehicle, modType, modIndex) end

--- Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
--- @param vehicle integer
--- @param modType integer
--- @return any
function GetVehicleModVariation(vehicle, modType) end

--- Getter to check the neon colour of a vehicle. This native is the server side getter of GET_VEHICLE_NEON_LIGHTS_COLOUR.
--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleNeonColour(vehicle) end

--- Getter to check if one of the neon lights of a vehicle is enabled. This native is the server side getter of IS_VEHICLE_NEON_LIGHT_ENABLED. cpp enum neonIndex { NEON_BACK = 0, // Back neon NEON_RIGHT = 1, // Right neon NEON_LEFT = 2, // Left neon NEON_FRONT = 3 // Front neon };
--- @param vehicle integer
--- @param neonIndex integer
--- @return any
function GetVehicleNeonEnabled(vehicle, neonIndex) end

--- Gets the color of the neon lights of the specified vehicle. See `_SET_VEHICLE_NEON_LIGHTS_COLOUR` for more information
--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleNeonLightsColour(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleNextGear(vehicle) end

--- Returns false for nodes that aren't used for GPS routes. Example: Nodes in Fort Zancudo and LSIA are false
--- @param nodeID integer
--- @return any
function GetVehicleNodeIsGpsAllowed(nodeID) end

--- Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true. Normal roads where plenty of Peds spawn will return false
--- @param nodeID integer
--- @return any
function GetVehicleNodeIsSwitchedOff(nodeID) end

--- Calling this with an invalid node id, will crash the game. Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid. Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
--- @param nodeId integer
--- @return vector3
function GetVehicleNodePosition(nodeId) end

--- Gets the density and flags of the closest node to the specified position.\ Density is a value between 0 and 15, indicating how busy the road is. cpp enum eVehicleNodeProperties { OFF_ROAD = 1 << 0, ON_PLAYERS_ROAD = 1 << 1, NO_BIG_VEHICLES = 1 << 2, SWITCHED_OFF = 1 << 3, TUNNEL_OR_INTERIOR = 1 << 4, LEADS_TO_DEAD_END = 1 << 5, HIGHWAY = 1 << 6, JUNCTION = 1 << 7, TRAFFIC_LIGHT = 1 << 8, GIVE_WAY = 1 << 9, WATER = 1 << 10, }
--- @param x number
--- @param y number
--- @param z number
--- @return any
--- @return integer
--- @return integer
function GetVehicleNodeProperties(x, y, z) end

--- @param vehicle integer
--- @return any
function GetVehicleNumberOfBrokenBones(vehicle) end

--- Also includes some "turnOffBones" when vehicle mods are installed.
--- @param vehicle integer
--- @return any
function GetVehicleNumberOfBrokenOffBones(vehicle) end

--- Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
--- @param vehicle integer
--- @return any
function GetVehicleNumberOfPassengers(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleNumberOfWheels(vehicle) end

--- Returns the license plate text from a vehicle. 8 chars maximum.
--- @param vehicle integer
--- @return any
function GetVehicleNumberPlateText(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleNumberPlateText(vehicle) end

--- cpp enum eVehiclePlateIndicies { SanAndreasCursive = 0, SanAndreasBlack = 1, SanAndreasBlue = 2, SanAndreasPlain = 3, SRExcept = 4, NorthYankton = 5, // All indicies below this require b3095 ECola = 6, LasVenturas = 7, LiberyCity = 8, LSCarMeet = 9, LSPanic = 10, LSPounders = 11, Sprunk = 12, }
--- @param vehicle integer
--- @return any
function GetVehicleNumberPlateTextIndex(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleNumberPlateTextIndex(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleOilLevel(vehicle) end

--- @param ped integer
--- @return any
function GetVehiclePedIsEntering(ped) end

--- Retrieves the vehicle the specified ped is currently in, or the last vehicle they were in.
--- @param ped integer
--- @param lastVehicle boolean
--- @return any
function GetVehiclePedIsIn(ped, lastVehicle) end

--- Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.
--- @param ped integer
--- @param lastVehicle boolean
--- @return any
function GetVehiclePedIsIn(ped, lastVehicle) end

--- @param ped integer
--- @return any
function GetVehiclePedIsTryingToEnter(ped) end

--- Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
--- @param ped integer
--- @return any
function GetVehiclePedIsUsing(ped) end

--- 1000 is max health Begins leaking gas at around 650 health
--- @param vehicle integer
--- @return any
function GetVehiclePetrolTankHealth(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehiclePetrolTankHealth(vehicle) end

--- Returns the plates a vehicle has. cpp enum eVehiclePlateType { VPT_FRONT_AND_BACK_PLATES = 0, VPT_FRONT_PLATES = 1, VPT_BACK_PLATES = 2, VPT_NONE = 3, }; Motorcycles with no visible plates will sometimes return a 2 for unknown reasons.
--- @param vehicle integer
--- @return any
function GetVehiclePlateType(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleRadioStationIndex(vehicle) end

--- See `REQUEST_VEHICLE_RECORDING`.
--- @param recording integer
--- @param script string
--- @return any
function GetVehicleRecordingId(recording, script) end

--- Returns index of the current vehicle's rooftop livery. A getter for \_SET_VEHICLE_ROOF_LIVERY.
--- @param vehicle integer
--- @return any
function GetVehicleRoofLivery(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleRoofLivery(vehicle) end

--- Returns a number of available rooftop liveries, or -1 if vehicle has no rooftop liveries available.
--- @param vehicle integer
--- @return any
function GetVehicleRoofLiveryCount(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleSteeringAngle(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleSteeringScale(vehicle) end

--- Outputs 2 Vector3's. Scripts check if out2.x - out1.x > something.x Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
--- @param vehicle integer
--- @return vector3
--- @return vector3
function GetVehicleSuspensionBounds(vehicle) end

--- Gets the height of the vehicle's suspension. The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered. 0.000 is the stock suspension. 0.008 is Ultra Suspension.
--- @param vehicle integer
--- @return any
function GetVehicleSuspensionHeight(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleThrottleOffset(vehicle) end

--- A getter for MODIFY_VEHICLE_TOP_SPEED. Returns -1.0 if a modifier is not set.
--- @param vehicle integer
--- @return any
function GetVehicleTopSpeedModifier(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleTotalRepairs(vehicle) end

--- Gets the trailer of a vehicle and puts it into the trailer parameter.
--- @param vehicle integer
--- @return any
--- @return integer
function GetVehicleTrailerVehicle(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleTurboPressure(vehicle) end

--- Returns the type of the passed vehicle. For client scripts, reference the more detailed GET_VEHICLE_TYPE_RAW native. ### Vehicle types * automobile * bike * boat * heli * plane * submarine * trailer * train
--- @param vehicle integer
--- @return any
function GetVehicleType(vehicle) end

--- Returns the model type of the vehicle as defined by: cpp enum VehicleType { VEHICLE_TYPE_NONE = -1, VEHICLE_TYPE_CAR = 0, VEHICLE_TYPE_PLANE = 1, VEHICLE_TYPE_TRAILER = 2, VEHICLE_TYPE_QUADBIKE = 3, VEHICLE_TYPE_DRAFT = 4, VEHICLE_TYPE_SUBMARINECAR = 5, VEHICLE_TYPE_AMPHIBIOUS_AUTOMOBILE = 6, VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE = 7, VEHICLE_TYPE_HELI = 8, VEHICLE_TYPE_BLIMP = 9, VEHICLE_TYPE_AUTOGYRO = 10, VEHICLE_TYPE_BIKE = 11, VEHICLE_TYPE_BICYCLE = 12, VEHICLE_TYPE_BOAT = 13, VEHICLE_TYPE_TRAIN = 14, VEHICLE_TYPE_SUBMARINE = 15, };
--- @param vehicle integer
--- @return any
function GetVehicleTypeRaw(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleTyresCanBurst(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleTyreSmokeColor(vehicle) end

--- @param vehicle integer
--- @return integer
--- @return integer
--- @return integer
function GetVehicleTyreSmokeColor(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleWaypointProgress(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleWaypointTargetPoint(vehicle) end

--- @param vehicle integer
--- @param weaponIndex integer
--- @return any
function GetVehicleWeaponCapacity(vehicle, weaponIndex) end

--- Gets brake pressure of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS. Normal values around 1.0f when braking.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelBrakePressure(vehicle, wheelIndex) end

--- Gets the flags of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelFlags(vehicle, wheelIndex) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelHealth(vehicle, wheelIndex) end

--- List of known states: 1: Not wheeling. 65: Vehicle is ready to do wheelie (burnouting). 129: Vehicle is doing wheelie.
--- @param vehicle integer
--- @return any
function GetVehicleWheelieState(vehicle) end

--- Gets whether the wheel is powered. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS. This is a shortcut to a flag in GET_VEHICLE_WHEEL_FLAGS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelIsPowered(vehicle, wheelIndex) end

--- Gets power being sent to a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelPower(vehicle, wheelIndex) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelRimColliderSize(vehicle, wheelIndex) end

--- Gets the rotation speed of a wheel. This is used internally to calcuate GET_VEHICLE_WHEEL_SPEED. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelRotationSpeed(vehicle, wheelIndex) end

--- Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle). Only works on non-default wheels (returns 0 in case of default wheels).
--- @param vehicle integer
--- @return any
function GetVehicleWheelSize(vehicle) end

--- Gets speed of a wheel at the tyre. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelSpeed(vehicle, wheelIndex) end

--- Gets steering angle of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelSteeringAngle(vehicle, wheelIndex) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelSurfaceMaterial(vehicle, wheelIndex) end

--- Gets the current suspension compression of a wheel. Returns a positive value. 0 means the suspension is fully extended, the wheel is off the ground. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelSuspensionCompression(vehicle, wheelIndex) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelTireColliderSize(vehicle, wheelIndex) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelTireColliderWidth(vehicle, wheelIndex) end

--- Gets the traction vector length of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelTractionVectorLength(vehicle, wheelIndex) end

--- cpp enum eVehicleWheelType { VWT_SPORT = 0, VWT_MUSCLE = 1, VWT_LOWRIDER = 2, VWT_SUV = 3, VWT_OFFROAD = 4, VWT_TUNER = 5, VWT_BIKE = 6, VWT_HIEND = 7, // Benny's Original VWT_SUPERMOD1 = 8, // Benny's Bespoke VWT_SUPERMOD2 = 9, // Open Wheel VWT_SUPERMOD3 = 10, // Street VWT_SUPERMOD4 = 11, // Track VWT_SUPERMOD5 = 12, };
--- @param vehicle integer
--- @return any
function GetVehicleWheelType(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleWheelType(vehicle) end

--- Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle). Only works on non-default wheels (returns 0 in case of default wheels).
--- @param vehicle integer
--- @return any
function GetVehicleWheelWidth(vehicle) end

--- Returns the offset of the specified wheel relative to the wheel's axle center.
--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelXOffset(vehicle, wheelIndex) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @return any
function GetVehicleWheelYRotation(vehicle, wheelIndex) end

--- @param vehicle integer
--- @return any
function GetVehicleWindowTint(vehicle) end

--- @param vehicle integer
--- @return any
function GetVehicleWindowTint(vehicle) end

--- Use \_SET_VEHICLE_HEADLIGHTS_COLOUR to set the headlights color for the vehicle. You must enable xenon headlights for this native to work properly. cpp enum eHeadlightColors { Default = 255, White = 0, Blue = 1, ElectricBlue = 2, MintGreen = 3, LimeGreen = 4, Yellow = 5, GoldenShower = 6, Orange = 7, Red = 8, PonyPink = 9, HotPink = 10, Purple = 11, Blacklight = 12 }
--- @param vehicle integer
--- @return any
function GetVehicleXenonLightsColor(vehicle) end

--- Returns vehicle xenon lights custom RGB color values. Do note this native doesn't return non-RGB colors that was set with \_SET_VEHICLE_XENON_LIGHTS_COLOR.
--- @param vehicle integer
--- @return any
--- @return integer
--- @return integer
--- @return integer
function GetVehicleXenonLightsCustomColor(vehicle) end

--- A getter for SET_VEHICLE_XMAS_SNOW_FACTOR.
--- @return any
function GetVehicleXmasSnowFactor() end

--- NativeDB Introduced: v2372
--- @return any
function GetWantedLevelParoleDuration() end

--- Remnant from GTA IV. Does nothing in GTA V.
--- @param player integer
--- @return any
function GetWantedLevelRadius(player) end

--- Drft
--- @param wantedLevel integer
--- @return any
function GetWantedLevelThreshold(wantedLevel) end

--- NativeDB Introduced: v1290
--- @return any
function GetWarningMessageTitleHash() end

--- Retrieves the depth of the water beneath the specified position, accounting for the waves. **Note:** The result might vary depending on the specific frame when this command is executed due to wave fluctuations.
--- @param x number
--- @param y number
--- @param z number
--- @return any
--- @return number
function GetWaterHeight(x, y, z) end

--- Retrieves the depth of the water beneath the specified position, disregarding wave effects. **Note:** The result remains consistent across different frames as it doesn't consider wave fluctuations.
--- @param x number
--- @param y number
--- @param z number
--- @return any
--- @return number
function GetWaterHeightNoWaves(x, y, z) end

--- @param waterQuad integer
--- @return any
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetWaterQuadAlpha(waterQuad) end

--- This native returns the index of a water quad if the given point is inside its bounds. *If you also want to check for water level, check out `GetWaterQuadAtCoords_3d`*
--- @param x number
--- @param y number
--- @return any
function GetWaterQuadAtCoords(x, y) end

--- This alternative implementation of `GetWaterQuadAtCoords` also checks the height of the water level.
--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetWaterQuadAtCoords_3d(x, y, z) end

--- @param waterQuad integer
--- @return any
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetWaterQuadBounds(waterQuad) end

--- @return any
function GetWaterQuadCount() end

--- @param waterQuad integer
--- @return any
--- @return integer
function GetWaterQuadHasLimitedDepth(waterQuad) end

--- @param waterQuad integer
--- @return any
--- @return integer
function GetWaterQuadIsInvisible(waterQuad) end

--- *level is defined as "z" in water.xml*
--- @param waterQuad integer
--- @return any
--- @return number
function GetWaterQuadLevel(waterQuad) end

--- @param waterQuad integer
--- @return any
--- @return integer
function GetWaterQuadNoStencil(waterQuad) end

--- Valid type definitions: * **0** Square * **1** Right triangle where the 90 degree angle is at maxX, minY * **2** Right triangle where the 90 degree angle is at minX, minY * **3** Right triangle where the 90 degree angle is at minX, maxY * **4** Right triangle where the 90 degree angle is at maxY, maxY
--- @param waterQuad integer
--- @return any
--- @return integer
function GetWaterQuadType(waterQuad) end

--- @param waveQuad integer
--- @return any
--- @return number
function GetWaveQuadAmplitude(waveQuad) end

--- This native returns the index of a wave quad if the given point is inside its bounds.
--- @param x number
--- @param y number
--- @return any
function GetWaveQuadAtCoords(x, y) end

--- @param waveQuad integer
--- @return any
--- @return integer
--- @return integer
--- @return integer
--- @return integer
function GetWaveQuadBounds(waveQuad) end

--- @return any
function GetWaveQuadCount() end

--- @param waveQuad integer
--- @return any
--- @return number
--- @return number
function GetWaveQuadDirection(waveQuad) end

--- @return any
function GetWaypointBlipEnumId() end

--- @param p0 string
--- @param p1 integer
--- @return any
function GetWaypointDistanceAlongRoute(p0, p1) end

--- A getter for SET_WEAPON_ANIMATION_OVERRIDE.
--- @param ped integer
--- @return any
function GetWeaponAnimationOverride(ped) end

--- // Returns the size of the default weapon component clip. Use it like this: char cClipSize[32]; Hash cur; if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1)) { if (WEAPON::IS_WEAPON_VALID(cur)) { int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur); sprintf_s(cClipSize, "ClipSize: %.d", iClipSize); vDrawString(cClipSize, 0.5f, 0.5f); } }
--- @param weaponHash integer
--- @return any
function GetWeaponClipSize(weaponHash) end

--- A getter for `CWeaponAccuracyModifier` in a weapon component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentAccuracyModifier(componentHash) end

--- A getter for `CameraHash` in a weapon scope component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentCameraHash(componentHash) end

--- A getter for `ClipSize` in a weapon component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentClipSize(componentHash) end

--- A getter for `CWeaponDamageModifier` in a weapon component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentDamageModifier(componentHash) end

--- @param componentHash integer
--- @return any
--- @return integer
function GetWeaponComponentHudStats(componentHash) end

--- A getter for `CWeaponFallOffModifier` damage modifier value in a weapon component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentRangeDamageModifier(componentHash) end

--- A getter for `CWeaponFallOffModifier` range modifier value in a weapon component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentRangeModifier(componentHash) end

--- A getter for `ReticuleHash` in a weapon scope component.
--- @param componentHash integer
--- @return any
function GetWeaponComponentReticuleHash(componentHash) end

--- @param componentHash integer
--- @return any
function GetWeaponComponentTypeModel(componentHash) end

--- @param componentHash integer
--- @return any
function GetWeaponComponentVariantExtraComponentCount(componentHash) end

--- @param componentHash integer
--- @param extraComponentIndex integer
--- @return any
function GetWeaponComponentVariantExtraComponentModel(componentHash, extraComponentIndex) end

--- This native does not return damages of weapons from the melee and explosive group.
--- @param weaponHash integer
--- @param componentHash integer
--- @return any
function GetWeaponDamage(weaponHash, componentHash) end

--- A getter for \_SET_WEAPON_DAMAGE_MODIFIER.
--- @param weaponHash integer
--- @return any
function GetWeaponDamageModifier(weaponHash) end

--- 0=unknown (or incorrect weaponHash) 1= no damage (flare,snowball, petrolcan) 2=melee 3=bullet 4=force ragdoll fall 5=explosive (RPG, Railgun, grenade) 6=fire(molotov) 8=fall(WEAPON_HELI_CRASH) 10=electric 11=barbed wire 12=extinguisher 13=gas 14=water cannon(WEAPON_HIT_BY_WATER_CANNON)
--- @param weaponHash integer
--- @return any
function GetWeaponDamageType(weaponHash) end

--- // members should be aligned to 8 bytes by default but it's best to use alignas here, just to be sure struct WeaponHudStatsData { alignas(8) uint8_t hudDamage; // 0x0000 alignas(8) uint8_t hudSpeed; // 0x0008 alignas(8) uint8_t hudCapacity; // 0x0010 alignas(8) uint8_t hudAccuracy; // 0x0018 alignas(8) uint8_t hudRange; // 0x0020 }; Usage: WeaponHudStatsData data; if (GET_WEAPON_HUD_STATS(weaponHash, (Any*)&data)) { // uint8_t damagePercentage = data.hudDamage etc... }
--- @param weaponHash integer
--- @return any
--- @return any
function GetWeaponHudStats(weaponHash) end

--- Drops the current weapon and returns the object Unknown behavior when unarmed.
--- @param ped integer
--- @param p1 boolean
--- @return any
function GetWeaponObjectFromPed(ped, p1) end

--- @param weaponObject integer
--- @param camoComponentHash integer
--- @return any
function GetWeaponObjectLiveryColor(weaponObject, camoComponentHash) end

--- @param weapon integer
--- @return any
function GetWeaponObjectTintIndex(weapon) end

--- A getter for the recoil shake amplitude of a weapon.
--- @param weaponHash integer
--- @return any
function GetWeaponRecoilShakeAmplitude(weaponHash) end

--- @param weaponHash integer
--- @return any
function GetWeaponTimeBetweenShots(weaponHash) end

--- @param weaponHash integer
--- @return any
function GetWeaponTintCount(weaponHash) end

--- @param pickupHash integer
--- @return any
function GetWeaponTypeFromPickupType(pickupHash) end

--- Gets and returns the hash of the group of the specified weapon (group names can be found/changed under "Group" in the weapons' meta file). Note that the group is **not** the same as the location on the weapon wheel.
--- @param weaponHash integer
--- @return any
function GetWeapontypeGroup(weaponHash) end

--- Returns the model of any weapon. Can also take an ammo hash? sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
--- @param weaponHash integer
--- @return any
function GetWeapontypeModel(weaponHash) end

--- @param weaponHash integer
--- @return any
function GetWeapontypeSlot(weaponHash) end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @return integer
--- @return integer
--- @return number
function GetWeatherTypeTransition() end

--- Used for hunting in singleplayer and for golfing in both sp and online. The `GET_HEADING_FROM_VECTOR_2D` native can be used to get the wind heading from the direction.
--- @return any
function GetWindDirection() end

--- @return any
function GetWindSpeed() end

--- Converts a screen coordinate into its relative world coordinate.
--- @param screenX number
--- @param screenY number
--- @return vector3
--- @return vector3
function GetWorldCoordFromScreenCoord(screenX, screenY) end

--- Returns the coordinates of an entity-bone.
--- @param entity integer
--- @param boneIndex integer
--- @return any
function GetWorldPositionOfEntityBone(entity, boneIndex) end

--- @param x number
--- @param y number
--- @param z number
--- @return any
function GetZoneAtCoords(x, y, z) end

--- 'zoneName' corresponds to an entry in 'popzone.ipl'. AIRP = Los Santos International Airport ALAMO = Alamo Sea ALTA = Alta ARMYB = Fort Zancudo BANHAMC = Banham Canyon Dr BANNING = Banning BEACH = Vespucci Beach BHAMCA = Banham Canyon BRADP = Braddock Pass BRADT = Braddock Tunnel BURTON = Burton CALAFB = Calafia Bridge CANNY = Raton Canyon CCREAK = Cassidy Creek CHAMH = Chamberlain Hills CHIL = Vinewood Hills CHU = Chumash CMSW = Chiliad Mountain State Wilderness CYPRE = Cypress Flats DAVIS = Davis DELBE = Del Perro Beach DELPE = Del Perro DELSOL = La Puerta DESRT = Grand Senora Desert DOWNT = Downtown DTVINE = Downtown Vinewood EAST_V = East Vinewood EBURO = El Burro Heights ELGORL = El Gordo Lighthouse ELYSIAN = Elysian Island GALFISH = Galilee GOLF = GWC and Golfing Society GRAPES = Grapeseed GREATC = Great Chaparral HARMO = Harmony HAWICK = Hawick HORS = Vinewood Racetrack HUMLAB = Humane Labs and Research JAIL = Bolingbroke Penitentiary KOREAT = Little Seoul LACT = Land Act Reservoir LAGO = Lago Zancudo LDAM = Land Act Dam LEGSQU = Legion Square LMESA = La Mesa LOSPUER = La Puerta MIRR = Mirror Park MORN = Morningwood MOVIE = Richards Majestic MTCHIL = Mount Chiliad MTGORDO = Mount Gordo MTJOSE = Mount Josiah MURRI = Murrieta Heights NCHU = North Chumash NOOSE = N.O.O.S.E OCEANA = Pacific Ocean PALCOV = Paleto Cove PALETO = Paleto Bay PALFOR = Paleto Forest PALHIGH = Palomino Highlands PALMPOW = Palmer-Taylor Power Station PBLUFF = Pacific Bluffs PBOX = Pillbox Hill PROCOB = Procopio Beach RANCHO = Rancho RGLEN = Richman Glen RICHM = Richman ROCKF = Rockford Hills RTRAK = Redwood Lights Track SANAND = San Andreas SANCHIA = San Chianski Mountain Range SANDY = Sandy Shores SKID = Mission Row SLAB = Stab City STAD = Maze Bank Arena STRAW = Strawberry TATAMO = Tataviam Mountains TERMINA = Terminal TEXTI = Textile City TONGVAH = Tongva Hills TONGVAV = Tongva Valley VCANA = Vespucci Canals VESP = Vespucci VINE = Vinewood WINDF = Ron Alternates Wind Farm WVINE = West Vinewood ZANCUDO = Zancudo River ZP_ORT = Port of South Los Santos ZQ_UAR = Davis Quartz
--- @param zoneName string
--- @return any
function GetZoneFromNameId(zoneName) end

--- @param zoneId integer
--- @return any
function GetZonePopschedule(zoneId) end

--- Gets the zone scumminess level, used to calculate the cellphone signal strength. cpp enum eZoneScumminess { SCUMMINESS_POSH = 0, SCUMMINESS_NICE = 1, SCUMMINESS_ABOVE_AVERAGE = 2, SCUMMINESS_BELOW_AVERAGE = 3, SCUMMINESS_CRAP = 4, SCUMMINESS_SCUM = 5 }
--- @param zoneId integer
--- @return any
function GetZoneScumminess(zoneId) end

--- Achievements from 0-57 more achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.
--- @param achievement integer
--- @return any
function GiveAchievementToPlayer(achievement) end

--- Gives a weapon to PED with a delay, example: WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
--- @param ped integer
--- @param weaponHash integer
--- @param ammoCount integer
--- @param bForceInHand boolean
function GiveDelayedWeaponToPed(ped, weaponHash, ammoCount, bForceInHand) end

--- List of all available loadouts: LOADOUT_DEFAULT LOADOUT_ANIMAL LOADOUT_COUGAR LOADOUT_HILLBILLY LOADOUT_CULT LOADOUT_CHEAT_0 LOADOUT_CHEAT_1 LOADOUT_GUARD LOADOUT_NETWORK_BOT LOADOUT_LOST LOADOUT_LOST_L1 LOADOUT_LOST_L2 LOADOUT_LOST_L3 LOADOUT_MEXICAN LOADOUT_MEXICAN_L1 LOADOUT_MEXICAN_L2 LOADOUT_MEXICAN_L3 LOADOUT_FAMILY LOADOUT_ASIAN LOADOUT_SECUR LOADOUT_POLICE_GUARD LOADOUT_COP LOADOUT_COP_L1 LOADOUT_COP_L2 LOADOUT_COP_L3 LOADOUT_SWAT LOADOUT_SWAT_NO_LASER LOADOUT_COP_SHOTGUN LOADOUT_FIREMAN LOADOUT_COP_HELI LOADOUT_COP_BOAT LOADOUT_ARMY LOADOUT_ANIMAL_RETRIEVER LOADOUT_SMALL_DOG LOADOUT_TIGER_SHARK LOADOUT_HAMMERHEAD_SHARK LOADOUT_KILLER_WHALE LOADOUT_BOAR LOADOUT_PIG LOADOUT_COYOTE LOADOUT_DEER LOADOUT_HEN LOADOUT_RABBIT LOADOUT_CAT LOADOUT_COW
--- @param ped integer
--- @param loadoutHash integer
function GiveLoadoutToPed(ped, loadoutHash) end

--- Gives the ped a helmet. Can be removed by invoking `REMOVE_PED_HELMET`. cpp enum ePedCompFlags { PV_FLAG_NONE = 0, // 0 PV_FLAG_BULKY = 1, // 1<<0 PV_FLAG_JOB = 2, // 1<<1 PV_FLAG_SUNNY = 4, // 1<<2 PV_FLAG_WET = 8, // 1<<3 PV_FLAG_COLD = 16, // 1<<4 PV_FLAG_NOT_IN_CAR = 32, // 1<<5 PV_FLAG_BIKE_ONLY = 64, // 1<<6 PV_FLAG_NOT_INDOORS = 128, // 1<<7 PV_FLAG_FIRE_RETARDENT = 256, // 1<<8 PV_FLAG_ARMOURED = 512, // 1<<9 PV_FLAG_LIGHTLY_ARMOURED = 1024, // 1<<10 PV_FLAG_HIGH_DETAIL = 2048, // 1<<11 PV_FLAG_DEFAULT_HELMET = 4096, // 1<<12 PV_FLAG_RANDOM_HELMET = 8192, // 1<<13 PV_FLAG_SCRIPT_HELMET = 16384, // 1<<14 PV_FLAG_FLIGHT_HELMET = 32768, // 1<<15 PV_FLAG_HIDE_IN_FIRST_PERSON = 65536, // 1<<16 PV_FLAG_USE_PHYSICS_HAT_2 = 131072, // 1<<17 PV_FLAG_PILOT_HELMET = 262144 // 1<<18 };
--- @param ped integer
--- @param cannotRemove boolean
--- @param helmetFlag integer
--- @param textureIndex integer
function GivePedHelmet(ped, cannotRemove, helmetFlag, textureIndex) end

--- Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped. If a message hasn't been created already, this function does nothing. If the Ped is not ragdolled with Euphoria enabled, this function does nothing. The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0); Call order: SET_PED_TO_RAGDOLL CREATE_NM_MESSAGE GIVE_PED_NM_MESSAGE Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0); CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff. GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped. CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling. GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped. CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around. GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
--- @param ped integer
function GivePedNmMessage(ped) end

--- p1 is either 1 or 2 in the PC scripts. This native is used to "give"/duplicate a player ped to a frontend menu as configured via the `ACTIVATE_FRONTEND_MENU` native, you first must utilize the CLONE_PED to clone said ped.
--- @param ped integer
--- @param p1 integer
function GivePedToPauseMenu(ped, p1) end

--- @param player integer
--- @param toggle boolean
function GivePlayerRagdollControl(player, toggle) end

--- @param ped integer
--- @param weaponHash integer
--- @param componentHash integer
function GiveWeaponComponentToPed(ped, weaponHash, componentHash) end

--- GIVE_WEAPON_COMPONENT_TO_PED **This is the server-side RPC native equivalent of the client native GIVE_WEAPON_COMPONENT_TO_PED.**
--- @param ped integer
--- @param weaponHash integer
--- @param componentHash integer
function GiveWeaponComponentToPed(ped, weaponHash, componentHash) end

--- addonHash: (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value) ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
--- @param weaponObject integer
--- @param addonHash integer
function GiveWeaponComponentToWeaponObject(weaponObject, addonHash) end

--- @param weaponObject integer
--- @param ped integer
function GiveWeaponObjectToPed(weaponObject, ped) end

--- @param ped integer
--- @param weaponHash integer
--- @param ammoCount integer
--- @param isHidden boolean
--- @param bForceInHand boolean
function GiveWeaponToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand) end

--- GIVE_WEAPON_TO_PED **This is the server-side RPC native equivalent of the client native GIVE_WEAPON_TO_PED.**
--- @param ped integer
--- @param weaponHash integer
--- @param ammoCount integer
--- @param isHidden boolean
--- @param bForceInHand boolean
function GiveWeaponToPed(ped, weaponHash, ammoCount, isHidden, bForceInHand) end

--- @return any
function GolfTrailGetMaxHeight() end

--- @param p0 integer
--- @return any
function GolfTrailGetVisualControlPoint(p0) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
--- @param p7 integer
--- @param p8 integer
--- @param p9 integer
--- @param p10 integer
--- @param p11 integer
function GolfTrailSetColour(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) end

--- @param toggle boolean
function GolfTrailSetEnabled(toggle) end

--- @param p0 boolean
function GolfTrailSetFacing(p0) end

--- 12 matches across 4 scripts. All 4 scripts were job creators. type ranged from 0 - 2. p4 was always 0.2f. Likely scale. assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255). Tested but noticed nothing.
--- @param type integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param p4 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function GolfTrailSetFixedControlPoint(type, xPos, yPos, zPos, p4, red, green, blue, alpha) end

--- p8 seems to always be false.
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 boolean
function GolfTrailSetPath(p0, p1, p2, p3, p4, p5, p6, p7, p8) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
function GolfTrailSetRadius(p0, p1, p2) end

--- Only appeared in Golf & Golf_mp. Parameters were all ptrs
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
function GolfTrailSetShaderParams(p0, p1, p2, p3, p4) end

--- @param p0 integer
--- @param p1 integer
function GolfTrailSetTessellation(p0, p1) end

function GrassLodResetScriptAreas() end

--- Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 number
--- @param p5 number
--- @param p6 number
function GrassLodShrinkScriptAreas(x, y, z, radius, p4, p5, p6) end

--- Attaches a camera to an entity, including full matrix transformations for both rotation and position offsets. NativeDB Introduced: v2189
--- @param cam integer
--- @param entity integer
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param isRelative boolean
function HardAttachCamToEntity(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative) end

--- Attaches a camera to a specific bone of a Ped, including full matrix transformations for both rotation and position offsets. This native works with peds only. NativeDB Introduced: v1180
--- @param cam integer
--- @param ped integer
--- @param boneIndex integer
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param isRelative boolean
function HardAttachCamToPedBone(cam, ped, boneIndex, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative) end

--- @param achievement integer
--- @return any
function HasAchievementBeenPassed(achievement) end

--- @param asset string
--- @return any
function HasActionModeAssetLoaded(asset) end

--- @param slot integer
--- @return any
function HasAdditionalTextLoaded(slot) end

--- @param animDict string
--- @return any
function HasAnimDictLoaded(animDict) end

--- if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
--- @param entity integer
--- @param actionHash integer
--- @return any
function HasAnimEventFired(entity, actionHash) end

--- Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. Animation set and clip set are synonymous. See `SET_PED_MOVEMENT_CLIPSET`.
--- @param animSet string
--- @return any
function HasAnimSetLoaded(animSet) end

--- Hardcoded to always return true.
--- @return any
function HasAsyncInstallFinished() end

--- p3 - possibly radius?
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 boolean
--- @param p5 boolean
--- @return any
function HasBulletImpactedInArea(x, y, z, p3, p4, p5) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 boolean
--- @return any
function HasBulletImpactedInBox(p0, p1, p2, p3, p4, p5, p6, p7) end

--- This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/ INT_SCORES_SCORTED was a hash collision
--- @param hash integer
--- @param amount integer
--- @return any
function HasButtonCombinationJustBeenEntered(hash, amount) end

--- Get inputted "Cheat code", for example: while (TRUE) { if (MISC::_557E43C447E700A8(${fugitive})) { // Do something. } SYSTEM::WAIT(0); } Calling this will also set the last saved string hash to zero.
--- @param hash integer
--- @return any
function HasCheatStringJustBeenEntered(hash) end

--- Alias for HAS_ANIM_SET_LOADED.
--- @param clipSet string
--- @return any
function HasClipSetLoaded(clipSet) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param modelHash integer
--- @param p5 any
--- @return any
function HasClosestObjectOfTypeBeenBroken(p0, p1, p2, p3, modelHash, p5) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelHash integer
--- @param p5 boolean
--- @return any
function HasClosestObjectOfTypeBeenCompletelyDestroyed(x, y, z, radius, modelHash, p5) end

--- Sets the value of the specified variable to 0. Always returns true.
--- @param unused any
--- @return any
--- @return boolean
function HasCloudRequestsFinished(unused) end

--- @param model integer
--- @return any
function HasCollisionForModelLoaded(model) end

--- @param entity integer
--- @return any
function HasCollisionLoadedAroundEntity(entity) end

--- Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
--- @param cutsceneName string
--- @return any
function HasCutFileLoaded(cutsceneName) end

--- @return any
function HasCutsceneCutThisFrame() end

--- @return any
function HasCutsceneFinished() end

--- @return any
function HasCutsceneLoaded() end

--- HAS_*
--- @return any
function HasDirectorModeBeenTriggered() end

--- P3 is always 3 as far as i cant tell Animations list
--- @param entity integer
--- @param animDict string
--- @param animName string
--- @param p3 integer
--- @return any
function HasEntityAnimFinished(entity, animDict, animName, p3) end

--- @param entity integer
--- @return any
function HasEntityBeenDamagedByAnyObject(entity) end

--- @param entity integer
--- @return any
function HasEntityBeenDamagedByAnyPed(entity) end

--- @param entity integer
--- @return any
function HasEntityBeenDamagedByAnyVehicle(entity) end

--- @param entity integer
--- @param damager integer
--- @param bCheckDamagerVehicle boolean
--- @return any
function HasEntityBeenDamagedByEntity(entity, damager, bCheckDamagerVehicle) end

--- It determines what weapons caused damage: If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0 If you want to define any melee weapon, second parameter=0, third parameter=1. If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
--- @param entity integer
--- @param weaponHash integer
--- @param weaponType integer
--- @return any
function HasEntityBeenDamagedByWeapon(entity, weaponHash, weaponType) end

--- @param vehicle integer
--- @return any
function HasEntityBeenMarkedAsNoLongerNeeded(vehicle) end

--- Checks if entity1 has a clear line of sight to entity2. So a simple raycast which if it collides with any of the given colliderTypes returns false. The direction of the check matters with for example bushes, so checking from inside to outside a bush with traceType 256 returns true, but the other way around returns false.
--- @param entity1 integer
--- @param entity2 integer
--- @param flags integer
--- @return any
function HasEntityClearLosToEntity(entity1, entity2, flags) end

--- NativeDB Introduced: v1868
--- @param entity1 integer
--- @param entity2 integer
--- @param traceType integer
--- @return any
function HasEntityClearLosToEntity_2(entity1, entity2, traceType) end

--- Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing. This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
--- @param entity1 integer
--- @param entity2 integer
--- @return any
function HasEntityClearLosToEntityInFront(entity1, entity2) end

--- Called on tick. Tested with vehicles, returns true whenever the vehicle is touching any entity. Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
--- @param entity integer
--- @return any
function HasEntityCollidedWithAnything(entity) end

--- HAS_*
--- @return any
function HasFilledVehiclePopulation() end

--- @param cleanupFlags integer
--- @return any
function HasForceCleanupOccurred(cleanupFlags) end

--- @return any
function HasLoadedMpDataSet() end

--- @return any
function HasLoadedSpDataSet() end

--- Returns whether or not the specific minimap overlay has loaded.
--- @param id integer
--- @return any
function HasMinimapOverlayLoaded(id) end

--- Returns whether the specified model (archetype) is currently loaded. Note that this will return 'true' even if the model has been requested and loaded by something other than the current script, if you're intending to actually use the model in a later frame, you should call REQUEST_MODEL anyway.
--- @param model integer
--- @return any
function HasModelLoaded(model) end

--- @param fxName string
--- @return any
function HasNamedPtfxAssetLoaded(fxName) end

--- @return any
function HasNetworkTimeStarted() end

--- NativeDB Added Parameter 2: Any p1
--- @param object integer
--- @return any
function HasObjectBeenBroken(object) end

--- It determines what weapons caused damage: If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0 If you want to define any melee weapon, second parameter=0, third parameter=1. If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
--- @param ped integer
--- @param weaponHash integer
--- @param weaponType integer
--- @return any
function HasPedBeenDamagedByWeapon(ped, weaponHash, weaponType) end

--- p2 should be FALSE, otherwise it seems to always return FALSE Bool does not check if the weapon is current equipped, unfortunately.
--- @param ped integer
--- @param weaponHash integer
--- @param p2 boolean
--- @return any
function HasPedGotWeapon(ped, weaponHash, p2) end

--- @param ped integer
--- @param weaponHash integer
--- @param componentHash integer
--- @return any
function HasPedGotWeaponComponent(ped, weaponHash, componentHash) end

--- @param ped integer
--- @return any
function HasPedHeadBlendFinished(ped) end

--- @return any
function HasPedheadshotImgUploadFailed() end

--- @return any
function HasPedheadshotImgUploadSucceeded() end

--- @param ped integer
--- @return any
function HasPedPreloadPropDataFinished(ped) end

--- @param ped integer
--- @return any
function HasPedPreloadVariationDataFinished(ped) end

--- @param ped integer
--- @param eventId integer
--- @return any
function HasPedReceivedEvent(ped, eventId) end

--- @param pickup integer
--- @return any
function HasPickupBeenCollected(pickup) end

--- @param player integer
--- @param ms integer
--- @param p2 boolean
--- @return any
function HasPlayerBeenShotByCop(player, ms, p2) end

--- @param player integer
--- @return any
function HasPlayerBeenSpottedInStolenVehicle(player) end

--- @param player integer
--- @return any
function HasPlayerDamagedAtLeastOneNonAnimalPed(player) end

--- @param player integer
--- @return any
function HasPlayerDamagedAtLeastOnePed(player) end

--- @param player integer
--- @return any
function HasPlayerLeftTheWorld(player) end

--- @param p0 any
--- @return any
function HasPreloadModsFinished(p0) end

--- @return any
function HasPtfxAssetLoaded() end

--- Hardcoded to return false.
--- @return any
function HasResumedFromSuspend() end

--- @param scaleformHandle integer
--- @return any
function HasScaleformContainerMovieLoadedIntoParent(scaleformHandle) end

--- Only values used in the scripts are: "heist_mp" "heistmap_mp" "instructional_buttons" "heist_pre"
--- @param scaleformName string
--- @return any
function HasScaleformMovieFilenameLoaded(scaleformName) end

--- @param scaleformHandle integer
--- @return any
function HasScaleformMovieLoaded(scaleformHandle) end

--- @param hudComponent integer
--- @return any
function HasScaleformScriptHudMovieLoaded(hudComponent) end

--- Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
--- @param scriptName string
--- @return any
function HasScriptLoaded(scriptName) end

--- @param scriptHash integer
--- @return any
function HasScriptWithNameHashLoaded(scriptHash) end

--- @param soundId integer
--- @return any
function HasSoundFinished(soundId) end

--- @param asset string
--- @return any
function HasStealthModeAssetLoaded(asset) end

--- @param textureDict string
--- @return any
function HasStreamedTextureDictLoaded(textureDict) end

--- Checks if the specified gxt has loaded into the passed slot.
--- @param gxt string
--- @param slot integer
--- @return any
function HasThisAdditionalTextLoaded(gxt, slot) end

--- @param cutsceneName string
--- @return any
function HasThisCutsceneLoaded(cutsceneName) end

--- @param vehicleAsset integer
--- @return any
function HasVehicleAssetLoaded(vehicleAsset) end

--- @param vehicle integer
--- @return any
function HasVehicleBeenDamagedByBullets(vehicle) end

--- @param vehicle integer
--- @return any
function HasVehicleBeenOwnedByPlayer(vehicle) end

--- Third Parameter = unsure, but pretty sure it is weapon hash --> get_hash_key("weapon_stickybomb") Fourth Parameter = unsure, almost always -1
--- @param driver integer
--- @param vehicle integer
--- @param weaponHash integer
--- @param p3 any
--- @return any
function HasVehicleGotProjectileAttached(driver, vehicle, weaponHash, p3) end

--- @return any
function HasVehiclePhoneExplosiveDevice() end

--- @param recording integer
--- @param script string
--- @return any
function HasVehicleRecordingBeenLoaded(recording, script) end

--- @param weaponHash integer
--- @return any
function HasWeaponAssetLoaded(weaponHash) end

--- @param weapon integer
--- @param addonHash integer
--- @return any
function HasWeaponGotWeaponComponent(weapon, addonHash) end

--- @param ped integer
--- @return any
function HaveAllStreamingRequestsCompleted(ped) end

--- @return any
function HaveCreditsReachedEnd() end

--- @param vehicle integer
--- @return any
function HaveVehicleModsStreamedIn(vehicle) end

--- HIDE_*_THIS_FRAME Hides area and vehicle name HUD components for one frame.
function HideAreaAndVehicleNameThisFrame() end

function HideHelpTextThisFrame() end

--- I think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)
function HideHudAndRadarThisFrame() end

--- This function hides various HUD (Heads-up Display) components. Listed below are the integers and the corresponding HUD component. * 1 : WANTED_STARS * 2 : WEAPON_ICON * 3 : CASH * 4 : MP_CASH * 5 : MP_MESSAGE * 6 : VEHICLE_NAME * 7 : AREA_NAME * 8 : VEHICLE_CLASS * 9 : STREET_NAME * 10 : HELP_TEXT * 11 : FLOATING_HELP_TEXT\_1 * 12 : FLOATING_HELP_TEXT\_2 * 13 : CASH_CHANGE * 14 : RETICLE * 15 : SUBTITLE_TEXT * 16 : RADIO_STATIONS * 17 : SAVING_GAME * 18 : GAME_STREAM * 19 : WEAPON_WHEEL * 20 : WEAPON_WHEEL_STATS * 21 : HUD_COMPONENTS * 22 : HUD_WEAPONS These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
--- @param id integer
function HideHudComponentThisFrame(id) end

function HideLoadingOnFadeThisFrame() end

function HideMinimapExteriorMapThisFrame() end

function HideMinimapInteriorMapThisFrame() end

--- @param blip integer
function HideNumberOnBlip(blip) end

--- @param ped integer
--- @param p1 any
--- @param p2 boolean
function HidePedBloodDamageByZone(ped, p1, p2) end

--- Hides the players weapon during a cutscene.
--- @param ped integer
--- @param toggle boolean
function HidePedWeaponForScriptedCutscene(ped, toggle) end

--- @param pickup integer
--- @param toggle boolean
function HidePortablePickupWhenDetached(pickup, toggle) end

--- @param id integer
function HideScriptedHudComponentThisFrame(id) end

--- NativeDB Introduced: v1604
--- @param vehicle integer
--- @param toggle boolean
function HideVehicleTombstone(vehicle, toggle) end

--- This native is marked as a deprecated native internally, use HINT_SCRIPT_AUDIO_BANK instead
--- @param bankName string
--- @param bOverNetwork boolean
--- @return any
function HintAmbientAudioBank(bankName, bOverNetwork) end

--- This is marked as a deprecated function internally, please use HINT_SCRIPT_AUDIO_BANK instead.
--- @param bankName string
--- @param bOverNetwork boolean
--- @param playerBits integer
--- @return any
function HintMissionAudioBank(bankName, bOverNetwork, playerBits) end

--- Hints that this bank would be good to load if there are free slots. Does not guarentee loading of the bank, REQUEST_SCRIPT_AUDIO_BANK MUST be used as normal before triggering sounds" This native has a new argument on newer game builds: * **playerBits**: likely used to specifiy players to sync to as a bit mask (1 << (0-128))
--- @param bankName string
--- @param bOverNetwork boolean
--- @return any
function HintScriptAudioBank(bankName, bOverNetwork) end

--- @param p0 any
--- @param p1 any
function HiredLimo(p0, p1) end

--- Displays loading screen tips, requires `_0x56C8B608CFD49854` to be called beforehand.
function HudDisplayLoadingScreenTips() end

--- Forces the weapon wheel to show/hide.
--- @param show boolean
function HudForceWeaponWheel(show) end

--- Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
--- @param weaponHash integer
function HudSetWeaponWheelTopSlot(weaponHash) end

--- Returns the weapon hash to the selected/highlighted weapon in the wheel
--- @return any
function HudWeaponWheelGetSelectedHash() end

--- Returns the weapon hash active in a specific weapon wheel slotList
--- @param weaponTypeIndex integer
--- @return any
function HudWeaponWheelGetSlotHash(weaponTypeIndex) end

--- Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
--- @param toggle boolean
function HudWeaponWheelIgnoreControlInput(toggle) end

--- Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
function HudWeaponWheelIgnoreSelection() end

--- @param toggle boolean
function IgnoreNextRestart(toggle) end

function InitCreatorBudget() end

--- @return integer
function InitShopPedComponent() end

--- @return integer
function InitShopPedProp() end

--- @param audioName string
--- @param entity integer
function InitSynchSceneAudioWithEntity(audioName, entity) end

--- @param audioName string
--- @param x number
--- @param y number
--- @param z number
function InitSynchSceneAudioWithPosition(audioName, x, y, z) end

function InstantlyFillPedPopulation() end

function InstantlyFillVehiclePopulation() end

--- Interpolates the camera to specified parameters over a set duration using various curve types for position, rotation, and fov. NativeDB Introduced: v3258
--- @param camera integer
--- @param camPosX number
--- @param camPosY number
--- @param camPosZ number
--- @param camRotX number
--- @param camRotY number
--- @param camRotZ number
--- @param fov number
--- @param duration integer
--- @param posCurveType integer
--- @param rotCurveType integer
--- @param rotOrder integer
--- @param fovCurveType integer
function InterpolateCamWithParams(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType) end

--- Handles conversation interrupts, using the code-side system for improved timing and to minimize unfriendly logic interactions.
--- @param interrupterPed integer
--- @param context string
--- @param voiceName string
function InterruptConversation(interrupterPed, context, voiceName) end

--- Handles conversation interrupts and pauses, using the code-side system for improved timing and to minimize unfriendly logic interactions.
--- @param interrupterPed integer
--- @param context string
--- @param voiceName string
function InterruptConversationAndPause(interrupterPed, context, voiceName) end

--- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not). -------------------------------------------------------- if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
--- @param value integer
--- @return any
function IntToParticipantindex(value) end

--- Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
--- @param value integer
--- @return any
function IntToPlayerindex(value) end

--- Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
function InvalidateIdleCam() end

--- Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
function InvalidateVehicleIdleCam() end

--- @param object string
--- @return any
function IsAceAllowed(object) end

--- @return any
function IsAimCamActive() end

--- IS_A*
--- @return any
function IsAimCamThirdPersonActive() end

--- @param alarmName string
--- @return any
function IsAlarmPlaying(alarmName) end

--- @param ped integer
--- @return any
function IsAmbientSpeechDisabled(ped) end

--- @param ped integer
--- @return any
function IsAmbientSpeechPlaying(ped) end

--- @param ambientZone string
--- @return any
function IsAmbientZoneEnabled(ambientZone) end

--- @param handle integer
--- @return any
function IsAnEntity(handle) end

--- @param pedHandle integer
--- @return any
function IsAnimalVocalizationPlaying(pedHandle) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
--- @return integer
function IsAnyAirDefenseZoneInsideSphere(x, y, z, radius) end

--- @param vehicle integer
--- @return any
function IsAnyEntityAttachedToHandlerFrame(vehicle) end

--- @param garageHash integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 any
--- @return any
function IsAnyEntityEntirelyInsideGarage(garageHash, p1, p2, p3, p4) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function IsAnyHostilePedNearPoint(ped, x, y, z, radius) end

--- @param x number
--- @param y number
--- @param z number
--- @param range number
--- @param p4 boolean
--- @return any
function IsAnyObjectNearPoint(x, y, z, range, p4) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function IsAnyPedNearPoint(x, y, z, radius) end

--- @param vehicle integer
--- @return any
function IsAnyPedRappellingFromHeli(vehicle) end

--- Verifies whether a ped is firing within a specific area.
--- @param minX number
--- @param minY number
--- @param minZ number
--- @param maxX number
--- @param maxY number
--- @param maxZ number
--- @param bHighlightArea boolean
--- @param bDo3DCheck boolean
--- @return any
function IsAnyPedShootingInArea(minX, minY, minZ, maxX, maxY, maxZ, bHighlightArea, bDo3DCheck) end

--- Determines if any ped-independent, positionally-based scripted speech is currently active. This typically includes speech events triggered using `PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE`. NativeDB Introduced: v2189
--- @return any
function IsAnyPositionalSpeechPlaying() end

--- @param ped integer
--- @return any
function IsAnySpeechPlaying(ped) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function IsAnyVehicleNearPoint(x, y, z, radius) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 boolean
--- @param p10 boolean
--- @param p11 any
--- @param p12 boolean
--- @return any
function IsAreaOccupied(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) end

--- @param scene string
--- @return any
function IsAudioSceneActive(scene) end

--- if (MISC::IS_AUSSIE_VERSION()) { sub_127a9(&l_31, 1024); // l_31 |= 1024 l_129 = 3; sub_129d2("AUSSIE VERSION IS TRUE!?!?!"); // DEBUG } Used to block some of the prostitute stuff due to laws in Australia.
--- @return any
function IsAussieVersion() end

--- @return any
function IsAutoSaveInProgress() end

--- Returns true if the minimap is currently expanded. False if it's the normal minimap state. Use `IsBigmapFull` to check if the full map is currently revealed on the minimap.
--- @return any
function IsBigmapActive() end

--- @return any
function IsBigmapFull() end

--- @param vehicle integer
--- @return any
function IsBigVehicle(vehicle) end

--- Returns bit's boolean state from [offset] of [address]. Example: MISC::IS_BIT_SET(bitAddress, 1); To enable and disable bits, see: MISC::SET_BIT(&bitAddress, 1); // enable MISC::CLEAR_BIT(&bitAddress, 1); // disable
--- @param address integer
--- @param offset integer
--- @return any
function IsBitSet(address, offset) end

--- @param blip integer
--- @return any
function IsBlipFlashing(blip) end

--- @param blip integer
--- @return any
function IsBlipOnMinimap(blip) end

--- @param blip integer
--- @return any
function IsBlipShortRange(blip) end

--- Checks if a boat is currently anchored. This native is a getter for SET_BOAT_ANCHOR. NativeDB Introduced: v573
--- @param boat integer
--- @return any
function IsBoatAnchored(boat) end

--- @param vehicle integer
--- @return any
function IsBoatAnchoredAndFrozen(vehicle) end

--- @param vehicle integer
--- @return any
function IsBoatWrecked(vehicle) end

--- @return any
function IsBonnetCinematicCamRendering() end

--- See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area. For projectiles, see: `IS_PROJECTILE_TYPE_IN_ANGLED_AREA`
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param ownedByPlayer boolean
--- @return any
function IsBulletInAngledArea(x1, y1, z1, x2, y2, z2, width, ownedByPlayer) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param ownedByPlayer boolean
--- @return any
function IsBulletInArea(x, y, z, radius, ownedByPlayer) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param ownedByPlayer boolean
--- @return any
function IsBulletInBox(x1, y1, z1, x2, y2, z2, ownedByPlayer) end

--- Returns whether or not the passed camera handle is active.
--- @param cam integer
--- @return any
function IsCamActive(cam) end

--- @param cam integer
--- @return any
function IsCamInterpolating(cam) end

--- Animations list
--- @param cam integer
--- @param animName string
--- @param animDictionary string
--- @return any
function IsCamPlayingAnim(cam, animName, animDictionary) end

--- @param cam integer
--- @return any
function IsCamRendering(cam) end

--- @param cam integer
--- @return any
function IsCamShaking(cam) end

--- @param p0 any
--- @return any
function IsCamSplinePaused(p0) end

--- NativeDB Introduced: v1493
--- @return any
function IsCinematicCamInputActive() end

--- @return any
function IsCinematicCamRendering() end

--- @return any
function IsCinematicCamShaking() end

--- @return any
function IsCinematicIdleCamRendering() end

--- @param p0 any
--- @return any
function IsCinematicShotActive(p0) end

--- Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
--- @param x number
--- @param y number
--- @param z number
--- @return any
function IsCollisionMarkedOutside(x, y, z) end

--- Returns true if command line option '-benchmark' is set.
--- @return any
function IsCommandLineBenchmarkValueSet() end

--- @return any
function IsCommerceDataValid() end

--- @return any
function IsCommerceStoreOpen() end

--- @param itemHash integer
--- @return any
function IsContentItemLocked(itemHash) end

--- @param padIndex integer
--- @param control integer
--- @return any
function IsControlEnabled(padIndex, control) end

--- Returns whether a control was newly pressed since the last check.
--- @param padIndex integer
--- @param control integer
--- @return any
function IsControlJustPressed(padIndex, control) end

--- Returns whether a control was newly released since the last check.
--- @param padIndex integer
--- @param control integer
--- @return any
function IsControlJustReleased(padIndex, control) end

--- Returns whether a control is currently pressed.
--- @param padIndex integer
--- @param control integer
--- @return any
function IsControlPressed(padIndex, control) end

--- Returns whether a control is currently *not* pressed.
--- @param padIndex integer
--- @param control integer
--- @return any
function IsControlReleased(padIndex, control) end

--- @param ped integer
--- @return any
function IsConversationPedDead(ped) end

--- xyz - relative to the world origin.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function IsCopPedInArea_3d(x1, y1, z1, x2, y2, z2) end

--- Usage: public bool isCopInRange(Vector3 Location, float Range) { return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range); }
--- @param x1 number
--- @param x2 number
--- @param y1 number
--- @param y2 number
--- @param z1 number
--- @param z2 number
--- @return any
function IsCopVehicleInArea_3d(x1, x2, y1, y2, z1, z2) end

--- @return any
function IsCutsceneActive() end

--- @param flag integer
--- @return any
function IsCutscenePlaybackFlagSet(flag) end

--- @return any
function IsCutscenePlaying() end

--- @param netID integer
--- @return any
function IsDamageTrackerActiveOnNetworkId(netID) end

--- @param player integer
--- @return any
function IsDamageTrackerActiveOnPlayer(player) end

--- @param decal integer
--- @return any
function IsDecalAlive(decal) end

--- @param padIndex integer
--- @param control integer
--- @return any
function IsDisabledControlJustPressed(padIndex, control) end

--- @param padIndex integer
--- @param control integer
--- @return any
function IsDisabledControlJustReleased(padIndex, control) end

--- @param padIndex integer
--- @param control integer
--- @return any
function IsDisabledControlPressed(padIndex, control) end

--- @param padIndex integer
--- @param control integer
--- @return any
function IsDisabledControlReleased(padIndex, control) end

--- Example: DLC::IS_DLC_PRESENT($\mpbusiness2\); ($ = gethashkey) bruteforce these: 0xB119F6D 0x96F02EE6
--- @param dlcHash integer
--- @return any
function IsDlcPresent(dlcHash) end

--- @param hash integer
--- @return any
function IsDlcVehicleMod(hash) end

--- @param doorHash integer
--- @return any
function IsDoorClosed(doorHash) end

--- if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)) { OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash); }
--- @param doorHash integer
--- @return any
function IsDoorRegisteredWithSystem(doorHash) end

--- @param ped integer
--- @return any
function IsDrivebyTaskUnderneathDrivingTask(ped) end

--- Returns whether or not a browser is created for a specified DUI browser object.
--- @param duiObject integer
--- @return any
function IsDuiAvailable(duiObject) end

--- Gets whether or not this is the CitizenFX server.
--- @return any
function IsDuplicityVersion() end

--- @return any
function IsDurangoVersion() end

--- @param entity integer
--- @return any
function IsEntityAMissionEntity(entity) end

--- @param entity integer
--- @return any
function IsEntityAnObject(entity) end

--- @param entity integer
--- @return any
function IsEntityAPed(entity) end

--- Checks if entity is within x/y/zSize distance of x/y/z. Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
--- @param entity integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param xSize number
--- @param ySize number
--- @param zSize number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 integer
--- @return any
function IsEntityAtCoord(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9) end

--- Checks if entity1 is within the box defined by x/y/zSize of entity2. Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
--- @param entity1 integer
--- @param entity2 integer
--- @param xSize number
--- @param ySize number
--- @param zSize number
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 integer
--- @return any
function IsEntityAtEntity(entity1, entity2, xSize, ySize, zSize, p5, p6, p7) end

--- @param entity integer
--- @return any
function IsEntityAttached(entity) end

--- @param entity integer
--- @return any
function IsEntityAttachedToAnyObject(entity) end

--- @param entity integer
--- @return any
function IsEntityAttachedToAnyPed(entity) end

--- @param entity integer
--- @return any
function IsEntityAttachedToAnyVehicle(entity) end

--- @param from integer
--- @param to integer
--- @return any
function IsEntityAttachedToEntity(from, to) end

--- @param vehicle integer
--- @param entity integer
--- @return any
function IsEntityAttachedToHandlerFrame(vehicle, entity) end

--- @param entity integer
--- @return any
function IsEntityAVehicle(entity) end

--- NativeDB Added Parameter 2: BOOL p1
--- @param entity integer
--- @return any
function IsEntityDead(entity) end

--- @param entity integer
--- @return any
function IsEntityFocus(entity) end

--- @param entity integer
--- @return any
function IsEntityGhostedToLocalPlayer(entity) end

--- @param entity integer
--- @return any
function IsEntityInAir(entity) end

--- p10 is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA` and `IS_ENTITY_AT_COORD`. See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area.
--- @param entity integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param debug boolean
--- @param includez boolean
--- @param p10 any
--- @return any
function IsEntityInAngledArea(entity, x1, y1, z1, x2, y2, z2, width, debug, includez, p10) end

--- @param entity integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 any
--- @return any
function IsEntityInArea(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9) end

--- @param entity integer
--- @return any
function IsEntityInWater(entity) end

--- @param entity integer
--- @param zone string
--- @return any
function IsEntityInZone(entity, zone) end

--- @param entity integer
--- @return any
function IsEntityOccluded(entity) end

--- @param entity integer
--- @return any
function IsEntityOnFire(entity) end

--- Determines whether the screen position of the specified entity is within the 2D bounds of the screen. This native will not check if the entity is not visible due to being occluded (for example, behind a wall). To check if a entity is on screen and is not occluded, use IS_ENTITY_OCCLUDED.
--- @param entity integer
--- @return any
function IsEntityOnScreen(entity) end

--- See also `IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM` Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3) p4 is always 3 in the scripts. taskFlag: 2 - Check synchronized scene Animations list
--- @param entity integer
--- @param animDict string
--- @param animName string
--- @param taskFlag integer
--- @return any
function IsEntityPlayingAnim(entity, animDict, animName, taskFlag) end

--- A getter for FREEZE_ENTITY_POSITION.
--- @param entity integer
--- @return any
function IsEntityPositionFrozen(entity) end

--- A static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "AI::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution. ^ Attach a phCollider to the ped.
--- @param entity integer
--- @return any
function IsEntityStatic(entity) end

--- @param entity integer
--- @param targetEntity integer
--- @return any
function IsEntityTouchingEntity(entity, targetEntity) end

--- @param entity integer
--- @param modelHash integer
--- @return any
function IsEntityTouchingModel(entity, modelHash) end

--- @param entity integer
--- @param angle number
--- @return any
function IsEntityUpright(entity, angle) end

--- @param entity integer
--- @return any
function IsEntityUpsidedown(entity) end

--- @param entity integer
--- @return any
function IsEntityVisible(entity) end

--- This native checks if the given entity is visible.
--- @param entity integer
--- @return any
function IsEntityVisible(entity) end

--- @param entity integer
--- @return any
function IsEntityVisibleToScript(entity) end

--- @param entity integer
--- @return any
function IsEntityWaitingForWorldCollision(entity) end

--- @param explosionType integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function IsExplosionActiveInArea(explosionType, x1, y1, z1, x2, y2, z2) end

--- See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area.
--- @param explosionType integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @return any
function IsExplosionInAngledArea(explosionType, x1, y1, z1, x2, y2, z2, width) end

--- @param explosionType integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function IsExplosionInArea(explosionType, x1, y1, z1, x2, y2, z2) end

--- @param explosionType integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function IsExplosionInSphere(explosionType, x, y, z, radius) end

--- @return any
function IsFirstPersonAimCamActive() end

--- @param ped integer
--- @return any
function IsFlashLightOn(ped) end

--- @param ped integer
--- @return any
function IsFlashLightOn(ped) end

--- @param hudIndex integer
--- @return any
function IsFloatingHelpTextOnScreen(hudIndex) end

--- @return any
function IsFollowPedCamActive() end

--- @return any
function IsFollowVehicleCamActive() end

--- This function is hard-coded to always return 0.
--- @return any
function IsFrontendFading() end

--- @return any
function IsFrontendReadyForControl() end

--- Hardcoded to return 1
--- @return any
function IsGameInControlOfMusic() end

--- @return any
function IsGameplayCamLookingBehind() end

--- Examples when this function will return 0 are: - During busted screen. - When player is coming out from a hospital. - When player is coming out from a police station. - When player is buying gun from AmmuNation.
--- @return any
function IsGameplayCamRendering() end

--- @return any
function IsGameplayCamShaking() end

--- @return any
function IsGameplayHintActive() end

--- @param garageHash integer
--- @param p1 boolean
--- @param p2 integer
--- @return any
function IsGarageEmpty(garageHash, p1, p2) end

--- @param handler integer
--- @param container integer
--- @return any
function IsHandlerFrameAboveContainer(handler, container) end

--- @param vehicle integer
--- @return any
function IsHeliLandingAreaBlocked(vehicle) end

--- @param vehicle integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @return any
function IsHeliPartBroken(vehicle, p1, p2, p3) end

--- This is a getter for SET_HELI_TAIL_EXPLODE_THROW_DASHBOARD
--- @param heli integer
--- @return any
function IsHeliTailBoomBreakable(heli) end

--- @param heli integer
--- @return any
function IsHeliTailBoomBroken(heli) end

--- @return any
function IsHelpMessageBeingDisplayed() end

--- @return any
function IsHelpMessageFadingOut() end

--- @return any
function IsHelpMessageOnScreen() end

--- @param vehicle integer
--- @return any
function IsHornActive(vehicle) end

--- @return any
function IsHoveringOverMissionCreatorBlip() end

--- Full list of components below HUD = 0; HUD_WANTED_STARS = 1; HUD_WEAPON_ICON = 2; HUD_CASH = 3; HUD_MP_CASH = 4; HUD_MP_MESSAGE = 5; HUD_VEHICLE_NAME = 6; HUD_AREA_NAME = 7; HUD_VEHICLE_CLASS = 8; HUD_STREET_NAME = 9; HUD_HELP_TEXT = 10; HUD_FLOATING_HELP_TEXT_1 = 11; HUD_FLOATING_HELP_TEXT_2 = 12; HUD_CASH_CHANGE = 13; HUD_RETICLE = 14; HUD_SUBTITLE_TEXT = 15; HUD_RADIO_STATIONS = 16; HUD_SAVING_GAME = 17; HUD_GAME_STREAM = 18; HUD_WEAPON_WHEEL = 19; HUD_WEAPON_WHEEL_STATS = 20; MAX_HUD_COMPONENTS = 21; MAX_HUD_WEAPONS = 22; MAX_SCRIPTED_HUD_COMPONENTS = 141;
--- @param id integer
--- @return any
function IsHudComponentActive(id) end

--- @return any
function IsHudHidden() end

--- @return any
function IsHudPreferenceSwitchedOn() end

--- ======================================================= Correction, I have change this to int, instead of int* as it doesn't use a pointer to the createdIncident. If you try it you will crash (or) freeze. =======================================================
--- @param incidentId integer
--- @return any
function IsIncidentValid(incidentId) end

--- @param p0 any
--- @param p1 any
--- @return any
function IsInItemset(p0, p1) end

--- aka "constrained"
--- @return any
function IsInPowerSavingMode() end

--- @param interiorID integer
--- @return any
function IsInteriorCapped(interiorID) end

--- @param interior integer
--- @return any
function IsInteriorDisabled(interior) end

--- @param interior integer
--- @param entitySetName string
--- @return any
function IsInteriorEntitySetActive(interior, entitySetName) end

--- @param interiorID integer
--- @return any
function IsInteriorReady(interiorID) end

--- Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
--- @return any
function IsInteriorRenderingDisabled() end

--- @return any
function IsInteriorScene() end

--- @return any
function IsInVehicleCamDisabled() end

--- @param iplName string
--- @return any
function IsIplActive(iplName) end

--- @param p0 any
--- @return any
function IsItemsetValid(p0) end

--- NativeDB Introduced: 2545
--- @return any
function IsJapaneseVersion() end

--- @return any
function IsLookInverted() end

--- @return any
function IsMemoryCardInUse() end

--- @return any
function IsMessageBeingDisplayed() end

--- @return any
function IsMinigameInProgress() end

--- @return any
function IsMinimapRendering() end

--- @return any
function IsMissionCompletePlaying() end

--- @return any
function IsMissionCompleteReadyForUi() end

--- @param blip integer
--- @return any
function IsMissionCreatorBlip(blip) end

--- @param newsStory integer
--- @return any
function IsMissionNewsStoryUnlocked(newsStory) end

--- NativeDB Introduced: v2372
--- @param vehicle integer
--- @return any
function IsMissionTrain(vehicle) end

--- @return any
function IsMobileInterferenceActive() end

--- @return any
function IsMobilePhoneCallOngoing() end

--- @return any
function IsMobilePhoneRadioActive() end

--- @param model integer
--- @return any
function IsModelAPed(model) end

--- Returns whether the specified model represents a vehicle.
--- @param model integer
--- @return any
function IsModelAVehicle(model) end

--- Check if model is in cdimage(rpf)
--- @param model integer
--- @return any
function IsModelInCdimage(model) end

--- Returns whether the specified model exists in the game.
--- @param model integer
--- @return any
function IsModelValid(model) end

--- @param ped integer
--- @return any
function IsMountedWeaponTaskUnderneathDrivingTask(ped) end

--- **Note:** The buttons need to support mouse (with the `TOGGLE_MOUSE_SUPPORT` scaleform movie method) for it to return `true`.
--- @return any
function IsMouseRolledOverInstructionalButtons() end

--- @param ped integer
--- @return any
function IsMoveBlendRatioRunning(ped) end

--- @param ped integer
--- @return any
function IsMoveBlendRatioSprinting(ped) end

--- @param ped integer
--- @return any
function IsMoveBlendRatioStill(ped) end

--- @param ped integer
--- @return any
function IsMoveBlendRatioWalking(ped) end

--- @param gamerTagId integer
--- @return any
function IsMpGamerTagActive(gamerTagId) end

--- @param gamerTagId integer
--- @return any
function IsMpGamerTagFree(gamerTagId) end

--- @return any
function IsMpGamerTagMovieActive() end

--- Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
--- @return any
function IsMultiplayerChatActive() end

--- @return any
function IsMusicOneshotPlaying() end

--- @param modelHash integer
--- @return any
function IsNamedRendertargetLinked(modelHash) end

--- @param name string
--- @return any
function IsNamedRendertargetRegistered(name) end

--- @return any
function IsNavigatingMenuContent() end

--- Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner. If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function IsNavmeshLoadedInArea(x1, y1, z1, x2, y2, z2) end

--- IS_*
--- @return any
function IsNavmeshRequiredRegionOwnedByAnyThread() end

--- @param netId integer
--- @return any
function IsNetworkIdOwnedByParticipant(netId) end

--- @return any
function IsNetworkLoadingScene() end

--- @return any
function IsNewLoadSceneActive() end

--- @return any
function IsNewLoadSceneLoaded() end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @param weatherType string
--- @return any
function IsNextWeatherType(weatherType) end

--- NativeDB Introduced: 3095 Determines if the nitrous is currently activated in the specified vehicle.
--- @param vehicle integer
--- @return any
function IsNitrousActive(vehicle) end

--- Returns the current NUI focus state previously set with `SET_NUI_FOCUS`.
--- @return any
function IsNuiFocused() end

--- Checks if keyboard input is enabled during NUI focus using `SET_NUI_FOCUS_KEEP_INPUT`.
--- @return any
function IsNuiFocusKeepingInput() end

--- @param object integer
--- @return any
function IsObjectAPickup(object) end

--- NativeDB Introduced: v1365
--- @param object integer
--- @return any
function IsObjectAPortablePickup(object) end

--- @param garageHash integer
--- @param entity integer
--- @param p2 number
--- @param p3 integer
--- @return any
function IsObjectEntirelyInsideGarage(garageHash, entity, p2, p3) end

--- @param objectHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param range number
--- @return any
function IsObjectNearPoint(objectHash, x, y, z, range) end

--- @param garageHash integer
--- @param entity integer
--- @param p2 integer
--- @return any
function IsObjectPartiallyInsideGarage(garageHash, entity, p2) end

--- @param object integer
--- @return any
function IsObjectVisible(object) end

--- @param object integer
--- @return any
function IsObjectWithinBrainActivationRange(object) end

--- Returns the same as `IS_SOCIAL_CLUB_ACTIVE`.
--- @return any
function IsOnlinePoliciesMenuActive() end

--- @return any
function IsOrbisVersion() end

--- @return any
function IsPausemapInInteriorMode() end

--- @return any
function IsPauseMenuActive() end

--- @return any
function IsPauseMenuRestarting() end

--- @return any
function IsPcVersion() end

--- This is a stricter version of `IS_PED_USING_ANY_SCENARIO`. It only returns true if the ped is playing the ambient animations associated with the scenario.
--- @param ped integer
--- @return any
function IsPedActiveInScenario(ped) end

--- @param ped integer
--- @return any
function IsPedAimingFromCover(ped) end

--- Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
--- @param ped integer
--- @return any
function IsPedAPlayer(ped) end

--- This native checks if the given ped is a player.
--- @param ped integer
--- @return any
function IsPedAPlayer(ped) end

--- Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags. | Bit value | Effect | |-----------|-------------------| | 1 | Melee weapons | | 2 | Explosive weapons | | 4 | Any other weapons | Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
--- @param ped integer
--- @param typeFlags integer
--- @return any
function IsPedArmed(ped, typeFlags) end

--- This function is hard-coded to always return 0.
--- @param ped integer
--- @return any
function IsPedBeingArrested(ped) end

--- @param ped integer
--- @return any
function IsPedBeingJacked(ped) end

--- @param ped integer
--- @return any
function IsPedBeingStealthKilled(ped) end

--- p1 is always 0
--- @param ped integer
--- @param p1 integer
--- @return any
function IsPedBeingStunned(ped, p1) end

--- @param colorID integer
--- @return any
function IsPedBlushColorValid(colorID) end

--- @param colorId integer
--- @return any
function IsPedBlushColorValid_2(colorId) end

--- NativeDB Introduced: v1290
--- @param colorID integer
--- @return any
function IsPedBodyBlemishValid(colorID) end

--- @param ped integer
--- @return any
function IsPedClimbing(ped) end

--- An alternative to IS_PED_COMPONENT_VARIATION_GEN9\_EXCLUSIVE that uses local collection indexing instead of the global one. The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version. Collection name and local index inside the collection can be obtained from the global index using GET_PED_COLLECTION_NAME_FROM_DRAWABLE and GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE natives.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @param drawableId integer
--- @return any
function IsPedCollectionComponentVariationGen9Exclusive(ped, componentId, collection, drawableId) end

--- An alternative to IS_PED_COMPONENT_VARIATION_VALID that uses local collection indexing instead of the global one. The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version. Collection name and local index inside the collection can be obtained from the global index using GET_PED_COLLECTION_NAME_FROM_DRAWABLE and GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE natives.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @param drawableId integer
--- @param textureId integer
--- @return any
function IsPedCollectionComponentVariationValid(ped, componentId, collection, drawableId, textureId) end

--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @return any
function IsPedComponentVariationGen9Exclusive(ped, componentId, drawableId) end

--- Checks if the component variation is valid, this works great for randomizing components using loops.
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @return any
function IsPedComponentVariationValid(ped, componentId, drawableId, textureId) end

--- @param ped integer
--- @return any
function IsPedCuffed(ped) end

--- This native returns a true or false value. Ped ped = The ped whose weapon you want to check.
--- @param ped integer
--- @return any
function IsPedCurrentWeaponSilenced(ped) end

--- Determines if a ped is dead. Contrary to what the name might suggest, it does not always detect when a ped is in the 'dying' phase (transitioning to death). The exception is when `checkMeleeDeathFlags` is set to `true`, which then includes peds in the midst of melee takedown moves as being in a dying state, even if the death task has not yet started. NativeDB Introduced: v323
--- @param ped integer
--- @param checkMeleeDeathFlags boolean
--- @return any
function IsPedDeadOrDying(ped, checkMeleeDeathFlags) end

--- @param ped integer
--- @param p1 boolean
--- @return any
function IsPedDefensiveAreaActive(ped, p1) end

--- @param ped integer
--- @return any
function IsPedDiving(ped) end

--- @param ped integer
--- @return any
function IsPedDoingBeastJump(ped) end

--- @param ped integer
--- @return any
function IsPedDoingDriveby(ped) end

--- @param ped integer
--- @return any
function IsPedDucking(ped) end

--- Presumably returns the Entity that the Ped is currently diving out of the way of. var num3; if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0) if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
--- @param ped integer
--- @return any
--- @return integer
function IsPedEvasiveDiving(ped) end

--- @param ped integer
--- @param vehicle integer
--- @return any
--- @return integer
function IsPedExclusiveDriverOfVehicle(ped, vehicle) end

--- angle is ped's view cone
--- @param ped integer
--- @param otherPed integer
--- @param angle number
--- @return any
function IsPedFacingPed(ped, otherPed, angle) end

--- @param ped integer
--- @return any
function IsPedFalling(ped) end

--- Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100. If the handle is invalid, the function returns true.
--- @param ped integer
--- @return any
function IsPedFatallyInjured(ped) end

--- @param ped integer
--- @return any
function IsPedFleeing(ped) end

--- @param ped integer
--- @return any
function IsPedGettingIntoAVehicle(ped) end

--- @param ped integer
--- @return any
function IsPedGettingUp(ped) end

--- @param ped integer
--- @return any
function IsPedGoingIntoCover(ped) end

--- @param ped integer
--- @param groupId integer
--- @return any
function IsPedGroupMember(ped, groupId) end

--- @param colorID integer
--- @return any
function IsPedHairColorValid(colorID) end

--- @param colorId integer
--- @return any
function IsPedHairColorValid_2(colorId) end

--- @param ped integer
--- @return any
function IsPedHandcuffed(ped) end

--- @param ped integer
--- @return any
function IsPedHangingOnToVehicle(ped) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
--- @return any
function IsPedHeadingTowardsPosition(ped, x, y, z, p4) end

--- @return any
function IsPedheadshotImgUploadAvailable() end

--- gtaforums.com/topic/885580-ped-headshotmugshot-txd/
--- @param id integer
--- @return any
function IsPedheadshotReady(id) end

--- gtaforums.com/topic/885580-ped-headshotmugshot-txd/
--- @param id integer
--- @return any
function IsPedheadshotValid(id) end

--- @param ped integer
--- @param entity integer
--- @return any
function IsPedHeadtrackingEntity(ped, entity) end

--- @param ped1 integer
--- @param ped2 integer
--- @return any
function IsPedHeadtrackingPed(ped1, ped2) end

--- @param ped integer
--- @return any
function IsPedHelmetUnk(ped) end

--- Returns true/false if the ped is/isn't humanoid.
--- @param ped integer
--- @return any
function IsPedHuman(ped) end

--- Returns whether the specified ped is hurt.
--- @param ped integer
--- @return any
function IsPedHurt(ped) end

--- @param ped integer
--- @return any
function IsPedInAnyBoat(ped) end

--- @param ped integer
--- @return any
function IsPedInAnyHeli(ped) end

--- @param ped integer
--- @return any
function IsPedInAnyPlane(ped) end

--- @param ped integer
--- @return any
function IsPedInAnyPoliceVehicle(ped) end

--- @param ped integer
--- @return any
function IsPedInAnySub(ped) end

--- @param ped integer
--- @return any
function IsPedInAnyTaxi(ped) end

--- @param ped integer
--- @return any
function IsPedInAnyTrain(ped) end

--- Returns whether the specified ped is in any vehicle. If `atGetIn` is set to true, also returns true if the ped is currently in the process of entering a vehicle (a specific stage check for `CTaskEnterVehicle`).
--- @param ped integer
--- @param atGetIn boolean
--- @return any
function IsPedInAnyVehicle(ped, atGetIn) end

--- Examines whether the ped is engaged in combat; when given a target ped index, it confirms if the ped is actively fighting the specified target, returning true if engaged and false if not.
--- @param ped integer
--- @param target integer
--- @return any
function IsPedInCombat(ped, target) end

--- p1 is nearly always 0 in the scripts.
--- @param ped integer
--- @param exceptUseWeapon boolean
--- @return any
function IsPedInCover(ped, exceptUseWeapon) end

--- @param ped integer
--- @return any
function IsPedInCoverFacingLeft(ped) end

--- @param ped integer
--- @return any
function IsPedInCurrentConversation(ped) end

--- @param ped integer
--- @return any
function IsPedInFlyingVehicle(ped) end

--- @param ped integer
--- @return any
function IsPedInGroup(ped) end

--- @param ped integer
--- @return any
function IsPedInHighCover(ped) end

--- Indicates whether this ped's health is below its injured threshold. The default threshold is 100, these are stored in the `pedhealth.meta` file located in `common:\data\` ### Below are some of the values | InjuredHealthThreshold | Name | |------------------------|-----------| | 100.000000 | Strong | | 100.000000 | Average | | 100.000000 | Weak |
--- @param ped integer
--- @return any
function IsPedInjured(ped) end

--- Notes: The function only returns true while the ped is: A.) Swinging a random melee attack (including pistol-whipping) B.) Reacting to being hit by a melee attack (including pistol-whipping) C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
--- @param ped integer
--- @return any
function IsPedInMeleeCombat(ped) end

--- @param ped integer
--- @param modelHash integer
--- @return any
function IsPedInModel(ped, modelHash) end

--- @param ped integer
--- @return any
function IsPedInParachuteFreeFall(ped) end

--- Gets a value indicating whether the specified ped is in the specified vehicle. If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
--- @param ped integer
--- @param vehicle integer
--- @param atGetIn boolean
--- @return any
function IsPedInVehicle(ped, vehicle, atGetIn) end

--- This native checks if a ped is on the ground, in pain from a (gunshot) wound.
--- @param ped integer
--- @return any
function IsPedInWrithe(ped) end

--- @param ped integer
--- @return any
function IsPedJacking(ped) end

--- @param ped integer
--- @return any
function IsPedJumping(ped) end

--- @param ped integer
--- @return any
function IsPedJumpingOutOfVehicle(ped) end

--- @param colorID integer
--- @return any
function IsPedLipstickColorValid(colorID) end

--- @param colorId integer
--- @return any
function IsPedLipstickColorValid_2(colorId) end

--- Returns true/false if the ped is/isn't male.
--- @param ped integer
--- @return any
function IsPedMale(ped) end

--- @param ped integer
--- @param modelHash integer
--- @return any
function IsPedModel(ped, modelHash) end

--- @param ped integer
--- @return any
function IsPedOnAnyBike(ped) end

--- @param ped integer
--- @return any
function IsPedOnFoot(ped) end

--- Same function call as PED::GET_MOUNT, aka just returns 0
--- @param ped integer
--- @return any
function IsPedOnMount(ped) end

--- @param ped integer
--- @param vehicle integer
--- @return any
function IsPedOnSpecificVehicle(ped, vehicle) end

--- Gets a value indicating whether the specified ped is on top of any vehicle. Return 1 when ped is on vehicle. Return 0 when ped is not on a vehicle.
--- @param ped integer
--- @return any
function IsPedOnVehicle(ped) end

--- IS_PED_* Returns true if the ped is currently opening a door (CTaskOpenDoor).
--- @param ped integer
--- @return any
function IsPedOpeningADoor(ped) end

--- @param ped integer
--- @return any
function IsPedPerformingDependentComboLimit(ped) end

--- @param ped integer
--- @return any
function IsPedPerformingMeleeAction(ped) end

--- @param ped integer
--- @return any
function IsPedPerformingStealthKill(ped) end

--- @param ped integer
--- @return any
function IsPedPlantingBomb(ped) end

--- @param ped integer
--- @return any
function IsPedPlayingBaseClipInScenario(ped) end

--- @param ped integer
--- @return any
function IsPedProne(ped) end

--- If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
--- @param ped integer
--- @return any
function IsPedRagdoll(ped) end

--- @param ped integer
--- @return any
function IsPedRagdoll(ped) end

--- Returns whether the specified ped is reloading.
--- @param ped integer
--- @return any
function IsPedReloading(ped) end

--- @param ped integer
--- @param event any
--- @return any
function IsPedRespondingToEvent(ped, event) end

--- @param ped integer
--- @return any
function IsPedRingtonePlaying(ped) end

--- @param ped integer
--- @return any
function IsPedRunning(ped) end

--- @param ped integer
--- @return any
function IsPedRunningArrestTask(ped) end

--- @param ped integer
--- @return any
function IsPedRunningMeleeTask(ped) end

--- @param ped integer
--- @return any
function IsPedRunningMobilePhoneTask(ped) end

--- @param ped integer
--- @return any
function IsPedRunningRagdollTask(ped) end

--- @param ped integer
--- @return any
function IsPedShaderEffectValid(ped) end

--- Returns whether the specified ped is shooting.
--- @param ped integer
--- @return any
function IsPedShooting(ped) end

--- @param ped integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p7 boolean
--- @param p8 boolean
--- @return any
function IsPedShootingInArea(ped, x1, y1, z1, x2, y2, z2, p7, p8) end

--- Detect if ped is in any vehicle [True/False]
--- @param ped integer
--- @return any
function IsPedSittingInAnyVehicle(ped) end

--- Detect if ped is sitting in the specified vehicle [True/False]
--- @param ped integer
--- @param vehicle integer
--- @return any
function IsPedSittingInVehicle(ped, vehicle) end

--- @param ped integer
--- @return any
function IsPedSprinting(ped) end

--- @param ped integer
--- @return any
function IsPedStill(ped) end

--- Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
--- @param ped integer
--- @return any
function IsPedStopped(ped) end

--- What's strafing?
--- @param ped integer
--- @return any
function IsPedStrafing(ped) end

--- @param ped integer
--- @return any
function IsPedStrafing(ped) end

--- @param Ped integer
--- @return any
function IsPedSwappingWeapon(Ped) end

--- @param ped integer
--- @return any
function IsPedSwimming(ped) end

--- @param ped integer
--- @return any
function IsPedSwimmingUnderWater(ped) end

--- @param ped integer
--- @return any
function IsPedTakingOffHelmet(ped) end

--- @param ped integer
--- @return any
function IsPedTracked(ped) end

--- If the ped is attempting to enter a locked vehicle.
--- @param ped integer
--- @return any
function IsPedTryingToEnterALockedVehicle(ped) end

--- @param ped integer
--- @return any
function IsPedUsingActionMode(ped) end

--- @param ped integer
--- @return any
function IsPedUsingActionMode(ped) end

--- @param ped integer
--- @return any
function IsPedUsingAnyScenario(ped) end

--- See `TASK_START_SCENARIO_IN_PLACE` for a list of scenarios.
--- @param ped integer
--- @param scenario string
--- @return any
function IsPedUsingScenario(ped, scenario) end

--- @param ped integer
--- @return any
function IsPedVaulting(ped) end

--- @param ped integer
--- @return any
function IsPedWalking(ped) end

--- @param ped integer
--- @param weaponHash integer
--- @param componentHash integer
--- @return any
function IsPedWeaponComponentActive(ped, weaponHash, componentHash) end

--- @param ped integer
--- @return any
function IsPedWeaponReadyToShoot(ped) end

--- Returns true if the ped passed through the parenthesis is wearing a helmet.
--- @param ped integer
--- @return any
function IsPedWearingHelmet(ped) end

--- @param object integer
--- @return any
function IsPickupWeaponObjectValid(object) end

--- @param plane integer
--- @return any
function IsPlaneLandingGearIntact(plane) end

--- @param vehicle integer
--- @return any
function IsPlaybackGoingOnForVehicle(vehicle) end

--- @param vehicle integer
--- @return any
function IsPlaybackUsingAiGoingOnForVehicle(vehicle) end

--- @param playerSrc integer
--- @param object string
--- @return any
function IsPlayerAceAllowed(playerSrc, object) end

--- Returns true if an unk value is greater than 0.0f
--- @param player integer
--- @return any
function IsPlayerBattleAware(player) end

--- Return true while player is being arrested / busted. If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control) If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
--- @param player integer
--- @param atArresting boolean
--- @return any
function IsPlayerBeingArrested(player, atArresting) end

--- @param player integer
--- @return any
function IsPlayerBluetoothEnable(player) end

--- Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene. Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
--- @return any
function IsPlayerCamControlDisabled() end

--- Returns TRUE if the player ('s ped) is climbing at the moment.
--- @param player integer
--- @return any
function IsPlayerClimbing(player) end

--- Requests whether or not the commerce data for the specified player has loaded.
--- @param playerSrc integer
--- @return any
function IsPlayerCommerceInfoLoaded(playerSrc) end

--- Requests whether or not the commerce data for the specified player has loaded from Tebex.
--- @param playerSrc integer
--- @return any
function IsPlayerCommerceInfoLoadedExt(playerSrc) end

--- Can the player control himself, used to disable controls for player for things like a cutscene. --- You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
--- @param player integer
--- @return any
function IsPlayerControlOn(player) end

--- @param player integer
--- @return any
function IsPlayerDead(player) end

--- cpp enum eViolationType { // Checks if the player is driving on pedestrians walk ways VT_PAVED_PEDESTRIAN_AREAS = 0, // Checks if the player is running through red lights // This takes some time to return true. VT_RUNNING_REDS = 1, // checks if the player is driving on the wrong side of the road VT_AGAINST_TRAFFIC = 2 }; Used solely in "Al Di Napoli" with type 2 for a voiceline.
--- @param player integer
--- @param type integer
--- @return any
function IsPlayerDrivingDangerously(player, type) end

--- @param garageHash integer
--- @param player integer
--- @param p2 number
--- @param p3 integer
--- @return any
function IsPlayerEntirelyInsideGarage(garageHash, player, p2, p3) end

--- This will return true if the player is evading wanted level, meaning that the wanted level stars are blink. Otherwise will return false. If the player is not wanted, it simply returns false.
--- @param playerSrc integer
--- @return any
function IsPlayerEvadingWantedLevel(playerSrc) end

--- Gets a value indicating whether the specified player is currently aiming freely.
--- @param player integer
--- @return any
function IsPlayerFreeAiming(player) end

--- Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
--- @param player integer
--- @param entity integer
--- @return any
function IsPlayerFreeAimingAtEntity(player, entity) end

--- @param player integer
--- @return any
function IsPlayerFreeForAmbientTask(player) end

--- @param player integer
--- @return any
function IsPlayerInCutscene(player) end

--- @param playerSrc integer
--- @return any
function IsPlayerInFreeCamMode(playerSrc) end

--- this function is hard-coded to always return 0.
--- @return any
function IsPlayerLoggingInNp() end

--- It returns true if the player is online, suggesting they are also logged in locally. Note that this is an alias for `NETWORK_IS_SIGNED_ONLINE`.
--- @return any
function IsPlayerOnline() end

--- @param garageHash integer
--- @param player integer
--- @param p2 integer
--- @return any
function IsPlayerPartiallyInsideGarage(garageHash, player, p2) end

--- Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
--- @param player integer
--- @return any
function IsPlayerPlaying(player) end

--- @param player integer
--- @return any
function IsPlayerPressingHorn(player) end

--- @param player integer
--- @return any
function IsPlayerReadyForCutscene(player) end

--- Returns true if the player is riding a train.
--- @param player integer
--- @return any
function IsPlayerRidingTrain(player) end

--- @param player integer
--- @return any
function IsPlayerScriptControlOn(player) end

--- Returns true if the player is currently switching, false otherwise. (When the camera is in the sky moving from Trevor to Franklin for example)
--- @return any
function IsPlayerSwitchInProgress() end

--- @param player integer
--- @return any
function IsPlayerTargettingAnything(player) end

--- @param player integer
--- @param entity integer
--- @return any
function IsPlayerTargettingEntity(player, entity) end

--- @return any
function IsPlayerTeleportActive() end

--- @param playerSrc integer
--- @return any
function IsPlayerUsingSuperJump(playerSrc) end

--- @return any
function IsPlayerVehRadioEnable() end

--- @param player integer
--- @param wantedLevel integer
--- @return any
function IsPlayerWantedLevelGreater(player, wantedLevel) end

--- @param ped integer
--- @return any
function IsPlayingPhoneGestureAnim(ped) end

--- NativeDB Introduced: v1604
--- @param tvChannel integer
--- @param p1 any
--- @return any
function IsPlaylistUnk(tvChannel, p1) end

--- An **angled area** is an X-Z oriented rectangle with three parameters: 1. **origin**: the mid-point along a base edge of the rectangle; 2. **extent**: the mid-point of opposite base edge on the other Z; 3. **width**: the length of the base edge; (named derived from logging strings `CNetworkRoadNodeWorldStateData`). The oriented rectangle can then be derived from the direction of the two points (`norm(origin - extent)`), its orthonormal, and the width, e.g: 1. golf_mp 2. am_taxi
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param p10 boolean
--- @param includez boolean
--- @return any
function IsPointInAngledArea(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, p10, includez) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 any
--- @return any
function IsPointObscuredByAMissionEntity(p0, p1, p2, p3, p4, p5, p6) end

--- Gets a value indicating whether the specified position is on a road. The vehicle parameter is not implemented (ignored).
--- @param x number
--- @param y number
--- @param z number
--- @param vehicle integer
--- @return any
function IsPointOnRoad(x, y, z, vehicle) end

--- NativeDB Introduced: v1290
--- @param id integer
--- @return any
function IsPopMultiplierAreaUnk(id) end

--- The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
--- @param x number
--- @param y number
--- @param z number
--- @param range number
--- @param p4 boolean
--- @param checkVehicles boolean
--- @param checkPeds boolean
--- @param p7 boolean
--- @param p8 boolean
--- @param ignoreEntity integer
--- @param p10 boolean
--- @return any
function IsPositionOccupied(x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10) end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @param weatherType string
--- @return any
function IsPrevWeatherType(weatherType) end

--- @param principal string
--- @param object string
--- @return any
function IsPrincipalAceAllowed(principal, object) end

--- Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle. ownedByPlayer = only projectiles fired by the player will be detected.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param ownedByPlayer boolean
--- @return any
function IsProjectileInArea(x1, y1, z1, x2, y2, z2, ownedByPlayer) end

--- See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area. NativeDB Removed Parameter 7: float p7
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param p7 number
--- @param weaponHash integer
--- @param ownedByPlayer boolean
--- @return any
function IsProjectileTypeInAngledArea(x1, y1, z1, x2, y2, z2, width, p7, weaponHash, ownedByPlayer) end

--- Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param type integer
--- @param ownedByPlayer boolean
--- @return any
function IsProjectileTypeInArea(x1, y1, z1, x2, y2, z2, type, ownedByPlayer) end

--- @param x number
--- @param y number
--- @param z number
--- @param projHash integer
--- @param radius number
--- @param ownedByPlayer boolean
--- @return any
function IsProjectileTypeWithinDistance(x, y, z, projHash, radius, ownedByPlayer) end

--- @return any
function IsPs3Version() end

--- @return any
function IsRadarHidden() end

--- @return any
function IsRadarPreferenceSwitchedOn() end

--- @return any
function IsRadioFadedOut() end

--- @return any
function IsRadioRetuning() end

--- @param radioStation string
--- @return any
function IsRadioStationFavourited(radioStation) end

--- Can be used to get state of raw key on keyboard. Virtual key codes can be found here
--- @param rawKeyIndex integer
--- @return any
function IsRawKeyDown(rawKeyIndex) end

--- Can be used to get state of raw key on keyboard. Virtual key codes can be found here
--- @param rawKeyIndex integer
--- @return any
function IsRawKeyPressed(rawKeyIndex) end

--- Can be used to get release state of raw key on keyboard. Virtual key codes can be found here
--- @param rawKeyIndex integer
--- @return any
function IsRawKeyReleased(rawKeyIndex) end

--- Can be used to get state of raw key on keyboard. Virtual key codes can be found here
--- @param rawKeyIndex integer
--- @return any
function IsRawKeyUp(rawKeyIndex) end

--- Checks if you're recording.
--- @return any
function IsRecording() end

--- @return any
function IsReportugcMenuOpen() end

--- @return any
function IsRockstarMessageReadyForScript() end

--- NativeDB Introduced: v1290
--- @param scaleformIndex integer
--- @return any
function IsScaleformMovieDeleting(scaleformIndex) end

--- methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
--- @param method_return integer
--- @return any
function IsScaleformMovieMethodReturnValueReady(method_return) end

--- Occurrences in the b617d scripts: "ARMY_GUARD", "ARMY_HELI", "BLIMP", "Cinema_Downtown", "Cinema_Morningwood", "Cinema_Textile", "City_Banks", "Countryside_Banks", "DEALERSHIP", "KORTZ_SECURITY", "LSA_Planes", "MP_POLICE", "Observatory_Bikers", "POLICE_POUND1", "POLICE_POUND2", "POLICE_POUND3", "POLICE_POUND4", "POLICE_POUND5", "Rampage1", "SANDY_PLANES", "SCRAP_SECURITY", "SEW_MACHINE", "SOLOMON_GATE" Sometimes used with DOES_SCENARIO_GROUP_EXIST: if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) { else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
--- @param scenarioGroup string
--- @return any
function IsScenarioGroupEnabled(scenarioGroup) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @return any
function IsScenarioOccupied(p0, p1, p2, p3, p4) end

--- Occurrences in the b617d scripts: "PROP_HUMAN_SEAT_CHAIR", "WORLD_HUMAN_DRINKING", "WORLD_HUMAN_HANG_OUT_STREET", "WORLD_HUMAN_SMOKING", "WORLD_MOUNTAIN_LION_WANDER", "WORLD_HUMAN_DRINKING" Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts. scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
--- @param scenarioType string
--- @return any
function IsScenarioTypeEnabled(scenarioType) end

--- Returns whether screen transition to blur/from blur is running.
--- @return any
function IsScreenblurFadeRunning() end

--- @return any
function IsScreenFadedIn() end

--- @return any
function IsScreenFadedOut() end

--- @return any
function IsScreenFadingIn() end

--- @return any
function IsScreenFadingOut() end

--- @return any
function IsScriptedConversationLoaded() end

--- @return any
function IsScriptedConversationOngoing() end

--- @param id integer
--- @return any
function IsScriptedHudComponentActive(id) end

--- @param id integer
--- @return any
function IsScriptedHudComponentHiddenThisFrame(id) end

--- Animations list
--- @param ped integer
--- @param animDict string
--- @param anim string
--- @return any
function IsScriptedScenarioPedUsingConditionalAnim(ped, animDict, anim) end

--- @param ped integer
--- @return any
function IsScriptedSpeechPlaying(ped) end

--- Determines if a global camera shake is currently active. You can stop the currently active global camera shake using STOP_SCRIPT_GLOBAL_SHAKING. NativeDB Introduced: v323
--- @return any
function IsScriptGlobalShaking() end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @return any
function IsScubaGearLightEnabled(ped) end

--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function IsSeatWarpOnly(vehicle, seatIndex) end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
--- @param eventType integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function IsShockingEventInSphere(eventType, x, y, z, radius) end

--- Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function IsSniperBulletInArea(x1, y1, z1, x2, y2, z2) end

--- This function is hard-coded to always return 0.
--- @return any
function IsSniperInverted() end

--- @return any
function IsSocialClubActive() end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
--- @return any
function IsSpecialAbilityActive(player) end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
--- @return any
function IsSpecialAbilityEnabled(player) end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
--- @return any
function IsSpecialAbilityMeterFull(player) end

--- @param playerModel integer
--- @return any
function IsSpecialAbilityUnlocked(playerModel) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @return any
function IsSphereVisible(x, y, z, radius) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @return any
function IsSphereVisibleToAnotherMachine(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @return any
function IsSphereVisibleToPlayer(p0, p1, p2, p3, p4) end

--- Returns true when the srl from BEGIN_SRL is loaded.
--- @return any
function IsSrlLoaded() end

--- NativeDB Introduced: 2545
--- @return any
function IsSteamVersion() end

--- @return any
function IsStoreAvailableToUser() end

--- @param p0 integer
--- @return any
function IsStreamingAdditionalText(p0) end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Returns whether an asynchronous streaming file registration completed.
--- @param registerAs string
--- @return any
function IsStreamingFileReady(registerAs) end

--- @return any
function IsStreamPlaying() end

--- @return any
function IsStreamvolActive() end

--- @param string string
--- @return any
function IsStringNull(string) end

--- @param string string
--- @return any
function IsStringNullOrEmpty(string) end

--- @return any
function IsStuntJumpInProgress() end

--- @return any
function IsStuntJumpMessageShowing() end

--- @return any
function IsSubtitlePreferenceSwitchedOn() end

--- @return any
function IsSwitchReadyForDescent() end

--- @return any
function IsSwitchSkippingDescent() end

--- @param sceneID integer
--- @return any
function IsSynchronizedSceneHoldLastFrame(sceneID) end

--- @param sceneID integer
--- @return any
function IsSynchronizedSceneLooped(sceneID) end

--- Returns true if a synchronized scene is running
--- @param sceneId integer
--- @return any
function IsSynchronizedSceneRunning(sceneId) end

--- @return any
function IsSystemUiBeingDisplayed() end

--- @param ped integer
--- @return any
function IsTaskMoveNetworkActive(ped) end

--- @param ped integer
--- @return any
function IsTaskMoveNetworkReadyForTransition(ped) end

--- @param vehicle integer
--- @return any
function IsTaxiLightOn(vehicle) end

--- @param ped integer
--- @return any
function IsTennisMode(ped) end

--- @return any
function IsThisAMinigameScript() end

--- @param model integer
--- @return any
function IsThisModelABicycle(model) end

--- @param model integer
--- @return any
function IsThisModelABike(model) end

--- @param model integer
--- @return any
function IsThisModelABoat(model) end

--- To check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)
--- @param model integer
--- @return any
function IsThisModelACar(model) end

--- @param model integer
--- @return any
function IsThisModelAHeli(model) end

--- Checks if model is a boat, then checks for FLAG_IS_JETSKI.
--- @param model integer
--- @return any
function IsThisModelAJetski(model) end

--- @param model integer
--- @return any
function IsThisModelAnAmphibiousCar(model) end

--- @param model integer
--- @return any
function IsThisModelAnAmphibiousQuadbike(model) end

--- @param model integer
--- @return any
function IsThisModelAPlane(model) end

--- @param model integer
--- @return any
function IsThisModelAQuadbike(model) end

--- @param model integer
--- @return any
function IsThisModelATrain(model) end

--- @param threadId integer
--- @return any
function IsThreadActive(threadId) end

--- Returns true if the two times are equal; otherwise returns false.
--- @param timeA integer
--- @param timeB integer
--- @return any
function IsTimeEqualTo(timeA, timeB) end

--- Subtracts the second argument from the first, then returns whether the result is negative.
--- @param timeA integer
--- @param timeB integer
--- @return any
function IsTimeLessThan(timeA, timeB) end

--- Subtracts the first argument from the second, then returns whether the result is negative.
--- @param timeA integer
--- @param timeB integer
--- @return any
function IsTimeMoreThan(timeA, timeB) end

--- @param vehicle integer
--- @param modType integer
--- @return any
function IsToggleModOn(vehicle, modType) end

--- returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance. Target needs to be tracked.. won't work otherwise.
--- @param ped integer
--- @return any
function IsTrackedPedVisible(ped) end

--- @param point integer
--- @return any
function IsTrackedPointVisible(point) end

--- Getter for SET_TRACK_ENABLED
--- @param track integer
--- @return any
function IsTrackEnabled(track) end

--- Getter for SWITCH_TRAIN_TRACK. Determines if ambient trains are able to spawn on this track.
--- @param track integer
--- @return any
function IsTrackSwitchedOff(track) end

--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function IsTurretSeat(vehicle, seatIndex) end

--- IS_*
--- @param videoCliphash integer
--- @return any
function IsTvPlaylistItemPlaying(videoCliphash) end

--- @param padIndex integer
--- @return any
function IsUsingKeyboard(padIndex) end

--- @param padIndex integer
--- @return any
function IsUsingKeyboard_2(padIndex) end

--- @param interior integer
--- @return any
function IsValidInterior(interior) end

--- IS_*
--- @param gamerTagId integer
--- @return any
function IsValidMpGamerTagMovie(gamerTagId) end

--- Determines if a vehicle is a convertible with an animatable roof. This native checks if the specified vehicle model features a convertible roof that can be lowered or raised through an animation. NativeDB Introduced: v323
--- @param vehicle integer
--- @param checkRoofExtras boolean
--- @return any
function IsVehicleAConvertible(vehicle, checkRoofExtras) end

--- @param vehicle integer
--- @return any
function IsVehicleAlarmActivated(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleAlarmSet(vehicle) end

--- @param cargobob integer
--- @param vehicleAttached integer
--- @return any
function IsVehicleAttachedToCargobob(cargobob, vehicleAttached) end

--- Scripts verify that towTruck is the first parameter, not the second.
--- @param towTruck integer
--- @param vehicle integer
--- @return any
function IsVehicleAttachedToTowTruck(towTruck, vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleAttachedToTrailer(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleAudiblyDamaged(vehicle) end

--- Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT _IS_VEHICLE_* NativeDB Introduced: v1493
--- @param vehicle integer
--- @return any
function IsVehicleBeingHalted(vehicle) end

--- @param vehicle integer
--- @param frontBumper boolean
--- @return any
function IsVehicleBumperBouncing(vehicle, frontBumper) end

--- @param vehicle integer
--- @param front boolean
--- @return any
function IsVehicleBumperBrokenOff(vehicle, front) end

--- Appears to return true if the vehicle has any damage, including cosmetically. GET_*
--- @param vehicle integer
--- @return any
function IsVehicleDamaged(vehicle) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param veh integer
--- @param doorID integer
--- @return any
function IsVehicleDoorDamaged(veh, doorID) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @return any
function IsVehicleDoorFullyOpen(vehicle, doorIndex) end

--- p1 is always 0 in the scripts. p1 = check if vehicle is on fire
--- @param vehicle integer
--- @param isOnFireCheck boolean
--- @return any
function IsVehicleDriveable(vehicle, isOnFireCheck) end

--- Only ever used once in decompiled scripts: **am_pi_menu**: Returns true if the engine is on fire, or if the vehicle engine health is < 0 and it **has been** on fire. It sometimes doesn't return true when the vehicle engine has been on fire, and has since been fixed. I'm not really sure what the exact conditions are. This usually returns true even if there are no visible flames yet (engine health > 0). However if you monitor engine health you'll see that it starts decreasing as soon as this returns true.
--- @param vehicle integer
--- @return any
function IsVehicleEngineOnFire(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleEngineStarting(vehicle) end

--- @param vehicle integer
--- @param extraId integer
--- @return any
function IsVehicleExtraTurnedOn(vehicle, extraId) end

--- @param vehicle integer
--- @param extraId integer
--- @return any
function IsVehicleExtraTurnedOn(vehicle, extraId) end

--- @param vehicle integer
--- @return any
function IsVehicleHighDetail(vehicle) end

--- Returns whether the specified vehicle is currently in a burnout. vb.net Public Function isVehicleInBurnout(vh As Vehicle) As Boolean Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh) End Function
--- @param vehicle integer
--- @return any
function IsVehicleInBurnout(vehicle) end

--- garageName example "Michael - Beverly Hills"
--- @param garageName string
--- @param vehicle integer
--- @return any
function IsVehicleInGarageArea(garageName, vehicle) end

--- NativeDB Introduced: v1290
--- @param vehicle integer
--- @return any
function IsVehicleInSubmarineMode(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleInteriorLightOn(vehicle) end

--- @param vehicle integer
--- @param model integer
--- @return any
function IsVehicleModel(vehicle, model) end

--- mpsum2_g9ec NativeDB Introduced: v2699
--- @param vehicle integer
--- @param modType integer
--- @param modIndex integer
--- @return any
function IsVehicleModHswExclusive(vehicle, modType, modIndex) end

--- @param vehicle integer
--- @return any
function IsVehicleNeedsToBeHotwired(vehicle) end

--- indices: 0 = Left 1 = Right 2 = Front 3 = Back
--- @param vehicle integer
--- @param index integer
--- @return any
function IsVehicleNeonLightEnabled(vehicle, index) end

--- Returns true if the id is non zero.
--- @param vehicleNodeId integer
--- @return any
function IsVehicleNodeIdValid(vehicleNodeId) end

--- Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh) End Function
--- @param vehicle integer
--- @return any
function IsVehicleOnAllWheels(vehicle) end

--- Does not work for vehicle of type: CBike, CBmx, CBoat, CTrain, CSubmarine.
--- @param vehicle integer
--- @return any
function IsVehicleParachuteActive(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehiclePreviouslyOwnedByPlayer(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleRadioOn(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleRocketBoostActive(vehicle) end

--- Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
--- @param vehicle integer
--- @return any
function IsVehicleSearchlightOn(vehicle) end

--- Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked). side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked. onEnter = check if you can enter (true) or exit (false) a vehicle.
--- @param ped integer
--- @param vehicle integer
--- @param seatIndex integer
--- @param side boolean
--- @param onEnter boolean
--- @return any
function IsVehicleSeatAccessible(ped, vehicle, seatIndex, side, onEnter) end

--- Seat indices range from -1 to `GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS` minus one. cpp // CTaskExitVehicleSeat::eSeatPosition - 1 enum eSeatPosition { SF_FrontDriverSide = -1, SF_FrontPassengerSide = 0, SF_BackDriverSide = 1, SF_BackPassengerSide = 2, SF_AltFrontDriverSide = 3, SF_AltFrontPassengerSide = 4, SF_AltBackDriverSide = 5, SF_AltBackPassengerSide = 6, }; NativeDB Added Parameter 3: BOOL isTaskRunning isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function IsVehicleSeatFree(vehicle, seatIndex) end

--- @param vehicle integer
--- @return any
function IsVehicleSirenAudioOn(vehicle) end

--- Returns whether the vehicle's lights and sirens are on.
--- @param vehicle integer
--- @return any
function IsVehicleSirenOn(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleSirenOn(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleSlipstreamLeader(vehicle) end

--- Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
--- @param vehicle integer
--- @return any
function IsVehicleSprayable(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleStolen(vehicle) end

--- Returns true if the vehicle's current speed is less than, or equal to 0.0025f. For some vehicles it returns true if the current speed is <= 0.00039999999.
--- @param vehicle integer
--- @return any
function IsVehicleStopped(vehicle) end

--- This native checks if the given vehicle is stopped at a red or amber traffic light junction, provided the driver's personality is set to not run amber lights.
--- @param vehicle integer
--- @return any
function IsVehicleStoppedAtTrafficLights(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleStuckOnRoof(vehicle) end

--- p1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.
--- @param vehicle integer
--- @param p1 integer
--- @param p2 integer
--- @return any
function IsVehicleStuckTimerUp(vehicle, p1, p2) end

--- cpp enum eVehicleWheels { WHEEL_LF = 0, // Vehicle Left front WHEEL_RF = 1, // Vehicle Right front WHEEL_LM = 2, // Vehicle Left middle WHEEL_RM = 3, // Vehicle Right middle WHEEL_LR = 4, // Vehicle Left rear WHEEL_RR = 5, // Vehicle Right rear WHEEL_BF = 6, // Bike front WHEEL_BR = 7, // Bike rear MAX_WHEELS = 8 };
--- @param vehicle integer
--- @param wheelID integer
--- @param isBurstToRim boolean
--- @return any
function IsVehicleTyreBurst(vehicle, wheelID, isBurstToRim) end

--- @param vehicle integer
--- @param wheelID integer
--- @param completely boolean
--- @return any
function IsVehicleTyreBurst(vehicle, wheelID, completely) end

--- @param vehicle integer
--- @return any
function IsVehicleVisible(vehicle) end

--- @param vehicle integer
--- @return any
function IsVehicleWanted(vehicle) end

--- @param weaponHash integer
--- @param vehicle integer
--- @param owner integer
--- @return any
function IsVehicleWeaponDisabled(weaponHash, vehicle, owner) end

--- cpp enum eWindowId { VEH_EXT_WINDOW_LF = 0, VEH_EXT_WINDOW_RF = 1, VEH_EXT_WINDOW_LR = 2, VEH_EXT_WINDOW_RR = 3, VEH_EXT_WINDOW_LM = 4, VEH_EXT_WINDOW_RM = 5, VEH_EXT_WINDSCREEN = 6, VEH_EXT_WINDSCREEN_R = 7, }
--- @param vehicle integer
--- @param windowIndex integer
--- @return any
function IsVehicleWindowIntact(vehicle, windowIndex) end

--- See the client-side IS_VEHICLE_WINDOW_INTACT for a window indexes list.
--- @param vehicle integer
--- @param windowIndex integer
--- @return any
function IsVehicleWindowIntact(vehicle, windowIndex) end

--- Returns true if a Warning Message or ReportUGC menu is active.
--- @return any
function IsWarningMessageActive() end

--- IS_WARNING_MESSAGE_*
--- @return any
function IsWarningMessageActive_2() end

--- @return any
function IsWaypointActive() end

--- @param p0 any
--- @return any
function IsWaypointPlaybackGoingOnForPed(p0) end

--- @param vehicle integer
--- @return any
function IsWaypointPlaybackGoingOnForVehicle(vehicle) end

--- @param weaponHash integer
--- @return any
function IsWeaponValid(weaponHash) end

--- Gets whether the world point the calling script is registered to is within desired range of the player.
--- @return any
function IsWorldPointWithinBrainActivationRange() end

--- @return any
function IsXbox360Version() end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
function KnockOffPedProp(ped, p1, p2, p3, p4) end

--- @param ped integer
function KnockPedOffVehicle(ped) end

--- Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
--- @return any
function LandingMenuIsActive() end

--- @return any
--- @return any
--- @return any
function Leaderboards2ReadByHandle() end

--- @param gamerHandleCsv string
--- @param platformName string
--- @return any
--- @return any
function Leaderboards2ReadByPlatform(gamerHandleCsv, platformName) end

--- @param p1 any
--- @return any
--- @return any
--- @return any
function Leaderboards2ReadByRadius(p1) end

--- @param p1 any
--- @param p2 any
--- @return any
--- @return any
function Leaderboards2ReadByRank(p1, p2) end

--- @param p2 any
--- @param p4 any
--- @param p6 any
--- @return any
--- @return any
--- @return any
--- @return any
--- @return any
function Leaderboards2ReadByRow(p2, p4, p6) end

--- @param p1 number
--- @param p2 any
--- @return any
--- @return any
function Leaderboards2ReadByScoreFloat(p1, p2) end

--- @param p1 any
--- @param p2 any
--- @return any
--- @return any
function Leaderboards2ReadByScoreInt(p1, p2) end

--- @param p2 any
--- @param p3 boolean
--- @param p4 any
--- @param p5 any
--- @return any
--- @return any
--- @return any
function Leaderboards2ReadFriendsByRow(p2, p3, p4, p5) end

--- @return any
--- @return any
--- @return any
--- @return any
function Leaderboards2ReadRankPrediction() end

--- @return any
--- @return any
function Leaderboards2WriteData() end

--- @return any
--- @return any
--- @return any
function Leaderboards2WriteDataForEventType() end

--- @return any
--- @return any
function LeaderboardsCacheDataRow() end

function LeaderboardsClearCacheData() end

--- @param statName integer
--- @param value number
function LeaderboardsDeaths(statName, value) end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
function LeaderboardsGetCacheDataRow(p0, p1) end

--- @param p0 any
--- @return any
function LeaderboardsGetCacheExists(p0) end

--- @param p0 any
--- @return any
function LeaderboardsGetCacheNumberOfRows(p0) end

--- @param p0 any
--- @return any
function LeaderboardsGetCacheTime(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function LeaderboardsGetColumnId(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function LeaderboardsGetColumnType(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @return any
function LeaderboardsGetNumberOfColumns(p0, p1) end

--- @return any
function LeaderboardsReadAnyPending() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function LeaderboardsReadClear(p0, p1, p2) end

--- @return any
function LeaderboardsReadClearAll() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function LeaderboardsReadPending(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function LeaderboardsReadSuccessful(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 number
function LeaderboardsWriteAddColumn(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function LeaderboardsWriteAddColumnLong(p0, p1, p2) end

--- Leaves cursor mode. This function supports SDK infrastructure and is not intended to be used directly from your code.
function LeaveCursorMode() end

--- @param modelHash integer
function LinkNamedRendertarget(modelHash) end

--- Links a static emitter to the given entity
--- @param emitterName string
--- @param entity integer
function LinkStaticEmitterToEntity(emitterName, entity) end

function LoadAllObjectsNow() end

--- This native has been removed in v1180.
--- @param keepInMemory boolean
--- @return any
function LoadAllPathNodes(keepInMemory) end

--- The following cloudhats are useable: altostratus Cirrus cirrocumulus Clear 01 Cloudy 01 Contrails Horizon horizonband1 horizonband2 horizonband3 horsey Nimbus Puffs RAIN Snowy 01 Stormy 01 stratoscumulus Stripey shower Wispy
--- @param name string
--- @param transitionTime number
function LoadCloudHat(name, transitionTime) end

--- From fm_deathmatch_creator and fm_race_creator: FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP")); FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP")); NativeDB Introduced: v1604
--- @param hash integer
function LoadContentChangeSetGroup(hash) end

--- 0 - default 1 - HeistIsland NativeDB Introduced: v2189
--- @param waterType integer
function LoadGlobalWaterType(waterType) end

--- @return any
function LoadingscreenGetLoadFreemode() end

--- @return any
function LoadingscreenGetLoadFreemodeWithEventName() end

--- @return any
function LoadingscreenIsLoadingFreemode() end

--- @param toggle boolean
function LoadingscreenSetIsLoadingFreemode(toggle) end

--- @param toggle boolean
function LoadingscreenSetLoadFreemode(toggle) end

--- Only occurrence was false, in maintransition.
--- @param toggle boolean
function LoadingscreenSetLoadFreemodeWithEventName(toggle) end

--- @param p0 string
--- @param p3 boolean
--- @return any
--- @return any
--- @return any
function LoadMissionCreatorPhoto(p0, p3) end

--- @param movieMeshSetName string
--- @return any
function LoadMovieMeshSet(movieMeshSetName) end

--- Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.
--- @param playerSrc integer
function LoadPlayerCommerceData(playerSrc) end

--- Requests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED_EXT` to check if it has loaded. This will not automatically update whenever a client purchases a package, if you want to fetch new purchases you will need to call this native again. This native will temporarily cache the players commerce data for 10 seconds, a call to this native after 10 seconds will re-fetch the players commerce data.
--- @param playerSrc integer
function LoadPlayerCommerceDataExt(playerSrc) end

--- Reads the contents of a text file in a specified resource. If executed on the client, this file has to be included in `files` in the resource manifest. Example: `local data = LoadResourceFile("devtools", "data.json")`
--- @param resourceName string
--- @param fileName string
--- @return any
function LoadResourceFile(resourceName, fileName) end

--- Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
--- @param ropeId integer
--- @param rope_preset string
function LoadRopeData(ropeId, rope_preset) end

--- @param x number
--- @param y number
--- @param z number
function LoadScene(x, y, z) end

--- Load in named stream. Optionally can specify a sound set which contains the sound specified by name. Names for the streams can be found here, the list will be updated as more are found.
--- @param streamName string
--- @param soundSet string
--- @return any
function LoadStream(streamName, soundSet) end

--- Load in named stream. Optionally can specify a sound set which contains the sound specified by name.
--- @param streamName string
--- @param startOffset integer
--- @param soundSet string
--- @return any
function LoadStreamWithStartOffset(streamName, startOffset, soundSet) end

--- Define the xml in a resources fxmanifest, under the file(s) section.
--- @param resourceName string
--- @param fileName string
--- @return any
function LoadWaterFromPath(resourceName, fileName) end

--- Possible return values: 0, 1, 2
--- @return any
function LocalizationGetSystemDateFormat() end

--- Same return values as GET_CURRENT_LANGUAGE
--- @return any
function LocalizationGetSystemLanguage() end

--- Updates the display of the MP/SP loading buttons, and locks the state so that other options are not displayed or changed. This can only be done once.
function LockLoadingScreenButtons() end

--- Locks the minimap to the specified angle in integer degrees. angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
--- @param angle integer
function LockMinimapAngle(angle) end

--- Locks the minimap to the specified world position.
--- @param x number
--- @param y number
function LockMinimapPosition(x, y) end

--- This disables the radio station completely - it won't be selectable on the radio wheel or ever be heard coming from a vehicle/ambient emitter NativeDB Introduced: v1493
--- @param radioStationName string
--- @param toggle boolean
function LockRadioStation(radioStationName, toggle) end

--- @param radioStation string
--- @param trackListName string
function LockRadioStationTrackList(radioStation, trackListName) end

--- NativeDB Introduced: v1604
--- @param value number
--- @return any
function Log10(value) end

--- Not present in retail version of the game, actual definiton seems to be _LOG_DEBUG_INFO(const char* category, const char* debugText);
--- @param p0 string
function LogDebugInfo(p0) end

--- Lowers the roof on a convertible vehicle, utilizing any available animations for the action. This native is particularly useful for creating a realistic interaction with convertible vehicles by animating the process of lowering the roof. You can check if the vehicle has an convertible roof using `IS_VEHICLE_A_CONVERTIBLE`. NativeDB Introduced: v323
--- @param vehicle integer
--- @param instantlyLower boolean
function LowerConvertibleRoof(vehicle, instantlyLower) end

--- @param vehicle integer
function LowerRetractableWheels(vehicle) end

--- Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
--- @param ped integer
--- @return any
function MakePedReload(ped) end

--- is this like setting is as no longer needed?
--- @param object integer
function MarkObjectForDeletion(object) end

--- @param vehicle integer
--- @param value number
function ModifyVehicleTopSpeed(vehicle, value) end

--- Sets the water height for a given position and radius.
--- @param x number
--- @param y number
--- @param height number
--- @param radius number
function ModifyWater(x, y, height, radius) end

--- @param p0 any
--- @param p1 any
function MoveVehicleDecals(p0, p1) end

--- Starts listening to the specified channel, when available.
--- @param channel integer
function MumbleAddVoiceChannelListen(channel) end

--- Adds the specified channel to the target list for the specified Mumble voice target ID.
--- @param targetId integer
--- @param channel integer
function MumbleAddVoiceTargetChannel(targetId, channel) end

--- Adds the specified player to the target list for the specified Mumble voice target ID.
--- @param targetId integer
--- @param player integer
function MumbleAddVoiceTargetPlayer(targetId, player) end

--- Adds the specified player to the target list for the specified Mumble voice target ID.
--- @param targetId integer
--- @param serverId integer
function MumbleAddVoiceTargetPlayerByServerId(targetId, serverId) end

function MumbleClearVoiceChannel() end

--- Clears the target list for the specified Mumble voice target ID.
--- @param targetId integer
function MumbleClearVoiceTarget(targetId) end

--- Clears channels from the target list for the specified Mumble voice target ID.
--- @param targetId integer
function MumbleClearVoiceTargetChannels(targetId) end

--- Clears players from the target list for the specified Mumble voice target ID.
--- @param targetId integer
function MumbleClearVoiceTargetPlayers(targetId) end

--- Create a permanent voice channel.
--- @param id integer
function MumbleCreateChannel(id) end

--- Check whether specified channel exists on the Mumble server.
--- @param channel integer
--- @return any
function MumbleDoesChannelExist(channel) end

--- @return any
function MumbleGetTalkerProximity() end

--- Returns the mumble voice channel from a player's server id.
--- @param serverId integer
--- @return any
function MumbleGetVoiceChannelFromServerId(serverId) end

--- @return any
function MumbleIsActive() end

--- This native will return true if the user succesfully connected to the voice server. If the user disabled the voice-chat setting it will return false.
--- @return any
function MumbleIsConnected() end

--- Checks if the player is currently muted
--- @param playerSrc integer
--- @return any
function MumbleIsPlayerMuted(playerSrc) end

--- @param player integer
--- @return any
function MumbleIsPlayerTalking(player) end

--- Stops listening to the specified channel.
--- @param channel integer
function MumbleRemoveVoiceChannelListen(channel) end

--- Removes the specified voice channel from the user's voice targets. Performs the opposite operation of MUMBLE_ADD_VOICE_TARGET_CHANNEL
--- @param targetId integer
--- @param channel integer
function MumbleRemoveVoiceTargetChannel(targetId, channel) end

--- Removes the specified player from the user's voice targets. Performs the opposite operation of MUMBLE_ADD_VOICE_TARGET_PLAYER
--- @param targetId integer
--- @param player integer
function MumbleRemoveVoiceTargetPlayer(targetId, player) end

--- Removes the specified player from the user's voice targets. Performs the opposite operation of MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID
--- @param targetId integer
--- @param serverId integer
function MumbleRemoveVoiceTargetPlayerByServerId(targetId, serverId) end

--- @param state boolean
function MumbleSetActive(state) end

--- Sets the current input distance. The player will be able to talk to other players within this distance.
--- @param distance number
function MumbleSetAudioInputDistance(distance) end

--- Use this native to disable noise suppression and high pass filters. The possible intents for this are as follows (backticks are used to represent hashes): | Index | Description | |-|-| | \`speech\` | Default intent | | \`music\` | Disable noise suppression and high pass filter |
--- @param intentHash integer
function MumbleSetAudioInputIntent(intentHash) end

--- Sets the current output distance. The player will be able to hear other players talking within this distance.
--- @param distance number
function MumbleSetAudioOutputDistance(distance) end

--- Mutes or unmutes the specified player
--- @param playerSrc integer
--- @param toggle boolean
function MumbleSetPlayerMuted(playerSrc, toggle) end

--- Changes the Mumble server address to connect to, and reconnects to the new address. Setting the address to an empty string and the port to -1 will reset to the built in FXServer Mumble Implementation.
--- @param address string
--- @param port integer
function MumbleSetServerAddress(address, port) end

--- Sets the audio submix ID for a specified player using Mumble 'Native Audio' functionality.
--- @param serverId integer
--- @param submixId integer
function MumbleSetSubmixForServerId(serverId, submixId) end

--- @param value number
function MumbleSetTalkerProximity(value) end

--- @param channel integer
function MumbleSetVoiceChannel(channel) end

--- Sets the current Mumble voice target ID to broadcast voice to.
--- @param targetId integer
function MumbleSetVoiceTarget(targetId) end

--- Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override. Set to -1.0 to reset the Volume override.
--- @param player integer
--- @param volume number
function MumbleSetVolumeOverride(player, volume) end

--- Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.
--- @param serverId integer
--- @param volume number
function MumbleSetVolumeOverrideByServerId(serverId, volume) end

--- 2 matches in 1 script - am_hold_up Used in multiplayer scripts?
function N_0x0032A6DBA562C518() end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0x006E4B040ED37EC3(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x0077F15613D36993(p0, p1, p2, p3) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 integer
function N_0x011883F41211432A(x1, y1, z1, x2, y2, z2, p6) end

--- @param p0 any
function N_0x015B03EE1C43E6EC(p0) end

--- NativeDB Introduced: v1290
--- @param vehicle integer
--- @param p1 number
function N_0x0205F5365292D2EB(vehicle, p1) end

function N_0x0218BA067D249DEA() end

--- some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799
--- @param p0 number
function N_0x0225778816FDC28C(p0) end

--- DISABLE_S*
--- @param toggle boolean
function N_0x02369D5C8A51FDCF(toggle) end

--- NativeDB Introduced: v1493
--- @return any
function N_0x023ACAB2DC9DC4A4() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 boolean
function N_0x02E93C796ABD3A97(p0) end

--- @param p0 boolean
function N_0x03300B57FCAC6DDB(p0) end

--- @return any
--- @return any
function N_0x0395CB47B022E62C() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function N_0x03C2EEBB04B3FB72(p0, p1, p2, p3, p4, p5, p6) end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 boolean
--- @param p8 any
--- @return any
function N_0x03EA03AF85A85CB7(ped, p1, p2, p3, p4, p5, p6, p7, p8) end

function N_0x03F1A106BDA7DD3E() end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x0419B167EE128F33(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function N_0x041C7F2A6C9894E6(p0, p1, p2) end

--- SET_*
--- @param toggle boolean
function N_0x04655F9D075D0AE5(toggle) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function N_0x04918A41BC9B8157(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function N_0x0581730AB9380412(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
--- @param p1 any
function N_0x0596843B34B95CE5(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @return any
function N_0x06087579E7AA85A9(p0, p1, p2, p3, p4, p5) end

--- @param ped integer
--- @param toggle boolean
function N_0x061CB768363D6424(ped, toggle) end

--- A vehicle recording playback flag only used in jewelry_heist
--- @param vehicle integer
--- @param p1 boolean
function N_0x063AE2B2CC273588(vehicle, p1) end

--- CLEAR_*
function N_0x06462A961E94B67C() end

--- @param p0 any
--- @param p1 any
function N_0x065D03A9D6B2C6B5(p0, p1) end

--- @param p0 any
function N_0x06EAF70AE066441E(p0) end

--- @param p0 boolean
function N_0x06EE9048FD080382(p0) end

--- @param p0 any
--- @return any
function N_0x07DBD622D9533857(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function N_0x07EAB372C8841D99(p0, p1, p2) end

--- @param p0 integer
function N_0x0811381EF5062FEC(p0) end

--- Returns false if amount > wallet balance or daily transfer limit has been hit. NativeDB Introduced: v323
--- @param amount integer
--- @return any
function N_0x08E8EEADFD0DC4A0(amount) end

--- @param p0 any
function N_0x0A9C7F36E5D7B683(p0) end

function N_0x0AA27680A0BD43FA() end

--- @param p0 boolean
function N_0x0AE73D8DF3A762B2(p0) end

--- @param p0 any
--- @param p1 any
function N_0x0B3E35AC043707D9(p0, p1) end

function N_0x0B40ED49D7D6FF84() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function N_0x0B565B0AAE56A0E8(p0, p1, p2, p3, p4, p5, p6) end

--- @return any
function N_0x0B8B7F74BF061C6D() end

--- NativeDB Introduced: v1180
--- @param p0 any
function N_0x0C698D8F099174C7(p0) end

--- @param p0 any
function N_0x0CF54F20DE43879C(p0) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function N_0x0CF6CC51AA18F0F8(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
function N_0x0D01D20616FC73FB(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x0D30EB83668E63C5(p0, p1, p2, p3) end

--- NETWORK_SET_*
--- @return any
--- @return any
function N_0x0D77A82DC2D0DA59() end

--- NativeDB Introduced: v1868
--- @param amount integer
--- @param p1 any
--- @param p2 any
function N_0x0DD362F14F18942A(amount, p1, p2) end

--- @param toggle boolean
function N_0x0E4299C549F0D1F1(toggle) end

--- @param ped integer
--- @param player integer
--- @return any
function N_0x0EDE326D47CD0F3E(ped, player) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0x0F1A4B45B7693B95(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x0F62619393661D6E(p0, p1, p2) end

--- BG_* NativeDB Introduced: v323
--- @param scriptIndex integer
--- @param p1 string
--- @return any
function N_0x0F6F1EBBC4E1D5E6(scriptIndex, p1) end

--- Doesn't actually return anything. NativeDB Introduced: v2060
--- @param ped integer
--- @param p1 boolean
--- @return any
function N_0x0FFB3C758E8C07B9(ped, p1) end

--- NativeDB Introduced: v1290
--- @param vehicle integer
function N_0x107A473D7A6647A9(vehicle) end

--- UI3DSCENE_*
--- @param toggle boolean
function N_0x108BE26959A9D9BB(toggle) end

--- In agency_heist3b.c4, its like this 90% of the time: PED::_110F526AB784111F(ped, 0.099); PED::SET_PED_ENVEFF_SCALE(ped, 1.0); PED::_D69411AA0CEBF9E9(ped, 87, 81, 68); PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1); and its like this 10% of the time: PED::_110F526AB784111F(ped, 0.2); PED::SET_PED_ENVEFF_SCALE(ped, 0.65); PED::_D69411AA0CEBF9E9(ped, 74, 69, 60); PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
--- @param ped integer
--- @param p1 number
function N_0x110F526AB784111F(ped, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x112209CE0290C03A(p0, p1, p2, p3) end

function N_0x1153FA02A659051C() end

--- @param p0 any
function N_0x11579D940949C49E(p0) end

--- @param p0 string
function N_0x116FB94DC4B79F17(p0) end

--- @param p2 any
--- @param p3 any
--- @return any
--- @return any
--- @return any
function N_0x1171A97A3D3981B6(p2, p3) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0x1178E104409FE58C(p0, p1) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
--- @param p1 any
function N_0x1216E0BFA72CC703(p0, p1) end

--- Hardcoded to only work in multiplayer.
--- @param p0 number
function N_0x12DED8CA53D47EA5(p0) end

--- @param p0 any
--- @param p1 any
function N_0x1312DDD8385AEE4E(p0, p1) end

--- @param p0 any
function N_0x1398582B7F72B3ED(p0) end

function N_0x13B350B8AD0EEE10() end

--- SET_NETWORK_*
--- @param p0 boolean
function N_0x13F1FCB111B820B0(p0) end

function N_0x140E6A44870A11CE() end

--- @param p0 any
function N_0x144DA052257AE7D8(p0) end

--- NETWORK_IS_*
--- @return any
function N_0x14922ED3E38761F0() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x14D29BB12D47F68C(p0, p1, p2, p3, p4) end

--- @return any
--- @return any
--- @return any
--- @return any
function N_0x14E0B2D1AD1044E0() end

--- @param p0 any
function N_0x14EDA9EE27BD1626(p0) end

function N_0x14FC5833464340A8() end

--- Checks some commerce stuff NativeDB Introduced: v1290
--- @return any
function N_0x155467ACA0F55705() end

function N_0x1612C45F9E3E0D44() end

--- @param p0 any
--- @return any
function N_0x162C23CA83ED0A62(p0) end

--- @param p0 any
function N_0x164C5FF663790845(p0) end

--- @return any
function N_0x16DA8172459434AA() end

--- @return any
--- @return any
function N_0x170910093218C8B9() end

--- NativeDB Introduced: v2060
--- @param p0 any
--- @param p1 any
function N_0x17C9E241111A674D(p0, p1) end

function N_0x17FCA7199A530203() end

--- @param vehicle integer
--- @param p1 number
function N_0x182F266C2D9E2BEB(vehicle, p1) end

--- @param p0 any
--- @return any
--- @return any
function N_0x19853B5B17D77BCA(p0) end

function N_0x19AF7ED9B9D23058() end

--- GET_TENNIS_*; references 0xFBFEC0E9 = interruptswing
--- @param ped integer
--- @return any
function N_0x19BFED045C647C49(ped) end

--- SET_ENTITY_*
--- @param entity integer
--- @param p1 boolean
function N_0x1A092BB0C3808B96(entity, p1) end

--- Only appears in lamar1 script.
--- @param ped integer
--- @param p1 integer
function N_0x1A330D297AAC6BC1(ped, p1) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
function N_0x1A6CBB06E2D0D79D(p0, p1) end

--- @param p0 any
function N_0x1A7CE7CD3E653485(p0) end

--- @return any
--- @return number
function N_0x1A8EA222F9C67DBB() end

--- @param p0 boolean
function N_0x1BBC135A4D25EDDE(p0) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
function N_0x1C57C94A6446492A(p0, p1) end

--- SET_TRA*
--- @param p0 number
function N_0x1CBA05AE7BD7EE05(p0) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: char* p1 NativeDB Added Parameter 3: char* p2 NativeDB Introduced: v323
--- @return any
function N_0x1D12A56FC95BE92E() end

--- IS_COMMERCE_*
--- @return any
function N_0x1D4DC17C38FEAFF0() end

--- @param p0 integer
--- @return any
function N_0x1D610EB0FEA716D9(p0) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x1DC9B749E7AE282B(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
function N_0x1E3F1B1B891A2AAA(p0, p1) end

--- GET_*
--- @param p0 any
--- @return any
function N_0x1E77FA7A62EE6C4C(p0) end

function N_0x1E9057A74FD73E23() end

--- @return any
function N_0x1F2300CB7FA7B7F6() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
function N_0x1F351CF1C6475734(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- NativeDB Introduced: v1180
function N_0x1F7BC3539F9E0224() end

--- @param p0 any
function N_0x1F8E00FB18239600(p0) end

--- SET_PED_STE*
--- @param ped integer
--- @param toggle boolean
function N_0x2016C603D6B8987C(ped, toggle) end

--- @param p0 boolean
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
function N_0x20746F7B1032A3C7(p0, p1, p2, p3) end

--- -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub - first one seems to be a string of a mission name, second one seems to be a bool/toggle p1 was always 0.
--- @param missionNameLabel string
--- @param p1 any
function N_0x208784099002BC30(missionNameLabel, p1) end

--- @param p0 boolean
function N_0x20C6C7E4EB082A7F(p0) end

--- HAS_*
--- @return any
function N_0x2107A3773771186D() end

--- **This native does absolutely nothing, just a nullsub**
function N_0x211C4EF450086857() end

--- HAS_S*
--- @return any
function N_0x214CD562A939246A() end

--- GET_C*
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 boolean
--- @return any
function N_0x21C235BC64831E5A(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- @return any
--- @return integer
function N_0x225798743970412B() end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x226C284C830D0CA8(p0, p1, p2, p3) end

--- BG_* NativeDB Introduced: v323
--- @param scriptIndex integer
--- @param p1 string
--- @return any
function N_0x22E21FBCFC88C149(scriptIndex, p1) end

function N_0x2302C0264EA58D31() end

--- NativeDB Introduced: v2372
--- @param p0 any
function N_0x2310A8F9421EBF43(p0) end

--- @param vehicle integer
--- @param p1 boolean
function N_0x2311DD7159F00582(vehicle, p1) end

--- **This native does absolutely nothing, just a nullsub**
function N_0x23227DF0B2115469() end

--- NativeDB Introduced: v1290
--- @param p0 any
function N_0x237440E46D918649(p0) end

--- @param p0 any
--- @param p1 any
function N_0x2382AB11450AE7BA(p0, p1) end

--- Hardcoded to return false.
--- @param padIndex integer
--- @return any
function N_0x23F09EADC01449D6(padIndex) end

--- Only used once in scripts, in maintransition. maintransition.c4, line ~82432: if (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) && (DECORATOR::_241FCA5B1AA14F75() == 0)) { g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff? return 1; } Likely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include "HUD_JOINING", "HUD_QUITTING". Most likely ARE_*
--- @return any
function N_0x241FCA5B1AA14F75() end

--- NativeDB Introduced: v2060
function N_0x243296A510B562B6() end

--- @param p0 boolean
function N_0x247ACBC4ABBC9D1C(p0) end

--- @param p0 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @return any
--- @return any
function N_0x24A49BEAF468DC90(p0, p2, p3, p4) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
function N_0x24C024BA8379A70A(p0, p1) end

--- @return any
function N_0x24E4E51FC16305F9() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function N_0x25361A96E0F7E419(p0, p1, p2, p3) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @return any
function N_0x2542269291C6AC84(p0) end

--- Does nothing (it's a nullsub). NativeDB Introduced: v323
function N_0x2555CF7DA5473794() end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: float* p1 NativeDB Added Parameter 3: char* p2 NativeDB Introduced: v323
--- @return any
function N_0x2570E26BE63964E3() end

--- @param p0 any
function N_0x259BA6D4E6F808F1(p0) end

--- NativeDB Introduced: v1365
--- @return any
function N_0x25AAA32BDC98F2A3() end

function N_0x25D990F8E0E3F13C() end

--- @param p0 boolean
function N_0x25FC3E33A31AD0C9(p0) end

--- @param p0 boolean
function N_0x261E97AD7BCF3D40(p0) end

--- @param p0 any
function N_0x265559DA40B3F327(p0) end

function N_0x265635150FB0D82E() end

--- STATS::0x343B27E2(0); STATS::0x343B27E2(1); STATS::0x343B27E2(2); STATS::0x343B27E2(3); STATS::0x343B27E2(4); STATS::0x343B27E2(5); STATS::0x343B27E2(6); STATS::0x343B27E2(7); Identical in ingamehud & maintransition.
--- @param p0 integer
function N_0x26D7399B9587FE89(p0) end

--- @return any
function N_0x26F07DD83A5F7F98() end

--- @param p0 any
--- @param p1 boolean
function N_0x271017B9BA825366(p0, p1) end

--- @param ped integer
--- @param p1 number
function N_0x2735233A786B1BEF(ped, p1) end

--- SET_F*
--- @param toggle boolean
function N_0x2790F4B17D098E26(toggle) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
function N_0x27AA1C973CACFE63(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

function N_0x27CFB1B1E078CB2D() end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function N_0x27F248C3FEBFAAD3(p0, p1) end

--- @param textureDict string
--- @param p1 boolean
--- @return any
function N_0x27FEB5254759CDE3(textureDict, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0x2818FF6638CB09DE(p0) end

--- @param p0 any
function N_0x282B6739644F4347(p0) end

function N_0x283B6062A2C01E9B() end

--- `SET_VEHICLE_STEER_BIAS` for peds, e.g., `_SET_PED_STEER_BIAS`.
--- @param ped integer
--- @param value number
function N_0x288DF530C92DAD6F(ped, value) end

--- F\* NativeDB Introduced: v1734
--- @param p0 number
--- @param p1 number
function N_0x28B022A17B068A3A(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x28ECB8AC2F607DB2(p0, p1, p2, p3, p4) end

--- @param p0 number
--- @param p1 number
--- @param p2 integer
function N_0x293220DA1B46CEBC(p0, p1, p2) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
--- @param p10 any
--- @param p11 any
--- @param p12 any
--- @param p13 any
function N_0x29682E2CCF21E9B5(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) end

--- NativeDB Introduced: v323
function N_0x2A251AA48B2B46DB() end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x2A7CEC72C3443BCC(p0, p1, p2) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x2A93C46AAB1EACC9(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x2AFC2D19B50797F2(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @return any
function N_0x2B1C623823DB0D9D(p0, p1, p2, p3, p4, p5, p6) end

--- @param p0 any
function N_0x2B40A97646381508(p0) end

--- @param p0 integer
--- @param p1 string
--- @return any
function N_0x2B51EDBEFC301339(p0, p1) end

--- @param ped integer
--- @param p1 boolean
function N_0x2B694AFCF64E6994(ped, p1) end

--- @return any
function N_0x2BF66D2E7414F686() end

--- GET_BLIP_\* Seems to always return 0 from what I can tell. I've tried a lot of different blip related natives and it always seems to return 0. Decompiled scripts always pass a blip handle as p0.
--- @param blip integer
--- @return any
function N_0x2C173AE2BDB9385E(blip) end

--- @param p0 any
--- @return any
function N_0x2C42340F916C5930(p0) end

--- SET_VEHICLE_W* (next character is either H or I)
--- @param vehicle integer
--- @param p1 boolean
function N_0x2C4A1590ABF43E8B(vehicle, p1) end

--- Correct native name lies between SET_BLIP_SPRITE and SET_RADIUS_BLIP_EDGE alphabetically.
--- @param blip integer
--- @param p1 any
function N_0x2C9F302398E13141(blip, p1) end

--- @param p0 any
function N_0x2CD90358F67D0AA8(p0) end

--- @param p0 any
function N_0x2CE9D95E4051AECD(p0) end

--- Used in arcade games and Beam hack minigame in Doomsday Heist. For example, Penetrator Arcade Game NativeDB Introduced: v1290
--- @param textureDict string
--- @param textureName string
--- @param x number
--- @param y number
--- @param width number
--- @param height number
--- @param p6 number
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
--- @param p11 integer
function N_0x2D3B147AFAD49DE0(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11) end

--- @param p0 any
--- @return any
function N_0x2D5DC831176D0114(p0) end

--- NativeDB Introduced: v1493
--- @param p0 any
function N_0x2D7A9B577E72385E(p0) end

--- NativeDB Introduced: v323
--- @return any
function N_0x2D874D4AE612A65F() end

--- @param p0 any
--- @return any
--- @return integer
function N_0x2DA41ED6E1FCD7A5(p0) end

--- NativeDB Introduced: v463
--- @return any
function N_0x2DD39BF3E2F9C47F() end

--- @param ped integer
--- @return any
--- @return integer
function N_0x2DFC81C9B9608549(ped) end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0x2E0259BABC27A327(p0) end

--- @param p0 any
--- @return any
function N_0x2E0BF682CC778D49(p0) end

--- @return any
function N_0x2E22FEFA0100275E() end

--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @return any
--- @return integer
--- @return integer
function N_0x2E4C123D1C8A710E(p2, p3, p4, p5, p6) end

--- Appears to return whether the player is using the pause menu store. Can't be sure though.
--- @return any
function N_0x2F057596F2BD0061() end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
function N_0x2F074C904D85129E(p0, p1, p2, p3, p4, p5, p6) end

--- @param p0 boolean
function N_0x2F137B508DE238F2(p0) end

--- @param p0 any
--- @param p1 boolean
function N_0x2F3C3D9F50681DE4(p0, p1) end

--- @param p0 any
--- @param p1 any
function N_0x2F41A3BAE005E5FA(p0, p1) end

--- Used with radios: void sub_cf383(auto _a0) { if ((a_0)==1) { if (MISC::IS_BIT_SET((g_240005._f1), 3)) { PLAYER::_2F7CEB6520288061(0); AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 0); AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0); AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 0); } sub_cf3f6(1); } else { if (MISC::IS_BIT_SET((g_240005._f1), 3)) { PLAYER::_2F7CEB6520288061(1); AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 1); AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1); AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 1); } sub_cf3f6(0); } } SET_PLAYER_S*
--- @param p0 boolean
function N_0x2F7CEB6520288061(p0) end

--- @param p0 number
--- @param p1 number
function N_0x2F7F2B26DD3F18EE(p0, p1) end

--- @param p0 any
--- @param p1 any
function N_0x2FA2494B47FDD009(p0, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x2FA3173480008493(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x2FAB6614CE22E196(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @return any
function N_0x2FCB133CA50A49EB(p0) end

--- @return any
function N_0x3001BEF2FECA3680() end

--- GET_CURRENT_* NativeDB Introduced: v1493
--- @return any
function N_0x30432A0118736E00() end

--- @return any
function N_0x3044240D2E0FA842() end

--- **This native does absolutely nothing, just a nullsub**
--- @return any
function N_0x31125FD509D9043F() end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0x31574B1B41268673(p0, p1) end

--- NativeDB Introduced: v1493
--- @param p0 any
function N_0x316DB59CD14C1774(p0) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
function N_0x31BA138F6304FB9F(p0, p1) end

--- @param player integer
--- @param p1 number
function N_0x31E90B8873A4CD3B(player, p1) end

--- @param p0 boolean
function N_0x31F924B53EADDF65(p0) end

--- NativeDB Introduced: v323
--- @param p0 any
function N_0x324C5AA411DA7737(p0) end

--- @return any
function N_0x32CAC93C9DE73D32() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x32EBD154CB6B8B99(p0, p1, p2) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @return any
function N_0x336B3D200AB007CB(p0, p1, p2, p3, p4) end

--- @param p0 boolean
--- @return any
function N_0x33D47E85B476ABCD(p0) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x33D72899E24C3365(p0, p1) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: char* p1 NativeDB Introduced: v323
--- @return any
function N_0x33DF47CC0642061B() end

--- @param vehicle integer
--- @param p1 boolean
function N_0x3441CAD2F2231923(vehicle, p1) end

function N_0x346EF3ECAAAB149E() end

--- @param p0 any
--- @return any
--- @return any
function N_0x34770B9CE0E03B91(p0) end

--- @param p0 any
--- @param p1 any
function N_0x352E2B5CF420BF3B(p0, p1) end

--- @return any
function N_0x357B152EF96C30B6() end

--- NativeDB Introduced: v1290
--- @param blip integer
function N_0x35A3CD97B2C0A6D2(blip) end

--- @param p0 any
--- @param p1 any
function N_0x35BB21DE06784373(p0, p1) end

--- @param p0 boolean
function N_0x35E0654F4BAD7971(p0) end

--- @param p0 any
--- @return any
function N_0x36391F397731595D(p0) end

--- @param p0 integer
function N_0x367EF5E2F439B4C6(p0) end

--- ROPE_*
--- @param ropeId integer
--- @param p1 boolean
function N_0x36CCB9BE67B970FD(ropeId, p1) end

--- Does nothing. It's a nullsub. NativeDB Introduced: v1604
--- @param toggle boolean
function N_0x36DE109527A2C0C4(toggle) end

--- @param player integer
function N_0x36F1B38855F2A8DF(player) end

--- @param p0 any
--- @param p1 any
function N_0x36F32DE87082343E(p0, p1) end

--- @param p0 number
function N_0x36F6626459D91457(p0) end

--- I've had this return the player's ped handle sometimes, but also other random entities. Whatever p0 is, it's at least not synced to other players. At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity). But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
--- @param p0 any
--- @return any
function N_0x37D5F739FD494675(p0) end

--- NativeDB Introduced: v1290
function N_0x380B4968D1E09E55() end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x38491439B6BA7F7D(p0, p1) end

--- @param p0 any
--- @return any
function N_0x3855FB5EB2C5E8B2(p0) end

--- NativeDB Introduced: v1734
--- @param entity integer
--- @param toggle boolean
function N_0x38B7C51AB1EDC7D8(entity, toggle) end

--- Sets profile setting 934
--- @param value integer
function N_0x38BAAA5DD4C9D19F(value) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
function N_0x38C1CB1CB119A016(p0, p1) end

--- @return any
function N_0x393BD2275CEB7793() end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
--- @param p10 any
--- @param p11 any
--- @param p12 any
--- @return any
function N_0x39455BF4F4F55186(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) end

function N_0x394CD08E31313C28() end

--- @return any
function N_0x397BAA01068BAA96() end

--- @param p0 boolean
function N_0x39917E1B4CB0F911(p0) end

--- @param p0 any
--- @param p1 any
function N_0x39A5FB7EAF150840(p0, p1) end

--- NativeDB Removed Parameter 3: int R NativeDB Removed Parameter 4: int G NativeDB Removed Parameter 5: int B NativeDB Introduced: v757
--- @param object integer
--- @param toggle boolean
--- @param R integer
--- @param G integer
--- @param B integer
function N_0x3B2FD68DB5F8331C(object, toggle, R, G, B) end

--- Usually used alongside other vehicle door natives.
--- @param vehicle integer
--- @param doorIndex integer
--- @param toggle boolean
function N_0x3B458DDB57038F08(vehicle, doorIndex, toggle) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
--- @return any
function N_0x3BD770D281982DB5(p0, p1) end

--- Sets some voice chat related value. NETWORK_SET_*
--- @param toggle boolean
function N_0x3C5C1E2C2FF814B1(toggle) end

--- NativeDB Introduced: v1180 Sets the given checkpoint target to the new coords
--- @param checkpointHandle integer
--- @param x number
--- @param y number
--- @param z number
function N_0x3C788E7F6438754D(checkpointHandle, x, y, z) end

--- @param p0 any
function N_0x3DE3AA516FB126A4(p0) end

--- IS_*
--- @param ped integer
--- @return any
function N_0x3E38E28A1D80DDF6(ped) end

--- @param p0 any
--- @param p1 any
function N_0x3E9679C1DFCF422C(p0, p1) end

--- @param p0 any
function N_0x3EBEAC6C3F81F6BD(p0) end

--- @param netId integer
--- @param state boolean
function N_0x3FA36981311FA4FF(netId, state) end

--- nullsub, doesn't do anything NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
function N_0x3FC795691834481D(p0, p1) end

--- @param p0 boolean
function N_0x4008EDF7D6E48175(p0) end

--- Usage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
--- @param roomHashKey integer
function N_0x405DC2AEF6AF95B9(roomHashKey) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
function N_0x407DC5E97DB1A4D3(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x4128464231E3CA0B(p0, p1, p2, p3) end

--- @param p0 any
function N_0x41290B40FA63E6DA(p0) end

--- @param p0 any
--- @return any
function N_0x412F1364FA066CFB(p0) end

--- @param p0 boolean
function N_0x41350B4FC28E3941(p0) end

--- @param p0 any
function N_0x419615486BBF1956(p0) end

--- @return any
function N_0x4237E822315D8BA9() end

--- @param ped integer
--- @param p1 boolean
function N_0x425AECF167663F48(ped, p1) end

--- @return any
function N_0x4282E08174868BE3() end

--- SET_*
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
function N_0x428AD3E26C8D9EB0(vehicle, x, y, z, p4) end

--- NativeDB Introduced: v1180
--- @param p0 any
function N_0x430A7631A84C9BE7(p0) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x4348BFDA56023A2F(p0, p1) end

--- @param vehicle integer
--- @param p1 boolean
function N_0x43FA0DFC5DF87815(vehicle, p1) end

--- NativeDB Introduced: v1290
--- @param p0 any
function N_0x43FA7CBE20DAB219(p0) end

--- CLEAR_VEHICLE_*
--- @param vehicle integer
function N_0x4419966C9936071A(vehicle) end

--- related to: NETWORK_BAIL NETWORK_BAIL_TRANSITION NETWORK_JOIN_GROUP_ACTIVITY NETWORK_JOIN_TRANSITION NETWORK_LAUNCH_TRANSITION NETWORK_SESSION_HOST NETWORK_SESSION_HOST_CLOSED NETWORK_SESSION_HOST_FRIENDS_ONLY NETWORK_SESSION_HOST_SINGLE_PLAYER NETWORK_SESSION_VOICE_LEAVE
function N_0x444C4525ECE0A4B9() end

--- @param p0 any
function N_0x44919CC079BB60BF(p0) end

--- @param p1 any
--- @return any
function N_0x44ACA259D67651DB(p1) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Introduced: v323
--- @return any
function N_0x450819D8CF90C416() end

--- @return any
function N_0x45E816772E93A9DB() end

--- This has been found in use in the decompiled files.
--- @param player integer
function N_0x4669B3ED80F24B4E(player) end

--- @param p0 boolean
function N_0x469F2ECDEC046337(p0) end

--- Checks if the specified unknown flag is set in the ped's model. The engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags). Game scripts exclusively check for flags 1 and 4.
--- @param ped integer
--- @param flag integer
--- @return any
function N_0x46B05BCAE43856B0(ped, flag) end

--- @param p0 number
function N_0x46D1A61A21F566FC(p0) end

--- @param p0 any
--- @param p1 any
function N_0x46F3ADD1E2D5BAF2(p0, p1) end

function N_0x472397322E92A856() end

--- @param p0 integer
--- @return any
--- @return any
function N_0x4737980E8A283806(p0) end

--- @param p0 any
function N_0x4811BBAC21C5FCD5(p0) end

function N_0x483ACA1176CA93F1() end

--- @param p0 integer
function N_0x48621C9FCA3EBD28(p0) end

--- @param p0 any
--- @param p1 number
--- @return any
function N_0x487912FD248EFDDF(p0, p1) end

--- A*
--- @return any
function N_0x4879E4FE39074CDF() end

--- Only found 3 times in decompiled scripts. Not a whole lot to go off of. MISC::_48F069265A0E4BEC(a_0, "Movie_Name_For_This_Player"); MISC::_48F069265A0E4BEC(&a_0._fB, "Ringtone_For_This_Player"); MISC::_48F069265A0E4BEC(&a_0._f1EC4._f12[v_A/*6*/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
--- @param name string
--- @return any
function N_0x48F069265A0E4BEC(name) end

--- Does nothing (essentially a nullsub).
--- @param p0 any
function N_0x490861B88F4FD846(p0) end

--- SET_PED_ALLOW*
--- @param ped integer
--- @param toggle boolean
function N_0x49E50BDB8BA4DAB2(ped, toggle) end

--- @return any
--- @return any
function N_0x4A7D6E727F941747() end

--- **This native does absolutely nothing, just a nullsub**
--- @param toggle boolean
function N_0x4A9FDE3A5A6D0437(toggle) end

--- NativeDB Introduced: v1868
--- @param vehicle integer
--- @param togle boolean
function N_0x4AD280EB48B2D8E6(vehicle, togle) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x4AD490AE1536933B(p0, p1) end

function N_0x4AF92ACD3141D96C() end

--- NativeDB Introduced: v1868
function N_0x4AFF7E02E485E92B() end

--- @param p0 any
--- @param p1 any
function N_0x4B5B620C9B59ED34(p0, p1) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
function N_0x4C134B4DF76025D0(p0, p1) end

--- Only used once in the entire game scripts. Does not actually return anything.
--- @param interior integer
--- @return any
function N_0x4C2330E61D3DEB56(interior) end

function N_0x4C2A9FDC22377075() end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x4C3B75694F7E0D9C(p0, p1, p2) end

--- @return any
function N_0x4C89FE2BDEB3F169() end

--- NativeDB Introduced: v2060
--- @return any
function N_0x4C9034162368E206() end

--- This function is hard-coded to always return 1.
--- @param cutsceneName string
--- @return any
function N_0x4CEBC1ED31E8925E(cutsceneName) end

--- @return any
function N_0x4D02279C83BE69FE() end

--- Something like flush_all_scripts Most of time comes after NETWORK_END_TUTORIAL_SESSION() or before TERMINATE_THIS_THREAD()
function N_0x4D953DF78EBF8158() end

--- @param p0 any
--- @param p1 boolean
function N_0x4D9D109F63FEE1D4(p0, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x4DC416F246A41FC8(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @return any
function N_0x4DF7CFFF471A7FB1(p0) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
function N_0x4E52E752C76E7E7A(p0) end

--- NativeDB Introduced: v323
--- @return any
function N_0x4ED9C8D6DA297639() end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @return any
function N_0x4FCD976DA686580C(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
function N_0x4FCDBD3F0A813C25(p0, p1) end

--- Related to the ped's weapon - flag used when disabling ped vehicle weapon SET_PED_\* NativeDB Introduced: v1734
--- @param ped integer
function N_0x50276EF8172F5F12(ped) end

--- @return any
function N_0x5068F488DDB54DD8() end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: float* p1 NativeDB Introduced: v323
--- @return any
function N_0x50A8A36201DBF83E() end

--- GET_*
--- @param ped integer
--- @return any
function N_0x511F1A683387C7E2(ped) end

--- @param toggle boolean
function N_0x51DB102F4A3BA5E0(toggle) end

--- Usex in decompiled scripts in combination with `_GET_VEHICLE_SUSPENSION_BOUNDS`. NativeDB Introduced: v1180 // Example from fm_bj_race_controller.c if (!VEHICLE::_0x51F30DB60626A20E(uParam0->f_26, uParam0->f_12.f_3, uParam0->f_12, 2, 1) && !func_282(uParam0->f_6)) { VEHICLE::_GET_VEHICLE_SUSPENSION_BOUNDS(*uParam0, &vVar15, &uVar16); VEHICLE::_GET_VEHICLE_SUSPENSION_BOUNDS(uParam0->f_26, &vVar17, &uVar18); fVar19 = SYSTEM::VDIST2(0f, 0f, vVar15.z, 0f, 0f, vVar17.z); uParam0->f_12.f_3.f_2 = (uParam0->f_12.f_3.f_2 + fVar19); if (!VEHICLE::_0x51F30DB60626A20E(uParam0->f_26, uParam0->f_12.f_3, uParam0->f_12, 2, 1)) { uParam0->f_12.f_3 = { uParam0->f_6 }; uParam0->f_12 = { uParam0->f_9 }; } }
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param p7 integer
--- @param p8 any
--- @return any
function N_0x51F30DB60626A20E(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8) end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
--- @return any
function N_0x5324A0E3E4CE3570(p0, p1) end

--- @return any
function N_0x53C10C8BD774F2C9() end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0x53C31853EC9531FF(p0) end

--- @param p0 any
function N_0x53CAE13E9B426993(p0) end

--- Related to `_CLEAR_VEHICLE_TASKS` and requires more research (e.g., \_CLEAR_VEHICLE_SECONDARY_TASKS). CLEAR_* NativeDB Introduced: v1290
--- @param vehicle integer
function N_0x53DDC75BC3AC0A90(vehicle) end

--- @param p0 any
--- @return any
function N_0x5407B7288D0478B7(p0) end

--- @param p0 number
function N_0x547237AA71AB44DE(p0) end

--- @param p0 number
function N_0x54E22EA2C1956A8D(p0) end

--- From the scripts: MISC::_54F157E0336A3822(sub_aa49(a_0), "ForcedStopDirection", v_E); Related to tennis mode. SET_*
--- @param ped integer
--- @param p1 string
--- @param p2 number
function N_0x54F157E0336A3822(ped, p1, p2) end

--- Name between DISABLE_ALL_CONTROL_ACTIONS and DISABLE_CONTROL_ACTION
--- @param player integer
function N_0x5501B7A5CDB79D37(player) end

--- Sets profile setting 935
--- @param value integer
function N_0x55384438FC55AD8E(value) end

--- @param p0 boolean
function N_0x5539C3EBF104A53A(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x5574637681911FDA(p0, p1, p2, p3) end

--- _NETWORK_CAN_VIEW_* - _NETWORK_CAN_SESSION* NETWORK_CAN_PLAY_GAMER_USER_CONTENT? NativeDB Introduced: v2699
--- @return any
--- @return any
function N_0x559EBF901A8C68E0() end

--- @param p0 any
--- @param p1 any
function N_0x55A1E095DB052FA5(p0, p1) end

--- @return any
function N_0x55A8BECAF28A4EB7() end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x55ECF4D13D9903B0(p0, p1, p2, p3) end

--- NativeDB Introduced: v1180
function N_0x55F5A5F07134DE60() end

--- @param player1 integer
--- @param player2 integer
--- @param toggle boolean
function N_0x55FCC0C390620314(player1, player2, toggle) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @return any
function N_0x560B423D73015E77(p0) end

--- STAT_SET_*
--- @param p0 integer
function N_0x5688585E6D563CD8(p0) end

--- @param vehicle integer
--- @param p1 boolean
function N_0x56EB5E94318D3FB6(vehicle, p1) end

--- FORCE_*
--- @param p0 integer
function N_0x57D760D55F54E071(p0) end

--- @return any
function N_0x583DF8E3D4AFBD98() end

--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 any
function N_0x5845066D8A1EA7F7(vehicle, x, y, z, p4) end

--- @param p0 any
--- @return any
--- @return any
function N_0x584770794D758C18(p0) end

--- @param p0 boolean
--- @param p1 boolean
function N_0x58BB377BEC7CD5F4(p0, p1) end

--- IS_*
--- @return any
function N_0x59328EB08C5CEB2B() end

--- @return any
function N_0x593FEAE1F73392D4() end

function N_0x59424BD75174C9B1() end

--- NativeDB Introduced: v1493
--- @param vehicle integer
--- @param toggle boolean
--- @param p2 number
function N_0x59C3757B3B7408E8(vehicle, toggle, p2) end

--- @param p0 any
function N_0x59D421683D31835A(p0) end

--- @param p0 any
--- @return any
function N_0x5A34CD9C3C5BEC44(p0) end

function N_0x5A43C76F7FC7BA5F() end

--- @return any
function N_0x5A556B229A169402() end

function N_0x5A7F62FDA59759BD() end

--- Disables some other rendering (internal)
function N_0x5AD3932DAEB1E5D3() end

--- @return any
function N_0x5B0316762AFD4A64() end

--- @return any
function N_0x5B1F2E327B6B6FE1() end

--- @param p0 any
--- @param p1 boolean
function N_0x5B6010B3CBC29095(p0, p1) end

--- @param p0 boolean
function N_0x5B73C77D9EB66E24(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function N_0x5B9853296731E88D(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x5BA68A0840D546AC(p0, p1) end

--- NativeDB Introduced: v1604
--- @param toggle boolean
function N_0x5BBCF35BF6E456F7(toggle) end

--- @param p0 any
--- @return any
function N_0x5BD5F255321C4AAF(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x5BF29846C6527C54(p0, p1, p2, p3, p4) end

--- Only called once in the scripts. Related to weapon objects.
--- @param entity integer
--- @param p1 number
function N_0x5C3B791D580E0BC2(entity, p1) end

--- @param p0 any
function N_0x5C41E6BABC9E2112(p0) end

--- W*
--- @param cam integer
--- @return any
function N_0x5C48A1D6E3B33179(cam) end

--- **This native does absolutely nothing, just a nullsub**
function N_0x5C497525F803486B() end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0x5CDAED54B34B0ED0(p0) end

--- p1: 0..16 NativeDB Introduced: v2060
--- @param vehicle integer
--- @param p1 integer
--- @param p2 number
function N_0x5D96CFB59DA076A0(vehicle, p1, p2) end

--- @param p0 any
function N_0x5DBF05DB5926D089(p0) end

function N_0x5DEBD9C4DC995692() end

--- @param p0 any
function N_0x5E3AA4CA2B6FB0EE(p0) end

--- @param vehicle integer
--- @param toggle boolean
function N_0x5E569EC46EC21CAE(vehicle, toggle) end

--- example from completionpercentage_controller.ysc.c4 if (STATS::_5EAD2BF6484852E4()) { MISC::SET_BIT(g_17b95._f20df._ff10, 15); STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0); }
--- @return any
function N_0x5EAD2BF6484852E4() end

--- @param p0 any
function N_0x5ECD378EE64450AB(p0) end

--- @return any
function N_0x5EDEF0CF8C1DAB3C() end

--- Sets some health value. Looks like it's used for helis.
--- @param vehicle integer
--- @param health number
function N_0x5EE5632F47AE9695(vehicle, health) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x5F456788B05FAEAC(p0, p1, p2) end

--- DISABLE_*
--- @param toggle boolean
function N_0x5F6DF3D92271E8A1(toggle) end

--- @param p0 any
function N_0x5FF2C33B13A02A11(p0) end

--- @param p0 any
function N_0x600F8CB31C7AAB6E(p0) end

--- Returns true if profile setting 901 is set to true and sets it to false. NETWORK_C*
--- @return any
function N_0x60EDD13EB3AC1FF3() end

--- @param p0 any
function N_0x60EEDC12AF66E846(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0x6100B3CEFD43452E(p0) end

--- @return any
function N_0x613F125BA3BD2EB9() end

--- Unknown. Called after creating a checkpoint (type: 51) in the creators.
--- @param checkpoint integer
function N_0x615D3925E87A3B26(checkpoint) end

--- NETWORK_GET_NUM_*
--- @return any
function N_0x617F49C2668E6155() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
function N_0x61F95E5BB3E0A8C6(p0) end

function N_0x62374889A4D59F72() end

--- @param p0 any
function N_0x62454A641B41F3C5(p0) end

function N_0x629526ABA383BCAA() end

--- @param p0 boolean
function N_0x62E849B7EB28E770(p0) end

function N_0x62ECFCFDEE7885D6() end

--- @return any
function N_0x63B406D7884BFA95() end

function N_0x63EB2B972A218CAC() end

--- NativeDB Introduced: v1365
--- @param p0 any
--- @param p1 any
function N_0x63ECF581BC70E363(p0, p1) end

--- @param p0 any
--- @param p1 any
function N_0x641F272B52E2F0F8(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function N_0x6483C25849031C4F(p0, p1, p2) end

--- @param p0 any
function N_0x649C97D52332341A(p0) end

--- NETWORK_GET_*
--- @param entity integer
--- @return any
function N_0x64D779659BC37B19(entity) end

--- Hardcoded to return false. NativeDB Introduced: v1734
--- @return any
function N_0x64E5C4CC82847B73() end

--- @param p0 any
--- @param p1 any
function N_0x6501129C9E0FFA05(p0, p1) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function N_0x65482BFD0923C8A1(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
function N_0x6551B1F7F6CD46EA(p0) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
function N_0x659F9D71F52843F8(p0, p1) end

--- @param p0 any
function N_0x65B080555EA48149(p0) end

--- Sets GtaThread+0x14A SET_S*
--- @param toggle boolean
function N_0x65D2EBB47E1CEC21(toggle) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x66972397E0757E7A(p0, p1, p2) end

function N_0x66A49D021870FE88() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x66E3AAFACE2D1EB8(p0, p1, p2) end

--- @return any
function N_0x66E7CB63C97B7D20() end

function N_0x675721C9F644D161() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x675D19C6067CAE08(p0, p1, p2, p3) end

--- @param p0 any
function N_0x678F86D8FC040BDB(p0) end

--- @return any
function N_0x67FC09BC554A75E5() end

function N_0x68103E2247887242() end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
function N_0x68B562E124CC0AEF(p0, p1) end

--- IS_*
--- @param player integer
--- @return any
function N_0x690A61A6D13583F6(player) end

--- NativeDB Introduced: v2372
--- @return any
function N_0x690B76BD2763E068() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p4 any
--- @param p5 boolean
--- @return any
--- @return any
function N_0x692D58DF40657E8C(p0, p1, p2, p4, p5) end

function N_0x693478ACBD7F18E7() end

--- @param p0 integer
--- @param p1 string
--- @return any
--- @return any
function N_0x699E4A5C8C893A18(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x69EF772B192614C1(p0, p1, p2, p3) end

--- SET_F*
--- @param toggle boolean
function N_0x6A51F78772175A51(toggle) end

--- Sets some voice chat related value. NETWORK_SET_*
--- @param toggle boolean
function N_0x6A5D89D7769A40D8(toggle) end

--- @param p0 any
function N_0x6A60E43998228229(p0) end

--- NativeDB Introduced: v2060
--- @return any
function N_0x6A7F19756F1A9016() end

--- NativeDB Introduced: v1604
--- @param vehicle integer
--- @param p1 any
function N_0x6A973569BA094650(vehicle, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0x6AD0BD5E087866CB(p0) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x6B7E4FB50D5F3D65(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @return integer
--- @return integer
function N_0x6BC0ACD0673ACEBE(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x6BCCF9948492FD85(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @return any
function N_0x6BFB12CE158E3DD4(p0) end

--- **This native does absolutely nothing, just a nullsub**
--- @param player integer
function N_0x6BFF5F84102DF80A(player) end

--- @param padIndex integer
--- @return any
function N_0x6CD79468A1E595C6(padIndex) end

function N_0x6CE50E47F5543D0C() end

--- Returns some sort of index/offset for props. Needs \_GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise. NativeDB Introduced: v2189
--- @param componentHash integer
--- @return any
function N_0x6CEBE002E58DEE97(componentHash) end

--- Possible values: act_cinema am_mp_carwash_launch am_mp_carwash_control am_mp_property_ext chop fairgroundHub launcher_BasejumpHeli launcher_BasejumpPack launcher_CarWash launcher_golf launcher_Hunting_Ambient launcher_MrsPhilips launcher_OffroadRacing launcher_pilotschool launcher_Racing launcher_rampage launcher_rampage launcher_range launcher_stunts launcher_stunts launcher_tennis launcher_Tonya launcher_Triathlon launcher_Yoga ob_mp_bed_low ob_mp_bed_med
--- @param action string
function N_0x6D6840CEE8845831(action) end

--- @return any
--- @return integer
--- @return integer
function N_0x6DEE77AFF8C21BD1() end

--- @return any
function N_0x6E0A5253375C4584() end

--- @param p0 any
--- @return any
function N_0x6E4361FF3E8CD7CA(p0) end

--- Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar Here are possible values of argument - "ob_tv" "launcher_Darts"
--- @param action string
function N_0x6E91B04E08773030(action) end

--- @param p0 any
--- @return any
function N_0x6EAAEFC76ACC311F(p0) end

--- @param vehicle integer
--- @param p1 boolean
function N_0x6EBFB22D646FFC18(vehicle, p1) end

--- Sets bit 3 in GtaThread+0x150 SET_T*
--- @param toggle boolean
function N_0x6F2135B6129620C1(toggle) end

function N_0x6F361B8889A792A3() end

--- @return any
function N_0x6FB7BB3607D27FA2() end

--- This function is hard-coded to always return 1.
--- @param p0 any
--- @return any
function N_0x6FCF8DDEA146C45B(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x6FD97159FE3C971A(p0, p1, p2, p3) end

--- Does nothing (it's a nullsub). NativeDB Introduced: v323
function N_0x6FD992C4A1C1B986() end

--- HAS_* Probably something like "has game been started for the first time".
--- @return any
function N_0x6FDDF453C0C756EC() end

--- Clears the fields sets by N\_0xc7f29ca00f46350e (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list. Related to its "Pre-networked state"?
function N_0x701FDA1E82076BA4() end

--- @param p0 any
function N_0x702BC4D605522539(p0) end

--- @param p0 any
function N_0x7033EEFD9B28088E(p0) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
function N_0x703CC7F60CBB2B57(p0) end

--- @return any
function N_0x705A276EBFF3133D() end

--- NativeDB Introduced: v1604
--- @param coordX number
--- @param coordY number
--- @param coordZ number
function N_0x70A382ADEC069DD3(coordX, coordY, coordZ) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: int* p1 NativeDB Introduced: v323
--- @return any
function N_0x710BCDA8071EDED1() end

--- @param p0 any
--- @param p1 any
function N_0x711794453CFD692B(p0, p1) end

--- NativeDB Introduced: v1604
function N_0x7148E0F43D11F0D9() end

function N_0x71B008056E5692D6() end

--- @return any
function N_0x71E7B2E657449AAD() end

--- @param p0 any
--- @param p1 any
function N_0x723C1CE13FBFDB67(p0, p1) end

--- Jenkins hash _might_ be 0xFC227584.
--- @param entity integer
--- @param toggle boolean
function N_0x7241CCB7D020DB69(entity, toggle) end

--- Last named native above this one is `TRACK_VEHICLE_VISIBILITY` and first named native below is `UNCUFF_PED`. Unknown what it does, couldn't find good examples in the decompiled scripts.
--- @param p0 any
--- @param p2 any
--- @return any
--- @return any
function N_0x725012A415DBA050(p0, p2) end

--- _RESET_* _RESET_GAMEPLAY_CAM_RELATIVE_ORBIT_HOLD_TIME? NativeDB Introduced: v2699
function N_0x7295C203DD659DFE() end

--- @param p0 any
--- @param p1 any
function N_0x72BECCF4B829522E(p0, p1) end

--- @return any
function N_0x72EB7BA9B69BF6AB() end

--- @param p0 any
function N_0x73001E34F85137F8(p0) end

--- @param ped integer
function N_0x733C87D4CE22BEA2(ped) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
function N_0x734E1714D077DA9A(p0, p1) end

--- @param p0 any
--- @param p1 any
function N_0x73561D4425A021A2(p0, p1) end

--- @param vehicle integer
--- @param toggle boolean
function N_0x737E398138550FFF(vehicle, toggle) end

--- Has something to do with a host request. NETWORK_RE*
function N_0x741A3D8380319A81() end

--- @param p0 any
--- @return any
function N_0x742B58F723233ED9(p0) end

--- NET_GAMESERVER_*
--- @param p0 integer
--- @return any
function N_0x74A0FD0688F1EE45(p0) end

--- Hardcoded to return zero. ==== PS4 specific info ==== Returns some sort of unavailable reason: -1 = REASON_INVALID 0 = REASON_OTHER 1 = REASON_SYSTEM_UPDATE 2 = REASON_GAME_UPDATE 3 = REASON_SIGNED_OUT 4 = REASON_AGE 5 = REASON_CONNECTION =================================
--- @return any
function N_0x74FB3E29E6D10FA9() end

--- Checks some commerce stuff NativeDB Introduced: v1290
--- @return any
function N_0x754615490A029508() end

--- @param p0 integer
--- @return any
function N_0x759650634F07B6B4(p0) end

--- REQUEST_*
--- @param ped integer
--- @param p1 boolean
function N_0x75BA1CB3B7D40CAF(ped, p1) end

--- Sets bit 1 in GtaThread+0x154 BG_* NativeDB Introduced: v323
function N_0x760910B49D2B98EA() end

--- @param p0 any
function N_0x762DB2D380B48D04(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0x76B3F29D3F967692(p0, p1) end

--- SET_VEHICLE_*
--- @param vehicle integer
function N_0x76D26A22750E849E(vehicle) end

--- @param p0 any
function N_0x77FADDCBE3499DF7(p0) end

--- @return any
function N_0x7808619F31FF22DB() end

--- SET_PICKUP_\* NativeDB Introduced: v1734
--- @param pickup integer
function N_0x7813E8B8C4AE4799(pickup) end

--- @param p0 any
--- @param p1 boolean
--- @return any
function N_0x78321BEA235FD8CD(p0, p1) end

--- @param p0 any
--- @param p1 any
function N_0x78CEEE41F49F421F(p0, p1) end

--- Related to cutscene entities. Unsure about the use. SET_ENTITY_*
--- @param entity integer
function N_0x78E8E3A640178255(entity) end

--- @return any
function N_0x793FF272D5B365F4() end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
function N_0x796A877E459B99EA(p0, p1, p2, p3) end

--- Sets profile setting 940 and 941 _SET_F* - _SET_G* NativeDB Introduced: v2699
--- @param profileSetting integer
--- @param settingValue integer
function N_0x79D310A861697CC9(profileSetting, settingValue) end

--- NET_GAMESERVER_* Checks if the transaction status is equal to 3. NativeDB Introduced: v1365
--- @param transactionId integer
--- @return any
function N_0x79EDAC677CA62F81(transactionId) end

--- UI3DSCENE_*
function N_0x7A42B2E236E71415() end

--- @param p0 boolean
--- @return any
function N_0x7AC24EAB6D74118D(p0) end

--- @param p0 any
function N_0x7B18DA61F6BAE9D5(p0) end

function N_0x7B8A361C1813FBEF() end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function N_0x7BAE68775557AE0B(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
function N_0x7BBE7FF626A591FE(p0) end

--- @param p0 any
function N_0x7C226D5346D4D10A(p0) end

--- @return any
function N_0x7C4FCCD2E4DEB394() end

--- @param p0 any
function N_0x7D36291161859389(p0) end

--- @param p0 boolean
function N_0x7D395EA61622E116(p0) end

--- SET_VEHICLE_AL*
--- @param vehicle integer
--- @param toggle boolean
--- @param p2 boolean
function N_0x7D6F9A3EF26136A0(vehicle, toggle, p2) end

--- @param p0 any
function N_0x7D8BA05688AD64C7(p0) end

--- @return any
function N_0x7DB18CA8CAD5B098() end

--- @return any
function N_0x7DB53B37A2F211A0() end

--- @param p0 any
--- @return any
function N_0x7E07C78925D5FD96(p0) end

--- **This native does absolutely nothing, just a nullsub** Something to do with phone cameras. startup.c4: void sub_2a3d() { UNK2::_7E2BD3EF6C205F09("No_Filter", 1); UNK2::_7E2BD3EF6C205F09("phone_cam1", 1); UNK2::_7E2BD3EF6C205F09("phone_cam2", 1); UNK2::_7E2BD3EF6C205F09("phone_cam3", 1); UNK2::_7E2BD3EF6C205F09("phone_cam4", 1); UNK2::_7E2BD3EF6C205F09("phone_cam5", 1); UNK2::_7E2BD3EF6C205F09("phone_cam6", 1); UNK2::_7E2BD3EF6C205F09("phone_cam7", 1); UNK2::_7E2BD3EF6C205F09("phone_cam9", 1); UNK2::_7E2BD3EF6C205F09("phone_cam12", 0); }
--- @param p0 string
--- @param p1 boolean
function N_0x7E2BD3EF6C205F09(p0, p1) end

--- @param p0 any
--- @return any
function N_0x7E6946F68A38B74F(p0) end

--- Possibly used to clear scenario points. CLEAR_*
function N_0x7EC6F9A478A6A512() end

--- NativeDB Introduced: v1604
--- @param p0 any
function N_0x7ECDF98587E92DEC(p0) end

--- _PLAYSTATS_ROB_ARMOURD_TRUCK
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x7EEC2A316C250073(p0, p1, p2) end

--- IS_*
--- @param entity integer
--- @return any
function N_0x7EF7649B64D7FF10(entity) end

--- @param p0 any
--- @return any
function N_0x7F2C4CDF2E82DF4C(p0) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 boolean
--- @return any
function N_0x7F8F6405F4777AF6(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- SET_VEHICLE_*
--- @param modelHash integer
function N_0x7F96F23FA9B73327(modelHash) end

--- @return any
function N_0x7FA5D82B8F58EC06() end

--- @param p0 integer
--- @return any
function N_0x7FCC39C46C3C03BD(p0) end

--- NativeDB Introduced: v323
--- @return any
function N_0x7FFCBFEE44ECFABF() end

--- CLEAR_PED_*
--- @param ped integer
function N_0x80054D7FCC70EEC6(ped) end

--- IS_*
--- @return any
function N_0x801879A9B4F4B2FB() end

--- @param vehicle integer
--- @param toggle boolean
function N_0x80E3357FDEF45C21(vehicle, toggle) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x810B5FCC52EC7FF0(p0, p1, p2, p3) end

--- @param p0 any
function N_0x814AF7DCAACC597B(p0) end

--- UI::_817B86108EB94E51(1, &g_189F36._f10CD1[0/*16*/], &g_189F36._f10CD1[1/*16*/], &g_189F36._f10CD1[2/*16*/], &g_189F36._f10CD1[3/*16*/], &g_189F36._f10CD1[4/*16*/], &g_189F36._f10CD1[5/*16*/], &g_189F36._f10CD1[6/*16*/], &g_189F36._f10CD1[7/*16*/]);
--- @param p0 boolean
--- @return any
--- @return any
--- @return any
--- @return any
--- @return any
--- @return any
--- @return any
--- @return any
function N_0x817B86108EB94E51(p0) end

function N_0x81CBAE94390F9F89() end

--- @param p0 any
--- @param p1 any
function N_0x820E9892A77E97CD(p0, p1) end

--- NativeDB Introduced: v1180
--- @param vehicle integer
--- @param toggle boolean
function N_0x8235F1BEAD557629(vehicle, toggle) end

--- NativeDB Introduced: v2060
--- @param p0 any
function N_0x823EC8E82BA45986(p0) end

--- Only found 2 times in decompiled scripts. Not a whole lot to go off of. MISC::_8269816F6CFD40F8(&a_0._f1F5A._f6[0/*8*/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves" MISC::_8269816F6CFD40F8(&a_0._f4B4[v_1A/*8*/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
--- @param name string
--- @return any
function N_0x8269816F6CFD40F8(name) end

--- @param p0 any
--- @param p1 any
function N_0x826D1EE4D1CAFC78(p0, p1) end

--- BG_* NativeDB Introduced: v323
--- @param p0 integer
--- @return any
function N_0x829CD22E043A2577(p0) end

--- @param p0 any
--- @return any
function N_0x82ACC484FFA3B05F(p0) end

--- Does nothing. It's a nullsub. NativeDB Introduced: v1604
--- @param toggle boolean
function N_0x82E0AC411E41A5B4(toggle) end

--- @param entity integer
--- @param interiorID integer
function N_0x82EBB79E258FA2B7(entity, interiorID) end

--- NativeDB Introduced: v1493
--- @param p0 any
function N_0x830C3A44EB3F2CF9(p0) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function N_0x834344A414C7C85D(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return integer
function N_0x83660B734994124D(p0, p1) end

--- Returns true if bit 0 in GtaThread+0x154 is set. BG_* NativeDB Introduced: v323
--- @return any
function N_0x836B62713E0534CA() end

function N_0x83FE8D7229593017() end

--- NativeDB Introduced: v1290
function N_0x8410C5E0CD847B9D() end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x8423541E8B3A1589(p0, p1, p2) end

--- @return any
function N_0x84A810B375E69C0E() end

--- NativeDB Introduced: v2372
--- @return any
function N_0x84B418E93894AC1C() end

--- @return any
--- @return integer
function N_0x84DE3B5FB3E666F0() end

--- @param p0 any
function N_0x84DFC579C2FC214C(p0) end

function N_0x851CD923176EBA7C() end

--- @param p0 any
--- @return any
function N_0x8533CAFDE1F0F336(p0) end

--- @param p0 any
--- @param p1 any
function N_0x858EC9FD25DE04AA(p0, p1) end

--- @return any
function N_0x85F6C9ABA1DE2BCF() end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @param p1 string
--- @param value number
function N_0x8634CEF2522D987B(ped, p1, value) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0x8664170EF165C4A6(p0, p1) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x870289A558348378(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x870B8B7A766615C8(p0, p1, p2) end

--- SET_A*
--- @param multiplier number
function N_0x87DDEB611B329A9C(multiplier) end

--- @param p0 any
function N_0x88087EE1F28024AE(p0) end

--- NativeDB Introduced: v1290
--- @param vehicle integer
--- @param toggle boolean
function N_0x8821196D91FA2DE5(vehicle, toggle) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0x88578F6EC36B4A3A(p0, p1) end

--- NativeDB Introduced: v1365
--- @param vehicle integer
function N_0x887FA38787DE8C72(vehicle) end

--- NativeDB Added Parameter 2: Any p1
--- @param p0 any
function N_0x8881C98A31117998(p0) end

--- @return any
function N_0x88B588B41FF7868E() end

--- @param vehicle integer
--- @param p1 boolean
function N_0x88BC673CA9E0AE99(vehicle, p1) end

--- **This native does absolutely nothing, just a nullsub**
function N_0x8951EB9C6906D3C8() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function N_0x8989CBD7B4E82534(p0, p1, p2, p3, p4, p5, p6) end

--- NativeDB Introduced: v1290
--- @return any
--- @return any
function N_0x8A4416C0DB05FA66() end

--- @return any
function N_0x8B0C2964BA471961() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function N_0x8B4FFC790CA131EF(p0, p1, p2, p3) end

--- @return any
function N_0x8B9CDBD6C566C38C() end

--- @param p0 number
--- @param p1 number
function N_0x8BF907833BE275DE(p0, p1) end

--- @param p0 any
--- @return any
function N_0x8C8D2739BA44AF0F(p0) end

--- @param p0 any
function N_0x8C9D11605E59D955(p0) end

--- @param p0 any
function N_0x8CAAB2BD3EA58BD4(p0) end

--- @param p0 integer
--- @param p1 string
--- @return any
--- @return any
function N_0x8CC469AB4D349B7C(p0, p1) end

--- Used only once in the scripts (taxi_clowncar) SET_PARTICLE_FX_*
--- @param toggle boolean
function N_0x8CDE909A0370BB3A(toggle) end

--- NativeDB Introduced: v757
--- @param p0 any
function N_0x8CFF648FBD7330F1(p0) end

--- I*
--- @param p0 string
function N_0x8D74E26F54B4E5C3(p0) end

--- SET_PLAYER_MAX_*
--- @param player integer
--- @param p1 number
function N_0x8D768602ADEF2245(player, p1) end

--- @param p0 any
function N_0x8D8ADB562F09A245(p0) end

--- SET_SCRIPT_* Sets the cutscene's owning thread ID.
--- @param threadId integer
function N_0x8D9DF6ECA8768583(threadId) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
function N_0x8DCA505A5C196F05(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x8E243837643D9583(p0, p1, p2, p3) end

--- @param p0 any
function N_0x8EC74CEB042E7CFF(p0) end

--- NETWORK_SET_\* NativeDB Introduced: v1734
--- @param toggle boolean
function N_0x8EF52ACAECC51D9C(toggle) end

--- @param p0 any
--- @param p2 any
--- @return any
--- @return any
function N_0x8F08017F9D7C47BD(p0, p2) end

--- NativeDB Introduced: v1604
--- @param toggle boolean
function N_0x8F0D5BA1C2CC91D7(toggle) end

--- NativeDB Introduced: v1493
--- @return any
function N_0x906CA41A4B74ECA4() end

--- NativeDB Introduced: v323
--- @param p0 any
function N_0x908311265D42A820(p0) end

--- ADD_\* NativeDB Introduced: v1868
--- @param player integer
--- @param entity integer
function N_0x9097EB6D4BB9A12A(player, entity) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x90CD7C6871FBF1B4(p0, p1, p2, p3) end

--- Does nothing (it's a nullsub). Seems to be PS4 specific. NativeDB Introduced: v2060
--- @param p0 string
function N_0x916CA67D26FD1E37(p0) end

--- @param p0 boolean
function N_0x91EF6EE6419E5B97(p0) end

--- @param p0 any
--- @return any
function N_0x9237E334F6E43156(p0) end

--- @param p0 string
--- @return any
--- @return integer
function N_0x92DA6E70EF249BD1(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function N_0x92FC0EEDFAC04A14(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
function N_0x930F504203F561C9(p0) end

--- Probably IS_SWITCH_*
--- @return any
function N_0x933BBEEB8C61B5F4() end

--- @param p0 boolean
function N_0x94538037EE44F5CF(p0) end

function N_0x9465E683B12D3F6B() end

--- @return any
function N_0x9489659372A81585() end

--- @param p0 number
function N_0x949F397A288B28B3(p0) end

--- @param iplName1 string
--- @param iplName2 string
function N_0x95A7DABDDBB78AE7(iplName1, iplName2) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
function N_0x95BAF97C82464629(p0, p1) end

--- NativeDB Introduced: v1290
--- @param vehicle integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0x9640E30A7F395E4B(vehicle, p1, p2, p3, p4) end

--- @param p0 any
function N_0x9641588DAB93B4B5(p0) end

--- Returns some sort of index/offset for components. Needs \_GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise. NativeDB Introduced: v2189
--- @param componentHash integer
--- @return any
function N_0x96E2929292A4DB77(componentHash) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x96E6D5150DBF1C09(p0, p1, p2) end

--- @param p0 boolean
function N_0x973D76AA760A6CB6(p0) end

--- SET_WEAPON_OBJECT_*
--- @param weaponObject integer
--- @param p1 integer
function N_0x977CA98939E82E4B(weaponObject, p1) end

--- NativeDB Introduced: v1180
--- @param vehicle integer
--- @param toggle boolean
function N_0x97841634EF7DF1D6(vehicle, toggle) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
function N_0x97E7E2C04245115B(p0) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function N_0x97FFB4ADEED08066(p0, p1) end

--- NativeDB Introduced: v1604
--- @param vehicle integer
--- @param toggle boolean
function N_0x9849DE24FCF23CCC(vehicle, toggle) end

--- GET_F*
--- @param string string
--- @param length integer
--- @return any
function N_0x98C3CF913D895111(string, length) end

--- NativeDB Introduced: v1493
--- @return any
function N_0x98D18905BF723B99() end

function N_0x98E2BC1CA26287C3() end

--- REQUEST_*
function N_0x98EDF76A7271E4F2() end

--- @param p0 boolean
function N_0x9911F4A24485F653(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0x998E18CEB44487FC(p0, p1, p2, p3) end

--- Does nothing. It's a nullsub. NativeDB Introduced: v1604
--- @param toggle boolean
function N_0x99A05839C46CE316(toggle) end

--- @param vehicle integer
--- @param p1 number
--- @param p2 number
function N_0x99CAD8E7AFDB60FA(vehicle, p1, p2) end

--- @return any
function N_0x9A62EC95AE10E011() end

--- @param ped integer
--- @param toggle boolean
function N_0x9A77DFD295E29B09(ped, toggle) end

function N_0x9AC92EED5E4793AB() end

--- FORCE_*
--- @param p0 boolean
function N_0x9B079E5221D984D3(p0) end

function N_0x9B4BD21D69B1E609() end

--- Hardcoded to return 0. NativeDB Introduced: v323
--- @return any
function N_0x9B5016A6433A68C5() end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0x9BD7BD55E4533183(p0, p1, p2) end

--- @param vehicle integer
--- @param p1 boolean
--- @param p2 boolean
function N_0x9BDDC73CC6A115D4(vehicle, p1, p2) end

--- @param vehicle integer
--- @param p1 boolean
function N_0x9BECD4B9FEF3F8A6(vehicle, p1) end

--- @param ped integer
--- @return any
--- @return integer
function N_0x9C6A6C19B6C0C496(ped) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @return any
function N_0x9D252648778160DF(p0) end

--- @param p0 any
function N_0x9D30687C57BAA0BB(p0) end

--- SET_H*
--- @param vehicle integer
--- @param p1 number
function N_0x9D3AF56E94C9AE98(vehicle, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0x9D724B400A7E8FFC(p0, p1) end

--- Sets some voice chat related value. NETWORK_SET_*
--- @param toggle boolean
function N_0x9D7AFCBF21C51712(toggle) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: char* p1 NativeDB Introduced: v323
--- @return any
function N_0x9DE5D2F723575ED0() end

--- SET_FOLLOW_*
--- @param p0 boolean
--- @param p1 boolean
function N_0x9DFE13ECDC1EC196(p0, p1) end

--- @return any
--- @return any
--- @return any
function N_0x9E30E91FB03A2CAF() end

--- DISABLE_*
--- @param toggle boolean
function N_0x9E6542F0CE8E70A3(toggle) end

--- SET_*
--- @param p0 boolean
function N_0x9EBD751E5787BAF2(p0) end

--- @return any
function N_0x9EC8858184CD253A() end

--- @param player integer
function N_0x9EDD76E87D5D51BA(player) end

--- REMOVE_\* NativeDB Introduced: v1868
--- @param player integer
--- @param entity integer
function N_0x9F260BFB59ADBCA3(player, entity) end

--- @param vehicle integer
--- @param p1 boolean
function N_0x9F3F689B814F2599(vehicle, p1) end

--- B\* NativeDB Introduced: v1734
function N_0x9F97DA93681F87EA() end

--- SET_C\* NativeDB Introduced: v1734
--- @param p0 integer
--- @param p1 number
function N_0x9FCB3CBFB3EAD69A(p0, p1) end

--- @return any
function N_0x9FEDF86898F100E9() end

--- Gets hash related to task happening with seat index Native name: GET_I\*
--- @param vehicle integer
--- @param seatIndex integer
--- @return any
function N_0xA01BC64DD4BFBBAC(vehicle, seatIndex) end

--- @param p0 any
--- @param p1 number
--- @param p2 boolean
function N_0xA08FE5E49BDC39DD(p0, p1, p2) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
--- @param p10 any
--- @param p11 any
--- @param p12 any
--- @param p13 any
--- @return any
function N_0xA0AD167E4B39D9A2(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) end

--- @param p0 any
function N_0xA0CEFCEA390AAB9B(p0) end

--- @return any
--- @return any
function N_0xA0F93D5465B3094D() end

--- @return any
function N_0xA0FA4EC6A05DA44E() end

--- @return any
function N_0xA0FE76168A189DDB() end

--- @return any
function N_0xA12D3A5A3753CC23() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xA17784FCA9548D15(p0, p1, p2) end

--- ROPE_\* NativeDB Introduced: v1868
--- @param p1 boolean
--- @return integer
function N_0xA1AE736541B0FCA3(p1) end

--- @return any
function N_0xA213B11DFF526300() end

--- @return any
--- @return integer
--- @return integer
--- @return integer
function N_0xA238192F33110615() end

--- @param p0 any
function N_0xA247F9EF01D8082E(p0) end

--- @param p0 any
--- @param p1 boolean
function N_0xA2767257A320FC82(p0, p1) end

--- CLEAR_*
function N_0xA2C1F5E92AFE49ED() end

--- @param ped integer
--- @param weaponHash integer
--- @return any
function N_0xA2C9AC24B4061285(ped, weaponHash) end

--- Needs more research. If the "phone_cam12" filter is applied, this function is called with "TRUE"; otherwise, "FALSE". Example (XBOX 360): // check current filter selection if (MISC::ARE_STRINGS_EQUAL(getElem(g_2471024, &l_17, 4), "phone_cam12") != 0) { MOBILE::_0xC273BB4D(0); // FALSE } else { MOBILE::_0xC273BB4D(1); // TRUE }
--- @return integer
function N_0xA2CCBE62CD4C91A4() end

--- Appears to set whether a transition should be started when the session is migrating. NETWORK_SET_*
--- @param toggle boolean
function N_0xA2E9C1AB8A92E8CD(toggle) end

--- @return any
function N_0xA306F470D1660581() end

--- @param p0 any
--- @param p1 any
function N_0xA3C53804BDB68ED2(p0, p1) end

--- Only called once in the scripts: if (sub_1abd() && (!PED::_A3F3564A5B3646C0(l_8C))) { if (sub_52e3("RESNA_CELLR", 0)) { PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(l_8C, 1); PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(l_8C, 1); PED::SET_PED_CAN_PLAY_VISEME_ANIMS(l_8C, 1, 0); l_184 += 1; } } Checks something related to the mobile phone task. IS_*
--- @param ped integer
--- @return any
function N_0xA3F3564A5B3646C0(ped) end

--- NativeDB Added Parameter 1: int p0 NativeDB Introduced: v323
--- @return any
function N_0xA468E0BE12B12C70() end

--- @param p0 boolean
function N_0xA46B73FAA3460AE1(p0) end

--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @return any
--- @return vector3
--- @return vector3
--- @return vector3
function N_0xA4822F1CF23F4810(p3, p4, p5, p6, p7, p8) end

--- GET_SAVE_* GET_SAVE_UNLESS_CUSTOM_DOT ?
--- @return any
--- @return vector3
--- @return number
--- @return boolean
--- @return boolean
function N_0xA4A0065E39C9F25C() end

--- NativeDB Introduced: v1604
--- @param p0 any
function N_0xA4A9A4C40E615885(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xA51338E0DCCD4065(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xA51B086B0B2C0F7A(p0, p1, p2, p3) end

--- @param p0 any
function N_0xA52D5247A4227E14(p0) end

--- @param p0 any
--- @param p1 boolean
function N_0xA660FAF550EB37E5(p0, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @return any
function N_0xA6EEF01087181EDD(p0, p1) end

--- @param p0 any
function N_0xA6F54BB2FFCA35EA(p0) end

--- NativeDB Introduced: v1604
--- @param p0 any
function N_0xA6FCECCF4721D679(p0) end

--- NativeDB Introduced: v2189
function N_0xA7092AFE81944852() end

--- @return any
--- @return any
--- @return any
--- @return any
function N_0xA736CF7FB7C5BFF4() end

--- @return any
function N_0xA761D4AC6115623D() end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
--- @return any
function N_0xA7862BC5ED1DFD7E(p0, p1) end

--- STATS::0xE3247582(0); STATS::0xE3247582(1); STATS::0xE3247582(2); STATS::0xE3247582(3); STATS::0xE3247582(4); STATS::0xE3247582(5); STATS::0xE3247582(6);
--- @param p0 integer
function N_0xA78B8FA58200DA56(p0) end

--- @param vehicle integer
--- @param p1 boolean
function N_0xA7DCDF4DED40A8F4(vehicle, p1) end

--- Some property related to gates. Native name between `DOOR_SYSTEM_SET_AUTOMATIC_RATE` and `DOOR_SYSTEM_SET_DOOR_STATE`.
--- @param doorHash integer
--- @param p1 boolean
function N_0xA85A21582451E951(doorHash, p1) end

--- @param p0 any
function N_0xA8733668D1047B51(p0) end

--- @return any
function N_0xA8ACB6459542A8C8() end

--- @return any
function N_0xA943FD1722E11EFD() end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xA95CFB4E02390842(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xA95F667A755725DA(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 boolean
function N_0xA9B61A329BFDCBEA(p0, p1) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
function N_0xAA059C615DE9DD03(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xAA525DFF66BB82F5(p0, p1, p2) end

--- NativeDB Added Parameter 1: Entity entity
--- @return any
function N_0xAA5FAFCD2C5F5E47() end

--- NativeDB Introduced: v1290
--- @param vehicle integer
--- @param toggle boolean
function N_0xAA653AE61924B0A0(vehicle, toggle) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function N_0xAA76052DDA9BFC3E(p0, p1, p2, p3, p4, p5, p6) end

--- @param p0 any
--- @return any
function N_0xAAA6A3698A69E048(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0xAABD62873FFB1A33(p0, p1) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
function N_0xAAE9BE70EC7C69AB(p0, p1, p2, p3, p4, p5, p6, p7) end

--- @param vehicle integer
--- @param p1 boolean
function N_0xAB04325045427AAE(vehicle, p1) end

--- Used only once in the scripts (fm_mission_controller) like so: TASK::_0xAB13A5565480B6D9(iLocal_3160, "Cutting"); SET_*
--- @param ped integer
--- @param p1 string
--- @return any
function N_0xAB13A5565480B6D9(ped, p1) end

--- @param p0 any
--- @param p1 any
function N_0xAB31EF4DE6800CE9(p0, p1) end

--- @param p0 number
function N_0xAC2890471901861C(p0) end

--- NativeDB Introduced: v1290
--- @param ped integer
--- @param p1 any
--- @param p2 number
--- @param hash integer
--- @param p4 any
--- @param p5 any
function N_0xAD27D957598E49E9(ped, p1, p2, hash, p4, p5) end

--- This has been found in use in the decompiled files.
--- @param player integer
function N_0xAD73CE5A09E42D12(player) end

--- gets 2 floats from the CNetGamePlayer of p0 and stores them in p1 and p2. Possibly waypoint?
--- @param p0 integer
--- @return number
--- @return number
function N_0xADB57E5B663CCA8B(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0xADD6627C4D325458(p0) end

--- NativeDB Introduced: v1604
--- @param p0 integer
--- @return any
function N_0xADF084FB8F075D06(p0) end

--- @param vehicle integer
--- @return any
function N_0xAE3FEE8709B39DCB(vehicle) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
function N_0xAE51BC858F32BA66(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @return any
function N_0xAEAB987727C5A8A4(p0) end

--- Does nothing (it's a nullsub). NativeDB Introduced: v323
function N_0xAEDF1BC1C133D6E3() end

--- Exemple of use(carmod_shop.c4) INTERIOR::_AF348AFCB575A441("V_CarModRoom");
--- @param roomName string
function N_0xAF348AFCB575A441(roomName) end

--- @param p0 any
--- @param p1 any
function N_0xAF60E6A2936F982A(p0, p1) end

--- SET_PED_*
--- @param ped integer
--- @param toggle boolean
function N_0xAFC976FD0580C7B3(ped, toggle) end

--- NativeDB Introduced: v1734
--- @param object integer
--- @param p1 number
--- @param p2 number
--- @param p3 boolean
--- @return any
function N_0xAFE24E4D29249E4A(object, p1, p2, p3) end

--- @return any
function N_0xAFF47709F1D5DCCE() end

--- NativeDB Introduced: v1180
function N_0xB1381B97F70C7B30() end

function N_0xB13E88E655E5A3BC() end

--- @param p0 any
--- @param p1 any
function N_0xB17BC6453F6CF5AC(p0, p1) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function N_0xB1B6216CA2E7B55E(p0, p1, p2) end

--- @return any
function N_0xB1D2BB1E1631F5B1() end

--- NativeDB Added Parameter 2: Any p1 NativeDB Introduced: v1493
--- @param p0 any
function N_0xB26F670685631727(p0) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
--- @param p1 any
function N_0xB282749D5E028163(p0, p1) end

--- @param object integer
--- @param toggle boolean
function N_0xB2D0BDE54F0E8E5A(object, toggle) end

--- SET_C*
--- @param vehicle integer
--- @param toggle boolean
function N_0xB2E0C0D6922D31F2(vehicle, toggle) end

--- @return any
function N_0xB2EBE8CBC58B90E9() end

--- @param p0 any
--- @return any
function N_0xB309EBEA797E001F(p0) end

--- _SET_PED_HEAD_* - _SET_PED_HEARING_* _SET_PED_HEALTH_... NativeDB Introduced: v2699
--- @param toggle boolean
function N_0xB3352E018D6F89DF(toggle) end

--- @return any
function N_0xB37E4E6A2388CA7B() end

--- Setter for 0xE59343E9E96529E7 SET_M*
--- @param p0 number
function N_0xB3C641F3630BF6DA(p0) end

--- This function is hard-coded to always return 1. NETWORK_IS_*
--- @return any
function N_0xB3DA2606774A8E2D() end

--- PLAYER::0xBF6993C7(rPtr((&l_122) + 71)); // Found in decompilation *** In "am_hold_up.ysc" used once: l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0); PLAYER::_B45EFF719D8427A6((l_8d._f47));
--- @param p0 number
function N_0xB45EFF719D8427A6(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xB4C2EC463672474E(p0, p1, p2, p3) end

--- NativeDB Introduced: v1493
--- @param p0 any
function N_0xB4DEAE67F35E2ACD(p0) end

--- @param toggle boolean
function N_0xB51B9AB9EF81868C(toggle) end

--- @param p0 boolean
function N_0xB542DE8C3D1CB210(p0) end

--- @param p0 any
--- @param p1 any
function N_0xB552929B85FC27EC(p0, p1) end

--- @param p0 any
function N_0xB569F41F3E7E83A4(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0xB5B58E24868CB09E(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
function N_0xB5B7742424BD4445(p0, p1) end

--- @return any
function N_0xB5D3453C98456528() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
function N_0xB606E6CC59664972(p0) end

--- NativeDB Introduced: v1290
--- @param vehicle integer
--- @param toggle boolean
function N_0xB68CFAF83A02768D(vehicle, toggle) end

--- ROPE_*
--- @param ropeId integer
--- @param p1 integer
function N_0xB743F735C03D7810(ropeId, p1) end

--- @return any
--- @return any
--- @return any
function N_0xB746D20B17F2A229() end

--- SET_C\* NativeDB Introduced: v1734
function N_0xB7B873520C84C118() end

--- Clears all areas created by 0xD4A7A435B3710D05 CLEAR_* NativeDB Introduced: v1290
function N_0xB7C6D80FB371659A() end

--- Disables something. Used only once in R* scripts (freemode.ysc). DISABLE_PLAYER_*
function N_0xB885852C39CC265D() end

--- @param ped integer
--- @return any
function N_0xB8B52E498014F5B0(ped) end

--- NativeDB Introduced: v2060
--- @param p0 any
--- @return any
function N_0xB9351A07A0D458B1(p0) end

--- @param p0 any
--- @param p1 any
function N_0xB9562064627FF9DB(p0, p1) end

--- Returns profile setting 237. GET_*
--- @return any
function N_0xB9CF1F793A9F1BF1() end

--- @param p0 any
--- @param p1 any
function N_0xBA0127DA25FD54C9(p0, p1) end

--- SET_PARTICLE_FX_*
--- @param p0 string
function N_0xBA3D194057C79A7B(p0) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
function N_0xBA4B8D83BDC75551(p0) end

--- @param p0 any
--- @param p1 any
function N_0xBA7F0B77D80A4EB7(p0, p1) end

--- FORCE_*
--- @param toggle boolean
function N_0xBA8D65C1C65702E5(toggle) end

--- @return any
function N_0xBA9749CC94C1FD85() end

--- @param p0 any
function N_0xBAA2F0490E146BE8(p0) end

--- @param p0 any
--- @param p1 any
function N_0xBB2333BB87DDD87F(p0, p1) end

--- @param p0 number
function N_0xBB90E12CAC1DAB25(p0) end

--- Most likely ROPE_ATTACH_*
--- @param ropeId integer
--- @param p1 integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param p11 number
--- @param p12 number
--- @param p13 number
function N_0xBC0CE682D4D05650(ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) end

--- Seems to only appear in scripts used in Singleplayer. Always used like this in scripts PLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());
--- @param player integer
function N_0xBC9490CA15AEA8FB(player) end

--- @return any
function N_0xBCEDB009461DA156() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xBD0EFB25CCA8F97A(p0, p1, p2, p3) end

--- @return any
function N_0xBD545D44CCE70597() end

--- NETWORK_SESSION_IS_*
--- @return any
function N_0xBDB6F89C729CF388() end

--- This function is hard-coded to always return 0.
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function N_0xBE197EAA669238F4(p0, p1, p2, p3) end

--- @return any
function N_0xBE3DB208333D9844() end

--- @param vehicle integer
--- @param toggle boolean
function N_0xBE5C1255A1830FF5(vehicle, toggle) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xBEB2D9A1D9A8F55A(p0, p1, p2, p3) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
function N_0xBED8CA5FF5E04113(p0, p1, p2, p3) end

--- @param statName integer
--- @param p1 integer
--- @return any
--- @return number
function N_0xBED9F5693F34ED17(statName, p1) end

--- @param p0 boolean
function N_0xBEF34B1D9624D5DD(p0) end

--- @param player integer
--- @param p1 boolean
function N_0xBF22E0F32968E967(player, p1) end

--- @param p0 any
function N_0xBF371CD2B64212FD(p0) end

function N_0xBF4F34A85CA2970C() end

--- @return any
function N_0xBF72910D0F26F025() end

--- @param p0 any
function N_0xBFAFDB5FAAA5C5AB(p0) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
function N_0xBFFE53AE7E67FCDC(p0, p1) end

--- **This native does absolutely nothing, just a nullsub** NativeDB Introduced: v2372
function N_0xC01D2470F22CDE5A() end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0xC03FAB2C2F92289B(p0) end

--- GOLF_TRAIL_SET_*
--- @param p0 boolean
function N_0xC0416B061F2B7E5E(p0) end

--- @return any
function N_0xC0E0D686DDFC6EAE() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xC0ED6438E6D39BA8(p0, p1, p2) end

--- @return any
--- @return any
function N_0xC13C38E47EA5DF31() end

function N_0xC141B8917E0017EC() end

--- NativeDB Added Parameter 2: Any p1 NativeDB Introduced: v1493
--- @param p0 any
function N_0xC14BD9F5337219B2(p0) end

--- SET_VEH*
--- @param vehicle integer
function N_0xC1805D05E6D4FE10(vehicle) end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0xC1E963C58664B556(p0) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Introduced: v323
--- @return any
function N_0xC2C97EA97711D1AE() end

--- Getter for 0xCD74233600C4EA6B GET_*
--- @return any
function N_0xC2D2AD9EAAE265B8() end

--- @param ped integer
function N_0xC2EE020F5FB4DB53(ped) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @return any
function N_0xC30BDAEE47256C13(p0) end

--- @return any
function N_0xC32EA7A2F6CA7557() end

--- - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
--- @param player integer
function N_0xC3376F42B1FACCC6(player) end

--- SET_ENTITY_*
--- @param entity integer
--- @param toggle boolean
function N_0xC34BC448DA29F5E9(entity, toggle) end

function N_0xC35A6D07C93802B2() end

--- Vehicle must be a plane. Native name is between SET_VEHICLE_BRAKE_LIGHTS and SET_VEHICLE_BULLDOZER_ARM_POSITION alphabetically.
--- @param vehicle integer
--- @param p1 boolean
function N_0xC361AA040D6637A8(vehicle, p1) end

--- @return any
function N_0xC42DD763159F3461() end

--- @param p0 any
--- @return any
--- @return integer
function N_0xC434133D9BA52777(p0) end

--- GET_IS_LOADING_\* NativeDB Introduced: v1734
--- @return any
function N_0xC4637A6D03C24CC3() end

--- @param p0 any
function N_0xC4B3347BD68BD609(p0) end

--- SET_VEHICLE_LI*
--- @param vehicle integer
--- @param p1 boolean
function N_0xC50CE861B55EAB8B(vehicle, p1) end

--- @param modelHash integer
--- @param p1 any
--- @param p2 any
--- @return any
function N_0xC56FBF2F228E1DAC(modelHash, p1, p2) end

--- NETWORK_IS_TRANSITION_*
--- @return any
function N_0xC571D0E77D8BBC29() end

--- @param ped integer
function N_0xC594B315EDF2D4AF(ped) end

--- NativeDB Added Parameter 1: int p0 NativeDB Added Parameter 2: char* p1 NativeDB Added Parameter 3: float* p2 NativeDB Introduced: v323
--- @return any
function N_0xC5A35C73B68F3C49() end

--- @param p0 any
function N_0xC5C8F970D4EDFF71(p0) end

--- @param object integer
--- @param toggle boolean
function N_0xC6033D32241F6FB5(object, toggle) end

--- Toggles a value (bool) for cutscenes. SET_*
--- @param toggle boolean
function N_0xC61B86C9F61EB404(toggle) end

--- Sets profile setting 939 NativeDB Introduced: v1734
function N_0xC67E2DA1CBE759E2() end

--- @return any
function N_0xC6E0E2616A7576BB() end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function N_0xC6E74CF8C884C880(p0, p1, p2, p3, p4, p5, p6) end

--- See `N_0x701fda1e82076ba4`.
--- @param p0 boolean
function N_0xC7F29CA00F46350E(p0) end

--- NET_GAMESERVER_* Checks if the transaction status is equal to 1. NativeDB Introduced: v1365
--- @param transactionId integer
--- @return any
function N_0xC830417D630A50F9(transactionId) end

function N_0xC8391C309684595A() end

function N_0xC847B43F369AC0B5() end

--- @return any
function N_0xC87E740D9F3872CC() end

--- @param cam integer
function N_0xC8B5C4A79CC18B94(cam) end

--- @return any
--- @return any
--- @return any
--- @return any
function N_0xC8E1071177A23BE5() end

--- @param p0 any
function N_0xCA465D9CC0D231BA(p0) end

--- @param p0 boolean
function N_0xCA4AE345A153D573(p0) end

--- @param p0 any
function N_0xCA575C391FEA25CC(p0) end

--- NETWORK_S\* NativeDB Introduced: v1734
function N_0xCA59CCAE5D01E4CE() end

--- @param p0 any
--- @param p2 any
--- @return any
--- @return any
function N_0xCA6B2F7CE32AB653(p0, p2) end

--- Found in "director_mode", "fm_bj_race_controler", "fm_deathmatch_controler", "fm_impromptu_dm_controler", "fm_race_controler", "gb_deathmatch".
--- @param player integer
--- @param p1 boolean
function N_0xCAC57395B151135F(player, p1) end

--- @param padIndex integer
function N_0xCB0360EFEFB2580D(padIndex) end

--- Returns profile setting 243. GET_*
--- @return any
function N_0xCB645E85E97EA48B() end

--- @param p0 integer
--- @return any
function N_0xCB82A0BF0E3E3265(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0xCC25A4553DFBF9EA(p0, p1, p2, p3, p4) end

--- RESET_*
--- @param object integer
function N_0xCC6E963682533882(object) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 boolean
function N_0xCCD078C2665D2973(p0) end

--- REQUEST_*
--- @param ped integer
--- @param p1 boolean
function N_0xCD018C591F94CB43(ped, p1) end

--- Does nothing (it's a nullsub). NativeDB Introduced: v323
function N_0xCD0F5B5D932AE473() end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xCD4D66B43B1DD28D(p0, p1, p2) end

--- Setter for 0xC2D2AD9EAAE265B8 SET_*
--- @param toggle boolean
function N_0xCD74233600C4EA6B(toggle) end

--- @param p0 any
--- @param p1 any
function N_0xCEA7C8E1B48FF68C(p0, p1) end

--- @param p0 number
--- @param p1 number
function N_0xCED08CBE8EBB97C7(p0, p1) end

--- @param p0 any
--- @param p1 boolean
function N_0xCEDA60A74219D064(p0, p1) end

--- @param p0 any
function N_0xCF9159024555488C(p0) end

--- NativeDB Introduced: v2060
--- @param toggle boolean
function N_0xCFD16F0DB5A3535C(toggle) end

--- what does this do?
--- @param vehicle integer
function N_0xCFD778E7904C255E(vehicle) end

--- @param p0 boolean
function N_0xCFEB46DCD7D8D5EB(p0) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
function N_0xD05A3241B9A86F19(p0, p1) end

--- @return any
function N_0xD10282B6E3751BA0() end

--- @param p0 any
function N_0xD1942374085C8469(p0) end

--- @param p0 any
function N_0xD1A1EE3B4FA8E760(p0) end

--- SET_TV_???
--- @param p0 any
function N_0xD1C55B110E4DF534(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xD1C9B92BDD3F151D(p0, p1, p2) end

--- **This native does absolutely nothing, just a nullsub**
function N_0xD2049635DEB9C375() end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0xD29334ED1A256DBF(p0, p1, p2, p3, p4) end

--- NETWORK_SESSION_IS_*
--- @return any
function N_0xD313DE83394AF134() end

--- @param p0 any
function N_0xD3301660A57C9272(p0) end

--- @param ped integer
function N_0xD33DAA36272177C4(ped) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0xD3E51C0AB8C26EEE(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0xD4196117AF7BB974(p0, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xD4367D310F079DB0(p0, p1, p2, p3) end

--- Adds an area that seems to be related to pickup physics behavior. Max amount of areas is 10. Only works in multiplayer. ADD_* NativeDB Introduced: v1290
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
function N_0xD4A7A435B3710D05(x, y, z, radius) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0xD558BEC0BBA7E8D2(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 any
function N_0xD565F438137F0E10(p0, p1) end

--- @return any
function N_0xD642319C54AADEB6() end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0xD6CA58B3B53A0F22(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
function N_0xD6D7478CA62B8D41(p0, p1) end

--- @param p0 boolean
function N_0xD7B6C73CAD419BCF(p0) end

--- @return any
function N_0xD8122C407663B995() end

--- @param player integer
--- @param p1 any
function N_0xD821056B9ACF8052(player, p1) end

--- RESET_*
function N_0xD9F692D349249528() end

--- @param p0 any
function N_0xDAF80797FC534BEC(p0) end

--- @param p0 any
--- @return any
function N_0xDAF87174BE7454FF(p0) end

--- NativeDB Introduced: v1180 This native is used for the "larger" circular checkpoints, and sets the circle/ring around the checkpoint to point in the same direction as the inner arrow
--- @param checkpointHandle integer
function N_0xDB1EA9411C8911EC(checkpointHandle) end

--- @param p0 any
--- @return any
function N_0xDB41D07A45A6D4B7(p0) end

--- NativeDB Introduced: v1734
--- @param player integer
--- @return any
function N_0xDB663CC9FF3407A9(player) end

--- @param p0 boolean
function N_0xDB90C6CCA48940F1(p0) end

--- Related to locking the vehicle or something similar. In the decompiled scripts, its always called after VEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0); VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1); VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);
--- @param vehicle integer
--- @param p1 boolean
function N_0xDBC631F109350B8C(vehicle, p1) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @return any
function N_0xDBF860CF1DB8E599(p0) end

--- Always returns false. NativeDB Introduced: v1868
--- @param player integer
--- @return any
function N_0xDCC07526B8EC45AF(player) end

--- NativeDB Added Parameter 1: Vehicle vehicle NativeDB Added Parameter 2: Any p1
function N_0xDCE97BDF8A0EABC8() end

--- 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
--- @param player integer
--- @param p1 number
--- @return any
function N_0xDD2620B7B9D16FF1(player, p1) end

--- Tune Backwards... ? SET_RADIO_*
function N_0xDD6BCF9E94425DF9() end

function N_0xDD79DF9F4D26E1C9() end

--- @return any
function N_0xDE03620F8703A9DF() end

--- @param player integer
--- @param toggle boolean
function N_0xDE45D1A1EF45EE61(player, toggle) end

--- NativeDB Introduced: v2060
--- @param amount integer
--- @param p1 any
function N_0xDE68E30D89F97132(amount, p1) end

--- @param p0 any
--- @return any
--- @return any
function N_0xDEAAF77EB3687E97(p0) end

--- @return any
function N_0xDF4B952F7D381B95() end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0xDFBD93BF2943E29B(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
function N_0xDFCDB14317A9B361(p0) end

--- NativeDB Introduced: v1180
--- @param ped integer
function N_0xDFE68C4B787E1BFB(ped) end

--- @param p0 boolean
function N_0xE058175F8EAFE79A(p0) end

--- @param p0 any
--- @param p1 boolean
function N_0xE05DD0E9707003A3(p0, p1) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xE05F6AEEFEB0BB02(p0, p1, p2) end

--- NativeDB Introduced: v1493
--- @param p0 any
function N_0xE0F82D68C7039158(p0) end

--- @param p0 any
--- @param p1 number
function N_0xE111A7C0D200CBC5(p0, p1) end

--- This function is hard-coded to always return 1.
--- @param p0 any
--- @return any
function N_0xE154B48B68EF72BC(p0) end

--- Used with IS_LOOK_INVERTED() and negates its affect. -- Not sure how the person above got that description, but here's an actual example: if (PAD::_GET_LAST_INPUT_METHOD(2)) { if (a_5) { if (PAD::IS_LOOK_INVERTED()) { a_3 *= -1; } if (PAD::_E1615EC03B3BB4FD()) { a_3 *= -1; } } }
--- @return any
function N_0xE1615EC03B3BB4FD() end

--- @param p0 any
--- @return any
function N_0xE16AA70CE9BEEDC3(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function N_0xE23ADC6FCB1F29AE(p0, p1, p2) end

--- @param p0 number
function N_0xE2892E7E55D7073A(p0) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
function N_0xE2BB399D90942091(p0, p1) end

--- NativeDB Introduced: v2060
--- @param amount integer
--- @param p1 any
function N_0xE2E244AB823B4483(amount, p1) end

--- RESET_* Resets the effect of 0x428AD3E26C8D9EB0
function N_0xE2F53F172B45EDE1() end

--- @param p0 any
function N_0xE3261D791EB44ACB(p0) end

--- @param p0 boolean
function N_0xE36A98D8AB3D3C66(p0) end

--- sets something to 1
function N_0xE3D969D2785FFB5E() end

--- Sets an unknown value related to timecycles.
--- @param unk integer
function N_0xE3E2C1B4C59DBC77(unk) end

--- @return any
function N_0xE3E5A7C64CA2C6ED() end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return integer
--- @return integer
--- @return integer
function N_0xE42D626EEC94E5D9(p0, p1, p2, p3) end

--- @param p0 any
--- @return any
function N_0xE496A53BA5F50A56(p0) end

--- NativeDB Introduced: v1290
--- @param p0 any
function N_0xE4C3B169876D33D7(p0) end

--- @param ped integer
function N_0xE4DCEC7FD5B739A5(ped) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @return any
function N_0xE4F6E8D07A2F0F51(p0) end

--- SET_*
--- @param p0 integer
--- @param p1 integer
function N_0xE532EC1A63231B4F(p0, p1) end

--- @param vehicle integer
--- @param p1 number
function N_0xE5810AC70602F2F5(vehicle, p1) end

--- Getter for 0xB3C641F3630BF6DA GET_M*
--- @return any
function N_0xE59343E9E96529E7() end

--- NativeDB Introduced: v2372
--- @return any
function N_0xE5E9746A66359F9D() end

--- TOGGLE_*
--- @param toggle boolean
function N_0xE63D7C6EECECB66B(toggle) end

--- SET_ENTITY_M\* NativeDB Introduced: v1734
--- @param entity integer
--- @param p1 boolean
function N_0xE66377CDDADA4810(entity, p1) end

--- @param p0 any
--- @param p1 any
function N_0xE6717E652B8C8D8A(p0, p1) end

--- @param p0 boolean
function N_0xE67C6DFD386EA5E7(p0) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function N_0xE6D2CEDD370FF98E(p0, p1) end

--- NativeDB Added Parameter 1: char* p0 NativeDB Added Parameter 2: int* p1 NativeDB Added Parameter 3: char* p2 NativeDB Introduced: v323
--- @return any
function N_0xE75A4A2E5E316D86() end

--- This function is hard-coded to always return 0.
--- @param p0 any
--- @return any
function N_0xE791DF1F73ED2C8B(p0) end

--- @param vehicle integer
--- @param p1 boolean
function N_0xE851E480B814D4BA(vehicle, p1) end

--- GET_H* NativeDB Introduced: v1604
--- @param vehicle integer
--- @return any
function N_0xE8718FAF591FD224(vehicle) end

--- @return any
function N_0xE8853FBCE7D8D0D6() end

--- @param p0 any
--- @param p1 any
function N_0xE906EC930F5FE7C8(p0, p1) end

--- Related to tennis mode. Checks for `0x0FCED5ADF = swung`
--- @param ped integer
--- @return any
function N_0xE95B0C7D5BA3B96B(ped) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
function N_0xEA8C0DDB10E2822A(p0, p1) end

--- NativeDB Introduced: v1290
function N_0xEA95C0853A27888E() end

--- @param p0 any
--- @return any
function N_0xEA9960D07DADCF10(p0) end

--- @return any
function N_0xEAF0FA793D05C592() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
--- @param p1 any
function N_0xEB078CA2B5E82ADD(p0, p1) end

--- @return any
function N_0xEB2104E905C6F2E9() end

--- @param p0 any
--- @param p1 boolean
function N_0xEB6F1A9B5510A5D2(p0, p1) end

--- NativeDB Introduced: v1290
function N_0xEB81A3DADD503187() end

--- @return any
function N_0xEBCAB9E5048434F4() end

--- **This native does absolutely nothing, just a nullsub**
--- @return any
function N_0xEBD3205A207939ED() end

function N_0xEBF8284D8CADEB53() end

--- @param p0 any
--- @return any
function N_0xEBFA8D50ADDC54C4(p0) end

--- SET_PED_* Has most likely to do with some shooting attributes as it sets the float which is in the same range as shootRate.
--- @param ped integer
--- @param unk number
function N_0xEC4B4B3B9908052A(ped, unk) end

--- This function is hard-coded to always return 0.
--- @param p0 any
--- @return any
function N_0xEC72C258667BE5EA(p0) end

--- STAT_LOAD_*
--- @return any
function N_0xECB41AC6AB754401() end

--- FORCE_*
--- @param ped integer
function N_0xED3C76ADFA6D07C4(ped) end

--- @param p0 any
--- @param p1 any
function N_0xED5EDE9E676643C9(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xED5FD7AF10F5E262(p0, p1, p2, p3) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xED76D195E6E3BF7F(p0, p1, p2, p3) end

--- @param p0 any
function N_0xEDBF6C9B0D2C65C8(p0) end

--- Some kind of flags.
--- @param vehicle integer
--- @return any
function N_0xEEBFC7A7EFDC35B4(vehicle) end

--- @param p0 boolean
function N_0xEF398BEEE4EF45F9(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function N_0xEF39EE20C537E98C(p0, p1, p2, p3, p4, p5) end

--- Only used in R* Script fm_content_cargo NativeDB Introduced: v2699
--- @param vehicle integer
--- @param p1 boolean
function N_0xEF9D388F8D377F44(vehicle, p1) end

--- AD*
function N_0xEFABC7722293DA7C() end

--- GET_*
--- @param p0 any
--- @return any
function N_0xF033419D1B81FAE8(p0) end

--- @param p0 any
function N_0xF051D9BFB6BA39C0(p0) end

--- @param p0 any
function N_0xF06A6F41CB445443(p0) end

--- NETWORK_RE*
function N_0xF083835B70BA9BFE() end

--- @return any
--- @return number
function N_0xF11F01D98113536A() end

--- @return any
function N_0xF13FE2A80C05C561() end

--- Sets profile setting 933
--- @param value integer
function N_0xF1A1803D3476F215(value) end

--- @param p0 any
--- @return any
function N_0xF22CA0FD74B80E7A(p0) end

--- Initial guess of native: `_IS_PED_WEARING_MOTORCYCLE_HELMET`.
--- @param ped integer
--- @return any
function N_0xF2385935BFFD4D92(ped) end

--- @param padIndex integer
--- @param p1 integer
function N_0xF239400E16C23E08(padIndex, p1) end

function N_0xF25E02CB9C5818F8() end

--- @return any
function N_0xF284AC67940C6812() end

--- @return any
function N_0xF287F506767CC8A9() end

--- SET_PED_ALLOW* toggle was always false except in one instance (b678). The one time this is set to true seems to do with when you fail the mission.
--- @param toggle boolean
function N_0xF2BEBCDFAFDAA19E(toggle) end

--- @return any
function N_0xF2CA003F167E21D2() end

--- @return any
function N_0xF2E07819EF1A5289() end

--- SET_VEHICLE_*
--- @param vehicle integer
--- @param toggle boolean
function N_0xF3365489E0DD50F9(vehicle, toggle) end

--- @param p0 any
--- @param p1 any
--- @return any
function N_0xF3B0E0AED097A3F5(p0, p1) end

--- NativeDB Introduced: v1604
--- @param p0 any
--- @param p1 any
function N_0xF3F776ADA161E47D(p0, p1) end

--- @param p0 any
function N_0xF49ABC20D8552257(p0) end

function N_0xF4A0DADB70F57FA6() end

--- @param checkpoint integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param unkX number
--- @param unkY number
--- @param unkZ number
function N_0xF51D36185993515D(checkpoint, posX, posY, posZ, unkX, unkY, unkZ) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function N_0xF534D94DFA2EAD26(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 number
function N_0xF55E4046F6F831DC(p0, p1) end

--- @param p0 string
--- @return any
--- @return integer
function N_0xF6BAAAF762E1BF40(p0) end

--- @param p0 any
function N_0xF6F4383B7C92F11A(p0) end

--- @param p0 number
function N_0xF78B803082D4386F(p0) end

function N_0xF814FEC6A19FD6E0() end

--- @param p0 any
function N_0xF8155A7F03DDFC8E(p0) end

--- NativeDB Added Parameter 9: int hudColour NativeDB Introduced: v1290 Sets the 'data' for a cone for a blip See here for the hud colours for the cone Name in scripts: `SETUP_FAKE_CONE_DATA()` For people who don't know how to convert degrees to radians and the other way around: degrees = radians * 180 / pi radians = degrees * pi / 180
--- @param blip integer
--- @param p1 any
--- @param p2 any
--- @param width number
--- @param p4 any
--- @param length number
--- @param heading number
--- @param p7 any
function N_0xF83D0FEBE75E62C9(blip, p1, p2, width, p4, length, heading, p7) end

function N_0xF854439EFBB3B583() end

--- NativeDB Introduced: v2060
--- @param vehicle integer
--- @param p1 integer
function N_0xF8B49F5BA7F850E7(vehicle, p1) end

--- @return any
--- @return any
--- @return any
--- @return any
function N_0xF8C54A461C3E11DC() end

--- NativeDB Introduced: v1868
--- @param p0 any
function N_0xF9096193DF1F99D4(p0) end

--- @param p0 any
--- @param p1 any
function N_0xF92099527DB8E2A7(p0, p1) end

--- @return any
function N_0xF9F2922717B819EC() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function N_0xFA07759E6FDDD7CF(p0, p1, p2, p3) end

--- @param toggle boolean
function N_0xFA1E0E893D915215(toggle) end

function N_0xFA2888E3833C8E96() end

--- NativeDB Introduced: v2060
--- @param p0 boolean
function N_0xFA3FFB0EEBC288A3(p0) end

--- REMOVE_* NativeDB Introduced: v1493
--- @param x number
--- @param y number
--- @param z number
function N_0xFA83CA6776038F64(x, y, z) end

--- Another unknown label type... MISC::_FAA457EF263E8763(a_0, "Thumb_label"); MISC::_FAA457EF263E8763(&a_0._f10, "Photo_label"); MISC::_FAA457EF263E8763(a_0, "GXTlabel"); MISC::_FAA457EF263E8763(&a_0._f21, "StringComp"); MISC::_FAA457EF263E8763(&a_0._f43, "SecondStringComp"); MISC::_FAA457EF263E8763(&a_0._f53, "ThirdStringComp"); MISC::_FAA457EF263E8763(&a_0._f32, "SenderStringComp"); MISC::_FAA457EF263E8763(&a_0._f726[v_1A/*16*/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL" MISC::_FAA457EF263E8763(&a_0._f4B, "PAID_PLAYER"); MISC::_FAA457EF263E8763(&a_0._f5B, "RADIO_STATION");
--- @param name string
--- @return any
function N_0xFAA457EF263E8763(name) end

--- SET_A\* NativeDB Introduced: v1734
--- @param ped integer
--- @param toggle boolean
function N_0xFAB944D4D481ACCB(ped, toggle) end

--- NativeDB Introduced: v1180
function N_0xFAC18E7356BD3210() end

--- @param player integer
function N_0xFAC75988A7D078D3(player) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
function N_0xFAE628F1E9ADB239(p0, p1, p2) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
function N_0xFAF2A78061FD9EF4(p0, p1, p2, p3) end

function N_0xFB00CA71DA386228() end

--- @return any
function N_0xFB199266061F820A() end

--- p0 is always 0. p1 is pointing to a global.
--- @param p0 integer
--- @return any
--- @return any
function N_0xFB1F9381E80FA13F(p0) end

--- @param p0 any
--- @param p1 any
function N_0xFB680D403909DC70(p0, p1) end

--- @param p0 any
function N_0xFCC228E07217FCAC(p0) end

--- SET_CHECKPOINT_\* NativeDB Introduced: v1734
--- @param checkpoint integer
function N_0xFCF6788FC4860CD4(checkpoint) end

--- @param entity integer
function N_0xFD3151CD37EA2245(entity) end

--- @param ped integer
--- @param toggle boolean
function N_0xFD325494792302D7(ped, toggle) end

--- @param p0 boolean
function N_0xFD75DABC0957BF33(p0) end

--- A\* NativeDB Introduced: v1734
--- @param pickupHash integer
function N_0xFDC07C58E8AAB715(pickupHash) end

--- @param p0 any
--- @param p1 boolean
--- @return any
function N_0xFE4C1D0D3B9CC17E(p0, p1) end

--- Native to check whether `_SET_PED_SCUBA_GEAR_VARIATION` is enabled/actived.
--- @param ped integer
--- @return any
function N_0xFEC9A3B1820F3331(ped) end

--- Tune Forward... ? SET_RADIO_*
function N_0xFF266D1D0EB1195D() end

--- Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
--- @param p0 number
--- @param p1 any
function N_0xFF4803BC019852D9(p0, p1) end

--- @return any
function N_0xFF8F3A92B75ED67A() end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
function N_0xFFEE8FA29AB9A18E(player) end

--- @param quantity integer
--- @return any
--- @return any
function NetGameserverBasketAddItem(quantity) end

--- @param p0 any
--- @return any
--- @return any
function NetGameserverBasketApplyServerData(p0) end

--- NativeDB Introduced: v372
--- @return any
function NetGameserverBasketDelete() end

--- @return any
function NetGameserverBasketEnd() end

--- @return any
function NetGameserverBasketIsFull() end

--- @param categoryHash integer
--- @param actionHash integer
--- @param flags integer
--- @return any
--- @return integer
function NetGameserverBasketStart(categoryHash, actionHash, flags) end

--- @param categoryHash integer
--- @param itemHash integer
--- @param actionTypeHash integer
--- @param value integer
--- @param flags integer
--- @return any
--- @return integer
function NetGameserverBeginService(categoryHash, itemHash, actionTypeHash, value, flags) end

--- @return any
function NetGameserverCatalogIsReady() end

--- @param name string
--- @return any
function NetGameserverCatalogItemExists(name) end

--- @param hash integer
--- @return any
function NetGameserverCatalogItemExistsHash(hash) end

--- @param transactionId integer
--- @return any
function NetGameserverCheckoutStart(transactionId) end

--- @param slot integer
--- @param transfer boolean
--- @param reason integer
--- @return any
function NetGameserverDeleteCharacterSlot(slot, transfer, reason) end

--- @return any
function NetGameserverDeleteCharacterSlotGetStatus() end

--- @return any
function NetGameserverDeleteSetTelemetryNonceSeed() end

--- @param transactionId integer
--- @return any
function NetGameserverEndService(transactionId) end

--- Note: only one of the arguments can be set to true at a time
--- @param inventory boolean
--- @param playerbalance boolean
--- @return any
function NetGameserverGetBalance(inventory, playerbalance) end

--- @return any
--- @return integer
function NetGameserverGetCatalogState() end

--- bool is always true in game scripts
--- @param itemHash integer
--- @param categoryHash integer
--- @param p2 boolean
--- @return any
function NetGameserverGetPrice(itemHash, categoryHash, p2) end

--- @return any
--- @return integer
--- @return boolean
function NetGameserverGetTransactionManagerData() end

--- @return any
function NetGameserverIsCatalogValid() end

--- @return any
function NetGameserverIsSessionRefreshPending() end

--- @param charSlot integer
--- @return any
function NetGameserverIsSessionValid(charSlot) end

--- @param charSlot integer
--- @return any
function NetGameserverSessionApplyReceivedData(charSlot) end

--- @param p0 integer
--- @return any
function NetGameserverSetTelemetryNonceSeed(p0) end

--- @param charSlot integer
--- @return any
function NetGameserverStartSession(charSlot) end

--- @param charSlot integer
--- @param amount integer
--- @return any
function NetGameserverTransferBankToWallet(charSlot, amount) end

--- Same as 0x350AA5EBC03D3BD2
--- @return any
function NetGameserverTransferCashGetStatus() end

--- Same as 0x23789E777D14CE44
--- @return any
function NetGameserverTransferCashGetStatus_2() end

--- Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
--- @return any
function NetGameserverTransferCashSetTelemetryNonceSeed() end

--- @param charSlot integer
--- @param amount integer
--- @return any
function NetGameserverTransferWalletToBank(charSlot, amount) end

--- NativeDB Introduced: v1290
--- @return any
function NetGameserverUseServerTransactions() end

--- gets the entity id of a network id
--- @param netHandle integer
--- @return any
function NetToEnt(netHandle) end

--- gets the object id of a network id
--- @param netHandle integer
--- @return any
function NetToObj(netHandle) end

--- gets the ped id of a network id
--- @param netHandle integer
--- @return any
function NetToPed(netHandle) end

--- @param netHandle integer
--- @return any
function NetToVeh(netHandle) end

--- NETWORK_RE* Triggers a CEventNetworkInviteConfirmed event
--- @return any
function NetworkAcceptInvite() end

--- @param p0 any
--- @return any
function NetworkAcceptPresenceInvite(p0) end

--- @param tunableContext string
--- @param tunableName string
--- @return any
function NetworkAccessTunableBool(tunableContext, tunableName) end

--- @param tunableContext integer
--- @param tunableName integer
--- @return any
function NetworkAccessTunableBoolHash(tunableContext, tunableName) end

--- @param tunableContext string
--- @param tunableName string
--- @return any
--- @return number
function NetworkAccessTunableFloat(tunableContext, tunableName) end

--- @param tunableContext integer
--- @param tunableName integer
--- @return any
--- @return number
function NetworkAccessTunableFloatHash(tunableContext, tunableName) end

--- @param tunableContext string
--- @param tunableName string
--- @return any
--- @return integer
function NetworkAccessTunableInt(tunableContext, tunableName) end

--- @param tunableContext integer
--- @param tunableName integer
--- @return any
--- @return integer
function NetworkAccessTunableIntHash(tunableContext, tunableName) end

--- @return any
function NetworkActionFollowInvite() end

--- To remove, see: `NETWORK_REMOVE_ENTITY_AREA`. See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @return any
function NetworkAddEntityAngledArea(x1, y1, z1, x2, y2, z2, width) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @return any
function NetworkAddEntityArea(p0, p1, p2, p3, p4, p5) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @return any
function NetworkAddEntityDisplayedBoundaries(p0, p1, p2, p3, p4, p5) end

--- Adds an entity to a network synchronised scene.
--- @param entity integer
--- @param netScene integer
--- @param animDict string
--- @param animName string
--- @param blendIn number
--- @param blendOut number
--- @param flag integer
function NetworkAddEntityToSynchronisedScene(entity, netScene, animDict, animName, blendIn, blendOut, flag) end

--- ..
--- @param p1 integer
--- @return integer
function NetworkAddFollowers(p1) end

--- @param message string
--- @return any
--- @return integer
function NetworkAddFriend(message) end

--- Adds a map entity to a network synchronized scene. This native function is utilized only once as of game build 2944 within the casino_slots script. Please note that it's only possible to add a single map entity to synchronised scenes. It's advisable to initially locate the object and retrieve its actual coordinates using `GET_CLOSEST_OBJECT_OF_TYPE`. NativeDB Introduced: v1734
--- @param netScene integer
--- @param modelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param animDict string
--- @param animName string
--- @param blendInSpeed number
--- @param blendOutSpeed number
--- @param flags integer
function NetworkAddMapEntityToSynchronisedScene(netScene, modelHash, x, y, z, animDict, animName, blendInSpeed, blendOutSpeed, flags) end

--- Adds a ped to a networked synchronised scene. Synchronized scene playback flags (Also works in other `NETWORK_ADD_*_TO_SYNCHRONISED_SCENE` natives): | Value | Name | Notes | | :-------: | :---------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------: | | `0` | None | No flag set. | | `1` | USE_PHYSICS | Allows the ped to have physics during the scene. | | `2` | TAG_SYNC_OUT | The task will do a tag synchronized blend out with the movement behaviour of the ped. | | `4` | DONT_INTERRUPT | The scene will not be interrupted by external events. | | `8` | ON_ABORT_STOP_SCENE | The scene will be stopped if the scripted task is aborted. | | `16` | ABORT_ON_WEAPON_DAMAGE | The scene will be stopped if the ped is damaged by a weapon. | | `32` | BLOCK_MOVER_UPDATE | The task will not update the mover. | | `64` | LOOP_WITHIN_SCENE | Animations within this scene will be looped until the scene is finished. | | `128` | PRESERVE_VELOCITY | The task will keep it's velocity when the scene is cleaned up/stopped. Do note that the `USE_PHYSICS` flag must also be present. | | `256` | EXPAND_PED_CAPSULE_FROM_SKELETON | The task will apply the `ExpandPedCapsuleFromSkeleton` reset flag to the ped (See `SET_PED_RESET_FLAG`). | | `512` | ACTIVATE_RAGDOLL_ON_COLLISION | The ped will be ragdoll if it comes in contact with an object. | | `1024` | HIDE_WEAPON | The ped's current weapon will be hidden during the scene. | | `2048` | ABORT_ON_DEATH | The synchronised scene will be aborted if the ped dies. | | `4096` | VEHICLE_ABORT_ON_LARGE_IMPACT | If the scene is running on a vehicle, then it will be aborted if the vehicle takes a heavy collision with another vehicle. | | `8192` | VEHICLE_ALLOW_PLAYER_ENTRY | If the scene is on a vehicle, it allows players to enter it. | | `16384` | PROCESS_ATTACHMENTS_ON_START | Attachments will be processed at the start of the scene. | | `32768` | NET_ON_EARLY_NON_PED_STOP_RETURN_TO_START | A non-ped entity will be returned to their starting position if the scene finishes early. | | `65536` | SET_PED_OUT_OF_VEHICLE_AT_START | If the ped is in a vehicle when the scene starts, it will be set out of the vehicle. | | `131072` | NET_DISREGARD_ATTACHMENT_CHECKS | Attachment checks will be disregarded when the scene is running. | These flags can be combined with the `|` operator.
--- @param ped integer
--- @param netScene integer
--- @param animDict string
--- @param animClip string
--- @param blendInSpeed number
--- @param blendOutSpeed number
--- @param syncedSceneFlags integer
--- @param ragdollFlags integer
--- @param moverBlendInDelta number
--- @param ikFlags integer
function NetworkAddPedToSynchronisedScene(ped, netScene, animDict, animClip, blendInSpeed, blendOutSpeed, syncedSceneFlags, ragdollFlags, moverBlendInDelta, ikFlags) end

--- Adds a ped to a networked synchronized scene but extends `NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE` to support IK flags. There is barely any difference between this and `NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE`. NativeDB Introduced: v1290
--- @param ped integer
--- @param netSceneID integer
--- @param animDict string
--- @param animClip string
--- @param blendIn number
--- @param blendOut number
--- @param sceneFlags integer
--- @param ragdollFlags integer
--- @param moverBlendInDelta number
--- @param ikFlags integer
function NetworkAddPedToSynchronisedSceneWithIk(ped, netSceneID, animDict, animClip, blendIn, blendOut, sceneFlags, ragdollFlags, moverBlendInDelta, ikFlags) end

--- @param netScene integer
--- @param animDict string
--- @param animName string
function NetworkAddSynchronisedSceneCamera(netScene, animDict, animName) end

--- @return any
function NetworkAllocateTunablesRegistrationDataMap() end

--- Allows scripts to use attachment commands on entities (eg. `ATTACH_ENTITY_TO_ENTITY`) that are not controlled by the client. **Note:** This is only local and does not affect entities on other machines. This is used by the ferris wheel script to sync players on carts.
--- @param entity integer
--- @param toggle boolean
function NetworkAllowRemoteAttachmentModification(entity, toggle) end

--- @return any
--- @return any
function NetworkAmIBlockedByGamer() end

--- @param player integer
--- @return any
function NetworkAmIBlockedByPlayer(player) end

--- @return any
--- @return any
function NetworkAmIMutedByGamer() end

--- @param player integer
--- @return any
function NetworkAmIMutedByPlayer(player) end

--- @param ped integer
--- @param player integer
--- @return any
function NetworkApplyCachedPlayerHeadBlendData(ped, player) end

--- @param ped integer
--- @param p1 integer
function NetworkApplyPedScarData(ped, p1) end

--- @param p0 integer
--- @param p1 integer
function NetworkApplyTransitionParameter(p0, p1) end

--- @param p0 integer
--- @param string string
--- @param p2 boolean
function NetworkApplyTransitionParameterString(p0, string, p2) end

--- @param x number
--- @param y number
--- @param z number
function NetworkApplyVoiceProximityOverride(x, y, z) end

--- Getter for SET_NETWORK_CUTSCENE_ENTITIES. NativeDB Introduced: v2699
--- @return any
function NetworkAreCutsceneEntities() end

--- @return any
--- @return integer
--- @return integer
function NetworkAreHandlesTheSame() end

--- @return any
function NetworkAreSocialClubPoliciesCurrent() end

--- @param p0 any
--- @return any
function NetworkAreTransitionDetailsValid(p0) end

--- @param netScene integer
--- @param entity integer
--- @param bone integer
function NetworkAttachSynchronisedSceneToEntity(netScene, entity, bone) end

--- NativeDB Added Parameter 1: int p0 NativeDB Added Parameter 2: int p1 NativeDB Added Parameter 3: int p2
function NetworkBail() end

--- NativeDB Added Parameter 1: int p0 NativeDB Added Parameter 2: int p1 NativeDB Added Parameter 3: int p2
function NetworkBailTransition() end

--- NativeDB Introduced: v2699
function NetworkBailTransitionQuickmatch() end

--- @param toggle boolean
function NetworkBlockInvites(toggle) end

--- @param toggle boolean
function NetworkBlockJoinQueueInvites(toggle) end

--- @param p0 boolean
function NetworkBlockKickedPlayers(p0) end

--- p1 = 0 (always) p2 = 1 (always)
--- @param cost integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkBuyAirstrike(cost, p1, p2) end

--- NativeDB Introduced: v323
--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 boolean
function NetworkBuyBackupGang(p0, p1, p2, p3) end

--- p1 is just an assumption. p2 was false and p3 was true.
--- @param amount integer
--- @param victim integer
--- @param p2 boolean
--- @param p3 boolean
function NetworkBuyBounty(amount, victim, p2, p3) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 boolean
--- @param p4 boolean
function NetworkBuyContraband(p0, p1, p2, p3, p4) end

--- The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides. The last 3 parameters are, 2,0,1 in the am_ferriswheel.c 1,0,1 in the am_rollercoaster.c
--- @param amountSpent integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkBuyFairgroundRide(amountSpent, p1, p2, p3) end

--- @param cost integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkBuyHealthcare(cost, p1, p2) end

--- p1 = 0 (always) p2 = 1 (always)
--- @param cost integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkBuyHeliStrike(cost, p1, p2) end

--- @param amount integer
--- @param item integer
--- @param p2 any
--- @param p3 any
--- @param p4 boolean
--- @param item_name string
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 boolean
function NetworkBuyItem(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9) end

--- NativeDB Introduced: v323
--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 boolean
function NetworkBuyLotteryTicket(p0, p1, p2, p3) end

--- @param propertyCost integer
--- @param propertyName integer
--- @param p2 boolean
--- @param p3 boolean
function NetworkBuyProperty(propertyCost, propertyName, p2, p3) end

--- NativeDB Introduced: v323
--- @param p0 integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkBuySmokes(p0, p1, p2) end

function NetworkCacheLocalPlayerHeadBlendData() end

--- 11 - Need to download tunables. 12 - Need to download background script. Returns 1 if the multiplayer is loaded, otherwhise 0.
--- @return any
--- @return integer
function NetworkCanAccessMultiplayer() end

--- @return any
function NetworkCanBail() end

--- @param amount integer
--- @return any
function NetworkCanBet(amount) end

--- NativeDB Introduced: v323
--- @param cost integer
--- @return any
function NetworkCanBuyLotteryTicket(cost) end

function NetworkCancelRespawnSearch() end

--- @return any
--- @return integer
function NetworkCanCommunicateWithGamer() end

--- Same as NETWORK_CAN_COMMUNICATE_WITH_GAMER NETWORK_CAN_*
--- @return any
--- @return any
function NetworkCanCommunicateWithGamer_2() end

--- @return any
function NetworkCanEnterMultiplayer() end

--- @return any
--- @return any
function NetworkCanGamerPlayMultiplayerWithMe() end

--- @return any
--- @return any
function NetworkCanPlayMultiplayerWithGamer() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function NetworkCanReceivePlayerCash(p0, p1, p2, p3) end

--- @return any
function NetworkCanSessionEnd() end

--- @return any
function NetworkCanSetWaypoint() end

--- @return any
function NetworkCanShareJobCash() end

--- NativeDB Added Parameter 6: Any p5
--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p4 any
--- @return any
function NetworkCanSpendMoney(p0, p1, p2, p3, p4) end

--- NETWORK_CAN_R??? or NETWORK_CAN_S??? NativeDB Added Parameter 7: Any p6
--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @param p5 any
--- @return any
--- @return any
function NetworkCanSpendMoney_2(p0, p1, p2, p3, p5) end

--- @return any
--- @return any
function NetworkCanViewGamerUserContent() end

--- NETWORK_C\* NativeDB Introduced: v1734
--- @param p0 any
--- @return any
function NetworkCasinoCanGamble(p0) end

--- Same as 0x8968D4D8C6C40C11. NETWORK_C\* NativeDB Introduced: v1734
--- @return any
function NetworkCasinoCanPurchaseChipsWithPvc() end

--- Same as 0x394DCDB9E836B7A9. NETWORK_C\* NativeDB Introduced: v1734
--- @return any
function NetworkCasinoCanPurchaseChipsWithPvc_2() end

--- GTAO_CASINO_HOUSE GTAO_CASINO_INSIDETRACK GTAO_CASINO_LUCKYWHEEL GTAO_CASINO_BLACKJACK GTAO_CASINO_ROULETTE GTAO_CASINO_SLOTS GTAO_CASINO_PURCHASE_CHIPS NETWORK_C\* NativeDB Introduced: v1734
--- @param hash integer
--- @return any
function NetworkCasinoCanUseGamblingType(hash) end

--- NETWORK_C\* NativeDB Introduced: v1734
--- @param p0 integer
--- @param p1 integer
--- @return any
function NetworkCasinoPurchaseChips(p0, p1) end

--- NETWORK_C\* NativeDB Introduced: v1734
--- @param p0 integer
--- @param p1 integer
--- @return any
function NetworkCasinoSellChips(p0, p1) end

--- @param p0 any
--- @param p1 any
function NetworkChangeTransitionSlots(p0, p1) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
--- @return any
function NetworkCheckCommunicationPrivileges(p0, p1, p2) end

--- Checks if the friendDataIndex in the friend data manager contains the data for the specified networkHandle
--- @param friendDataIndex integer
--- @return any
--- @return integer
function NetworkCheckDataManagerSucceededForHandle(friendDataIndex) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
--- @return any
function NetworkCheckUserContentPrivileges(p0, p1, p2) end

--- Only documented...
--- @param animDict string
--- @param animName string
--- @return any
function NetworkClanAnimation(animDict, animName) end

--- @return any
function NetworkClanAnyDownloadMembershipPending() end

--- @return any
--- @return integer
function NetworkClanDownloadMembership() end

--- @return any
--- @return any
function NetworkClanDownloadMembershipPending() end

--- @param txdName string
--- @return any
--- @return any
function NetworkClanGetEmblemTxdName(txdName) end

--- @return any
function NetworkClanGetLocalMembershipsCount() end

--- Retrieves a membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP). Test C++ code: https://pastebin.com/CD8wni4C
--- @param membershipIndex integer
--- @return any
--- @return integer
--- @return integer
function NetworkClanGetMembership(membershipIndex) end

--- @return any
--- @return integer
function NetworkClanGetMembershipCount() end

--- @param p1 integer
--- @return any
--- @return integer
function NetworkClanGetMembershipDesc(p1) end

--- Checks if a crew/membership for a player, from the cache (i.e. downloaded via NETWORK_CLAN_DOWNLOAD_MEMBERSHIP) is valid.
--- @param membershipIndex integer
--- @return any
--- @return integer
function NetworkClanGetMembershipValid(membershipIndex) end

--- bufferSize is 35 in the scripts.
--- @param bufferSize integer
--- @param formattedTag string
--- @return integer
function NetworkClanGetUiFormattedTag(bufferSize, formattedTag) end

--- @param p0 any
--- @return any
--- @return any
function NetworkClanIsEmblemReady(p0) end

--- bufferSize is 35 in the scripts.
--- @param bufferSize integer
--- @return any
--- @return integer
function NetworkClanIsRockstarClan(bufferSize) end

--- @param clanDesc integer
--- @return any
function NetworkClanJoin(clanDesc) end

--- bufferSize is 35 in the scripts. bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER. And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that. the answer is: because p0 an int64_t* / int64_t[35]. and FYI p2 is an int64_t[13] pastebin.com/cSZniHak
--- @param bufferSize integer
--- @return any
--- @return integer
--- @return integer
function NetworkClanPlayerGetDesc(bufferSize) end

--- @return any
--- @return integer
function NetworkClanPlayerIsActive() end

--- @param p0 any
function NetworkClanReleaseEmblem(p0) end

--- @return any
--- @return integer
function NetworkClanRemoteMembershipsAreInCache() end

--- @param p0 any
--- @return any
function NetworkClanRequestEmblem(p0) end

--- @return any
function NetworkClanServiceIsValid() end

--- @param characterSlot integer
function NetworkClearCharacterWallet(characterSlot) end

function NetworkClearClockTimeOverride() end

function NetworkClearFollowers() end

--- @return any
function NetworkClearFollowInvite() end

function NetworkClearFoundGamers() end

function NetworkClearGetGamerStatus() end

function NetworkClearGroupActivity() end

function NetworkClearPropertyId() end

function NetworkClearTransitionCreatorHandle() end

function NetworkClearVoiceChannel() end

function NetworkClearVoiceProximityOverride() end

function NetworkCloseTransitionMatchmaking() end

--- @param entity integer
--- @param toggle boolean
function NetworkConcealEntity(entity, toggle) end

--- This is what R\* uses to hide players in MP interiors. To manage player visibility with NetworkConcealPlayer, here’s a solid approach: **General Population (players not in any instance):** * Use NetworkConcealPlayer to hide players who are in any instance. This way, general population players won’t see or interact with instance players. **Instance Players (players in a specific instance):** * Use NetworkConcealPlayer to hide players who aren’t in the same instance. Instance players can still see and interact with the general population but not with players in other instances. This setup keeps instance players separate from each other while allowing interaction with the general population.
--- @param player integer
--- @param toggle boolean
--- @param bAllowDamagingWhileConcealed boolean
function NetworkConcealPlayer(player, toggle, bAllowDamagingWhileConcealed) end

--- Creates a networked synchronized scene. Be sure to actually start the scene with `NETWORK_START_SYNCHRONISED_SCENE` after you're done adding peds or entities to the scene.
--- @param x number
--- @param y number
--- @param z number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param rotationOrder integer
--- @param holdLastFrame boolean
--- @param looped boolean
--- @param phaseToStopScene number
--- @param phaseToStartScene number
--- @param animSpeed number
--- @return any
function NetworkCreateSynchronisedScene(x, y, z, xRot, yRot, zRot, rotationOrder, holdLastFrame, looped, phaseToStopScene, phaseToStartScene, animSpeed) end

--- NativeDB Introduced: v323
--- @param amount integer
--- @param p1 string
--- @param p2 string
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
function NetworkDeductCash(amount, p1, p2, p3, p4, p5) end

--- Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
--- @param characterSlot integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkDeleteCharacter(characterSlot, p1, p2) end

--- @return any
function NetworkDidFindGamersSucceed() end

--- @return any
function NetworkDidGetGamerStatusSucceed() end

--- @param player integer
--- @param toggle boolean
function NetworkDisableInvincibleFlashing(player, toggle) end

--- @param toggle boolean
function NetworkDisableLeaveRemotePedBehind(toggle) end

--- @param netID integer
function NetworkDisableProximityMigration(netID) end

--- Hardcoded to return -1.
--- @param p1 any
--- @return any
--- @return any
function NetworkDisplaynamesFromHandlesStart(p1) end

--- @param netId integer
--- @return any
function NetworkDoesEntityExistWithNetworkId(netId) end

--- @param netId integer
--- @return any
function NetworkDoesEntityExistWithNetworkId(netId) end

--- @param netId integer
--- @return any
function NetworkDoesNetworkIdExist(netId) end

--- @param tunableContext string
--- @param tunableName string
--- @return any
function NetworkDoesTunableExist(tunableContext, tunableName) end

--- @param tunableContext integer
--- @param tunableName integer
--- @return any
function NetworkDoesTunableExistHash(tunableContext, tunableName) end

--- NativeDB Added Parameter 5: Any p4 NativeDB Added Parameter 6: Any p5
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function NetworkDoTransitionQuickmatch(p0, p1, p2, p3) end

--- NativeDB Added Parameter 5: Any p4 NativeDB Added Parameter 6: Any p5
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function NetworkDoTransitionQuickmatchAsync(p0, p1, p2, p3) end

--- NativeDB Added Parameter 7: Any p6 NativeDB Added Parameter 8: Any p7
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p5 any
--- @return any
--- @return any
function NetworkDoTransitionQuickmatchWithGroup(p0, p1, p2, p3, p5) end

--- p2 is true 3/4 of the occurrences I found. 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
--- @param p1 any
--- @param p2 boolean
--- @param players integer
--- @param p4 boolean
--- @return any
--- @return any
function NetworkDoTransitionToFreemode(p1, p2, players, p4) end

--- @param p0 boolean
--- @param maxPlayers integer
--- @return any
function NetworkDoTransitionToGame(p0, maxPlayers) end

--- @param players integer
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
--- @return any
--- @return any
--- @return any
function NetworkDoTransitionToNewFreemode(players, p3, p4, p5) end

--- @param p0 boolean
--- @param maxPlayers integer
--- @param p2 boolean
--- @return any
function NetworkDoTransitionToNewGame(p0, maxPlayers, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnBoss(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkEarnBossAgency(p0, p1, p2, p3) end

--- NativeDB Introduced: v1493
--- @param p0 any
function NetworkEarnBountyHunterReward(p0) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function NetworkEarnCasinoHeist(p0, p1, p2, p3, p4, p5, p6) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkEarnCasinoHeistBonus(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v2060
--- @param amount integer
--- @param p1 any
function NetworkEarnCollectableCompletedCollection(amount, p1) end

--- NativeDB Introduced: v1493
--- @param p0 any
function NetworkEarnFmbbWageBonus(p0) end

--- DSPORT
--- @param p0 any
--- @param p1 any
function NetworkEarnFromAiTargetKill(p0, p1) end

--- Example for p1: "AM_DISTRACT_COPS"
--- @param p0 integer
--- @param p1 string
--- @return any
function NetworkEarnFromAmbientJob(p0, p1) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 any
function NetworkEarnFromArenaCareerProgression(amount, p1) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 any
function NetworkEarnFromArenaSkillLevelProgression(amount, p1) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkEarnFromArenaWar(amount, p1, p2, p3) end

--- For the money bags that drop a max of $40,000. Often called 40k bags. Most likely NETWORK_EARN_FROM_ROB***
--- @param amount integer
function NetworkEarnFromArmourTruck(amount) end

--- NativeDB Introduced: v1604
--- @param amount integer
function NetworkEarnFromAssassinateTargetKilled(amount) end

--- NativeDB Introduced: v1604
--- @param amount integer
function NetworkEarnFromAssassinateTargetKilled_2(amount) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function NetworkEarnFromAutoshopBusiness(p0, p1) end

--- NativeDB Introduced: v2372
--- @param p0 any
function NetworkEarnFromAutoshopIncome(p0) end

--- NativeDB Introduced: v1604
--- @param amount integer
function NetworkEarnFromBbEventBonus(amount) end

--- NativeDB Introduced: v1604
--- @param amount integer
function NetworkEarnFromBbEventCargo(amount) end

--- @param amount integer
--- @param heistHash string
function NetworkEarnFromBendJob(amount, heistHash) end

--- @param amount integer
--- @param p1 string
function NetworkEarnFromBetting(amount, p1) end

--- NativeDB Introduced: v2699
--- @param p0 any
function NetworkEarnFromBikerIncome(p0) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
function NetworkEarnFromBikeShopBusiness(p0, p1) end

--- @param amount integer
--- @param p3 any
--- @return integer
--- @return any
function NetworkEarnFromBounty(amount, p3) end

--- NativeDB Introduced: v1493
--- @param p0 any
function NetworkEarnFromBusinessBattle(p0) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnFromBusinessHubSell(p0, p1, p2) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkEarnFromBusinessHubSource(p0, p1, p2, p3) end

--- @param amount integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkEarnFromBusinessProduct(amount, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
function NetworkEarnFromCarclubMembership(p0) end

--- NativeDB Introduced: v1290
--- @param amount integer
function NetworkEarnFromCashingOut(amount) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param hash integer
function NetworkEarnFromCasinoAward(amount, hash) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromCasinoMissionParticipation(amount) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromCasinoMissionReward(amount) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromCasinoStoryMissionReward(amount) end

--- @param p0 any
--- @param p2 boolean
--- @return any
function NetworkEarnFromChallengeWin(p0, p2) end

--- NativeDB Introduced: v1493
--- @param p0 any
function NetworkEarnFromClubManagementParticipation(p0) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromCollectablesActionFigures(amount) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param p1 any
function NetworkEarnFromCollectionItem(amount, p1) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromCompleteCollection(amount) end

--- @param amount integer
--- @param p1 any
function NetworkEarnFromContraband(amount, p1) end

--- @param amount integer
function NetworkEarnFromCrateDrop(amount) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnFromCriminalMastermindBonus(p0, p1, p2) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromDailyObjectiveEvent(amount) end

--- @param p0 integer
--- @param p1 string
--- @param p2 integer
function NetworkEarnFromDailyObjectives(p0, p1, p2) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param p1 any
function NetworkEarnFromDarChallenge(amount, p1) end

--- @param p0 any
function NetworkEarnFromDestroyingContraband(p0) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param vehicleHash integer
function NetworkEarnFromDoomsdayFinaleBonus(amount, vehicleHash) end

--- NativeDB Introduced: v1493
--- @param p0 any
function NetworkEarnFromFmbbBossWork(p0) end

--- NativeDB Introduced: v1493
--- @param p0 any
function NetworkEarnFromFmbbPhonecallMission(p0) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param unk string
--- @param p2 any
function NetworkEarnFromGangopsAwards(amount, unk, p2) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param unk string
--- @param actIndex integer
function NetworkEarnFromGangopsElite(amount, unk, actIndex) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param unk string
function NetworkEarnFromGangopsJobsFinale(amount, unk) end

--- NativeDB Introduced: v1290
--- @param amount integer
function NetworkEarnFromGangopsJobsPrepParticipation(amount) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param unk string
function NetworkEarnFromGangopsJobsSetup(amount, unk) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param p1 integer
function NetworkEarnFromGangopsWages(amount, p1) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param p1 integer
function NetworkEarnFromGangopsWagesBonus(amount, p1) end

--- @param amount integer
function NetworkEarnFromGangPickup(amount) end

--- NativeDB Introduced: v1493
--- @param p0 any
--- @param amount integer
--- @param p2 any
--- @param p3 any
function NetworkEarnFromHackerTruckMission(p0, amount, p2, p3) end

--- @param amount integer
function NetworkEarnFromHoldups(amount) end

--- @param amount integer
--- @param modelHash integer
function NetworkEarnFromImportExport(amount, modelHash) end

--- @param amount integer
--- @param p1 string
function NetworkEarnFromJob(amount, p1) end

--- NativeDB Introduced: v323
--- @param p0 any
--- @return any
--- @return any
function NetworkEarnFromJobBonus(p0) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param p1 string
function NetworkEarnFromJobX2(amount, p1) end

--- @param amount integer
function NetworkEarnFromNotBadsport(amount) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
function NetworkEarnFromPersonalVehicle(p0, p1, p2, p3, p4, p5, p6, p7, p8) end

--- @param amount integer
function NetworkEarnFromPickup(amount) end

--- @param amount integer
--- @param p1 string
function NetworkEarnFromPremiumJob(amount, p1) end

--- @param amount integer
--- @param propertyName integer
function NetworkEarnFromProperty(amount, propertyName) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromRcTimeTrial(amount) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param p1 any
function NetworkEarnFromRdrBonus(amount, p1) end

--- @param amount integer
function NetworkEarnFromRockstar(amount) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param baseNameHash integer
function NetworkEarnFromSellBase(amount, baseNameHash) end

--- @param amount integer
--- @param bunkerHash integer
function NetworkEarnFromSellBunker(amount, bunkerHash) end

--- NativeDB Added Parameter 2: Any p1 NativeDB Added Parameter 3: Any p2 NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromSellingVehicle(amount) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkEarnFromSightseeing(p0, p1, p2, p3) end

--- NativeDB Introduced: v1180
--- @param amount integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkEarnFromSmuggling(amount, p1, p2, p3) end

--- NativeDB Introduced: v1604
--- @param amount integer
function NetworkEarnFromSpinTheWheelCash(amount) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param p1 integer
function NetworkEarnFromTargetRefund(amount, p1) end

--- NativeDB Introduced: v1734
--- @param amount integer
function NetworkEarnFromTimeTrialWin(amount) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnFromTunerAward(p0, p1, p2) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkEarnFromTunerFinale(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function NetworkEarnFromUpgradeAutoshopLocation(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
function NetworkEarnFromVehicle(p0, p1, p2, p3, p4, p5, p6, p7) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function NetworkEarnFromVehicleAutoshop(p0, p1) end

--- NativeDB Introduced: v2372
--- @param p0 any
function NetworkEarnFromVehicleAutoshopBonus(p0) end

--- @param amount integer
--- @param p1 any
--- @param p2 any
function NetworkEarnFromVehicleExport(amount, p1, p2) end

--- NativeDB Introduced: v1180
--- @param amount integer
function NetworkEarnFromWagePayment(amount) end

--- NativeDB Introduced: v1180
--- @param amount integer
function NetworkEarnFromWagePaymentBonus(amount) end

--- NativeDB Added Parameter 1: int amount NativeDB Added Parameter 2: int id
function NetworkEarnFromWarehouse() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnGoon(p0, p1, p2) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function NetworkEarnIslandHeist(p0, p1, p2, p3, p4, p5) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnJobBonusFirstTimeBonus(p0, p1, p2) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkEarnJobBonusHeistAward(p0, p1, p2) end

function NetworkEndTutorialSession() end

--- @param areaHandle integer
--- @return any
function NetworkEntityAreaDoesExist(areaHandle) end

--- @param areaHandle integer
--- @return any
function NetworkEntityAreaIsOccupied(areaHandle) end

--- @param heli integer
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param netScriptEntityId integer
function NetworkExplodeHeli(heli, isAudible, isInvisible, netScriptEntityId) end

--- In the console script dumps, this is only referenced once. NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0); ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters. Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param? am_plane_takedown.c network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0); armenian2.c network_explode_vehicle(Local_80[6 <2>], 1, 0, 0); fm_horde_controler.c network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0); fm_mission_controller.c, has 6 hits so not going to list them. Side note, setting the first parameter to 0 seems to mute sound or so? Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
--- @param vehicle integer
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param p3 boolean
function NetworkExplodeVehicle(vehicle, isAudible, isInvisible, p3) end

--- Fade the given entity back in, usually used after the entity has been faded out with NETWORK_FADE_OUT_ENTITY When used on a entity which isn't invisible or faded out then the native will still work, it will just instanly make the ped invisible before fading in. **Additional Parameters**: * **flash**: If set to true the entity will flash while fading in.
--- @param entity integer
--- @param bNetwork boolean
function NetworkFadeInEntity(entity, bNetwork) end

--- normal - transition like when your coming out of LSC slow - transition like when you walk into a mission
--- @param entity integer
--- @param normal boolean
--- @param slow boolean
function NetworkFadeOutEntity(entity, normal, slow) end

--- @param p0 any
--- @return any
function NetworkFindGamersInCrew(p0) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @return any
function NetworkFindMatchedGamers(p0, p1, p2, p3) end

function NetworkFinishBroadcastingData() end

--- @param sceneId integer
function NetworkForceLocalUseOfSyncedSceneCamera(sceneId) end

--- @return any
--- @return any
function NetworkGamerHasHeadset() end

--- @return any
function NetworkGamertagFromHandlePending() end

--- @return any
--- @return integer
function NetworkGamertagFromHandleStart() end

--- @return any
function NetworkGamertagFromHandleSucceeded() end

--- @param p0 boolean
--- @return any
function NetworkGetActivityPlayerNum(p0) end

--- @return any
function NetworkGetAgeGroup() end

--- NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkGetAverageLatencyForPlayer(player) end

--- Same as _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER (0xD414BE129BB81B32) NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkGetAverageLatencyForPlayer_2(player) end

--- NETWORK_GET_* NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkGetAveragePacketLossForPlayer(player) end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
--- @return any
function NetworkGetBackgroundLoadingRecipients(p0, p1) end

--- Return the content modifier id (the tunables context if you want) of a specific content. It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context. The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA' 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
--- @param contentHash integer
--- @return any
function NetworkGetContentModifierListId(contentHash) end

--- @return any
--- @return any
function NetworkGetCurrentlySelectedGamerHandleFromInviteMenu() end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return integer
function NetworkGetDestroyerOfEntity(p0, p1) end

--- @param netId integer
--- @return any
--- @return integer
function NetworkGetDestroyerOfNetworkId(netId) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
function NetworkGetDisplaynamesFromHandles(p0, p1, p2) end

--- Get the local entity handle of the given network id Through this native you can get back the entity that you previously converted to netid with NetworkGetNetworkIdFromEntity or with the `ToNet` natives
--- @param netId integer
--- @return any
function NetworkGetEntityFromNetworkId(netId) end

--- @param netId integer
--- @return any
function NetworkGetEntityFromNetworkId(netId) end

--- @param entity integer
--- @return any
function NetworkGetEntityIsLocal(entity) end

--- @param entity integer
--- @return any
function NetworkGetEntityIsNetworked(entity) end

--- @param player integer
--- @return any
--- @return integer
function NetworkGetEntityKillerOfPlayer(player) end

--- @param entity integer
--- @return any
function NetworkGetEntityNetScriptId(entity) end

--- Returns the owner ID of the specified entity.
--- @param entity integer
--- @return any
function NetworkGetEntityOwner(entity) end

--- NativeDB Introduced: v323
--- @return any
function NetworkGetEvcBalance() end

--- Returns the first owner ID of the specified entity.
--- @param entity integer
--- @return any
function NetworkGetFirstEntityOwner(entity) end

--- @param p1 any
--- @return any
--- @return any
function NetworkGetFoundGamer(p1) end

--- @return any
function NetworkGetFriendCount() end

--- @param friendIndex integer
--- @return any
function NetworkGetFriendName(friendIndex) end

--- @param friendIndex integer
--- @return any
function NetworkGetFriendNameFromIndex(friendIndex) end

--- @return any
function NetworkGetGamerStatusFromQueue() end

--- @param p1 any
--- @return any
--- @return any
function NetworkGetGamerStatusResult(p1) end

--- @return any
--- @return integer
function NetworkGetGamertagFromHandle() end

--- @return integer
--- @return integer
--- @return integer
function NetworkGetGlobalMultiplayerClock() end

--- scriptName examples: "freemode", "AM_CR_SecurityVan", ... Most of the time, these values are used: p1 = -1 p2 = 0
--- @param scriptName string
--- @param p1 integer
--- @param p2 integer
--- @return any
function NetworkGetHostOfScript(scriptName, p1, p2) end

--- @return any
function NetworkGetHostOfThisScript() end

--- @return any
function NetworkGetInstanceIdOfThisScript() end

--- NativeDB Introduced: v323
--- @return any
function NetworkGetIsHighEarner() end

--- Used by NetBlender
--- @param entity integer
--- @return any
function NetworkGetLastVelocityReceived(entity) end

--- Retrieves the local player's NetworkHandle* and stores it in the given buffer. * Currently unknown struct
--- @param bufferSize integer
--- @return integer
function NetworkGetLocalHandle(bufferSize) end

--- Returns a local synchronized scene handle of a networked synchronised scene.
--- @param netSceneId integer
--- @return any
function NetworkGetLocalSceneFromNetworkId(netSceneId) end

--- @return any
function NetworkGetMaxFriends() end

--- Seems to always return 0, but it's used in quite a few loops. for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++) { if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0) { var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
--- @return any
function NetworkGetMaxNumParticipants() end

--- Get the network id of the given entity An entity network id represents a given entity for other clients, it's a handle shared between clients, can be reconverted to a client entity handle.\ These (entity network IDs) can and will be reused, the network id will not change. If you need to refer to an entity across machines (clients, or the server), you should use its network id. Read more at Network and local IDs
--- @param entity integer
--- @return any
function NetworkGetNetworkIdFromEntity(entity) end

--- @param entity integer
--- @return any
function NetworkGetNetworkIdFromEntity(entity) end

--- @return any
function NetworkGetNumBodyTrackers() end

--- Returns the amount of players connected in the current session. Only works when connected to a session/server.
--- @return any
function NetworkGetNumConnectedPlayers() end

--- @return any
function NetworkGetNumFoundGamers() end

--- @return any
function NetworkGetNumParticipants() end

--- @return any
function NetworkGetNumPresenceInvites() end

--- @param p1 any
--- @param p2 any
--- @return any
--- @return any
function NetworkGetNumScriptParticipants(p1, p2) end

--- NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkGetNumUnackedForPlayer(player) end

--- NETWORK_GET_* NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkGetOldestResendCountForPlayer(player) end

--- @param index integer
--- @return any
function NetworkGetParticipantIndex(index) end

--- @param dataSize integer
--- @return any
--- @return any
function NetworkGetPlatformPartyMembers(dataSize) end

--- @return any
function NetworkGetPlatformPartyUnk() end

--- Returns the coordinates of another player. Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
--- @param player integer
--- @return any
function NetworkGetPlayerCoords(player) end

--- @return any
--- @return integer
function NetworkGetPlayerFromGamerHandle() end

--- @param player integer
--- @return any
function NetworkGetPlayerIndex(player) end

--- Returns the Player associated to a given Ped when in an online session.
--- @param ped integer
--- @return any
function NetworkGetPlayerIndexFromPed(ped) end

--- @param player integer
--- @return any
function NetworkGetPlayerLoudness(player) end

--- @param player integer
--- @return any
function NetworkGetPlayerOwnsWaypoint(player) end

--- @param player integer
--- @return any
function NetworkGetPlayerTutorialSessionInstance(player) end

--- NativeDB Introduced: v2372
--- @return any
function NetworkGetPositionHashOfThisScript() end

--- @param p0 any
--- @return any
function NetworkGetPresenceInviteContentId(p0) end

--- @param p0 any
--- @return any
function NetworkGetPresenceInviteFromAdmin(p0) end

--- @param p0 any
--- @return any
--- @return any
function NetworkGetPresenceInviteHandle(p0) end

--- @param p0 any
--- @return any
function NetworkGetPresenceInviteId(p0) end

--- Returns the Name of the inviter of the specific selected Invite.
--- @param inviteIndex integer
--- @return any
function NetworkGetPresenceInviteInviter(inviteIndex) end

--- @param p0 any
--- @return any
function NetworkGetPresenceInviteIsTournament(p0) end

--- @param p0 any
--- @return any
function NetworkGetPresenceInvitePlaylistCurrent(p0) end

--- @param p0 any
--- @return any
function NetworkGetPresenceInvitePlaylistLength(p0) end

--- The Native returns a hash of the session id as string from the specific invite index!
--- @param inviteIndex integer
--- @return any
function NetworkGetPresenceInviteSessionId(inviteIndex) end

function NetworkGetPrimaryClanDataCancel() end

--- @return any
function NetworkGetPrimaryClanDataClear() end

--- @return any
--- @return any
--- @return any
function NetworkGetPrimaryClanDataNew() end

--- @return any
function NetworkGetPrimaryClanDataPending() end

--- @param p1 any
--- @return any
--- @return any
function NetworkGetPrimaryClanDataStart(p1) end

--- @return any
function NetworkGetPrimaryClanDataSuccess() end

--- NativeDB Introduced: v323
--- @return any
function NetworkGetPvcBalance() end

--- Same as 0xEA560AC9EEB1E19B. Same as 0xEA560AC9EEB1E19B. NativeDB Introduced: v323
--- @return any
function NetworkGetPvcTransferBalance() end

--- @return any
function NetworkGetRandomInt() end

--- Same as GET_RANDOM_INT_IN_RANGE
--- @param rangeStart integer
--- @param rangeEnd integer
--- @return any
function NetworkGetRandomIntRanged(rangeStart, rangeEnd) end

--- Same as 0x13A8DE2FD77D04F3. NativeDB Introduced: v323
--- @return any
function NetworkGetRemainingTransferBalance() end

--- Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
--- @param randomInt integer
--- @return vector3
--- @return number
function NetworkGetRespawnResult(randomInt) end

--- @param p0 any
--- @return any
function NetworkGetRespawnResultFlags(p0) end

--- @return any
function NetworkGetRosPrivilege24() end

--- @return any
function NetworkGetRosPrivilege25() end

--- @return any
function NetworkGetRosPrivilege9() end

--- @return any
function NetworkGetScriptStatus() end

--- @return any
function NetworkGetStringBankBalance() end

--- NativeDB Introduced: v323
--- @return any
function NetworkGetStringBankWalletBalance() end

--- NativeDB Introduced: v323
--- @param characterSlot integer
--- @return any
function NetworkGetStringWalletBalance(characterSlot) end

--- @return any
function NetworkGetTalkerProximity() end

--- @return any
function NetworkGetTargetingMode() end

--- @return any
function NetworkGetThisScriptIsNetworkScript() end

--- @return any
function NetworkGetTimeoutTime() end

--- @return any
function NetworkGetTotalNumPlayers() end

--- @return any
--- @return integer
function NetworkGetTransitionHost() end

--- Returns count.
--- @param dataCount integer
--- @return any
--- @return any
function NetworkGetTransitionMembers(dataCount) end

--- Actually returns the version (TUNABLE_VERSION)
--- @return any
function NetworkGetTunableCloudCrc() end

--- NETWORK_* NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkGetUnreliableResendCountForPlayer(player) end

--- @return any
function NetworkGetVcBalance() end

--- @return any
function NetworkGetVcBankBalance() end

--- Returns true if bank balance >= amount. NativeDB Introduced: v323
--- @param amount integer
--- @return any
function NetworkGetVcBankBalanceIsNotLessThan(amount) end

--- Returns true if bank balance + wallet balance >= amount.
--- @param amount integer
--- @param characterSlot integer
--- @return any
function NetworkGetVcBankWalletBalanceIsNotLessThan(amount, characterSlot) end

--- @param characterSlot integer
--- @return any
function NetworkGetVcWalletBalance(characterSlot) end

--- Returns true if wallet balance >= amount. NativeDB Introduced: v323
--- @param amount integer
--- @param characterSlot integer
--- @return any
function NetworkGetVcWalletBalanceIsNotLessThan(amount, characterSlot) end

--- @param playerSrc integer
--- @return any
function NetworkGetVoiceProximityOverrideForPlayer(playerSrc) end

--- @param amount integer
--- @return integer
function NetworkGivePlayerJobshareCash(amount) end

--- @param friendIndex integer
--- @param bufferSize integer
--- @return integer
function NetworkHandleFromFriend(friendIndex, bufferSize) end

--- Returns a NetworkHandle* from the specified member ID and stores it in a given buffer. * Currently unknown struct
--- @param memberId string
--- @param bufferSize integer
--- @return integer
function NetworkHandleFromMemberId(memberId, bufferSize) end

--- Returns a handle to networkHandle* from the specified player handle and stores it in a given buffer. * Currently unknown struct Example: std::vector<UINT64> GetPlayerNetworkHandle(Player player) { const int size = 13; uint64_t *buffer = std::make_unique<uint64_t[]>(size).get(); NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast<int *>(buffer), 13); for (int i = 0; i < size; i++) { Log::Msg("networkhandle[%i]: %llx", i, buffer[i]); } std::vector<UINT64> result(buffer, buffer + sizeof(buffer)); return result; }
--- @param player integer
--- @param bufferSize integer
--- @return integer
function NetworkHandleFromPlayer(player, bufferSize) end

--- Returns a NetworkHandle* from the specified user ID and stores it in a given buffer. * Currently unknown struct
--- @param userId string
--- @param bufferSize integer
--- @return integer
function NetworkHandleFromUserId(userId, bufferSize) end

--- @return any
function NetworkHasAgeRestrictedProfile() end

--- @param player integer
--- @return any
function NetworkHasCachedPlayerHeadBlendData(player) end

--- @param doorHash integer
--- @return any
function NetworkHasControlOfDoor(doorHash) end

--- @param entity integer
--- @return any
function NetworkHasControlOfEntity(entity) end

--- @param netId integer
--- @return any
function NetworkHasControlOfNetworkId(netId) end

--- @param pickup integer
--- @return any
function NetworkHasControlOfPickup(pickup) end

--- @param entity integer
--- @return any
function NetworkHasEntityBeenRegisteredWithThisThread(entity) end

--- @return any
function NetworkHasFollowInvite() end

--- Returns true if dinput8.dll is present in the game directory. You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
--- @return any
function NetworkHasGameBeenAltered() end

--- @return any
function NetworkHasHeadset() end

--- @return any
--- @return integer
function NetworkHashFromGamerHandle() end

--- @param player integer
--- @return any
function NetworkHashFromPlayerHandle(player) end

--- @return any
--- @return integer
function NetworkHasInviteBeenAcked() end

--- @return any
--- @return any
function NetworkHasInvitedGamer() end

--- @return any
--- @return any
function NetworkHasInvitedGamerToTransition() end

--- @return any
function NetworkHasPendingInvite() end

--- @param player integer
--- @return any
function NetworkHasPlayerStartedTransition(player) end

--- @return any
function NetworkHasReceivedHostBroadcastData() end

--- index is always 18 in scripts
--- @param index integer
--- @return any
function NetworkHasRosPrivilege(index) end

--- @param privilege integer
--- @return any
--- @return integer
--- @return vector3
function NetworkHasRosPrivilegeEndDate(privilege) end

--- @return any
function NetworkHasSocialClubAccount() end

--- @return any
function NetworkHasSocialNetworkingSharingPriv() end

--- @return any
--- @return integer
function NetworkHasTransitionInviteBeenAcked() end

--- Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
--- @return any
function NetworkHasValidRosCredentials() end

--- @return any
--- @return any
function NetworkHasViewGamerUserContentResult() end

--- @param p0 integer
--- @param player integer
--- @return any
function NetworkHaveCommunicationPrivileges(p0, player) end

--- @return any
function NetworkHaveOnlinePrivilege_2() end

--- @return any
function NetworkHaveOnlinePrivileges() end

--- @return any
function NetworkHaveRosBannedPriv() end

--- @return any
function NetworkHaveRosCreateTicketPriv() end

--- @return any
function NetworkHaveRosLeaderboardWritePriv() end

--- @return any
function NetworkHaveRosMultiplayerPriv() end

--- @return any
function NetworkHaveRosSocialClubPriv() end

--- @param p0 integer
--- @return any
function NetworkHaveUserContentPrivileges(p0) end

--- From what I can tell it looks like it does the following: Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now. You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 any
--- @param p5 boolean
--- @param p6 boolean
--- @param p7 integer
--- @param p8 any
--- @param p9 integer
--- @return any
function NetworkHostTransition(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- @param wallet integer
--- @param bank integer
function NetworkInitializeCash(wallet, bank) end

--- @param p1 any
--- @return any
--- @return any
--- @return any
--- @return any
function NetworkInviteGamers(p1) end

--- @param p1 any
--- @return any
--- @return any
function NetworkInviteGamersToTransition(p1) end

--- @return any
function NetworkIsActivitySession() end

--- @return any
function NetworkIsActivitySpectator() end

--- @return any
--- @return integer
function NetworkIsActivitySpectatorFromHandle() end

--- @return any
function NetworkIsAddingFriend() end

--- @return any
function NetworkIsCableConnected() end

--- This would be nice to see if someone is in party chat, but 2 sad notes. 1) It only becomes true if said person is speaking in that party at the time. 2) It will never, become true unless you are in that party with said person.
--- @return any
--- @return integer
function NetworkIsChattingInPlatformParty() end

--- @return any
function NetworkIsClockTimeOverridden() end

--- @return any
function NetworkIsCloudAvailable() end

--- @return any
function NetworkIsCloudBackgroundScriptRequestPending() end

--- NETWORK_IS_* NativeDB Introduced: v323
--- @param player integer
--- @return any
function NetworkIsConnectionEndpointRelayServer(player) end

--- @param doorHash integer
--- @return any
function NetworkIsDoorNetworked(doorHash) end

--- Note: This only works for vehicles, which appears to be a bug (since the setter *does* work for every entity type and the name is 99% correct).
--- @param entity integer
--- @return any
function NetworkIsEntityConcealed(entity) end

--- @param entity integer
--- @return any
function NetworkIsEntityFading(entity) end

--- @return any
function NetworkIsFindingGamers() end

--- @return any
--- @return integer
function NetworkIsFriend() end

--- @return any
--- @return integer
function NetworkIsFriendHandleOnline() end

--- @param friendIndex integer
--- @return any
function NetworkIsFriendIndexOnline(friendIndex) end

--- @param friendName string
--- @return any
function NetworkIsFriendInMultiplayer(friendName) end

--- In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
--- @param friendName string
--- @return any
function NetworkIsFriendInSameTitle(friendName) end

--- @param name string
--- @return any
function NetworkIsFriendOnline(name) end

--- @return any
function NetworkIsGameInProgress() end

--- @return any
--- @return any
function NetworkIsGamerBlockedByMe() end

--- @return any
--- @return integer
function NetworkIsGamerInMySession() end

--- @return any
--- @return integer
function NetworkIsGamerMutedByMe() end

--- @return any
--- @return integer
function NetworkIsGamerTalking() end

--- @return any
function NetworkIsGettingGamerStatus() end

--- @param bufferSize integer
--- @return any
--- @return integer
function NetworkIsHandleValid(bufferSize) end

--- If you are host, returns true else returns false.
--- @return any
function NetworkIsHost() end

--- @return any
function NetworkIsHostOfThisScript() end

--- Checks if the networkHandle is the same as any other user that is signed in on the local machine. For example, if your console has two or more users signed in (on different controllers), the profile that is not controlling the game would be "inactive".
--- @return any
--- @return integer
function NetworkIsInactiveProfile() end

--- @return any
function NetworkIsInMpCutscene() end

--- Note according to IDA TU27 X360(Console), This native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location. Side note: This location just stops where it's at once jumped to. Screenshot for side note, h t t p ://i.imgur.com/m2ci1mF.png h t t p://i.imgur.com/Z0Wx2B6.png
--- @return any
function NetworkIsInParty() end

--- Hardcoded to return false.
--- @return any
function NetworkIsInPlatformParty() end

--- Hardcoded to return false.
--- @return any
function NetworkIsInPlatformPartyChat() end

--- @return any
function NetworkIsInSession() end

--- @return any
function NetworkIsInSpectatorMode() end

--- @return any
function NetworkIsInTransition() end

--- @return any
function NetworkIsInTutorialSession() end

--- @return any
function NetworkIsLocalPlayerInvincible() end

--- @return any
function NetworkIsLocalTalking() end

--- @return any
function NetworkIsMultiplayerDisabled() end

--- Returns true if the specified network id is controlled by someone else.
--- @param netId integer
--- @return any
function NetworkIsNetworkIdAClone(netId) end

--- @return any
function NetworkIsOfflineInvitePending() end

--- @param p0 integer
--- @return any
function NetworkIsParticipantActive(p0) end

--- Note according to IDA TU27 X360(Console), This native & 'NETWORK_IS_PARTY_MEMBER' both jump to the same location. Side note: This location just stops where it's at once jumped to. Screenshot for side note, h t t p ://i.imgur.com/m2ci1mF.png h t t p://i.imgur.com/Z0Wx2B6.png
--- @return any
--- @return integer
function NetworkIsPartyMember() end

--- This function is hard-coded to always return 0.
--- @param p0 any
--- @return any
function NetworkIsPendingFriend(p0) end

--- @param player integer
--- @return any
function NetworkIsPlayerActive(player) end

--- @param player integer
--- @return any
function NetworkIsPlayerAParticipant(player) end

--- @param player1 integer
--- @param script string
--- @param player2 integer
--- @return any
function NetworkIsPlayerAParticipantOnScript(player1, script, player2) end

--- @param player integer
--- @return any
function NetworkIsPlayerBlockedByMe(player) end

--- @param player integer
--- @return any
function NetworkIsPlayerConcealed(player) end

--- @param player integer
--- @return any
function NetworkIsPlayerConnected(player) end

--- NETWORK_ARE_*
--- @param player integer
--- @param index integer
--- @return any
function NetworkIsPlayerEqualToIndex(player, index) end

--- @param player integer
--- @return any
function NetworkIsPlayerFading(player) end

--- @param player integer
--- @return any
function NetworkIsPlayerInMpCutscene(player) end

--- @param player integer
--- @return any
function NetworkIsPlayerMutedByMe(player) end

--- returns true if someone is screaming or talking in a microphone
--- @param player integer
--- @return any
function NetworkIsPlayerTalking(player) end

--- @return any
function NetworkIsPsnAvailable() end

--- @param scriptName string
--- @param player integer
--- @param p2 boolean
--- @param p3 any
--- @return any
function NetworkIsScriptActive(scriptName, player, p2, p3) end

--- NativeDB Introduced: v2245
--- @param scriptHash integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 integer
--- @return any
function NetworkIsScriptActiveByHash(scriptHash, p1, p2, p3) end

--- @return any
function NetworkIsSessionActive() end

--- @return any
function NetworkIsSessionBusy() end

--- This checks if player is playing on gta online or not. Please add an if and block your mod if this is "true".
--- @return any
function NetworkIsSessionStarted() end

--- Returns whether the player is signed into Social Club.
--- @return any
function NetworkIsSignedIn() end

--- Returns whether the game is not in offline mode. seemed not to work for some ppl
--- @return any
function NetworkIsSignedOnline() end

--- Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
--- @return any
function NetworkIsTextChatActive() end

--- @param p0 any
--- @param p1 boolean
--- @param p2 any
--- @return any
function NetworkIsThisScriptMarked(p0, p1, p2) end

--- @return any
function NetworkIsTransitionBusy() end

--- @return any
function NetworkIsTransitionClosedCrew() end

--- @return any
function NetworkIsTransitionClosedFriends() end

--- @return any
function NetworkIsTransitionHost() end

--- @return any
--- @return integer
function NetworkIsTransitionHostFromHandle() end

--- @return any
function NetworkIsTransitionMatchmaking() end

--- @return any
function NetworkIsTransitionOpenToMatchmaking() end

--- @return any
function NetworkIsTransitionPrivate() end

--- @return any
function NetworkIsTransitionSolo() end

--- @return any
function NetworkIsTransitionStarted() end

--- @return any
function NetworkIsTransitionToGame() end

--- @return any
function NetworkIsTransitionVisibilityLocked() end

--- @return any
function NetworkIsTunableCloudRequestPending() end

--- @return any
function NetworkIsTutorialSessionChangePending() end

--- @return any
function NetworkJoinGroupActivity() end

--- @return any
function NetworkJoinPreviouslyFailedSession() end

--- @return any
function NetworkJoinPreviouslyFailedTransition() end

--- int handle[76]; NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13); Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]); NETWORK_JOIN_TRANSITION(uVar2); nothing doin.
--- @param player integer
--- @return any
function NetworkJoinTransition(player) end

--- @return any
function NetworkLaunchTransition() end

--- @return any
function NetworkLeaveTransition() end

--- @param characterSlot integer
function NetworkManualDeleteCharacter(characterSlot) end

--- @return any
--- @return any
function NetworkMarkTransitionGamerAsFullyJoined() end

--- @return any
--- @return integer
function NetworkMemberIdFromGamerHandle() end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
--- @return any
function NetworkMoneyCanBet(amount, p1, p2) end

function NetworkOpenTransitionMatchmaking() end

--- Could possibly bypass being muted or automatically muted
--- @param player integer
--- @param toggle boolean
function NetworkOverrideChatRestrictions(player, toggle) end

--- NativeDB Introduced: v2189
--- @param ms integer
function NetworkOverrideClockMillisecondsPerGameMinute(ms) end

--- Overrides the game clock time for the local player, allowing for manipulation of the in-game time. This native is effective in both multiplayer and singleplayer modes. **Note:** Passing wrong data (e.g. hours above 23) will cause the game to crash.
--- @param hours integer
--- @param minutes integer
--- @param seconds integer
function NetworkOverrideClockTime(hours, minutes, seconds) end

--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
function NetworkOverrideCoordsAndHeading(entity, x, y, z, heading) end

--- R* uses this to hear all player when spectating. It allows you to hear other online players when their chat is on none, crew and or friends
--- @param player integer
--- @param toggle boolean
function NetworkOverrideReceiveRestrictions(player, toggle) end

--- p0 is always false in scripts.
--- @param toggle boolean
function NetworkOverrideReceiveRestrictionsAll(toggle) end

--- This is used alongside the native, 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
--- @param player integer
--- @param toggle boolean
function NetworkOverrideSendRestrictions(player, toggle) end

--- @param toggle boolean
function NetworkOverrideSendRestrictionsAll(toggle) end

--- @param team integer
--- @param toggle boolean
function NetworkOverrideTeamRestrictions(team, toggle) end

--- @param p0 boolean
function NetworkOverrideTransitionChat(p0) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkPayEmployeeWage(p0, p1, p2) end

--- @param amount integer
--- @param matchId string
--- @param p2 boolean
--- @param p3 boolean
function NetworkPayMatchEntryFee(amount, matchId, p2, p3) end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkPayUtilityBill(amount, p1, p2) end

--- NativeDB Introduced: v2372
--- @param ped integer
function NetworkPedForceGameStateUpdate(ped) end

--- @return any
function NetworkPlayerGetCheaterReason() end

--- Returns the name of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
--- @param player integer
--- @return any
function NetworkPlayerGetName(player) end

--- Takes a 24 char buffer. Returns the buffer or "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
--- @param player integer
--- @return any
--- @return integer
function NetworkPlayerGetUserid(player) end

--- @param player integer
--- @return any
function NetworkPlayerHasHeadset(player) end

--- Does exactly the same thing as PLAYER_ID()
--- @return any
function NetworkPlayerIdToInt() end

--- @param player integer
--- @return any
function NetworkPlayerIndexIsCheater(player) end

--- @return any
function NetworkPlayerIsBadsport() end

--- @return any
function NetworkPlayerIsCheater() end

--- Checks if a specific value (BYTE) in CPlayerInfo is nonzero. Returns always false in Singleplayer. No longer used for dev checks since first mods were released on PS3 & 360. R* now checks with the is_dlc_present native for the dlc hash 2532323046, if that is present it will unlock dev stuff.
--- @param player integer
--- @return any
function NetworkPlayerIsRockstarDev(player) end

--- @return any
--- @return any
function NetworkQueryRespawnResults() end

--- @return any
--- @return any
function NetworkQueueGamerForStatus() end

--- Forces the "Are you sure you want to quit Grand Theft Auto V?" warning message (Same as when you Alt+F4) to show. Doesn't work in singleplayer.
function NetworkQuitMpToDesktop() end

--- @param value integer
--- @return integer
function NetworkReceivePlayerJobshareCash(value) end

--- index ------- See function sub_1005 in am_boat_taxi.ysc context ---------- "BACKUP_VAGOS" "BACKUP_LOST" "BACKUP_FAMILIES" "HIRE_MUGGER" "HIRE_MERCENARY" "BUY_CARDROPOFF" "HELI_PICKUP" "BOAT_PICKUP" "CLEAR_WANTED" "HEAD_2_HEAD" "CHALLENGE" "SHARE_LAST_JOB" "DEFAULT" reason --------- "NOTREACHTARGET" "TARGET_ESCAPE" "DELIVERY_FAIL" "NOT_USED" "TEAM_QUIT" "SERVER_ERROR" "RECEIVE_LJ_L" "CHALLENGE_PLAYER_LEFT" "DEFAULT" unk ----- Unknown bool value
--- @param index integer
--- @param context string
--- @param reason string
--- @param unk boolean
function NetworkRefundCash(index, context, reason, unk) end

--- @param entity integer
function NetworkRegisterEntityAsNetworked(entity) end

--- @param numVars integer
--- @return integer
function NetworkRegisterHostBroadcastVariables(numVars) end

--- @param numVars integer
--- @return integer
function NetworkRegisterPlayerBroadcastVariables(numVars) end

--- @param contextHash integer
--- @param nameHash integer
--- @return any
--- @return boolean
function NetworkRegisterTunableBoolHash(contextHash, nameHash) end

--- @param contextHash integer
--- @param nameHash integer
--- @return any
--- @return number
function NetworkRegisterTunableFloatHash(contextHash, nameHash) end

--- @param contextHash integer
--- @param nameHash integer
--- @return any
--- @return integer
function NetworkRegisterTunableIntHash(contextHash, nameHash) end

function NetworkRemoveAllTransitionInvite() end

--- @param p0 any
--- @return any
function NetworkRemoveEntityArea(p0) end

--- @param p0 any
--- @return any
function NetworkRemovePresenceInvite(p0) end

--- @return any
function NetworkRemoveTransitionInvite() end

function NetworkReportMyself() end

--- @return any
function NetworkRequestCloudBackgroundScripts() end

function NetworkRequestCloudTunables() end

--- @param doorID integer
--- @return any
function NetworkRequestControlOfDoor(doorID) end

--- @param entity integer
--- @return any
function NetworkRequestControlOfEntity(entity) end

--- @param netId integer
--- @return any
function NetworkRequestControlOfNetworkId(netId) end

function NetworkResetBodyTracker() end

--- p4 and p5 are always 0 in scripts
--- @param player integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 boolean
--- @param p5 boolean
function NetworkRespawnCoords(player, x, y, z, p4, p5) end

--- Revives our local player who was previously dead. **Note:** Call this once you resurrect the player (this does not need to be called every frame). cpp enum ePlayerSpawnLocation { // system will decide SPAWN_LOCATION_AUTOMATIC = 0, SPAWN_LOCATION_NEAR_DEATH = 1, SPAWN_LOCATION_NEAR_TEAM_MATES = 2, // script defined area SPAWN_LOCATION_MISSION_AREA = 3, SPAWN_LOCATION_NEAR_OTHER_PLAYERS = 4, SPAWN_LOCATION_NEAR_CURRENT_POSITION = 5, SPAWN_LOCATION_AT_CURRENT_POSITION = 6, SPAWN_LOCATION_NET_TEST_BED = 7, SPAWN_LOCATION_CUSTOM_SPAWN_POINTS = 8, SPAWN_LOCATION_OUTSIDE_SIMEON_GARAGE = 9, SPAWN_LOCATION_NEAR_SPECIFIC_COORDS = 10, SPAWN_LOCATION_AT_SPECIFIC_COORDS = 11, SPAWN_LOCATION_AT_AIRPORT_ARRIVALS = 12, SPAWN_LOCATION_AT_SPECIFIC_COORDS_IF_POSSIBLE = 13, SPAWN_LOCATION_IN_SPECIFIC_ANGLED_AREA = 14, SPAWN_LOCATION_NEAREST_RESPAWN_POINT = 15, SPAWN_LOCATION_AT_SPECIFIC_COORDS_RACE_CORONA = 16, SPAWN_LOCATION_INSIDE_GARAGE = 17, SPAWN_LOCATION_INSIDE_PROPERTY = 18, SPAWN_LOCATION_INSIDE_PROPERTY_OR_GARAGE = 19, SPAWN_LOCATION_NEAR_DEATH_IMPROMPTU = 20, SPAWN_LOCATION_NEAR_CURRENT_POSITION_SPREAD_OUT = 21, SPAWN_LOCATION_NEAREST_RESPAWN_POINT_TO_SPECIFIC_COORDS = 22, SPAWN_LOCATION_NEAREST_HOSPITAL = 23, SPAWN_LOCATION_NEAREST_POLICE_STATION = 24, SPAWN_LOCATION_NEAREST_HOTEL_TO_SPECIFIC_COORDS = 25, SPAWN_LOCATION_MISSION_AREA_NEAR_CURRENT_POSITION = 26, SPAWN_LOCATION_PRIVATE_YACHT = 27, SPAWN_LOCATION_PRIVATE_YACHT_APARTMENT = 28, SPAWN_LOCATION_PRIVATE_FRIEND_YACHT = 29, SPAWN_LOCATION_PRIVATE_YACHT_NEAR_SHORE = 30, SPAWN_LOCATION_NEAR_GANG_BOSS = 31, SPAWN_LOCATION_NEAR_SPECIFIC_COORDS_WITH_GANG = 32, SPAWN_LOCATION_GANG_DM = 33, SPAWN_LOCATION_GANG_BOSS_PRIVATE_YACHT = 34, SPAWN_LOCATION_OFFICE = 35, SPAWN_LOCATION_CLUBHOUSE = 36, SPAWN_LOCATION_NEAR_CURRENT_POSITION_AS_POSSIBLE = 37, SPAWN_LOCATION_NEAR_CURRENT_PERCEIVED_POSITION = 38, SPAWN_LOCATION_IE_WAREHOUSE = 39, SPAWN_LOCATION_BUNKER = 40, SPAWN_LOCATION_HANGAR = 41, SPAWN_LOCATION_DEFUNCT_BASE = 42, SPAWN_LOCATION_NIGHTCLUB = 43, SPAWN_LOCATION_ARENA_GARAGE = 44, SPAWN_LOCATION_CASINO = 45, SPAWN_LOCATION_CASINO_APARTMENT = 46, SPAWN_LOCATION_CASINO_OUTSIDE = 47, SPAWN_LOCATION_ARCADE = 48, SPAWN_LOCATION_CASINO_NIGHTCLUB = 49, SPAWN_LOCATION_SUBMARINE = 50, SPAWN_LOCATION_HEIST_ISLAND_NEAR_DEATH = 51, SPAWN_LOCATION_HEIST_ISLAND_BEACH_PARTY = 52, SPAWN_LOCATION_LAND_NEAR_SUBMARINE = 53, SPAWN_LOCATION_CAR_MEET = 54, SPAWN_LOCATION_AUTO_SHOP = 55, SPAWN_LOCATION_FIXER_HQ = 56, SPAWN_LOCATION_SITTING_SMOKING = 57, SPAWN_LOCATION_DRUNK_WAKE_UP_MUSIC_STUDIO = 58, SPAWN_LOCATION_MUSIC_STUDIO = 59, TOTAL_SPAWN_LOCATIONS = 60 }; cpp enum eSpawnReason { SPAWN_REASON_DEATH = 0, SPAWN_REASON_TRANSITION, SPAWN_REASON_MANUAL, SPAWN_REASON_RESTORE_CHARACTER, SPAWN_REASON_IN_VEHICLE }; ### Added parameters * **bUnpauseRenderPhases**: This boolean parameter will unpause the render phases when set to `true`. * **iSpawnLocation**: This integer parameter sets the player's spawn location metric for telemetry. See `ePlayerSpawnLocation` enum. * **iSpawnReason**: This integer parameter sets the player's spawn reason metric for telemetry. See `eSpawnReason` enum.
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param nInvincibilityTime integer
--- @param bLeaveDeadPed boolean
function NetworkResurrectLocalPlayer(x, y, z, heading, nInvincibilityTime, bLeaveDeadPed) end

--- NativeDB Introduced: v1290
--- @param earnedMoney integer
function NetworkRivalDeliveryCompleted(earnedMoney) end

--- @param seed integer
function NetworkSeedRandomNumberGenerator(seed) end

--- @param p2 any
--- @param p3 any
--- @return any
--- @return integer
--- @return any
function NetworkSendInviteViaPresence(p2, p3) end

--- String "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" is contained in the function in ida so this one is correct.
--- @param p2 any
--- @param p3 any
--- @return any
--- @return any
--- @return any
function NetworkSendPresenceTransitionInvite(p2, p3) end

--- Message is limited to 64 characters.
--- @param message string
--- @return any
--- @return integer
function NetworkSendTextMessage(message) end

--- the first arg seems to be the network player handle (&handle) and the second var is pretty much always "" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1 does this send an invite to a player?
--- @param p1 string
--- @param p2 integer
--- @param p3 integer
--- @param p4 boolean
--- @return any
--- @return integer
function NetworkSendTransitionGamerInstruction(p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function NetworkSessionActivityQuickmatch(p0, p1, p2, p3) end

--- @param groupId integer
function NetworkSessionAddActiveMatchmakingGroup(groupId) end

--- @param toggle boolean
function NetworkSessionBlockJoinRequests(toggle) end

function NetworkSessionCancelInvite() end

--- @param p0 integer
--- @param p1 boolean
function NetworkSessionChangeSlots(p0, p1) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param maxPlayers integer
--- @param p4 boolean
--- @return any
function NetworkSessionCrewMatchmaking(p0, p1, p2, maxPlayers, p4) end

--- p0 is always false and p1 varies. NETWORK_SESSION_END(0, 1) NETWORK_SESSION_END(0, 0) Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
--- @param p0 boolean
--- @param p1 boolean
--- @return any
function NetworkSessionEnd(p0, p1) end

--- unknown params p0 = 0, 2, or 999 (The global is 999 by default.) p1 = 0 (Always in every script it's found in atleast.) p2 = 0, 3, or 4 (Based on a var that is determined by a function.) p3 = maxPlayers (It's obvious in x360 scripts it's always 18) p4 = 0 (Always in every script it's found in atleast.) p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.) p5 is reset to 0 if, Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 && Global_1312631 = true/1) those are passed.
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param maxPlayers integer
--- @param p4 any
--- @param p5 any
--- @return any
function NetworkSessionEnter(p0, p1, p2, maxPlayers, p4, p5) end

function NetworkSessionForceCancelInvite() end

--- @param p0 integer
--- @param p1 integer
--- @param maxPlayers integer
--- @param p3 boolean
--- @return any
function NetworkSessionFriendMatchmaking(p0, p1, maxPlayers, p3) end

--- @return integer
function NetworkSessionGetInviter() end

--- @param player integer
--- @return any
function NetworkSessionGetKickVote(player) end

--- @param p0 integer
--- @return any
function NetworkSessionGetMatchmakingGroupFree(p0) end

--- @return any
function NetworkSessionGetPrivateSlots() end

--- Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
--- @param p0 integer
--- @param maxPlayers integer
--- @param p2 boolean
--- @return any
function NetworkSessionHost(p0, maxPlayers, p2) end

--- @param p0 integer
--- @param maxPlayers integer
--- @return any
function NetworkSessionHostClosed(p0, maxPlayers) end

--- Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
--- @param p0 integer
--- @param maxPlayers integer
--- @return any
function NetworkSessionHostFriendsOnly(p0, maxPlayers) end

--- Loads up the map that is loaded when beeing in mission creator Player gets placed in a mix between online/offline mode p0 is always 2 in R* scripts. Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
--- @param p0 integer
function NetworkSessionHostSinglePlayer(p0) end

--- @return any
function NetworkSessionIsClosedCrew() end

--- @return any
function NetworkSessionIsClosedFriends() end

--- @return any
function NetworkSessionIsInVoiceSession() end

--- @return any
function NetworkSessionIsPrivate() end

--- @return any
function NetworkSessionIsSolo() end

--- @return any
function NetworkSessionIsVisible() end

--- @return any
function NetworkSessionIsVoiceSessionBusy() end

function NetworkSessionJoinInvite() end

--- Only works as host.
--- @param player integer
function NetworkSessionKickPlayer(player) end

function NetworkSessionLeaveSinglePlayer() end

--- @param toggle boolean
function NetworkSessionMarkVisible(toggle) end

--- @param matchmakingGroup integer
function NetworkSessionSetMatchmakingGroup(matchmakingGroup) end

--- playerTypes: 0 = regular joiner 4 = spectator 8 = unknown
--- @param playerType integer
--- @param playerCount integer
function NetworkSessionSetMatchmakingGroupMax(playerType, playerCount) end

--- @param p0 any
function NetworkSessionSetMatchmakingMentalState(p0) end

--- @param p0 boolean
function NetworkSessionSetMatchmakingPropertyId(p0) end

--- @param p0 boolean
function NetworkSessionValidateJoin(p0) end

--- Only one occurence in the scripts: auto sub_cb43(auto a_0, auto a_1) { if (g_2594CB._f1) { if (NETWORK::_855BC38818F6F684()) { NETWORK::_ABD5E88B8A2D3DB2(&a_0._fB93); g_2594CB._f14/*{13}*/ = a_0._fB93; g_2594CB._f4/*"64"*/ = a_1; return 1; } } return 0; } other: looks like it passes a player in the paramater Contains string "NETWORK_VOICE_CONNECT_TO_PLAYER" in ida
--- @return any
function NetworkSessionVoiceConnectToPlayer() end

function NetworkSessionVoiceHost() end

function NetworkSessionVoiceLeave() end

--- @param p0 boolean
--- @param p1 integer
function NetworkSessionVoiceRespondToRequest(p0, p1) end

--- @param timeout integer
function NetworkSessionVoiceSetTimeout(timeout) end

--- @return any
function NetworkSessionWasInvited() end

--- @param playerCount integer
function NetworkSetActivityPlayerMax(playerCount) end

--- @param toggle boolean
function NetworkSetActivitySpectator(toggle) end

--- @param maxSpectators integer
function NetworkSetActivitySpectatorMax(maxSpectators) end

--- @param toggle boolean
--- @param player integer
function NetworkSetChoiceMigrateOptions(toggle, player) end

--- @return any
--- @return any
function NetworkSetCurrentDataManagerHandle() end

--- @return any
--- @return any
function NetworkSetCurrentlySelectedGamerHandleFromInviteMenu() end

--- NativeDB Introduced: v2699
--- @param missionId string
function NetworkSetCurrentMissionId(missionId) end

--- cpp enum eMpSettingSpawn { MP_SETTING_SPAWN_NULL = 0, MP_SETTING_SPAWN_PROPERTY = 1, MP_SETTING_SPAWN_LAST_POSITION = 2, MP_SETTING_SPAWN_GARAGE = 3, MP_SETTING_SPAWN_RANDOM = 4, MP_SETTING_SPAWN_PRIVATE_YACHT = 5, MP_SETTING_SPAWN_OFFICE = 6, MP_SETTING_SPAWN_CLUBHOUSE = 7, MP_SETTING_SPAWN_IE_WAREHOUSE = 8, MP_SETTING_SPAWN_BUNKER = 9, MP_SETTING_SPAWN_HANGAR = 10, MP_SETTING_SPAWN_DEFUNCT_BASE = 11, MP_SETTING_SPAWN_NIGHTCLUB = 12, MP_SETTING_SPAWN_ARENA_GARAGE = 13, MP_SETTING_SPAWN_CASINO_APARTMENT = 14, MP_SETTING_SPAWN_ARCADE = 15, MP_SETTING_SPAWN_SUBMARINE = 16, MP_SETTING_SPAWN_CAR_MEET = 17, MP_SETTING_SPAWN_AUTO_SHOP = 18, MP_SETTING_SPAWN_FIXER_HQ = 19, MP_SETTING_SPAWN_MAX = 20, }; NativeDB Introduced: v2699
--- @param mpSettingSpawn integer
function NetworkSetCurrentSpawnSetting(mpSettingSpawn) end

--- @param entity integer
--- @param toggle boolean
function NetworkSetEntityCanBlend(entity, toggle) end

--- @param entity integer
--- @param p1 boolean
function NetworkSetEntityGhostedWithOwner(entity, p1) end

--- if set to true other network players can't see it if set to false other network player can see it ========================================= ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it. pc or last gen? ^^ last-gen
--- @param entity integer
--- @param toggle boolean
function NetworkSetEntityInvisibleToNetwork(entity, toggle) end

--- @param toggle boolean
function NetworkSetFriendlyFireOption(toggle) end

--- @return integer
function NetworkSetGamerInvitedToTransition() end

--- @param toggle boolean
function NetworkSetInFreeCamMode(toggle) end

--- @param p0 boolean
--- @param p1 boolean
function NetworkSetInMpCutscene(p0, p1) end

--- @param toggle boolean
--- @param playerPed integer
function NetworkSetInSpectatorMode(toggle, playerPed) end

--- @param toggle boolean
--- @param playerPed integer
--- @param p2 boolean
function NetworkSetInSpectatorModeExtended(toggle, playerPed, p2) end

--- @return integer
function NetworkSetInviteOnCallForInviteMenu() end

--- @param time integer
function NetworkSetLocalPlayerInvincibleTime(time) end

--- @param toggle boolean
function NetworkSetLocalPlayerSyncLookAt(toggle) end

function NetworkSetMissionFinished() end

--- @param toggle boolean
function NetworkSetNoSpectatorChat(toggle) end

--- Sets whether or not an object (created using `CREATE_OBJECT`, or similar) should have its position/rotation synchronized, even if it is a 'static' object (for example, having flag 32 - Static - set in its archetype definition). This has to be called during the same frame the object is created/registered for network, as otherwise it may already have a remote clone created. Once a remote clone is created, changing this value will not have any effect on said clone.
--- @param object integer
--- @param enabled boolean
function NetworkSetObjectForceStaticBlend(object, enabled) end

--- @param toggle boolean
function NetworkSetOverrideSpectatorMode(toggle) end

--- @param toggle boolean
function NetworkSetPlayerIsPassive(toggle) end

--- value must be < 255
--- @param id integer
function NetworkSetPropertyId(id) end

--- On PC it's a nullsub which means it does absolutely nothing. Now that Discord supports Rich Presence, R* might finally implement this for PC. Or maybe in future games like RDR2, GTA VI...
--- @param p0 integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSetRichPresence(p0, p1, p2, p3) end

--- This native does absolutely nothing, just a nullsub
--- @param p0 integer
--- @param textLabel string
function NetworkSetRichPresenceString(p0, textLabel) end

function NetworkSetScriptIsSafeForNetworkGame() end

--- @param toggle boolean
function NetworkSetScriptReadyForEvents(toggle) end

--- @param value number
function NetworkSetTalkerProximity(value) end

--- @param toggle boolean
function NetworkSetTeamOnlyChat(toggle) end

--- @param maxNumMissionParticipants integer
--- @param p1 boolean
--- @param instanceId integer
function NetworkSetThisScriptIsNetworkScript(maxNumMissionParticipants, p1, instanceId) end

--- @param p0 any
function NetworkSetTransitionActivityId(p0) end

--- @return any
function NetworkSetTransitionCreatorHandle() end

--- @param p0 boolean
--- @param p1 boolean
function NetworkSetTransitionVisibilityLock(p0, p1) end

--- Used by Metric VEHICLE_DIST_DRIVEN NativeDB Introduced: v2699
--- @param toggle boolean
function NetworkSetVehicleTestDrive(toggle) end

--- Allow vehicle wheels to be destructible even when the Vehicle entity is invincible. NativeDB Introduced: v1365
--- @param vehicle integer
--- @param toggle boolean
function NetworkSetVehicleWheelsDestructible(vehicle, toggle) end

--- @param toggle boolean
function NetworkSetVoiceActive(toggle) end

--- @param channel integer
function NetworkSetVoiceChannel(channel) end

--- Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
--- @return any
function NetworkShouldShowConnectivityTroubleshooting() end

--- Example: int playerHandle; NETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &playerHandle, 13); NETWORK_SHOW_PROFILE_UI(&playerHandle);
--- @return integer
function NetworkShowProfileUi() end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentAmmoDrop(p0, p1, p2) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentArcadeGame(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentArcadeGeneric(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentArenaJoinSpectator(amount, p1, p2, p3) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentArenaPremium(amount, p1, p2) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentArenaSpectatorBox(amount, p1, p2, p3) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentArrestBail(p0, p1, p2) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentAutoshopModifications(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentAutoshopPropertyUtilityFee(p0, p1, p2, p3) end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBallisticEquipment(amount, p1, p2) end

--- NativeDB Introduced: v323
--- @param p0 integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBankInterest(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentBaService(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v2189
--- @param p0 any
function NetworkSpentBeachPartyGeneric(p0) end

--- @param amount integer
--- @param p1 integer
--- @param matchId string
--- @param p3 boolean
--- @param p4 boolean
function NetworkSpentBetting(amount, p1, matchId, p3, p4) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBikeShopModify(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBoatPickup(p0, p1, p2) end

--- NativeDB Added Parameter 1: int amount NativeDB Added Parameter 2: BOOL p1 NativeDB Added Parameter 3: BOOL p2
--- @return any
function NetworkSpentBoss() end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBounty(p0, p1, p2) end

--- NativeDB Introduced: v1493
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBountyHunterMission(amount, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBullShark(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBusiness(p0, p1, p2, p3) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 string
function NetworkSpentBuyArena(amount, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBuyAutoshop(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBuyBase(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBuyBunker(p0, p1, p2, p3) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
--- @return any
function NetworkSpentBuyCasino(amount, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBuyOfftheradar(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBuyPassiveMode(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentBuyRevealPlayers(p0, p1, p2) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBuyTiltrotor(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentBuyTruck(p0, p1, p2, p3) end

--- @param p0 any
--- @param p2 boolean
--- @param p3 boolean
--- @return any
function NetworkSpentBuyWantedlevel(p0, p2, p3) end

--- @param p0 any
--- @param p2 boolean
--- @param p3 boolean
--- @return any
function NetworkSpentCallPlayer(p0, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 any
function NetworkSpentCarclub(p0, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentCarclubMembership(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentCarclubTakeover(p0, p1, p2, p3) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function NetworkSpentCargoSourcing(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 boolean
--- @param p4 boolean
function NetworkSpentCarwash(p0, p1, p2, p3, p4) end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentCashDrop(amount, p1, p2) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
function NetworkSpentCasinoClubGeneric(p0, p1, p2, p3, p4, p5, p6, p7, p8) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentCasinoGeneric(amount, p1, p2, p3, p4) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
--- @param p10 any
function NetworkSpentCasinoHeist(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentCasinoHeistSkipMission(p0, p1, p2, p3) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 integer
function NetworkSpentCasinoMembership(amount, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentCinema(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentEmployAssassins(p0, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 boolean
function NetworkSpentFromBank(p0, p1, p2, p3) end

--- @param bank integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentFromRockstar(bank, p1, p2) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentGangopsCannon(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentGangopsStartMission(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param type integer
--- @param amount integer
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentGangopsStartStrand(type, amount, p2, p3) end

--- NativeDB Introduced: v1290
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentGangopsTripSkip(amount, p1, p2) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentGunrunningContactService(p0, p1, p2, p3) end

--- NativeDB Introduced: v1180
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentHangarStaffCharges(amount, p1, p2) end

--- NativeDB Introduced: v1180
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentHangarUtilityCharges(amount, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentHeliPickup(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentHireMercenary(p0, p1, p2) end

--- Only used once in a script (am_contact_requests) p1 = 0 p2 = 1
--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentHireMugger(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentHoldups(p0, p1, p2) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentImAbility(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkSpentImportExportRepair(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 any
--- @param p3 boolean
function NetworkSpentInStripclub(p0, p1, p2, p3) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentIslandHeist(p0, p1, p2, p3) end

--- NativeDB Introduced: v323
--- @param amount integer
--- @param matchId string
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentJobSkip(amount, matchId, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentJukebox(p0, p1, p2, p3) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentMakeItRain(amount, p1, p2) end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentMoveYacht(amount, p1, p2) end

--- NativeDB Introduced: v1493
--- @param amount integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentNightclubBarDrink(amount, p1, p2, p3) end

--- NativeDB Introduced: v1493
--- @param player integer
--- @param amount integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentNightclubEntryFee(player, amount, p1, p2, p3) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentNoCops(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentOrderBodyguardVehicle(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentOrderWarehouseVehicle(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentPaServiceDancer(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentPaServiceHeliPickup(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkSpentPayBoss(p0, p1, p2) end

--- @param p0 integer
--- @param p1 integer
--- @param amount integer
function NetworkSpentPayGoon(p0, p1, amount) end

--- According to how I understood this in the freemode script alone, The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model. The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter. The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner"). The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0. The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg, bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
--- @param amount integer
--- @param vehicleModel integer
--- @param notBankrupt boolean
--- @param hasTheMoney boolean
--- @return integer
function NetworkSpentPayVehicleInsurancePremium(amount, vehicleModel, notBankrupt, hasTheMoney) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentPlayerHealthcare(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentProstitutes(p0, p1, p2) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentPurchaseHangar(p0, p1, p2, p3) end

--- @param amount integer
--- @param data any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentPurchaseWarehouse(amount, data, p2, p3) end

--- NativeDB Introduced: v1493
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentRdrhatchetBonus(amount, p1, p2) end

--- NativeDB Introduced: v1493
--- @param amount integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentRehireDj(amount, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkSpentRenameOrganization(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentRequestHeist(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentRequestJob(p0, p1, p2) end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentRobbedByMugger(amount, p1, p2) end

--- NativeDB Introduced: v2699
--- @param p0 boolean
function NetworkSpentSalesDisplay(p0) end

--- NativeDB Introduced: v1604 NativeDB Removed Parameter 4: BOOL p3
--- @param amount integer
--- @param p1 any
--- @param p2 boolean
--- @param p3 boolean
function NetworkSpentSpinTheWheelPayment(amount, p1, p2, p3) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function NetworkSpentSubmarine(p0, p1, p2, p3, p4, p5) end

--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentTaxi(amount, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function NetworkSpentTelescope(p0, p1, p2) end

--- NativeDB Introduced: v1604
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 string
function NetworkSpentUpgradeArena(amount, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeAutoshop(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeBase(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeBunker(p0, p1, p2, p3) end

--- NativeDB Introduced: v1734
--- @param amount integer
--- @param p1 boolean
--- @param p2 boolean
--- @return any
function NetworkSpentUpgradeCasino(amount, p1, p2) end

--- NativeDB Introduced: v1180
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeHangar(p0, p1, p2, p3) end

--- NativeDB Introduced: v2189
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeSub(p0, p1, p2, p3) end

--- NativeDB Introduced: v1290
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeTiltrotor(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function NetworkSpentUpgradeTruck(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
function NetworkSpentVehicleExportMods(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- NativeDB Introduced: v2699
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function NetworkSpentVehicleRequested(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
function NetworkSpentVipUtilityCharges(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @param amount integer
function NetworkSpentWager(p0, p1, amount) end

--- One of the first things it does is get the players ped. Then it calls a function that is used in some tasks and ped based functions. p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS`, in the decompiled scripts.
--- @param player integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param flags integer
--- @return any
function NetworkStartRespawnSearchForPlayer(player, x, y, z, radius, p5, p6, p7, flags) end

--- p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS` in the decompiled scripts.
--- @param player integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param flags integer
--- @return any
function NetworkStartRespawnSearchInAngledAreaForPlayer(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags) end

function NetworkStartSoloTutorialSession() end

--- @param netScene integer
function NetworkStartSynchronisedScene(netScene) end

--- Always returns -1. Seems to be XB1 specific.
--- @param netHandle any
--- @return any
function NetworkStartUserContentPermissionsCheck(netHandle) end

function NetworkStopLoadScene() end

--- @param netScene integer
function NetworkStopSynchronisedScene(netScene) end

--- @param toggle boolean
function NetworkSuppressInvite(toggle) end

--- @param hash integer
--- @param p1 integer
--- @param p2 integer
--- @param state integer
--- @param p4 integer
function NetworkTransitionTrack(hash, p1, p2, state, p4) end

--- Returns defaultValue if the tunable doesn't exist.
--- @param tunableContext integer
--- @param tunableName integer
--- @param defaultValue boolean
--- @return any
function NetworkTryAccessTunableBoolHash(tunableContext, tunableName, defaultValue) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function NetworkUgcNav(p0, p1) end

--- @param entity integer
function NetworkUnregisterNetworkedEntity(entity) end

--- @return any
function NetworkUpdateLoadScene() end

function NetworkUpdatePlayerScars() end

--- Old name: _NETWORK_SET_NETWORK_ID_DYNAMIC
--- @param netID integer
--- @param toggle boolean
function NetworkUseHighPrecisionBlending(netID, toggle) end

--- Implemented only for Trains. NativeDB Introduced: v2372
--- @param vehicle integer
--- @param toggle boolean
function NetworkUseHighPrecisionVehicleBlending(vehicle, toggle) end

--- @param entity integer
function NetworkUseLogarithmicBlendingThisFrame(entity) end

--- `radius` value is usually between `3f` and `7000f` in original 1868 scripts. `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common. Returns True if success, used only 7 times in decompiled scripts of 1868
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param radius number
--- @param p7 integer
--- @return any
function NewLoadSceneStart(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7) end

--- if (!sub_8f12("START LOAD SCENE SAFE")) { if (CUTSCENE::GET_CUTSCENE_TIME() > 4178) { STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2); sub_8e9e("START LOAD SCENE SAFE", 1); } } (Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p4 any
--- @return any
function NewLoadSceneStartSphere(x, y, z, radius, p4) end

function NewLoadSceneStop() end

--- cpp enum eFontBitField { FONT_BIT_STANDARD = 1, FONT_BIT_CURSIVE = 2, FONT_BIT_ROCKSTAR_TAG = 4 FONT_BIT_LEADERBOARD = 8 FONT_BIT_CONDENSED = 16 FONT_BIT_FIXED_WIDTH_NUMBERS = 32 FONT_BIT_CONDENSED_NOT_GAMERNAME = 64 FONT_BIT_PRICEDOWN = 128 };
--- @param fontBitField integer
function NextOnscreenKeyboardResultWillDisplayUsingTheseFonts(fontBitField) end

--- Lets objects spawn online simply do it like this: int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
--- @param object integer
--- @return any
function ObjToNet(object) end

--- This loads the GTA:O dlc map parts (high end garages, apartments). Works in singleplayer. In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
function OnEnterMp() end

--- Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension). The original (and wrong) definition is below: This unload the GTA:O DLC map parts (like high end garages/apartments). Works in singleplayer.
function OnEnterSp() end

--- Toggles a check that prevents attaching (networked) entities to remotely owned peds. This is disabled by default.
--- @param enable boolean
function OnesyncEnableRemoteAttachmentSanitization(enable) end

--- @param vehicle integer
function OpenBombBayDoors(vehicle) end

--- Has a 3rd param (int) since patch [???]. NativeDB Added Parameter 3: int p2
--- @param p0 string
--- @param p1 string
function OpenCommerceStore(p0, p1) end

function OpenOnlinePoliciesMenu() end

--- The patrol route name must starts with "miss_" to be properly created. patrolRoutes found in the b617d scripts: "miss_Ass0", "miss_Ass1", "miss_Ass2", "miss_Ass3", "miss_Ass4", "miss_Ass5", "miss_Ass6", "MISS_PATROL_6", "MISS_PATROL_7", "MISS_PATROL_8", "MISS_PATROL_9", "miss_Tower_01", "miss_Tower_02", "miss_Tower_03", "miss_Tower_04", "miss_Tower_05", "miss_Tower_06", "miss_Tower_07", "miss_Tower_08", "miss_Tower_10"
--- @param patrolRoute string
function OpenPatrolRoute(patrolRoute) end

--- Shows a menu for reporting UGC content.
function OpenReportugcMenu() end

--- ### NOTE If this returns 0 that means it failed to get a sequence id. If you fail to call `CLOSE_SEQUENCE_TASK` and `CLEAR_SEQUENCE_TASK` the sequence system can get stuck in a broken state until you restart your client.
--- @return integer
function OpenSequenceTask() end

--- Uses the `SOCIAL_CLUB2` scaleform.
function OpenSocialClubMenu() end

--- @param p0 any
--- @param p1 any
--- @param vehicleHash integer
function OrderedBossVehicle(p0, p1, vehicleHash) end

--- Max value for p1 is 15.
--- @param cam integer
--- @param p1 integer
--- @param p2 number
--- @param p3 number
function OverrideCamSplineMotionBlur(cam, p1, p2, p3) end

--- @param cam integer
--- @param p1 integer
--- @param p2 number
--- @param p3 number
function OverrideCamSplineVelocity(cam, p1, p2, p3) end

function OverrideInteriorSmokeEnd() end

--- @param level number
function OverrideInteriorSmokeLevel(level) end

--- @param name string
function OverrideInteriorSmokeName(name) end

--- This allows you to override "extended distance scaling" setting. Needs to be called each frame. Max scaling seems to be 200.0, normal is 1.0 See https://gfycat.com/DetailedHauntingIncatern
--- @param scaling number
function OverrideLodscaleThisFrame(scaling) end

--- Sets audio flag "OverrideMicrophoneSettings" Allows the script to ovverride the current microphone settings
--- @param hash integer
--- @param toggle boolean
function OverrideMicrophoneSettings(hash, toggle) end

--- @param p0 integer
--- @param hudColor integer
function OverrideMultiplayerChatColour(p0, hudColor) end

--- @param gxtEntryHash integer
function OverrideMultiplayerChatPrefix(gxtEntryHash) end

--- Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
--- @param ped integer
--- @param txd string
--- @param txn string
--- @return any
function OverridePedBadgeTexture(ped, txd, txn) end

--- Sets whether peds can stand on top of *all* vehicles without falling off. Note this flag is not replicated automatically, you will have to manually do so.
--- @param flag boolean
function OverridePedsCanStandOnTopFlag(flag) end

--- Allows the bypassing of default game behavior that prevents the use of SET_PED_DRIVE_BY_CLIPSET_OVERRIDE in certain scenarios to avoid clipping issues (e.g., when there is more than one Ped in a vehicle). Note: This flag and the overridden clipset are not replicated values and require synchronization through user scripts. Additionally, current game behavior also restricts applying this clipset locally when in first-person mode and will require a temporary workaround.
--- @param flag boolean
function OverridePedsUseDefaultDriveByClipset(flag) end

--- Sets the footstep tuning modes
--- @param overriddenMaterialHash integer
--- @param scriptOverrides boolean
function OverridePlayerGroundMaterial(overriddenMaterialHash, scriptOverrides) end

--- Replaces the `popgroups` (CPopGroupList) meta file with the file in the specified path.
--- @param path string
function OverridePopGroups(path) end

--- Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators. Modified example from "am_imp_exp.c4", line 6406: /* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1)); etc. */ ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash); STREAMING::REQUEST_MODEL(vehicleHash);
--- @param scheduleId integer
--- @param vehicleHash integer
function OverridePopscheduleVehicleModel(scheduleId, vehicleHash) end

--- @param p0 boolean
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
--- @return any
--- @return vector3
--- @return number
function OverrideSaveHouse(p0, p1, p2, p3, p4, p5) end

--- This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect` To clear the override use RESET_TREVOR_RAGE
--- @param voiceEffect string
function OverrideTrevorRage(voiceEffect) end

--- This native allows a scripter to override the current underwater stream. It needs to be called before going into the water It needs to also be called with OVERRIDE_UNDERWATER_STREAM("", false) in order to stop overriding.
--- @param streamName string
--- @param override boolean
function OverrideUnderwaterStream(streamName, override) end

--- Overrides the vehicle's horn hash. When changing this hash on a vehicle, `_GET_VEHICLE_HORN_HASH` will **not** return the 'overwritten' hash. It will still always return the default horn hash (same as `GET_VEHICLE_DEFAULT_HORN`). List of possible hashes (found in decompiled scripts): | signed | unsigned | hex | |--------------:|-------------:|:------------:| | `1604822495` | `1604822495` | `0x5FA7A5DF` | | `-1262465009` | `3032502287` | `0xB4C0500F` | | `-889553789` | `3405413507` | `0xCAFA7C83` | | `-1557943086` | `2737024210` | `0xA323ACD2` | | `-1318696617` | `2976270679` | `0xB1664957` | | `-7740003` | `4287227293` | `0xFF89E59D` | | `-1815146967` | `2479820329` | `0x93CF0E29` | | `-339919356` | `3955047940` | `0xEBBD3E04` |
--- @param vehicle integer
--- @param override boolean
--- @param hornHash integer
function OverrideVehHorn(vehicle, override, hornHash) end

--- Overrides whether or not peds can stand on top of the specified vehicle. Note this flag is not replicated automatically, you will have to manually do so.
--- @param vehicle integer
--- @param can boolean
function OverrideVehiclePedsCanStandOnTopFlag(vehicle, can) end

--- Return the local Participant ID
--- @return any
function ParticipantId() end

--- Return the local Participant ID. This native is exactly the same as 'PARTICIPANT_ID' native.
--- @return any
function ParticipantIdToInt() end

--- Passes keyboard input to scaleform. You must call this native every frame. Once an input occurs, this native will return true and call `SET_PC_KEY` scaleform movie method with the key that has been inputted. The key parameter which is passed to the scaleform can also be: "BACKSPACE", "ENTER" or "\x1b" (Which is ESC). This native is only used in `web_browser.c` as of game build 2944.
--- @param scaleformHandle integer
--- @return any
function PassKeyboardInputToScaleform(scaleformHandle) end

--- REQUEST_STREAMED_TEXTURE_DICT("MPOnMissMarkers", false); *uParam0.f_809 = add_decal(9120, vParam1, vVar4, vVar7, 2f, 2f, to_float(iVar0) / 255f, to_float(iVar1) / 255f, to_float(iVar2) / 255f, 1f, -1f, 1, 0, 0); PATCH_DECAL_DIFFUSE_MAP(9120, "MPOnMissMarkers", "Capture_The_Flag_Base_Icon");
--- @param decalType integer
--- @param textureDict string
--- @param textureName string
function PatchDecalDiffuseMap(decalType, textureDict, textureName) end

--- @param toggle boolean
function PauseClock(toggle) end

--- @param toggle boolean
function PauseDeathArrestRestart(toggle) end

--- Activates the specified frontend menu context. pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'. The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met. The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met. This basically allows you to hide certain menu sections, or things like instructional buttons. See the old description below for more info. *** > Seems to add/set the current menu context (to show/hide buttons?) > Pausemenu.xml: > `<Contexts>*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION</Contexts>` > Code: > > > if (...) { > sub_bbd34(a_0, 0, "FM_BET_HELP"); > UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_available}); // This native > UI::OBJECT_DECAL_TOGGLE(${bet_locked}); > } else { > sub_bbd34(a_0, 0, ""); > UI::OBJECT_DECAL_TOGGLE(${bet_available}); > UI::PAUSE_MENU_ACTIVATE_CONTEXT(${bet_locked}); // This native > } > > > OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision > // Old > Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, "OBJECT_DECAL_TOGGLE" is called prior.
--- @param hash integer
function PauseMenuActivateContext(hash) end

--- Sets current pause menu page/component to the specified value. Available page IDs: https://pastebin.com/qxuhwjPT
--- @param pageId integer
function PauseMenuceptionGoDeeper(pageId) end

--- Forces the Pause Menu to back out of unique pages such as Awards, Unlocks, Key Bindings etc
function PauseMenuceptionTheKick() end

--- @param contextHash integer
function PauseMenuDeactivateContext(contextHash) end

--- Disables the loading spinner in Pause Menu when switching from one header tab to another.
--- @param toggle boolean
function PauseMenuDisableBusyspinner(toggle) end

--- If mouse is hovering on a slot, it returns the slot's index, else it returns -1.
--- @return any
function PauseMenuGetIndexOfMouseHoveredSlot() end

--- If mouse is hovering on a slot, it returns uniqueid of that slot, else it returns -1.
--- @return any
function PauseMenuGetUniqueIdOfMouseHoveredSlot() end

--- @param contextHash integer
--- @return any
function PauseMenuIsContextActive(contextHash) end

--- @return any
function PauseMenuIsContextMenuActive() end

--- Updates instructional buttons in Pause Menu after menu contexts have been toggled. p0 purpose is currently unknown, only 0 is used in scripts.
--- @param p0 integer
function PauseMenuRedrawInstructionalButtons(p0) end

--- Sets a loading icon in the pause menu.
--- @param bVisible boolean
--- @param iColumnID integer
--- @param iSpinnerIndex integer
function PauseMenuSetBusySpinner(bVisible, iColumnID, iSpinnerIndex) end

--- Shows this warning message when trying to switch pause menu header tabs: https://i.imgur.com/8qmfztu.png
--- @param setWarn boolean
function PauseMenuSetWarnOnTabChange(setWarn) end

--- @param vehicle integer
function PausePlaybackRecordedVehicle(vehicle) end

--- To resume the conversation use RESTART_SCRIPTED_CONVERSATION
--- @param finishCurrentLine boolean
function PauseScriptedConversation(finishCurrentLine) end

--- Toggles pause menu map rendering.
--- @param enabled boolean
function PauseToggleFullscreenMap(enabled) end

--- @param ped integer
--- @return any
function PedHasUseScenarioTask(ped) end

--- gets the network id of a ped
--- @param ped integer
--- @return any
function PedToNet(ped) end

--- @param requestData string
--- @param requestDataLength integer
--- @return any
function PerformHttpRequestInternal(requestData, requestDataLength) end

--- @param requestData table
--- @return any
function PerformHttpRequestInternalEx(requestData) end

--- @param interior integer
function PinInteriorInMemory(interior) end

--- @param ropeId integer
--- @param vertex integer
--- @param x number
--- @param y number
--- @param z number
function PinRopeVertex(ropeId, vertex, x, y, z) end

--- @param object integer
--- @return any
function PlaceObjectOnGroundProperly(object) end

--- @param object integer
--- @return any
function PlaceObjectOnGroundProperly_2(object) end

--- @param speechName string
--- @param voiceName string
--- @param x number
--- @param y number
--- @param z number
--- @param speechParam string
function PlayAmbientSpeechFromPositionNative(speechName, voiceName, x, y, z, speechParam) end

--- cpp enum eAudAnimalType { AUD_ANIMAL_NONE = -1, AUD_ANIMAL_BOAR = 0, AUD_ANIMAL_CHICKEN = 1, AUD_ANIMAL_DOG = 2, AUD_ANIMAL_DOG_ROTTWEILER = 3, AUD_ANIMAL_HORSE = 4, AUD_NUM_ANIMALS = 5 }
--- @param pedHandle integer
--- @param animalType integer
--- @param speechName string
function PlayAnimalVocalization(pedHandle, animalType, speechName) end

--- Animations list
--- @param ped integer
--- @param animDict string
--- @param animName string
function PlayAnimOnRunningScenario(ped, animDict, animName) end

--- NativeDB Introduced: v1290
--- @param binkMovie integer
function PlayBinkMovie(binkMovie) end

--- Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter. p9 is unknown at this time. p10 throughout all the X360 Scripts is always 2. Animations list
--- @param cam integer
--- @param animName string
--- @param animDictionary string
--- @param x number
--- @param y number
--- @param z number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param p9 boolean
--- @param p10 integer
--- @return any
function PlayCamAnim(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10) end

--- @param soundName string
--- @param soundsetName string
function PlayDeferredSoundFrontend(soundName, soundsetName) end

--- @param bActive boolean
function PlayEndCreditsMusic(bActive) end

--- delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in. The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values. Animations list
--- @param entity integer
--- @param animName string
--- @param animDict string
--- @param p3 number
--- @param loop boolean
--- @param stayInAnim boolean
--- @param p6 boolean
--- @param delta number
--- @param bitset any
--- @return any
function PlayEntityAnim(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset) end

--- @param p0 any
--- @param p4 number
--- @param p5 number
--- @return any
--- @return any
--- @return any
function PlayEntityScriptedAnim(p0, p4, p5) end

--- Only 1 match. ob_sofa_michael. PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
function PlayerAttachVirtualBound(p0, p1, p2, p3, p4, p5, p6, p7) end

--- 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
function PlayerDetachVirtualBound() end

--- Returns the player index for the local player.
--- @return any
function PlayerId() end

--- Returns the entity handle for the local player ped. Note that this entity handle will change after using commands such as SET_PLAYER_MODEL.
--- @return any
function PlayerPedId() end

--- @param ped integer
--- @param animName string
--- @param animDict string
function PlayFacialAnim(ped, animName, animDict) end

--- Called 38 times in the scripts. There are 5 different audioNames used. One unknown removed below. AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD"); AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01"); AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED"); AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
--- @param audioName string
function PlayMissionCompleteAudio(audioName) end

--- This native had a 4th parameter added in newer game builds `syncOverNetwork` creates a `CPedPlayPainEvent` when set to true, by default this variable is false. You won't be able to use this for clones (remote pedestrians that are not owned by you) or migrating peds if `syncOverNetwork` is set to true; it simply won't execute. The `ped` should also have speech for this to work. cpp enum eAudDamageReason { AUD_DAMAGE_REASON_DEFAULT = 0, AUD_DAMAGE_REASON_FALLING = 1, AUD_DAMAGE_REASON_SUPER_FALLING = 2, AUD_DAMAGE_REASON_SCREAM_PANIC = 3, AUD_DAMAGE_REASON_SCREAM_PANIC_SHORT = 4, AUD_DAMAGE_REASON_SCREAM_SCARED = 5, AUD_DAMAGE_REASON_SCREAM_SHOCKED = 6, AUD_DAMAGE_REASON_SCREAM_TERROR = 7, AUD_DAMAGE_REASON_ON_FIRE = 8, AUD_DAMAGE_REASON_DROWNING = 9, // drowning on the surface of water, after we time out AUD_DAMAGE_REASON_SURFACE_DROWNING = 10, AUD_DAMAGE_REASON_INHALE = 11, AUD_DAMAGE_REASON_EXHALE = 12, AUD_DAMAGE_REASON_POST_FALL_GRUNT = 13, AUD_DAMAGE_REASON_ENTERING_RAGDOLL_DEATH = 14, AUD_DAMAGE_REASON_EXPLOSION = 15, AUD_DAMAGE_REASON_MELEE = 16, AUD_DAMAGE_REASON_SHOVE = 17, AUD_DAMAGE_REASON_WHEEZE = 18, AUD_DAMAGE_REASON_COUGH = 19, AUD_DAMAGE_REASON_TAZER = 20, AUD_DAMAGE_REASON_EXHAUSTION = 21, AUD_DAMAGE_REASON_CLIMB_LARGE = 22, AUD_DAMAGE_REASON_CLIMB_SMALL = 23, AUD_DAMAGE_REASON_JUMP = 24, AUD_DAMAGE_REASON_COWER = 25, AUD_DAMAGE_REASON_WHIMPER = 26, AUD_DAMAGE_REASON_DYING_MOAN = 27, AUD_DAMAGE_REASON_CYCLING_EXHALE = 28, AUD_DAMAGE_REASON_PAIN_RAPIDS = 29, AUD_DAMAGE_REASON_SNEEZE = 30, AUD_DAMAGE_REASON_MELEE_SMALL_GRUNT = 31, AUD_DAMAGE_REASON_MELEE_LARGE_GRUNT = 32, AUD_DAMAGE_REASON_POST_FALL_GRUNT_LOW = 33 }
--- @param ped integer
--- @param damageReason integer
--- @param rawDamage number
function PlayPain(ped, damageReason, rawDamage) end

--- See `PLAY_PED_AMBIENT_SPEECH_NATIVE` for parameter specifications. NativeDB Added Parameter 4: Any p3
--- @param ped integer
--- @param speechName string
--- @param speechParam string
function PlayPedAmbientSpeechAndCloneNative(ped, speechName, speechParam) end

--- Plays ambient speech; see also `PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE`. speechParam: Can be one of the following: SPEECH_PARAMS_STANDARD SPEECH_PARAMS_ALLOW_REPEAT SPEECH_PARAMS_BEAT SPEECH_PARAMS_FORCE SPEECH_PARAMS_FORCE_FRONTEND SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND SPEECH_PARAMS_FORCE_NORMAL SPEECH_PARAMS_FORCE_NORMAL_CLEAR SPEECH_PARAMS_FORCE_NORMAL_CRITICAL SPEECH_PARAMS_FORCE_SHOUTED SPEECH_PARAMS_FORCE_SHOUTED_CLEAR SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL SPEECH_PARAMS_FORCE_PRELOAD_ONLY SPEECH_PARAMS_MEGAPHONE SPEECH_PARAMS_HELI SPEECH_PARAMS_FORCE_MEGAPHONE SPEECH_PARAMS_FORCE_HELI SPEECH_PARAMS_INTERRUPT SPEECH_PARAMS_INTERRUPT_SHOUTED SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL SPEECH_PARAMS_INTERRUPT_NO_FORCE SPEECH_PARAMS_INTERRUPT_FRONTEND SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND SPEECH_PARAMS_ADD_BLIP SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT SPEECH_PARAMS_ADD_BLIP_FORCE SPEECH_PARAMS_ADD_BLIP_SHOUTED SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE SPEECH_PARAMS_ADD_BLIP_INTERRUPT SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL SPEECH_PARAMS_SHOUTED SPEECH_PARAMS_SHOUTED_CLEAR SPEECH_PARAMS_SHOUTED_CRITICAL Note: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL NativeDB Added Parameter 4: Any p3
--- @param ped integer
--- @param speechName string
--- @param speechParam string
function PlayPedAmbientSpeechNative(ped, speechName, speechParam) end

--- This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals. EX (C#): GTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0); The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
--- @param ped integer
--- @param speechName string
--- @param voiceName string
--- @param speechParam string
--- @param p4 boolean
function PlayPedAmbientSpeechWithVoiceNative(ped, speechName, voiceName, speechParam, p4) end

--- All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1); AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
--- @param ringtoneName string
--- @param ped integer
--- @param p2 boolean
function PlayPedRingtone(ringtoneName, ped, p2) end

--- Plays the given police radio message. All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr
--- @param name string
--- @param p1 number
--- @return any
function PlayPoliceReport(name, p1) end

--- All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ
--- @param soundId integer
--- @param audioName string
--- @param audioRef string
--- @param p3 boolean
--- @param p4 any
--- @param p5 boolean
function PlaySound(soundId, audioName, audioRef, p3, p4, p5) end

--- All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW gtaforums.com/topic/795622-audio-for-mods
--- @param soundId integer
--- @param audioName string
--- @param x number
--- @param y number
--- @param z number
--- @param audioRef string
--- @param isNetwork boolean
--- @param range integer
--- @param p8 boolean
function PlaySoundFromCoord(soundId, audioName, x, y, z, audioRef, isNetwork, range, p8) end

--- All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0 No changes made in b678d. gtaforums.com/topic/795622-audio-for-mods
--- @param soundId integer
--- @param audioName string
--- @param entity integer
--- @param audioRef string
--- @param isNetwork boolean
--- @param p5 any
function PlaySoundFromEntity(soundId, audioName, entity, audioRef, isNetwork, p5) end

--- List: https://pastebin.com/DCeRiaLJ All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
--- @param soundId integer
--- @param audioName string
--- @param audioRef string
--- @param p3 boolean
function PlaySoundFrontend(soundId, audioName, audioRef, p3) end

--- @param p0 any
function PlaystatsAcquiredHiddenPackage(p0) end

--- @param p0 any
--- @param p1 any
function PlaystatsActivityDone(p0, p1) end

--- NativeDB Introduced: v1734
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function PlaystatsArcadegame(p0, p1, p2, p3, p4, p5) end

--- NativeDB Introduced: v1604
--- @return any
function PlaystatsArenaWarsEnded() end

--- NativeDB Introduced: v1604
--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
function PlaystatsArenaWarSpectator(p0, p1, p2, p3, p4) end

--- @param id integer
function PlaystatsAwardBadsport(id) end

--- @param amount integer
--- @param type integer
--- @param category integer
function PlaystatsAwardXp(amount, type, category) end

--- @param action string
--- @param value integer
function PlaystatsBackgroundScriptAction(action, value) end

--- @param p0 integer
function PlaystatsBanAlert(p0) end

--- @return any
function PlaystatsBuyContraband() end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function PlaystatsCarclubChallenge(p0, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param p0 any
function PlaystatsCarclubPoints(p0) end

--- NativeDB Introduced: v2372
--- @param p0 any
--- @param p1 any
function PlaystatsCarclubPrize(p0, p1) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoBlackjack(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoBlackjackLight(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoChip(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoInsidetrack(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoInsidetrackLight(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoLuckyseven(p0) end

--- NativeDB Introduced: v1734
--- @return any
function PlaystatsCasinoMissionEnded() end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoRoulette(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoRouletteLight(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoSlotmachine(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoSlotmachineLight(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
--- @param p1 any
function PlaystatsCasinoStoryMissionEnded(p0, p1) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoThreecardpoker(p0) end

--- NativeDB Introduced: v1734
--- @param p0 any
function PlaystatsCasinoThreecardpokerLight(p0) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function PlaystatsChangeMcEmblem(p0, p1, p2, p3, p4) end

--- @param cheat string
function PlaystatsCheatApplied(cheat) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function PlaystatsClothChange(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v1734
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
function PlaystatsCollectible(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function PlaystatsCopyRankIntoNewSlot(p0, p1, p2, p3, p4, p5, p6) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
function PlaystatsCrateCreated(p0, p1, p2) end

--- NativeDB Added Parameter 7: Any p6 NativeDB Added Parameter 8: Any p7
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function PlaystatsCrateDropMissionDone(p0, p1, p2, p3, p4, p5) end

--- NativeDB Introduced: v1290
--- @return any
function PlaystatsDarMissionEnd() end

--- @return any
function PlaystatsDefendContraband() end

--- @return any
function PlaystatsDirectorMode() end

--- NativeDB Introduced: v1493
--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
function PlaystatsDroneUsage(p0, p1, p2) end

--- @return any
function PlaystatsDupeDetection() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function PlaystatsEarnedMcPoints(p0, p1, p2, p3, p4, p5) end

--- NativeDB Introduced: v1290
--- @return any
function PlaystatsEnterSessionPack() end

--- NativeDB Introduced: v2372
--- @param p0 any
function PlaystatsExtraEvent(p0) end

--- @param p0 any
--- @param p1 any
function PlaystatsFriendActivity(p0, p1) end

--- @return any
function PlaystatsGunrunMissionEnded() end

--- NativeDB Introduced: v1290
--- @return any
function PlaystatsH2FmprepEnd() end

--- NativeDB Introduced: v1290
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function PlaystatsH2InstanceEnd(p1, p2, p3) end

--- @param hash integer
--- @param p1 integer
function PlaystatsHeistSaveCheat(hash, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function PlaystatsHoldUpMissionDone(p0, p1, p2, p3) end

--- longest time being ilde?
--- @param time integer
function PlaystatsIdleKick(time) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function PlaystatsImportExportMissionDone(p0, p1, p2, p3) end

--- NativeDB Introduced: v2699
--- @param p0 any
function PlaystatsInventory(p0) end

--- @return any
--- @return any
--- @return any
--- @return any
function PlaystatsJobBend() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function PlaystatsLeaveJobChain(p0, p1, p2, p3, p4) end

--- NativeDB Removed Parameter 4: Any p3 NativeDB Removed Parameter 5: Any p4 NativeDB Removed Parameter 6: Any p5 NativeDB Removed Parameter 7: Any p6
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
function PlaystatsMatchStarted(p0, p1, p2, p3, p4, p5, p6) end

--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function PlaystatsMissionCheckpoint(p1, p2, p3) end

--- @param p1 any
--- @param p2 any
--- @param p3 boolean
--- @param p4 boolean
--- @param p5 boolean
--- @return any
function PlaystatsMissionOver(p1, p2, p3, p4, p5) end

--- @param p1 any
--- @param p2 any
--- @param p3 boolean
--- @return any
function PlaystatsMissionStarted(p1, p2, p3) end

--- @return any
function PlaystatsNpcInvite() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 any
--- @param p1 any
--- @param p2 any
function PlaystatsOddjobDone(p0, p1, p2) end

--- NativeDB Introduced: v1734
--- @param p0 boolean
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
function PlaystatsPassiveMode(p0, p1, p2, p3) end

--- NativeDB Introduced: v1180
--- @param modelHash integer
function PlaystatsPegasaircraft(modelHash) end

--- @return any
function PlaystatsPiMenuHideSettings() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function PlaystatsPropChange(p0, p1, p2, p3) end

--- @param element integer
--- @param item string
function PlaystatsQuickfixTool(element, item) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function PlaystatsRaceCheckpoint(p0, p1, p2, p3, p4) end

--- NativeDB Removed Parameter 5: Any p4 NativeDB Removed Parameter 6: Any p5 NativeDB Removed Parameter 7: Any p6 NativeDB Removed Parameter 8: Any p7 NativeDB Removed Parameter 9: Any p8 NativeDB Removed Parameter 10: Any p9
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
function PlaystatsRaceToPointMissionDone(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- @param name string
--- @param p1 any
--- @param p2 any
--- @param p3 any
function PlaystatsRandomMissionDone(name, p1, p2, p3) end

--- @param rank integer
function PlaystatsRankUp(rank) end

--- @return any
function PlaystatsRecoverContraband() end

--- NativeDB Introduced: v2372
--- @param p0 any
function PlaystatsRobberyFinale(p0) end

--- NativeDB Introduced: v2372
--- @param p0 any
function PlaystatsRobberyPrep(p0) end

--- @param amount integer
--- @param act integer
--- @param player integer
--- @param cm number
function PlaystatsRosBet(amount, act, player, cm) end

--- @return any
function PlaystatsSellContraband() end

--- Sets a byte that is then used in session_host and session_join metrics when hosting or joining a session
--- @param joinType integer
function PlaystatsSetJoinType(joinType) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function PlaystatsShopItem(p0, p1, p2, p3, p4) end

--- NativeDB Introduced: v1180
--- @return any
function PlaystatsSmugMissionEnded() end

--- NativeDB Introduced: v1604
--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
function PlaystatsSpectatorWheelSpin(p0, p1, p2, p3) end

--- @param amount integer
function PlaystatsSpentPiCustomLoadout(amount) end

--- PLAYSTATS_START_INVITE_DESPAWNING?
function PlaystatsStartOfflineMode() end

--- Allows stunts to be triggered and sent as a `CEventNetworkStuntPerformed` event. Event types are shown below: cpp enum eTrackedStuntType { ST_FRONTFLIP = 0, ST_BACKFLIP = 1, ST_SPIN = 2, ST_WHEELIE = 3, ST_STOPPIE = 4, ST_BOWLING_PIN = 5, ST_FOOTBALL = 6, ST_ROLL = 7 };
function PlaystatsStartTrackingStunts() end

--- NativeDB Introduced: v1493
--- @return any
function PlaystatsStoneHatchetEnd() end

--- Disallows CEventNetworkStuntPerformed to be triggered (Resets `PLAYSTATS_START_TRACKING_STUNTS`).
function PlaystatsStopTrackingStunts() end

--- @param weaponHash integer
--- @param componentHashTo integer
--- @param componentHashFrom integer
function PlaystatsWeaponModeChange(weaponHash, componentHashTo, componentHashFrom) end

--- @param scaleformHash integer
--- @param p1 integer
function PlaystatsWebsiteVisited(scaleformHash, p1) end

--- Plays a preloaded stream back from the specified object.
--- @param object integer
function PlayStreamFromObject(object) end

--- Plays a preloaded stream back from the specified ped.
--- @param ped integer
function PlayStreamFromPed(ped) end

--- Plays a preloaded stream back from the specified Vector3.
--- @param x number
--- @param y number
--- @param z number
function PlayStreamFromPosition(x, y, z) end

--- Plays a preloaded stream back from the specified ped vehicle
--- @param vehicle integer
function PlayStreamFromVehicle(vehicle) end

function PlayStreamFrontend() end

--- @param sceneId integer
--- @return any
function PlaySynchronizedAudioEvent(sceneId) end

--- Examples: CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell"); CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash"); Animations list
--- @param camera integer
--- @param scene integer
--- @param animName string
--- @param animDictionary string
--- @return any
function PlaySynchronizedCamAnim(camera, scene, animName, animDictionary) end

--- p4 and p7 are usually 1000.0f. Animations list
--- @param entity integer
--- @param syncedScene integer
--- @param animation string
--- @param propName string
--- @param p4 number
--- @param p5 number
--- @param p6 any
--- @param p7 number
--- @return any
function PlaySynchronizedEntityAnim(entity, syncedScene, animation, propName, p4, p5, p6, p7) end

--- Animations list
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 any
--- @param p5 any
--- @param p8 number
--- @param p9 number
--- @param p10 any
--- @param p11 number
--- @return any
--- @return any
--- @return any
function PlaySynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5, p8, p9, p10, p11) end

--- @param ped integer
--- @param p1 integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
function PlayTennisDiveAnim(ped, p1, p2, p3, p4, p5) end

--- @param ped integer
--- @param animDict string
--- @param animName string
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
function PlayTennisSwingAnim(ped, animDict, animName, p3, p4, p5) end

--- @param vehicle integer
--- @param doorIndex integer
function PlayVehicleDoorCloseSound(vehicle, doorIndex) end

--- @param vehicle integer
--- @param doorIndex integer
function PlayVehicleDoorOpenSound(vehicle, doorIndex) end

--- @param cam integer
--- @param x number
--- @param y number
--- @param z number
function PointCamAtCoord(cam, x, y, z) end

--- Points the camera at the specified entity. Offset works like GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS.
--- @param cam integer
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param p5 boolean
function PointCamAtEntity(cam, entity, offsetX, offsetY, offsetZ, p5) end

--- Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
--- @param cam integer
--- @param ped integer
--- @param boneIndex integer
--- @param x number
--- @param y number
--- @param z number
--- @param p6 boolean
function PointCamAtPedBone(cam, ped, boneIndex, x, y, z, p6) end

--- Detaches the vehicle's windscreen.
--- @param vehicle integer
function PopOutVehicleWindscreen(vehicle) end

function PopTimecycleModifier() end

--- spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
function PopulateNow() end

--- @param base number
--- @param exponent number
--- @return any
function Pow(base, exponent) end

--- This native is used to attribute the SRL that BeginSrl is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SetFocusArea because it loads a specific area of the map which is pretty useful when the camera moves from distant areas. For instance, GTA:O opening cutscene. https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta https://pastebin.com/zd9XYUWY : here is the content of a SRL file opened with codewalker.
--- @param srl string
function PrefetchSrl(srl) end

function PreloadBusyspinner() end

--- Found in the scripts: MISC::_11B56FBBF7224868("CONTRAILS");
--- @param name string
function PreloadCloudHat(name) end

--- Similar to START_SCRIPT_CONVERSATION, except that is starts the conversation off paused. A scripter can then kick off the conversation by calling START_PRELOADED_CONVERSATION. If they want to check that the conversation is done preloading, they can use GET_IS_PRELOADED_CONVERSATION_READY
--- @param displaySubtitles boolean
--- @param addToBriefScreen boolean
--- @param cloneConversation boolean
--- @param interruptible boolean
function PreloadScriptConversation(displaySubtitles, addToBriefScreen, cloneConversation, interruptible) end

--- @param displaySubtitles boolean
--- @param addToBriefScreen boolean
function PreloadScriptPhoneConversation(displaySubtitles, addToBriefScreen) end

--- Request that we preload the required audio bank for a given vehicle model. NativeDB Introduced: v1180
--- @param model integer
function PreloadVehicleAudioBank(model) end

--- @param p0 any
--- @param modType integer
--- @param p2 any
function PreloadVehicleMod(p0, modType, p2) end

--- Prepares any banks required to play the given alarm
--- @param alarmName string
--- @return any
function PrepareAlarm(alarmName) end

--- Prepares the specified music event. Preparing it in advance will preload any required data so that it's ready to play immediately.
--- @param eventName string
--- @return any
function PrepareMusicEvent(eventName) end

--- @param audioEvent string
--- @param startOffsetMs integer
--- @return any
function PrepareSynchronizedAudioEvent(audioEvent, startOffsetMs) end

--- @param sceneId integer
--- @param audioEvent string
--- @return any
function PrepareSynchronizedAudioEventForScene(sceneId, audioEvent) end

--- @param statHash integer
--- @param value number
--- @param p2 integer
function PresenceEventUpdatestatFloat(statHash, value, p2) end

--- @param statHash integer
--- @param value integer
--- @param p2 integer
function PresenceEventUpdatestatInt(statHash, value, p2) end

--- Only one match in the scripts: GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
--- @param timecycleModifierName string
function PresetInteriorAmbientCache(timecycleModifierName) end

--- @param object integer
--- @param p1 boolean
--- @param p2 boolean
function PreventCollectionOfPortablePickup(object, p1, p2) end

--- Prints 'structured trace' data to the server `file descriptor 3` channel. This is not generally useful outside of server monitoring utilities.
--- @param jsonString string
function PrintStructuredTrace(jsonString) end

--- @param p2 string
--- @return any
--- @return integer
--- @return integer
function ProcessCashGift(p2) end

--- Called to update entity attachments.
--- @param entity integer
function ProcessEntityAttachments(entity) end

--- Scope entry for profiler.
--- @param scopeName string
function ProfilerEnterScope(scopeName) end

--- Scope exit for profiler.
function ProfilerExitScope() end

--- Returns true if the profiler is active.
--- @return any
function ProfilerIsRecording() end

--- @param blip integer
function PulseBlip(blip) end

function PushTimecycleModifier() end

--- @param p0 any
--- @return any
function QueryMovieMeshSetState(p0) end

--- @return any
function QueueMissionRepeatLoad() end

--- Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
--- @return any
function QueueMissionRepeatSave() end

--- Queues a scan of all gallery photos. Also see `GET_STATUS_OF_SORTED_LIST_OPERATION`
--- @param scanForSaving boolean
--- @return any
function QueueOperationToCreateSortedListOfPhotos(scanForSaving) end

--- Quits the game.
function QuitGame() end

--- Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
--- @param x number
--- @param y number
--- @param z number
--- @return any
function RaceGalleryAddBlip(x, y, z) end

--- If toggle is true, the map is shown in full screen If toggle is false, the map is shown in normal mode
--- @param toggle boolean
function RaceGalleryFullscreen(toggle) end

--- Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
--- @param spriteId integer
function RaceGalleryNextBlipSprite(spriteId) end

--- Raises the roof on a convertible vehicle, utilizing any available animations for the action. This native is particularly useful for creating a realistic interaction with convertible vehicles by animating the process of raising the roof. You can check if the vehicle has an convertible roof using `IS_VEHICLE_A_CONVERTIBLE`. To lower the convertible roof, you can use `LOWER_CONVERTIBLE_ROOF`. NativeDB Introduced: v323
--- @param vehicle integer
--- @param instantlyRaise boolean
function RaiseConvertibleRoof(vehicle, instantlyRaise) end

--- @param vehicle integer
function RaiseRetractableWheels(vehicle) end

--- Creates a broken glass area
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
function RecordBrokenGlass(x, y, z, radius) end

--- @param ped integer
--- @return any
function RefillAmmoInstantly(ped) end

--- Refreshes the closest shoreline using the nearest road position.
function RefreshClosestOceanShoreline() end

--- @param interiorID integer
function RefreshInterior(interiorID) end

--- @param p0 integer
--- @return any
function RefreshPlayerListStats(p0) end

function RefreshWaypoint() end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Registers a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game.
--- @param factory function
function RegisterArchetypes(factory) end

--- @param name string
--- @return any
function RegisterBoolToSave(name) end

--- Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`. Commands registered using this function can also be executed by resources, using the `ExecuteCommand` native. The restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script). **Example result**: ![](https://i.imgur.com/TaCnG09.png)
--- @param commandName string
--- @param handler function
--- @param restricted boolean
function RegisterCommand(commandName, handler, restricted) end

--- Registers a listener for console output messages.
--- @param listener function
function RegisterConsoleListener(listener) end

--- This can only be run once `CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY` is true, but can be run before `HAS_CUTSCENE_LOADED`
--- @param cutsceneEntity integer
--- @param cutsceneEntName string
--- @param p2 integer
--- @param modelHash integer
--- @param p4 integer
function RegisterEntityForCutscene(cutsceneEntity, cutsceneEntName, p2, modelHash, p4) end

--- @param name string
--- @return any
function RegisterEnumToSave(name) end

--- @param name string
--- @return any
function RegisterFloatToSave(name) end

--- Registers a specified .gfx file as GFx font library. The .gfx file has to be registered with the streamer already.
--- @param fileName string
function RegisterFontFile(fileName) end

--- Registers a specified font name for use with text draw commands.
--- @param fontName string
--- @return any
function RegisterFontId(fontName) end

--- Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
--- @param ped integer
--- @param radius number
function RegisterHatedTargetsAroundPed(ped, radius) end

--- @param name string
--- @return any
function RegisterInt64ToSave(name) end

--- @param name string
--- @return any
function RegisterIntToSave(name) end

--- Registers a key mapping for the current resource. See the related cookbook post for more information. Below you can find some examples on how to create these keybindings as well as the alternate keybinding syntax, which is preceded by `~!` to indicate that it's an alternate key.
--- @param commandString string
--- @param description string
--- @param defaultMapper string
--- @param defaultParameter string
function RegisterKeyMapping(commandString, description, defaultMapper, defaultParameter) end

--- @param name string
--- @param p1 boolean
--- @return any
function RegisterNamedRendertarget(name, p1) end

--- Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
function RegisterNoirScreenEffectThisFrame() end

--- @param callbackType string
--- @param callback function
function RegisterNuiCallback(callbackType, callback) end

--- @param callbackType string
function RegisterNuiCallbackType(callbackType) end

--- Registers a script for any object with a specific model hash. BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
--- @param scriptName string
--- @param modelHash integer
--- @param p2 integer
--- @param activationRange number
--- @param p4 integer
--- @param p5 integer
function RegisterObjectScriptBrain(scriptName, modelHash, p2, activationRange, p4, p5) end

--- gtaforums.com/topic/885580-ped-headshotmugshot-txd/
--- @param ped integer
--- @return any
function RegisterPedheadshot(ped) end

--- @param ped integer
--- @return any
function RegisterPedheadshot3(ped) end

--- Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. **Result of the example code:** <https://i.imgur.com/iHz8ztn.png>
--- @param ped integer
--- @return any
function RegisterPedheadshotTransparent(ped) end

--- @param callbackType string
--- @param callback function
function RegisterRawNuiCallback(callbackType, callback) end

--- An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.
--- @param eventName string
function RegisterResourceAsEventHandler(eventName) end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Registers a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.
--- @param resourceName string
--- @param fileName string
--- @return any
function RegisterResourceAsset(resourceName, fileName) end

--- Registers a build task factory for resources. The function should return an object (msgpack map) with the following fields: { // returns whether the specific resource should be built shouldBuild = func(resourceName: string): bool, // asynchronously start building the specific resource. // call cb when completed build = func(resourceName: string, cb: func(success: bool, status: string): void): void }
--- @param factoryId string
--- @param factoryFn function
function RegisterResourceBuildTaskFactory(factoryId, factoryFn) end

--- Registers a custom rope data with the game. For guidance on what these values should be use common:/data/ropedata.xml as a reference. Returns a rope type which can be passed into ADD_ROPE to use a custom rope design. Once a rope data is registered it can be used indefinitely and you should take caution not too register too many as to exceed the games limit.
--- @param numSections integer
--- @param radius number
--- @param diffuseTextureName string
--- @param normalMapName string
--- @param distanceMappingScale number
--- @param uvScaleX number
--- @param uvScaleY number
--- @param specularFresnel number
--- @param specularFalloff number
--- @param specularIntensity number
--- @param bumpiness number
--- @param color integer
--- @return any
function RegisterRopeData(numSections, radius, diffuseTextureName, normalMapName, distanceMappingScale, uvScaleX, uvScaleY, specularFresnel, specularFalloff, specularIntensity, bumpiness, color) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p5 any
--- @param p6 any
--- @return any
--- @return any
function RegisterSaveHouse(p0, p1, p2, p3, p5, p6) end

--- **This native does absolutely nothing, just a nullsub**
--- @param inChargeOfAudio boolean
function RegisterScriptWithAudio(inChargeOfAudio) end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Registers a dynamic streaming asset from the server with the GTA streaming module system.
--- @param resourceName string
--- @param fileName string
--- @param cacheString string
function RegisterStreamingFileFromCache(resourceName, fileName, cacheString) end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Registers a KVP value as an asset with the GTA streaming module system. This function currently won't work.
--- @param kvsKey string
function RegisterStreamingFileFromKvs(kvsKey) end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Registers a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored. Use `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully.
--- @param registerAs string
--- @param url string
function RegisterStreamingFileFromUrl(registerAs, url) end

--- Only used twice in armenian1.c
function RegisterSynchronisedScriptSpeech() end

--- PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt. l_216 = RECSBRobber1
--- @param ped integer
--- @param target integer
function RegisterTarget(ped, target) end

--- @param name string
--- @return any
function RegisterTextLabelToSave(name) end

--- Seems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE? MISC::_6F7794F28C6B2535(&a_0._f1, "tlPlateText"); MISC::_6F7794F28C6B2535(&a_0._f1C, "tlPlateText_pending"); MISC::_6F7794F28C6B2535(&a_0._f10B, "tlCarAppPlateText"); "tl" prefix sounds like "Text Label"
--- @param name string
--- @return any
function RegisterTextLabelToSave_2(name) end

--- Registers a track junction that when enabled will cause a train on the defined trackIndex, node and direction to change its current track index and begin traveling on the new node
--- @param trackIndex integer
--- @param trackNode integer
--- @param newIndex integer
--- @param newNode integer
--- @param direction boolean
--- @return any
function RegisterTrackJunction(trackIndex, trackNode, newIndex, newNode, direction) end

--- @param scriptName string
--- @param activationRange number
--- @param p2 integer
function RegisterWorldPointScriptBrain(scriptName, activationRange, p2) end

function ReleaseAllCommerceItemImages() end

--- This native has been marked as deprecated internally, please use RELEASE_SCRIPT_AUDIO_BANK instead.
function ReleaseAmbientAudioBank() end

--- NativeDB Introduced: v1290
--- @param binkMovie integer
function ReleaseBinkMovie(binkMovie) end

--- Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below. To disable the keys, use `0xEC9264727EEC0F28`.
function ReleaseControlOfFrontend() end

--- This native has been marked as deprecated internally, please use RELEASE_SCRIPT_AUDIO_BANK instead.
function ReleaseMissionAudioBank() end

--- @param movieMeshSet integer
function ReleaseMovieMeshSet(movieMeshSet) end

--- @param name string
--- @return any
function ReleaseNamedRendertarget(name) end

--- Unloads the specified audioBank
--- @param audioBank string
function ReleaseNamedScriptAudioBank(audioBank) end

--- @param id integer
function ReleasePedheadshotImgUpload(id) end

--- @param ped integer
function ReleasePedPreloadPropData(ped) end

--- @param ped integer
function ReleasePedPreloadVariationData(ped) end

--- @param vehicle integer
function ReleasePreloadMods(vehicle) end

--- Unloads all audio banks requested by this script.
function ReleaseScriptAudioBank() end

--- Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
--- @param entity integer
function ReleaseScriptGuidFromEntity(entity) end

--- This should be called once a sound has finished being manipulated by the script so that its SoundId can be released and re-used.
--- @param soundId integer
function ReleaseSoundId(soundId) end

--- NativeDB Introduced: v323
function ReleaseWeaponAudio() end

--- Forces the map menu to reload.
function ReloadMapMenu() end

--- NativeDB Added Parameter 1: Player player NativeDB Added Parameter 2: int a NativeDB Added Parameter 3: int b
--- @return any
function RemoteCheatDetected() end

--- @param asset string
function RemoveActionModeAsset(asset) end

--- @param zoneId integer
--- @return any
function RemoveAirDefenseZone(zoneId) end

function RemoveAllAirDefenseZones() end

function RemoveAllCoverBlockingAreas() end

--- Parameter `p1` does not seem to be used or referenced in game binaries.\ **Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request.
--- @param ped integer
--- @param p1 boolean
function RemoveAllPedWeapons(ped, p1) end

--- Parameter `p1` does not seem to be used or referenced in game binaries.\ **Note:** When called for networked entities, a `CRemoveAllWeaponsEvent` will be created per request. **This is the server-side RPC native equivalent of the client native REMOVE_ALL_PED_WEAPONS.**
--- @param ped integer
--- @param p1 boolean
function RemoveAllPedWeapons(ped, p1) end

--- Pickup hashes can be found here.
--- @param pickupHash integer
function RemoveAllPickupsOfType(pickupHash) end

--- If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
--- @param weaponHash integer
--- @param explode boolean
function RemoveAllProjectilesOfType(weaponHash, explode) end

--- @param p0 boolean
function RemoveAllShockingEvents(p0) end

--- Used in am_mp_property_ext and am_mp_property_int NativeDB Added Parameter 2: Ped ped
--- @param entity integer
function RemoveAllStickyBombsFromEntity(entity) end

--- @param animDict string
function RemoveAnimDict(animDict) end

--- Unloads the specified animation set. An animation set provides movement animations for a ped. Animation set and clip set are synonymous. See `SET_PED_MOVEMENT_CLIPSET`.
--- @param animSet string
function RemoveAnimSet(animSet) end

--- Removes the blip from your map. **Note:** This function only works on the script that created the blip, if you wish to remove blips created by other scripts, see `SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT`.
--- @param blip integer
--- @return integer
function RemoveBlip(blip) end

--- Removes the blip from your map. **Note:** This function only works on the script that created the blip, if you wish to remove blips created by other scripts, see `SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT`. **This is the server-side RPC native equivalent of the client native REMOVE_BLIP.**
--- @param blip integer
--- @return integer
function RemoveBlip(blip) end

--- Alias for REMOVE_ANIM_SET.
--- @param clipSet string
function RemoveClipSet(clipSet) end

--- @param cookie integer
function RemoveConvarChangeListener(cookie) end

--- @param coverpoint integer
function RemoveCoverPoint(coverpoint) end

--- p0 is the handle returned from _0xFDBF4CDBC07E1706
--- @param p0 integer
function RemoveCurrentRise(p0) end

--- Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
--- @param cutsceneName string
function RemoveCutFile(cutsceneName) end

function RemoveCutscene() end

--- @param decal integer
function RemoveDecal(decal) end

--- @param obj integer
function RemoveDecalsFromObject(obj) end

--- @param obj integer
--- @param x number
--- @param y number
--- @param z number
function RemoveDecalsFromObjectFacing(obj, x, y, z) end

--- @param vehicle integer
function RemoveDecalsFromVehicle(vehicle) end

--- Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
--- @param x number
--- @param y number
--- @param z number
--- @param range number
function RemoveDecalsInRange(x, y, z, range) end

--- @param p0 any
function RemoveDispatchSpawnBlockingArea(p0) end

--- CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates). Only its NetObj removed and flag `*(v2 + 192) |= 8u` (1604 retail) toggled.
--- @param doorHash integer
function RemoveDoorFromSystem(doorHash) end

--- Removes a dry volume from the game session. See CREATE_DRY_VOLUME for more info
--- @param handle integer
function RemoveDryVolume(handle) end

--- Removes an entity from its current mix group.
--- @param entity integer
--- @param fadeOut number
function RemoveEntityFromAudioMixGroup(entity, fadeOut) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function RemoveForcedObject(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 any
function RemoveFromItemset(p0, p1) end

--- @param groupId integer
function RemoveGroup(groupId) end

--- IPL list can be found here.
--- @param iplName string
function RemoveIpl(iplName) end

--- @param modelHash integer
function RemoveModelFromCreatorBudget(modelHash) end

--- p5 requires more research. See also `CREATE_MODEL_HIDE` and `CREATE_MODEL_SWAP`. Network players do not see changes done with this.
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param model integer
--- @param p5 boolean
function RemoveModelHide(x, y, z, radius, model, p5) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param originalModel integer
--- @param newModel integer
--- @param p6 boolean
function RemoveModelSwap(x, y, z, radius, originalModel, newModel, p6) end

--- Removes the gamer tag associated with the provided ID. This does not happen instantly. Use IS_MP_GAMER_TAG_FREE to determine when the ID is free for reuse.
--- @param gamerTagId integer
function RemoveMpGamerTag(gamerTagId) end

function RemoveMultiplayerBankCash() end

--- Removes multiplayer cash hud each frame
function RemoveMultiplayerHudCash() end

function RemoveMultiplayerWalletCash() end

--- @param fxName string
function RemoveNamedPtfxAsset(fxName) end

--- @param p0 any
function RemoveNavmeshBlockingObject(p0) end

function RemoveNavmeshRequiredRegions() end

--- @param object integer
function RemoveObjectHighDetailModel(object) end

--- @param ptfxHandle integer
--- @param p1 boolean
function RemoveParticleFx(ptfxHandle, p1) end

--- @param entity integer
function RemoveParticleFxFromEntity(entity) end

--- @param X number
--- @param Y number
--- @param Z number
--- @param radius number
function RemoveParticleFxInRange(X, Y, Z, radius) end

--- Ped will no longer get angry when you stay near him.
--- @param ped integer
--- @param toggle boolean
function RemovePedDefensiveArea(ped, toggle) end

--- Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed.
--- @param ped integer
--- @return integer
function RemovePedElegantly(ped) end

--- @param ped integer
function RemovePedFromGroup(ped) end

--- Remove a helmet from a ped
--- @param ped integer
--- @param instantly boolean
function RemovePedHelmet(ped, instantly) end

--- @param ped integer
function RemovePedPreferredCoverSet(ped) end

--- @param pickup integer
function RemovePickup(pickup) end

--- Retracts the hook on the cargobob. Note: after you retract it the natives for dropping the hook no longer work
--- @param cargobob integer
function RemovePickUpRopeForCargobob(cargobob) end

--- @param player integer
--- @param p2 boolean
function RemovePlayerHelmet(player, p2) end

--- @param id integer
--- @param p1 boolean
function RemovePopMultiplierArea(id, p1) end

--- @param id integer
--- @param p1 boolean
function RemovePopMultiplierSphere(id, p1) end

--- Found in the b617d scripts, duplicates removed: AUDIO::_B4BBFD9CD8B3922B("V_CARSHOWROOM_PS_WINDOW_UNBROKEN"); AUDIO::_B4BBFD9CD8B3922B("V_CIA_PS_WINDOW_UNBROKEN"); AUDIO::_B4BBFD9CD8B3922B("V_DLC_HEIST_APARTMENT_DOOR_CLOSED"); AUDIO::_B4BBFD9CD8B3922B("V_FINALEBANK_PS_VAULT_INTACT"); AUDIO::_B4BBFD9CD8B3922B("V_MICHAEL_PS_BATHROOM_WITH_WINDOW"); For events like cars driving through windows, allows script to unocclude that window
--- @param portalSettingsName string
function RemovePortalSettingsOverride(portalSettingsName) end

function RemovePtfxAsset() end

--- @param groupHash integer
function RemoveRelationshipGroup(groupHash) end

--- Experimental natives, please do not use in a live environment.
--- @param origTxd string
--- @param origTxn string
function RemoveReplaceTexture(origTxd, origTxn) end

--- @param speedzone integer
--- @return any
function RemoveRoadNodeSpeedZone(speedzone) end

--- @param hudComponent integer
function RemoveScaleformScriptHudMovie(hudComponent) end

--- @param scenarioBlockingIndex integer
--- @param bNetwork boolean
function RemoveScenarioBlockingArea(scenarioBlockingIndex, bNetwork) end

function RemoveScenarioBlockingAreas() end

--- @param fireHandle integer
function RemoveScriptFire(fireHandle) end

--- @param event integer
--- @return any
function RemoveShockingEvent(event) end

function RemoveShockingEventSpawnBlockingAreas() end

--- **Experimental**: This native may be altered or removed in future versions of CitizenFX without warning. Removes a handler for changes to a state bag.
--- @param cookie integer
function RemoveStateBagChangeHandler(cookie) end

--- Appears to remove stealth kill action from memory
--- @param hash integer
--- @param p1 boolean
function RemoveStealthKill(hash, p1) end

--- @param asset string
function RemoveStealthModeAsset(asset) end

--- @param p0 string
function RemoveTcmodifierOverride(p0) end

--- @param modifierName string
function RemoveTimecycleModifier(modifierName) end

--- @param modifierName string
--- @param varName string
function RemoveTimecycleModifierVar(modifierName, varName) end

--- Removes the specified track junction.
--- @param junctionIndex integer
--- @return any
function RemoveTrackJunction(junctionIndex) end

--- @param vehicleAsset integer
function RemoveVehicleAsset(vehicleAsset) end

--- @param p0 any
function RemoveVehicleCombatAvoidanceArea(p0) end

--- @param vehicle integer
--- @param p1 integer
function RemoveVehicleCrewEmblem(vehicle, p1) end

--- @param vehicle integer
function RemoveVehicleHighDetailModel(vehicle) end

--- @param vehicle integer
--- @param modType integer
function RemoveVehicleMod(vehicle, modType) end

--- See REQUEST_VEHICLE_RECORDING
--- @param recording integer
--- @param script string
function RemoveVehicleRecording(recording, script) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param unk any
function RemoveVehiclesFromGeneratorsInArea(x1, y1, z1, x2, y2, z2, unk) end

--- Remove the weird shadow applied by \_SET_VEHICLE_SHADOW_EFFECT
--- @param vehicle integer
function RemoveVehicleShadowEffect(vehicle) end

--- @param vehicle integer
function RemoveVehicleStuckCheck(vehicle) end

--- @param vehicle integer
function RemoveVehicleUpsidedownCheck(vehicle) end

--- See eWindowId declared in `IS_VEHICLE_WINDOW_INTACT`.
--- @param vehicle integer
--- @param windowIndex integer
function RemoveVehicleWindow(vehicle, windowIndex) end

function RemoveWarningMessageListItems() end

--- @param name string
function RemoveWaypointRecording(name) end

--- @param weaponHash integer
function RemoveWeaponAsset(weaponHash) end

--- @param ped integer
--- @param weaponHash integer
--- @param componentHash integer
function RemoveWeaponComponentFromPed(ped, weaponHash, componentHash) end

--- REMOVE_WEAPON_COMPONENT_FROM_PED **This is the server-side RPC native equivalent of the client native REMOVE_WEAPON_COMPONENT_FROM_PED.**
--- @param ped integer
--- @param weaponHash integer
--- @param componentHash integer
function RemoveWeaponComponentFromPed(ped, weaponHash, componentHash) end

--- @param weaponObject integer
--- @param addonHash integer
function RemoveWeaponComponentFromWeaponObject(weaponObject, addonHash) end

--- This native removes a specified weapon from your selected ped. Weapon Hashes: pastebin.com/0wwDZgkF Example: C#: Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA); C++: WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA); The code above removes the knife from the player.
--- @param ped integer
--- @param weaponHash integer
function RemoveWeaponFromPed(ped, weaponHash) end

--- This native removes a specified weapon from your selected ped. Weapon Hashes: pastebin.com/0wwDZgkF Example: C#: Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA); C++: WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA); The code above removes the knife from the player. **This is the server-side RPC native equivalent of the client native REMOVE_WEAPON_FROM_PED.**
--- @param ped integer
--- @param weaponHash integer
function RemoveWeaponFromPed(ped, weaponHash) end

--- draws circular marker at pos -1 = none 0 = red 1 = green 2 = blue 3 = green larger 4 = nothing 5 = green small
--- @param x number
--- @param y number
--- @param z number
--- @param colorIndex integer
function RenderFakePickupGlow(x, y, z, colorIndex) end

--- Renders the camera previously created with CREATE_CAM or CREATE_CAMERA NativeDB Added Parameter 6: Any p5
--- @param render boolean
--- @param ease boolean
--- @param easeTime integer
--- @param easeCoordsAnim boolean
--- @param p4 boolean
function RenderScriptCams(render, ease, easeTime, easeCoordsAnim, p4) end

--- Changes the hud color at a given index (hudColorIndex) by another one (hudColorIndex2). HUD colors can be found here
--- @param hudColorIndex integer
--- @param hudColorIndex2 integer
function ReplaceHudColour(hudColorIndex, hudColorIndex2) end

--- Hud colors can be found here
--- @param hudColorIndex integer
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function ReplaceHudColourWithRgba(hudColorIndex, r, g, b, a) end

--- @return any
function ReplayFreeCamGetMaxRange() end

--- PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1)); From am_armybase.ysc.c4: PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4)); ----- This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7 ----- crimeType: 1: Firearms possession 2: Person running a red light ("5-0-5") 3: Reckless driver 4: Speeding vehicle (a "5-10") 5: Traffic violation (a "5-0-5") 6: Motorcycle rider without a helmet 7: Vehicle theft (a "5-0-3") 8: Grand Theft Auto 9: ??? 10: ??? 11: Assault on a civilian (a "2-40") 12: Assault on an officer 13: Assault with a deadly weapon (a "2-45") 14: Officer shot (a "2-45") 15: Pedestrian struck by a vehicle 16: Officer struck by a vehicle 17: Helicopter down (an "AC"?) 18: Civilian on fire (a "2-40") 19: Officer set on fire (a "10-99") 20: Car on fire 21: Air unit down (an "AC"?) 22: An explosion (a "9-96") 23: A stabbing (a "2-45") (also something else I couldn't understand) 24: Officer stabbed (also something else I couldn't understand) 25: Attack on a vehicle ("MDV"?) 26: Damage to property 27: Suspect threatening officer with a firearm 28: Shots fired 29: ??? 30: ??? 31: ??? 32: ??? 33: ??? 34: A "2-45" 35: ??? 36: A "9-25" 37: ??? 38: ??? 39: ??? 40: ??? 41: ??? 42: ??? 43: Possible disturbance 44: Civilian in need of assistance 45: ??? 46: ???
--- @param player integer
--- @param crimeType integer
--- @param wantedLvlThresh integer
function ReportCrime(player, crimeType, wantedLvlThresh) end

--- @param player integer
function ReportPoliceSpottedPlayer(player) end

--- @param asset string
function RequestActionModeAsset(asset) end

--- @param x number
--- @param y number
--- @param z number
function RequestAdditionalCollisionAtCoord(x, y, z) end

--- Request a gxt into the passed slot.
--- @param gxt string
--- @param slot integer
function RequestAdditionalText(gxt, slot) end

--- @param gxt string
--- @param slot integer
function RequestAdditionalTextForDlc(gxt, slot) end

--- This native is marked as deprecated internally, please use REQUEST_SCRIPT_AUDIO_BANK This native has a new argument on newer game builds: * **playerBits**:
--- @param bankName string
--- @param bOverNetwork boolean
--- @return any
function RequestAmbientAudioBank(bankName, bOverNetwork) end

--- @param animDict string
function RequestAnimDict(animDict) end

--- Starts loading the specified animation set. An animation set provides movement animations for a ped. See `SET_PED_MOVEMENT_CLIPSET`.
--- @param animSet string
function RequestAnimSet(animSet) end

--- @param clipSet string
function RequestClipSet(clipSet) end

--- @param x number
--- @param y number
--- @param z number
function RequestCollisionAtCoord(x, y, z) end

--- @param model integer
function RequestCollisionForModel(model) end

--- @param index integer
--- @return any
function RequestCommerceItemImage(index) end

--- Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
--- @param cutsceneName string
function RequestCutFile(cutsceneName) end

--- @param cutsceneName string
--- @param flags integer
function RequestCutscene(cutsceneName, flags) end

--- playbackFlags: Which scenes should be played. Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
--- @param cutsceneName string
--- @param playbackFlags integer
--- @param flags integer
function RequestCutsceneWithPlaybackList(cutsceneName, playbackFlags, flags) end

--- Exemple: REQUEST_IPL("TrevorsTrailerTrash");
--- @param iplName string
function RequestIpl(iplName) end

--- @param model integer
function RequestMenuPedModel(model) end

--- This native is marked as deprecated internally, please use REQUEST_SCRIPT_AUDIO_BANK This native has a new argument on newer game builds: * **playerBits**:
--- @param bankName string
--- @param bOverNetwork boolean
--- @return any
function RequestMissionAudioBank(bankName, bOverNetwork) end

--- Request a model (archetype) to be loaded for use by the current script. Use SET_MODEL_AS_NO_LONGER_NEEDED when done using the model in script.
--- @param model integer
function RequestModel(model) end

--- STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev"); STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo"); STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts"); STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo"); STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev"); STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
--- @param interior integer
--- @param roomName string
function RequestModelsInRoom(interior, roomName) end

--- From the b678d decompiled scripts: STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow"); STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler"); STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist"); STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
--- @param fxName string
function RequestNamedPtfxAsset(fxName) end

--- Used internally for long range tasks
--- @param x1 number
--- @param y1 number
--- @param x2 number
--- @param y2 number
--- @return any
function RequestPathsPreferAccurateBoundingstruct(x1, y1, x2, y2) end

--- @param id integer
--- @return any
function RequestPedheadshotImgUpload(id) end

--- @param ped integer
--- @param p1 boolean
function RequestPedVehicleVisibilityTracking(ped, p1) end

--- @param ped integer
function RequestPedVisibilityTracking(ped) end

--- Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance will open the browser prompting further purchase details.
--- @param playerSrc integer
--- @param skuId integer
function RequestPlayerCommerceSession(playerSrc, skuId) end

--- maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
function RequestPtfxAsset() end

--- Requests a resource file set with the specified name to be downloaded and mounted on top of the current resource. Resource file sets are specified in `fxmanifest.lua` with the following syntax: lua file_set 'addon_ui' { 'ui/addon/index.html', 'ui/addon/**.js', } This command will trigger a script error if the request failed.
--- @param setName string
--- @return any
function RequestResourceFileSet(setName) end

--- @param scaleformName string
--- @return any
function RequestScaleformMovie(scaleformName) end

--- Same as REQUEST_SCALEFORM_MOVIE, except it seems to fix stretched scaleforms on ultrawide.
--- @param scaleformName string
--- @return any
function RequestScaleformMovieInstance(scaleformName) end

--- Requests a scaleform movie that doesn't render when the game is paused (With `SET_GAME_PAUSED`).
--- @param scaleformName string
--- @return any
function RequestScaleformMovieSkipRenderWhilePaused(scaleformName) end

--- Requests a scaleform movie, which has no widescreen adjustments while rendering (Useful for when your scaleform doesn't fully draw on the screen and borders are visible).
--- @param scaleformName string
--- @return any
function RequestScaleformMovieWithIgnoreSuperWidescreen(scaleformName) end

--- @param hudComponent integer
function RequestScaleformScriptHudMovie(hudComponent) end

--- @param scriptName string
function RequestScript(scriptName) end

--- This native has a new argument on newer game builds: * **playerBits**:
--- @param bankName string
--- @param bOverNetwork boolean
--- @return any
function RequestScriptAudioBank(bankName, bOverNetwork) end

--- formerly _REQUEST_STREAMED_SCRIPT
--- @param scriptHash integer
function RequestScriptWithNameHash(scriptHash) end

--- @param asset string
function RequestStealthModeAsset(asset) end

--- This function can requests texture dictonaries from following RPFs: scaleform_generic.rpf scaleform_minigames.rpf scaleform_minimap.rpf scaleform_web.rpf last param isnt a toggle
--- @param textureDict string
--- @param p1 boolean
function RequestStreamedTextureDict(textureDict, p1) end

--- @param ped integer
--- @param name string
--- @return any
function RequestTaskMoveNetworkStateTransition(ped, name) end

--- Loads the tennis vocalization banks into a couple animal slots.
--- @param opponentPed integer
function RequestTennisBanks(opponentPed) end

--- REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3); vehicle found that have asset's: cargobob3 submersible blazer
--- @param vehicleHash integer
--- @param vehicleAsset integer
function RequestVehicleAsset(vehicleHash, vehicleAsset) end

--- REQUEST_VEHICLE_*
--- @param vehicle integer
function RequestVehicleDashboardScaleformMovie(vehicle) end

--- @param vehicle integer
function RequestVehicleHighDetailModel(vehicle) end

--- Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr. For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module. Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
--- @param recording integer
--- @param script string
function RequestVehicleRecording(recording, script) end

--- For a full list of the points, see here: goo.gl/wIH0vn Max number of loaded recordings is 32.
--- @param name string
function RequestWaypointRecording(name) end

--- Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0. REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
--- @param weaponHash integer
--- @param p1 integer
--- @param p2 integer
function RequestWeaponAsset(weaponHash, p1, p2) end

--- @param weaponObject integer
function RequestWeaponHighDetailModel(weaponObject) end

--- Internal logging string: SCRIPT_RESERVING_LOCAL_OBJECTS NativeDB Introduced: v1290
--- @param amount integer
function ReserveNetworkLocalObjects(amount) end

--- Internal logging string: SCRIPT_RESERVING_LOCAL_PEDS NativeDB Introduced: v1493
--- @param amount integer
function ReserveNetworkLocalPeds(amount) end

--- @param amount integer
function ReserveNetworkLocalVehicles(amount) end

--- @param amount integer
function ReserveNetworkMissionObjects(amount) end

--- @param amount integer
function ReserveNetworkMissionPeds(amount) end

--- @param amount integer
function ReserveNetworkMissionVehicles(amount) end

function ResetAiMeleeWeaponDamageModifier() end

function ResetAiWeaponDamageModifier() end

--- Begins with RESET_*. Next character in the name is either D or E.
function ResetBenchmarkRecording() end

--- Sets the waves intensity back to original (1.0 in most cases).
function ResetDeepOceanScaler() end

function ResetDispatchIdealSpawnDistance() end

function ResetDispatchSpawnBlockingAreas() end

--- NativeDB Introduced: v1868
function ResetDispatchSpawnLocation() end

--- NativeDB Introduced: v323
--- @param p0 any
function ResetDispatchTimeBetweenSpawnAttempts(p0) end

--- Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
function ResetEditorValues() end

--- @param entity integer
function ResetEntityAlpha(entity) end

function ResetExclusiveScenarioGroup() end

--- Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.
function ResetFlyThroughWindscreenParams() end

--- Sets the alpha value used by `_SET_LOCAL_PLAYER_AS_GHOST`, `SET_NETWORK_VEHICLE_AS_GHOST`, and `_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`.
function ResetGhostedEntityAlpha() end

--- @param flagIndex integer
function ResetGlobalActionscriptFlag(flagIndex) end

--- @param groupHandle integer
function ResetGroupFormationDefaultSpacing(groupHandle) end

--- @param id integer
function ResetHudComponentValues(id) end

--- S*
function ResetInputMappingScheme() end

--- Resets mapdata entity transform matrix to its original state. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param mapDataHash integer
--- @param entityInternalIdx integer
--- @return any
function ResetMapdataEntityMatrix(mapDataHash, entityInternalIdx) end

--- Resets values from the zoom level data by index to defaults from mapzoomdata.meta.
--- @param index integer
function ResetMapZoomDataLevel(index) end

--- Resets the effect of SET_PARTICLE_FX_OVERRIDE
--- @param name string
function ResetParticleFxOverride(name) end

function ResetPausedRenderphases() end

--- @param ped integer
function ResetPedAudioFlags(ped) end

--- @param ped integer
function ResetPedInVehicleContext(ped) end

--- Resets the value for the last vehicle driven by the Ped.
--- @param ped integer
function ResetPedLastVehicle(ped) end

--- Restores an overridden ped model personality type to the default value.
--- @param modelHash integer
function ResetPedModelPersonality(modelHash) end

--- @param ped integer
--- @param transitionSpeed number
function ResetPedMovementClipset(ped, transitionSpeed) end

--- @param ped integer
function ResetPedRagdollTimer(ped) end

--- @param ped integer
function ResetPedStrafeClipset(ped) end

--- @param ped integer
function ResetPedVisibleDamage(ped) end

--- @param ped integer
function ResetPedWeaponMovementClipset(ped) end

--- @param player integer
function ResetPlayerArrestState(player) end

--- @param player integer
function ResetPlayerInputGait(player) end

--- @param player integer
function ResetPlayerStamina(player) end

function ResetReticuleValues() end

function ResetScenarioGroupsEnabled() end

function ResetScenarioTypesEnabled() end

--- This function resets the alignment set using `SET_SCRIPT_GFX_ALIGN` and `SET_SCRIPT_GFX_ALIGN_PARAMS` to the default values ('I', 'I'; 0, 0, 0, 0). This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
function ResetScriptGfxAlign() end

--- Clears the override set by OVERRIDE_TREVOR_RAGE
function ResetTrevorRage() end

--- Resets whether or not peds can stand on top of the specified vehicle. Note this flag is not replicated automatically, you will have to manually do so.
--- @param vehicle integer
function ResetVehiclePedsCanStandOnTopFlag(vehicle) end

--- Resets the override for SET_VEHICLE_STARTUP_REV_SOUND
--- @param vehicle integer
function ResetVehicleStartupRevSound(vehicle) end

--- The inner function has a switch on the second parameter. It's the stuck timer index. Here's some pseudo code I wrote for the inner function: void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex) { switch (timerIndex) { case 0: unknownClassInVehicle->FirstStuckTimer = (WORD)0u; case 1: unknownClassInVehicle->SecondStuckTimer = (WORD)0u; case 2: unknownClassInVehicle->ThirdStuckTimer = (WORD)0u; case 3: unknownClassInVehicle->FourthStuckTimer = (WORD)0u; case 4: unknownClassInVehicle->FirstStuckTimer = (WORD)0u; unknownClassInVehicle->SecondStuckTimer = (WORD)0u; unknownClassInVehicle->ThirdStuckTimer = (WORD)0u; unknownClassInVehicle->FourthStuckTimer = (WORD)0u; break; }; }
--- @param vehicle integer
--- @param nullAttributes integer
function ResetVehicleStuckTimer(vehicle, nullAttributes) end

--- @param vehicle integer
--- @param toggle boolean
function ResetVehicleWheels(vehicle, toggle) end

--- @param player integer
function ResetWantedLevelDifficulty(player) end

--- Resets the water to the games default water.xml.
function ResetWater() end

--- NativeDB Introduced: v323
function ResetWorldBoundaryForPlayer() end

--- Changes the current frontend menu to the desired frontend menu version.
--- @param menuHash integer
--- @param highlightedTab integer
function RestartFrontendMenu(menuHash, highlightedTab) end

--- In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows the `Disconnecting from GTA Online` warning screen message and quits the game. After quitting, the game process is started again (as the name implies).
function RestartGame() end

--- Restarts a conversation that was previously paused with PAUSE_SCRIPTED_CONVERSATION
function RestartScriptedConversation() end

--- Adds a percentage to a players stamina
--- @param player integer
--- @param percentage number
function RestorePlayerStamina(player, percentage) end

--- This function will simply bring the dead person back to life. Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times). Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.) Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
--- @param ped integer
function ResurrectPed(ped) end

--- @param p0 integer
--- @return any
function ReturnTwo(p0) end

--- It will revive/cure the injured ped. The condition is ped must not be dead. Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100). This function is well suited there.
--- @param ped integer
function ReviveInjuredPed(ped) end

--- @return any
function RockstarMessageGetString() end

--- See eWindowId declared in `IS_VEHICLE_WINDOW_INTACT`.
--- @param vehicle integer
--- @param windowIndex integer
function RollDownWindow(vehicle, windowIndex) end

--- Roll down all the windows of the vehicle passed through the first parameter.
--- @param vehicle integer
function RollDownWindows(vehicle) end

--- See eWindowId declared in `IS_VEHICLE_WINDOW_INTACT`.
--- @param vehicle integer
--- @param windowIndex integer
function RollUpWindow(vehicle, windowIndex) end

--- @return any
function RopeAreTexturesLoaded() end

--- @param ropeId integer
function RopeConvertToSimple(ropeId) end

--- @param toggle boolean
--- @return integer
function RopeDrawShadowEnabled(toggle) end

--- Forces a rope to a certain length.
--- @param ropeId integer
--- @param length number
function RopeForceLength(ropeId, length) end

--- @param ropeId integer
--- @return any
function RopeGetDistanceBetweenEnds(ropeId) end

--- Loads rope textures for all ropes in the current scene.
function RopeLoadTextures() end

--- Reset a rope to a certain length.
--- @param ropeId integer
--- @param length number
function RopeResetLength(ropeId, length) end

--- @param ropeId integer
--- @param p1 any
function RopeSetUpdateOrder(ropeId, p1) end

--- @param ropeId integer
function RopeSetUpdatePinverts(ropeId) end

--- Unloads rope textures for all ropes in the current scene.
function RopeUnloadTextures() end

--- @param value number
--- @return any
function Round(value) end

--- Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
function SaveBenchmarkRecording() end

--- @param unused integer
--- @return any
function SaveHighQualityPhoto(unused) end

--- @return any
function SaveRecordingClip() end

--- Writes the specified data to a file in the specified resource. Using a length of `-1` will automatically detect the length assuming the data is a C string.
--- @param resourceName string
--- @param fileName string
--- @param data string
--- @param dataLength integer
--- @return any
function SaveResourceFile(resourceName, fileName, data, dataLength) end

--- Pushes a boolean for the Scaleform function onto the stack.
--- @param value boolean
function ScaleformMovieMethodAddParamBool(value) end

--- Pushes a float for the Scaleform function onto the stack.
--- @param value number
function ScaleformMovieMethodAddParamFloat(value) end

--- Pushes an integer for the Scaleform function onto the stack.
--- @param value integer
function ScaleformMovieMethodAddParamInt(value) end

--- Values: 0 - Dialogue Brief 1 - Help Text Brief 2 - Mission Objective Brief
--- @param value integer
function ScaleformMovieMethodAddParamLatestBriefString(value) end

--- Adds a literal string to a scaleform movie method. There doesn't seem to be any difference between this and other `SCALEFORM_MOVIE_METHOD_ADD_PARAM_*_STRING` natives in game code.
--- @param string string
function ScaleformMovieMethodAddParamLiteralString(string) end

--- This method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like "INSTRUCTIONAL_BUTTONS"). When switching with a controller, the icons update and become the controller's icons.
--- @param string string
function ScaleformMovieMethodAddParamPlayerNameString(string) end

--- @param string string
function ScaleformMovieMethodAddParamTextureNameString(string) end

--- Scans the resources in the specified resource root. This function is only available in the 'monitor mode' process and is not available for user resources.
--- @param rootPath string
--- @param callback function
function ScanResourceRoot(rootPath, callback) end

function ScEmailMessageClearRecipList() end

--- @return integer
function ScEmailMessagePushGamerToRecipList() end

--- sfink: from scripts: func_720(socialclub::_0x8416FE4E4629D7D7("bIgnoreCheaterOverride")); func_719(socialclub::_0x8416FE4E4629D7D7("bIgnoreBadSportOverride"));
--- @param name string
--- @return any
function ScGamerdataGetBool(name) end

--- NativeDB Introduced: v323
--- @param name string
--- @return any
--- @return number
function ScGamerdataGetFloat(name) end

--- NativeDB Introduced: v323
--- @param name string
--- @return any
--- @return integer
function ScGamerdataGetInt(name) end

--- Same as HAS_ACHIEVEMENT_BEEN_PASSED
--- @param achievement integer
--- @return any
function ScGetHasAchievementBeenPassed(achievement) end

--- Returns the nickname of the logged-in Rockstar Social Club account.
--- @return any
function ScGetNickname() end

--- Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.
--- @param resourceName string
function ScheduleResourceTick(resourceName) end

--- @param offset integer
--- @param limit integer
function ScInboxGetEmails(offset, limit) end

--- @param msgIndex integer
--- @return any
function ScInboxGetMessageIsReadAtIndex(msgIndex) end

--- @param msgIndex integer
--- @return any
function ScInboxGetMessageTypeAtIndex(msgIndex) end

--- @return any
function ScInboxGetTotalNumMessages() end

--- @param p0 integer
--- @return any
function ScInboxMessageDoApply(p0) end

--- @param index integer
--- @return any
--- @return integer
function ScInboxMessageGetBountyData(index) end

--- @param p0 integer
--- @param p1 string
--- @return any
function ScInboxMessageGetDataBool(p0, p1) end

--- @param p0 integer
--- @param context string
--- @return any
--- @return integer
function ScInboxMessageGetDataInt(p0, context) end

--- @param p0 integer
--- @param context string
--- @param out string
--- @return any
function ScInboxMessageGetDataString(p0, context, out) end

--- @param p0 integer
--- @return any
function ScInboxMessageGetString(p0) end

--- @param p0 any
--- @return any
--- @return any
function ScInboxMessageGetUgcdata(p0) end

--- @param p0 integer
--- @return any
function ScInboxMessagePop(p0) end

--- @return integer
function ScInboxMessagePushGamerToEventRecipList() end

--- @param data string
--- @return any
function ScInboxMessageSendBountyPresenceEvent(data) end

--- @param data string
function ScInboxMessageSendUgcStatUpdateEvent(data) end

--- Social Club native to add license plate for the user
--- @param plateText string
--- @param plateData string
--- @return any
--- @return integer
function ScLicenseplateAdd(plateText, plateData) end

--- Returns true if the add license plate text request is still pending.
--- @param token integer
--- @return any
function ScLicenseplateGetAddIsPending(token) end

--- Returns a status for adding the license plate
--- @param token integer
--- @return any
function ScLicenseplateGetAddStatus(token) end

--- Gets number of plates in the response of the get license plates request. Range: \[0, count) can be used as second argument to \_0x1D4446A62D35B0D0 and \_0x2E89990DDFF670C3
--- @param token integer
--- @return any
function ScLicenseplateGetCount(token) end

--- Checks if the "is valid license plate" request is still pending.
--- @param token integer
--- @return any
function ScLicenseplateGetIsvalidIsPending(token) end

--- Gets the status of the is valid license plate request
--- @param token integer
--- @return any
function ScLicenseplateGetIsvalidStatus(token) end

--- Gets license plate text related to the get license plate info request
--- @param token integer
--- @param plateIndex integer
--- @return any
function ScLicenseplateGetPlate(token, plateIndex) end

--- Gets license plate data related to the get license plate info request
--- @param token integer
--- @param plateIndex integer
--- @return any
function ScLicenseplateGetPlateData(token, plateIndex) end

--- SC native to start a request for if license plate text is valid
--- @param plateText string
--- @return any
--- @return integer
function ScLicenseplateIsvalid(plateText) end

--- Changes the license plate for the user (no insert).
--- @param oldPlateText string
--- @param newPlateText string
--- @param plateData string
--- @return any
function ScLicenseplateSetPlateData(oldPlateText, newPlateText, plateData) end

--- NativeDB Introduced: v323 NativeDB Added Parameter 1: Hash attrHash NativeDB Added Parameter 2: float value
--- @return any
function ScPresenceAttrSetFloat() end

--- @param attrHash integer
--- @param value integer
--- @return any
function ScPresenceAttrSetInt(attrHash, value) end

--- @param attrHash integer
--- @param value string
--- @return any
function ScPresenceAttrSetString(attrHash, value) end

--- Starts a task to check an entered string for profanity on the ROS/Social Club services. See also: `SC_PROFANITY_GET_CHECK_IS_VALID` and `SC_PROFANITY_GET_CHECK_IS_PENDING`.
--- @param string string
--- @return any
--- @return integer
function ScProfanityCheckString(string) end

--- @param string string
--- @return any
--- @return integer
function ScProfanityCheckUgcString(string) end

--- @param token integer
--- @return any
function ScProfanityGetCheckIsPending(token) end

--- @param token integer
--- @return any
function ScProfanityGetCheckIsValid(token) end

--- @param token integer
--- @return any
function ScProfanityGetStringPassed(token) end

--- @param token integer
--- @return any
function ScProfanityGetStringStatus(token) end

--- If bool Toggle = true so the mobile is hide to screen. If bool Toggle = false so the mobile is show to screen.
--- @param toggle boolean
function ScriptIsMovingMobilePhoneOffscreen(toggle) end

--- Overrides wind elevation sounds
--- @param override boolean
--- @param windElevationHashName integer
function ScriptOverridesWindElevation(override, windElevationHashName) end

--- @param player integer
--- @return any
--- @return integer
--- @return integer
function ScriptRaceGetPlayerSplitTime(player) end

--- Initializes a script race in GTA:Online and sets up the helper split time system. NativeDB Introduced: v323
--- @param numCheckpoints integer
--- @param numLaps integer
--- @param numPlayers integer
--- @param localPlayer integer
function ScriptRaceInit(numCheckpoints, numLaps, numPlayers, localPlayer) end

--- Records that a player has successfully passed a checkpoint during a scripted race in GTA:Online. This native should be used after initializing the race with `SCRIPT_RACE_INIT`. NativeDB Introduced: v323
--- @param ped integer
--- @param checkpoint integer
--- @param lap integer
--- @param time integer
function ScriptRacePlayerHitCheckpoint(ped, checkpoint, lap, time) end

function ScriptRaceShutdown() end

--- If the function returns 0, the end of the iteration has been reached.
--- @return any
function ScriptThreadIteratorGetNextThreadId() end

--- Starts a new iteration of the current threads. Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
function ScriptThreadIteratorReset() end

--- NativeDB Introduced: v1290
--- @return any
function SeethroughGetMaxThickness() end

--- NativeDB Introduced: v323
function SeethroughReset() end

--- @param red integer
--- @param green integer
--- @param blue integer
function SeethroughSetColorNear(red, green, blue) end

--- @param distance number
function SeethroughSetFadeEndDistance(distance) end

--- @param distance number
function SeethroughSetFadeStartDistance(distance) end

--- @param index integer
--- @param heatScale number
function SeethroughSetHeatscale(index, heatScale) end

--- @param intensity number
function SeethroughSetHiLightIntensity(intensity) end

--- @param noise number
function SeethroughSetHiLightNoise(noise) end

--- @param thickness number
function SeethroughSetMaxThickness(thickness) end

--- @param amount number
function SeethroughSetNoiseAmountMax(amount) end

--- @param amount number
function SeethroughSetNoiseAmountMin(amount) end

--- Gets the selected entity at the current mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param hitFlags integer
--- @param precise boolean
--- @return any
function SelectEntityAtCursor(hitFlags, precise) end

--- Gets the selected entity at the specified mouse cursor position, and changes the current selection depth. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param fracX number
--- @param fracY number
--- @param hitFlags integer
--- @param precise boolean
--- @return any
function SelectEntityAtPos(fracX, fracY, hitFlags, precise) end

--- Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.
--- @param duiObject integer
--- @param jsonString string
function SendDuiMessage(duiObject, jsonString) end

--- Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.
--- @param duiObject integer
--- @param button string
function SendDuiMouseDown(duiObject, button) end

--- Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.
--- @param duiObject integer
--- @param x integer
--- @param y integer
function SendDuiMouseMove(duiObject, x, y) end

--- Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.
--- @param duiObject integer
--- @param button string
function SendDuiMouseUp(duiObject, button) end

--- Injects a 'mouse wheel' event for a DUI object.
--- @param duiObject integer
--- @param deltaY integer
--- @param deltaX integer
function SendDuiMouseWheel(duiObject, deltaY, deltaX) end

--- Sends a message to the `loadingScreen` NUI frame, which contains the HTML page referenced in `loadscreen` resources.
--- @param jsonString string
--- @return any
function SendLoadingScreenMessage(jsonString) end

--- @param jsonString string
--- @return any
function SendNuiMessage(jsonString) end

--- @param value number
--- @param maxValue number
function SetAbilityBarValue(value, maxValue) end

--- NativeDB Introduced: v1493
--- @param visible boolean
function SetAbilityBarVisibilityInMultiplayer(visible) end

--- For Steam. Does nothing and always returns false in the retail version of the game.
--- @param achievement integer
--- @param progress integer
--- @return any
function SetAchievementProgress(achievement, progress) end

--- @param object integer
--- @param toggle boolean
function SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(object, toggle) end

--- Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
--- @param toggle boolean
function SetAggressiveHorns(toggle) end

--- Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash. NativeDB Introduced: v2189
--- @param type integer
function SetAiGlobalPathNodesType(type) end

--- Adds a cooldown between instances of moving and then aiming. Can be optionally used to hinder 'speedboosting' To turn off, set value to 0
--- @param value integer
function SetAimCooldown(value) end

--- @param modifier number
function SetAiMeleeWeaponDamageModifier(modifier) end

--- This can be between 1.0f - 14.9f You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default. On PC the multiplier can be between 0.0f and 50.0f (inclusive).
--- @param player integer
--- @param multiplier number
function SetAirDragMultiplierForPlayersVehicle(player, multiplier) end

--- @param value number
function SetAiWeaponDamageModifier(value) end

--- @param active boolean
function SetAllLowPriorityVehicleGeneratorsActive(active) end

--- NativeDB Introduced: v1868
--- @param toggle boolean
function SetAllowAbilityBarInMultiplayer(toggle) end

--- **NOTE:** This must be called before you open the text input box.
--- @param allow boolean
function SetAllowCommaOnTextInput(allow) end

--- Toggles a global boolean, name is probably a hash collision but describes its functionality.
--- @param toggle boolean
function SetAllPathsCacheBoundingstruct(toggle) end

--- Sets whether all random peds will run away from the player if they are agitated (threatened) (bool=true), or if they will stand their ground (bool=false).
--- @param player integer
--- @param toggle boolean
function SetAllRandomPedsFlee(player, toggle) end

--- @param player integer
function SetAllRandomPedsFleeThisFrame(player) end

function SetAllVehicleGeneratorsActive() end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p6 boolean
--- @param p7 boolean
function SetAllVehicleGeneratorsActiveInArea(x1, y1, z1, x2, y2, z2, p6, p7) end

--- @param multiplier number
function SetAmbientPedRangeMultiplierThisFrame(multiplier) end

--- @param p0 boolean
function SetAmbientPedsDropMoney(p0) end

--- @param range number
function SetAmbientVehicleRangeMultiplierThisFrame(range) end

--- Sets the specified ped to use a specific voice different to the one associated with their model.
--- @param ped integer
--- @param voiceName string
function SetAmbientVoiceName(ped, voiceName) end

--- Sets the specified ped to use a specific voice different to the one associated with their model.
--- @param ped integer
--- @param hash integer
function SetAmbientVoiceNameHash(ped, hash) end

--- @param zoneListName string
--- @param enabled boolean
--- @param forceUpdate boolean
function SetAmbientZoneListState(zoneListName, enabled, forceUpdate) end

--- @param ambientZone string
--- @param enabled boolean
--- @param forceUpdate boolean
function SetAmbientZoneListStatePersistent(ambientZone, enabled, forceUpdate) end

--- @param zoneName string
--- @param enabled boolean
--- @param forceUpdate boolean
function SetAmbientZoneState(zoneName, enabled, forceUpdate) end

--- @param zoneName string
--- @param enabled boolean
--- @param forceUpdate boolean
function SetAmbientZoneStatePersistent(zoneName, enabled, forceUpdate) end

--- @param ped integer
--- @param weaponHash integer
--- @param ammo integer
--- @return any
function SetAmmoInClip(ped, weaponHash, ammo) end

--- cpp enum eAudAnimalMood { AUD_ANIMAL_MOOD_ANGRY = 0, AUD_ANIMAL_MOOD_PLAYFUL = 1, AUD_ANIMAL_MOOD_NUM_MOODS = 2 }
--- @param animal integer
--- @param mood integer
function SetAnimalMood(animal, mood) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 any
--- @param p3 boolean
function SetAnimLooped(p0, p1, p2, p3) end

--- NativeDB Introduced: v2372
--- @param entity integer
--- @param p1 number
--- @param p2 any
--- @param p3 boolean
function SetAnimPhase(entity, p1, p2, p3) end

--- @param p0 any
--- @param p1 number
--- @param p2 any
--- @param p3 boolean
function SetAnimRate(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 number
--- @param p2 any
--- @param p3 any
--- @param p4 boolean
function SetAnimWeight(p0, p1, p2, p3, p4) end

--- Does not affect weapons, particles, fire/explosions, flashlights or the sun. When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off. Used in Humane Labs Heist for EMP.
--- @param state boolean
function SetArtificialLightsState(state) end

--- If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles. NativeDB Introduced: v2060
--- @param toggle boolean
function SetArtificialLightsStateAffectsVehicles(toggle) end

--- Generic interface to toggle audio functionality, with auto-reset on script termination and support for multiple script threads Flags used in game scripts: | Flag Name | Description of Usage | | ----- | -------- | | ActivateSwitchWheelAudio | | | AllowAmbientSpeechInSlowMo | | | AllowCutsceneOverScreenFade | | | AllowForceRadioAfterRetune | | | AllowPainAndAmbientSpeechToPlayDuringCutscene | | | AllowPlayerAIOnMission | | | AllowPoliceScannerWhenPlayerHasNoControl | | | AllowRadioDuringSwitch | | | AllowRadioOverScreenFade | | | AllowScoreAndRadio | | | AllowScriptedSpeechInSlowMo | | | AvoidMissionCompleteDelay | | | DisableAbortConversationForDeathAndInjury | | | DisableAbortConversationForRagdoll | | | DisableBarks | | | DisableFlightMusic | | | DisableNPCHeadsetSpeechAttenuation | | | DisableReplayScriptStreamRecording | | | EnableHeadsetBeep | | | EnableMissileLockWarningForAllVehicles | | | ForceConversationInterrupt | | | ForceSeamlessRadioSwitch | | | ForceSniperAudio | | | FrontendRadioDisabled | | | HoldMissionCompleteWhenPrepared | | | IsDirectorModeActive | Allows you to play speech infinitely without any pauses like in Director Mode. | | IsPlayerOnMissionForSpeech | | | ListenerReverbDisabled | | | LoadMPData | | | MobileRadioInGame | | | OnlyAllowScriptTriggerPoliceScanner | | | PlayerOnDLCHeist4Island | | | PlayMenuMusic | | | PoliceScannerDisabled | | | ScriptedConvListenerMaySpeak | | | SpeechDucksScore | | | SuppressPlayerScubaBreathing | | | UseQuietSceneSoftVersion | | | WantedMusicDisabled | | | WantedMusicOnMission | | All flag IDs and hashes: ID: 01 | Hash: 0x20A7858F ID: 02 | Hash: 0xA11C2259 ID: 03 | Hash: 0x08DE4700 ID: 04 | Hash: 0x989F652F ID: 05 | Hash: 0x3C9E76BA ID: 06 | Hash: 0xA805FEB0 ID: 07 | Hash: 0x4B94EA26 ID: 08 | Hash: 0x803ACD34 ID: 09 | Hash: 0x7C741226 ID: 10 | Hash: 0x31DB9EBD ID: 11 | Hash: 0xDF386F18 ID: 12 | Hash: 0x669CED42 ID: 13 | Hash: 0x51F22743 ID: 14 | Hash: 0x2052B35C ID: 15 | Hash: 0x071472DC ID: 16 | Hash: 0xF9928BCC ID: 17 | Hash: 0x7ADBDD48 ID: 18 | Hash: 0xA959BA1A ID: 19 | Hash: 0xBBE89B60 ID: 20 | Hash: 0x87A08871 ID: 21 | Hash: 0xED1057CE ID: 22 | Hash: 0x1584AD7A ID: 23 | Hash: 0x8582CFCB ID: 24 | Hash: 0x7E5E2FB0 ID: 25 | Hash: 0xAE4F72DB ID: 26 | Hash: 0x5D16D1FA ID: 27 | Hash: 0x06B2F4B8 ID: 28 | Hash: 0x5D4CDC96 ID: 29 | Hash: 0x8B5A48BA ID: 30 | Hash: 0x98FBD539 ID: 31 | Hash: 0xD8CB0473 ID: 32 | Hash: 0x5CBB4874 ID: 33 | Hash: 0x2E9F93A9 ID: 34 | Hash: 0xD93BEA86 ID: 35 | Hash: 0x92109B7D ID: 36 | Hash: 0xB7EC9E4D ID: 37 | Hash: 0xCABDBB1D ID: 38 | Hash: 0xB3FD4A52 ID: 39 | Hash: 0x370D94E5 ID: 40 | Hash: 0xA0F7938F ID: 41 | Hash: 0xCBE1CE81 ID: 42 | Hash: 0xC27F1271 ID: 43 | Hash: 0x9E3258EB ID: 44 | Hash: 0x551CDA5B ID: 45 | Hash: 0xCB6D663C ID: 46 | Hash: 0x7DACE87F ID: 47 | Hash: 0xF9DE416F ID: 48 | Hash: 0x882E6E9E ID: 49 | Hash: 0x16B447E7 ID: 50 | Hash: 0xBD867739 ID: 51 | Hash: 0xA3A58604 ID: 52 | Hash: 0x7E046BBC ID: 53 | Hash: 0xD95FDB98 ID: 54 | Hash: 0x5842C0ED ID: 55 | Hash: 0x285FECC6 ID: 56 | Hash: 0x9351AC43 ID: 57 | Hash: 0x50032E75 ID: 58 | Hash: 0xAE6D0D59 ID: 59 | Hash: 0xD6351785 ID: 60 | Hash: 0xD25D71BC ID: 61 | Hash: 0x1F7F6423 ID: 62 | Hash: 0xE24C3AA6 ID: 63 | Hash: 0xBFFDD2B7
--- @param flagName string
--- @param toggle boolean
function SetAudioFlag(flagName, toggle) end

--- @param scene string
--- @param variableName string
--- @param value number
function SetAudioSceneVariable(scene, variableName, value) end

--- Set a delay in milliseconds for the audio to be cleaned up when the script finishes.
--- @param timeMs integer
function SetAudioScriptCleanupTime(timeMs) end

--- Needs to be called every frame. cpp enum eAudSpecialEffectMode { kSpecialEffectModeNormal = 0, kSpecialEffectModeUnderwater = 1, kSpecialEffectModeStoned = 2, kSpecialEffectModePauseMenu = 3, kSpecialEffectModeSlowMotion = 4, kSpecialEffectModeDrunkStage01 = 5, kSpecialEffectModeDrunkStage02 = 6, kSpecialEffectModeDrunkStage03 = 7, NUM_AUDSPECIALEFFECTMODE };
--- @param mode integer
function SetAudioSpecialEffectMode(mode) end

--- Sets a floating-point parameter for a submix effect.
--- @param submixId integer
--- @param effectSlot integer
--- @param paramIndex integer
--- @param paramValue number
function SetAudioSubmixEffectParamFloat(submixId, effectSlot, paramIndex, paramValue) end

--- Sets an integer parameter for a submix effect.
--- @param submixId integer
--- @param effectSlot integer
--- @param paramIndex integer
--- @param paramValue integer
function SetAudioSubmixEffectParamInt(submixId, effectSlot, paramIndex, paramValue) end

--- Assigns a RadioFX effect to a submix effect slot. The parameter values for this effect are as follows (backticks are used to represent hashes): | Index | Type | Description | |-|-|-| | \`enabled\` | int | Enables or disables RadioFX on this DSP. | | \`default\` | int | Sets default parameters for the RadioFX DSP and enables it. | | \`freq_low\` | float | | | \`freq_hi\` | float | | | \`fudge\` | float | | | \`rm_mod_freq\` | float | | | \`rm_mix\` | float | | | \`o_freq_lo\` | float | | | \`o_freq_hi\` | float | |
--- @param submixId integer
--- @param effectSlot integer
function SetAudioSubmixEffectRadioFx(submixId, effectSlot) end

--- Sets the volumes for the sound channels in a submix effect. Values can be between 0.0 and 1.0. Channel 5 and channel 6 are not used in voice chat but are believed to be center and LFE channels. Output slot starts at 0 for the first ADD_AUDIO_SUBMIX_OUTPUT call then incremented by 1 on each subsequent call.
--- @param submixId integer
--- @param outputSlot integer
--- @param frontLeftVolume number
--- @param frontRightVolume number
--- @param rearLeftVolume number
--- @param rearRightVolume number
--- @param channel5Volume number
--- @param channel6Volume number
function SetAudioSubmixOutputVolumes(submixId, outputSlot, frontLeftVolume, frontRightVolume, rearLeftVolume, rearRightVolume, channel5Volume, channel6Volume) end

--- Sets the priority for the given vehicle. This is a hint for the audio system as to what LOD the vehicle should use. 'High' priority will bump up the activation range significantly and prevent it from dropping when the vehicle is not within the view frustrum. 'Max' will attempt to keep the vehicle at maximum LOD regardless of how far it is from the listener or what it is currently doing. Be careful with this! There is a hard limit of 5 simulataneous granular cars (including the player) so we are quite limited on the number we can play at once, so setting vehicles to max priority will reduce the number of engines availble for regular NPC vehicles cpp enum eAudVehiclePriority { AUDIO_VEHICLE_PRIORITY_NORMAL = 0, AUDIO_VEHICLE_PRIORITY_MEDIUM = 1, AUDIO_VEHICLE_PRIORITY_MAX = 2, AUDIO_VEHICLE_PRIORITY_HIGH = 3, }
--- @param vehicle integer
--- @param priority integer
function SetAudioVehiclePriority(vehicle, priority) end

--- @param player integer
--- @param toggle boolean
function SetAutoGiveParachuteWhenEnterPlane(player, toggle) end

--- @param player integer
--- @param toggle boolean
function SetAutoGiveScubaGearWhenExitVehicle(player, toggle) end

--- @param toggle boolean
function SetBackfaceculling(toggle) end

--- @param toggle boolean
function SetBackfaceculling(toggle) end

--- @param contentId string
--- @param contentTypeName string
--- @return any
function SetBalanceAddMachine(contentId, contentTypeName) end

--- @param dataCount integer
--- @param contentTypeName string
--- @return any
--- @return any
function SetBalanceAddMachines(dataCount, contentTypeName) end

--- @param player integer
function SetBeastModeActive(player) end

--- Toggles the big minimap state like in GTA:Online. To get the current state of the minimap, use `IS_BIGMAP_ACTIVE`.
--- @param toggleBigMap boolean
--- @param showFullMap boolean
function SetBigmapActive(toggleBigMap, showFullMap) end

--- Only works on bikes, both X and Y work in the -1 - 1 range. X forces the bike to turn left or right (-1, 1) Y forces the bike to lean to the left or to the right (-1, 1) Example with X -1/Y 1 http://i.imgur.com/TgIuAPJ.jpg
--- @param vehicle integer
--- @param x number
--- @param y number
function SetBikeOnStand(vehicle, x, y) end

--- Creates an integer (usually 1) for a BINK movie to be called with other natives. List of all BINK movies (alphabetically ordered) as of b2802
--- @param name string
--- @return any
function SetBinkMovie(name) end

--- Seeks a BINK movie to a specified position.
--- @param binkMovie integer
--- @param progress number
function SetBinkMovieTime(binkMovie, progress) end

--- NativeDB Introduced: v1868
--- @param binkMovie integer
--- @param p1 boolean
function SetBinkMovieUnk_2(binkMovie, p1) end

--- binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale) NativeDB Introduced: v1290
--- @param binkMovie integer
--- @param value number
function SetBinkMovieVolume(binkMovie, value) end

--- NativeDB Introduced: v1290
--- @param binkMovie integer
--- @param shouldSkip boolean
function SetBinkShouldSkip(binkMovie, shouldSkip) end

--- This sets bit [offset] of [address] to on. The offsets used are different bits to be toggled on and off, typically there is only one address used in a script. Example: MISC::SET_BIT(&bitAddress, 1); To check if this bit has been enabled: MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards Please note, this method may assign a value to [address] when used.
--- @param offset integer
--- @return integer
function SetBit(offset) end

--- @param rangeStart integer
--- @param rangeEnd integer
--- @param p3 integer
--- @return integer
function SetBitsInRange(rangeStart, rangeEnd, p3) end

--- Sets alpha-channel for blip color. Example: Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity); HUD::SET_BLIP_COLOUR(blip , 3); HUD::SET_BLIP_ALPHA(blip , 64);
--- @param blip integer
--- @param alpha integer
function SetBlipAlpha(blip, alpha) end

--- Allows the user to set a blip as friendly or enemy based on the toggle.
--- @param blip integer
--- @param toggle boolean
function SetBlipAsFriendly(blip, toggle) end

--- @param blip integer
--- @param toggle boolean
function SetBlipAsMissionCreatorBlip(blip, toggle) end

--- Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
--- @param blip integer
--- @param toggle boolean
function SetBlipAsShortRange(blip, toggle) end

--- @param blip integer
--- @param toggle boolean
function SetBlipBright(blip, toggle) end

--- Examples result: ![](https://i.imgur.com/skY6vAJ.png) **index:** 1 = No distance shown in legend 2 = Distance shown in legend 7 = "Other Players" category, also shows distance in legend 10 = "Property" category 11 = "Owned Property" category Any other value behaves like `index = 1`, `index` wraps around after 255 Blips with categories `7`, `10` or `11` will all show under the specific categories listing in the map legend, regardless of sprite or name. **Legend entries** | index | Legend entry | Label | | --- | --- | --- | | 7 | Other Players | `BLIP_OTHPLYR` | | 10 | Property | `BLIP_PROPCAT` | | 11 | Owned Property | `BLIP_APARTCAT` |
--- @param blip integer
--- @param index integer
function SetBlipCategory(blip, index) end

--- @param blip integer
--- @param color integer
function SetBlipColour(blip, color) end

--- @param blip integer
--- @param posX number
--- @param posY number
--- @param posZ number
function SetBlipCoords(blip, posX, posY, posZ) end

--- **displayId Behaviour** | display ID | Behaviour | |------------ |------------------------------------------------------------- | | 0 | Doesn't show up, ever, anywhere. | | 1 | Doesn't show up, ever, anywhere. | | 2 | Shows on both main map and minimap. (Selectable on map) | | 3 | Shows on main map only. (Selectable on map) | | 4 | Shows on main map only. (Selectable on map) | | 5 | Shows on minimap only. | | 6 | Shows on both main map and minimap. (Selectable on map) | | 7 | Doesn't show up, ever, anywhere. | | 8 | Shows on both main map and minimap. (Not selectable on map) | | 9 | Shows on minimap only. | | 10 | Shows on both main map and minimap. (Not selectable on map) | Anything higher than 10 seems to be exactly the same as 10. Rockstar seem to only use 0, 2, 3, 4, 5 and 8 in the decompiled scripts.
--- @param blip integer
--- @param displayId integer
function SetBlipDisplay(blip, displayId) end

--- Must be toggled before being queued for animation
--- @param blip integer
--- @param toggle boolean
function SetBlipDisplayIndicatorOnBlip(blip, toggle) end

--- @param blip integer
--- @param opacity integer
--- @param duration integer
function SetBlipFade(blip, opacity, duration) end

--- @param blip integer
--- @param toggle boolean
function SetBlipFlashes(blip, toggle) end

--- @param blip integer
--- @param toggle boolean
function SetBlipFlashesAlternate(blip, toggle) end

--- Sets the interval in milliseconds before flashing the blip.
--- @param blip integer
--- @param interval integer
function SetBlipFlashInterval(blip, interval) end

--- Flashes blip for time in milliseconds before stopping.
--- @param blip integer
--- @param duration integer
function SetBlipFlashTimer(blip, duration) end

--- @param blip integer
--- @param toggle boolean
function SetBlipHiddenOnLegend(blip, toggle) end

--- @param blip integer
--- @param toggle boolean
function SetBlipHighDetail(blip, toggle) end

--- Doesn't work if the label text of gxtEntry is >= 80.
--- @param blip integer
--- @param gxtEntry string
function SetBlipNameFromTextFile(blip, gxtEntry) end

--- @param blip integer
--- @param player integer
function SetBlipNameToPlayerName(blip, player) end

--- See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
--- @param blip integer
--- @param priority integer
function SetBlipPriority(blip, priority) end

--- After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
--- @param blip integer
--- @param rotation integer
function SetBlipRotation(blip, rotation) end

--- Enable / disable showing route for the Blip-object.
--- @param blip integer
--- @param enabled boolean
function SetBlipRoute(blip, enabled) end

--- @param blip integer
--- @param colour integer
function SetBlipRouteColour(blip, colour) end

--- @param blip integer
--- @param scale number
function SetBlipScale(blip, scale) end

--- See https://imgur.com/a/lLkEsMN NativeDB Introduced: v1734
--- @param blip integer
--- @param xScale number
--- @param yScale number
function SetBlipScaleTransformation(blip, xScale, yScale) end

--- @param blip integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetBlipSecondaryColour(blip, r, g, b) end

--- NativeDB Added Parameter 3: Any p2
--- @param blip integer
--- @param toggle boolean
function SetBlipShowCone(blip, toggle) end

--- Makes a blip go small when off the minimap. SET_BLIP_AS_*
--- @param blip integer
--- @param toggle boolean
function SetBlipShrink(blip, toggle) end

--- Sets the displayed sprite for a specific blip. There's a list of sprites on the FiveM documentation site.
--- @param blip integer
--- @param spriteId integer
function SetBlipSprite(blip, spriteId) end

--- Sets the displayed sprite for a specific blip. There's a list of sprites on the FiveM documentation site. **This is the server-side RPC native equivalent of the client native SET_BLIP_SPRITE.**
--- @param blip integer
--- @param spriteId integer
function SetBlipSprite(blip, spriteId) end

--- Does not require whole number/integer rotations.
--- @param blip integer
--- @param heading number
function SetBlipSquaredRotation(blip, heading) end

--- Prevents ambient peds from dropping their weapons for the current frame. NativeDB Introduced: v3258
function SetBlockAmbientPedsFromDroppingWeaponsThisFrame() end

--- works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
--- @param ped integer
--- @param toggle boolean
function SetBlockingOfNonTemporaryEvents(ped, toggle) end

--- Sets the anchor state for a boat. NativeDB Introduced: v323 **Note**: You might want to check if you can use your anchor before with CAN_ANCHOR_BOAT_HERE.
--- @param boat integer
--- @param toggle boolean
function SetBoatAnchor(boat, toggle) end

--- Sets the boat boom position for the `TR3` trailer. Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat. To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO.
--- @param vehicle integer
--- @param ratio number
function SetBoatBoomPositionRatio(vehicle, ratio) end

--- @param vehicle integer
--- @param p1 boolean
function SetBoatDisableAvoidance(vehicle, p1) end

--- @param vehicle integer
function SetBoatIsSinking(vehicle) end

--- Sets the distance from the player at which anchored boats switch between high and low LOD (Level of Detail) buoyancy mode. NativeDB Introduced: v323
--- @param boat integer
--- @param value number
function SetBoatLowLodAnchorDistance(boat, value) end

--- Sets whether a boat should remain anchored even when a player is driving it. **Note**: This native is always used with SET_BOAT_ANCHOR. NativeDB Introduced: v323
--- @param boat integer
--- @param toggle boolean
function SetBoatRemainsAnchoredWhilePlayerIsDriver(boat, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetBoatSinksWhenWrecked(vehicle, toggle) end

--- @param waterQuad integer
--- @param minX integer
--- @param minY integer
--- @param maxX integer
--- @param maxY integer
--- @return any
function SetCalmingQuadBounds(waterQuad, minX, minY, maxX, maxY) end

--- @param calmingQuad integer
--- @param dampening number
--- @return any
function SetCalmingQuadDampening(calmingQuad, dampening) end

--- Set camera as active/inactive.
--- @param cam integer
--- @param active boolean
function SetCamActive(cam, active) end

--- Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
--- @param camTo integer
--- @param camFrom integer
--- @param duration integer
--- @param easeLocation integer
--- @param easeRotation integer
function SetCamActiveWithInterp(camTo, camFrom, duration, easeLocation, easeRotation) end

--- Allows you to aim and shoot at the direction the camera is facing.
--- @param cam integer
--- @param toggle boolean
function SetCamAffectsAiming(cam, toggle) end

--- @param cam integer
--- @param phase number
function SetCamAnimCurrentPhase(cam, phase) end

--- @param vehicle integer
--- @param toggle boolean
function SetCamberedWheelsDisabled(vehicle, toggle) end

--- Makes the minimap follow a scripted camera's rotation instead of the gameplay cam.
--- @param cam integer
--- @param toggle boolean
function SetCamControlsMiniMapHeading(cam, toggle) end

--- Sets the position of the cam.
--- @param cam integer
--- @param posX number
--- @param posY number
--- @param posZ number
function SetCamCoord(cam, posX, posY, posZ) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param camera integer
--- @param name string
function SetCamDebugName(camera, name) end

--- This native has its name defined inside its codE
--- @param camera integer
--- @param p1 number
function SetCamDofFnumberOfLens(camera, p1) end

--- Native name labeled within its code
--- @param camera integer
--- @param multiplier number
function SetCamDofFocalLengthMultiplier(camera, multiplier) end

--- This native has a name defined inside its code
--- @param camera integer
--- @param p1 number
function SetCamDofFocusDistanceBias(camera, p1) end

--- This native has a name defined inside its code
--- @param camera integer
--- @param p1 number
function SetCamDofMaxNearInFocusDistance(camera, p1) end

--- This native has a name defined inside its code
--- @param camera integer
--- @param p1 number
function SetCamDofMaxNearInFocusDistanceBlendLevel(camera, p1) end

--- @param cam integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
function SetCamDofPlanes(cam, p1, p2, p3, p4) end

--- Specifies how much the DoF effect should be applied (Set using `SET_CAM_NEAR_DOF`, `SET_CAM_FAR_DOF`, etc.)
--- @param cam integer
--- @param dofStrength number
function SetCamDofStrength(cam, dofStrength) end

--- if p0 is 0, effect is cancelled if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled. if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
--- @param p0 integer
function SetCamEffect(p0) end

--- @param cam integer
--- @param farClip number
function SetCamFarClip(cam, farClip) end

--- Specifies when the camera should stop being in focus. Can be used together with `SET_USE_HI_DOF`, `SET_CAM_NEAR_DOF`, `SET_CAM_USE_SHALLOW_DOF_MODE`, `SET_CAM_DOF_STRENGTH` and other DoF related natives. ### Usage Example A usage example for this native can be found in the following native documentation: `SET_CAM_DOF_STRENGTH`.
--- @param cam integer
--- @param farDOF number
function SetCamFarDof(cam, farDOF) end

--- Adjusts the field of view (FOV) for a specified camera, allowing for a wider or narrower perspective of the game world. The field of view is measured in degrees and affects how much of the game world is visible at any given moment through the camera. NativeDB Introduced: v323
--- @param cam integer
--- @param fieldOfView number
function SetCamFov(cam, fieldOfView) end

--- The native seems to only be called once. The native is used as so, CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4)); In the exile1 script.
--- @param cam integer
--- @param p1 boolean
function SetCamInheritRollVehicle(cam, p1) end

--- @param cam integer
--- @param strength number
function SetCamMotionBlurStrength(cam, strength) end

--- @param cam integer
--- @param nearClip number
function SetCamNearClip(cam, nearClip) end

--- Specifies when the camera should start being in focus. Can be used together with `SET_USE_HI_DOF`, `SET_CAM_FAR_DOF`, `SET_CAM_USE_SHALLOW_DOF_MODE`, `SET_CAM_DOF_STRENGTH` and other DoF related natives. ### Usage Example A usage example for this native can be found in the following native documentation: `SET_CAM_DOF_STRENGTH`.
--- @param cam integer
--- @param nearDOF number
function SetCamNearDof(cam, nearDOF) end

--- @param cam integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param fieldOfView number
--- @param transitionSpeed integer
--- @param p9 integer
--- @param p10 integer
--- @param rotationOrder integer
function SetCamParams(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, transitionSpeed, p9, p10, rotationOrder) end

--- Sets the rotation of the camera.
--- @param cam integer
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param rotationOrder integer
function SetCamRot(cam, rotX, rotY, rotZ, rotationOrder) end

--- @param cam integer
--- @param amplitude number
function SetCamShakeAmplitude(cam, amplitude) end

--- I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
--- @param cam integer
--- @param timeDuration integer
function SetCamSplineDuration(cam, timeDuration) end

--- @param cam integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 number
function SetCamSplineNodeEase(cam, p1, p2, p3) end

--- @param cam integer
--- @param p1 integer
--- @param flags integer
function SetCamSplineNodeExtraFlags(cam, p1, flags) end

--- @param cam integer
--- @param p1 integer
--- @param scale number
function SetCamSplineNodeVelocityScale(cam, p1, scale) end

--- @param cam integer
--- @param p1 number
function SetCamSplinePhase(cam, p1) end

--- Sets the smoothing style for a DEFAULT_SPLINE_CAMERA Ranges from 0 to 3 in rockstar scripts although there are actually 26 0: No lead-in or lead-out smoothing 1: Smooth lead-in 2: Smooth lead-out 3: Both lead-in and lead-out are smoothed 4-6: Longer speed up, lead-in, lead-out, and both in order as above. 6: see above, but missed a node in testing(?) 7: Smoothed lead-in, longer smoothed lead-out 8: Longer lead-in and lead-out than 6, didn't drop node 9: Constant acceleration 10: Constant deceleration. Dropped 2 nodes in testing. 11: Same as 0 12: 10 but slower lead-in, reaches end node less early 13: Extremely close to 3, slightly longer lead-in/lead-out 14: Constant acceleration, dropped last 2 nodes in testing and halted (?) 15: Very similar to 10, did not drop any nodes. 16: Long lead-in, dropped 2 nodes in testing, very long leadout. 17: Constant acceleration, slower speed-up than 9 18: Same as 17 is to 9, slightly longer lead-out, lingers at end node 19: Very long lead in and out 20: Very long, gradual lead-in acceleration at start, gets extremely fast 21: Same as 20 but for constant deceleration 22: 20 and 21 combined, long linger at end node. Dropped 2 nodes in testing 23: Constant acceleration, doesn't complete path before it stops 24: Same as 23 but with constant deceleration, but completes path 25: 23 and 24 combined, insanely fast at middle. 26: No noticable lead-in, misses last 2 nodes in testing 27+: Alternates between 0 and 26 The above is documented and graphed at Spline Cam Interp Graphs Using 1-3 will result in misalignment from the passed durations for the spline nodes, the overall duration will remain but other nodes will be shortened if smoothing anything. Graph below demonstrates interpolation between 0-1000 and back 10 times. ![](https://i.imgur.com/cixWh7m.png) ## Parameters * **cam**: The DEFAULT_SPLINE_CAMERA to apply the smoothing to * **smoothingStyle**: 0 to 3, 0 no additional smoothing, 1 smooth lead-in, 2 smooth lead-out, 3 smooth lead-in & lead-out
--- @param cam integer
--- @param smoothingStyle integer
function SetCamSplineSmoothingStyle(cam, smoothingStyle) end

--- Enables or disables the usage of a shallow DOF. Needs to be set to true to use `SET_CAM_NEAR_DOF`, `SET_CAM_FAR_DOF`, etc. Doesn't need to be called every tick. ### Usage Example A usage example for this native can be found in the following native documentation: `SET_CAM_DOF_STRENGTH`.
--- @param cam integer
--- @param toggle boolean
function SetCamUseShallowDofMode(cam, toggle) end

--- @param context integer
--- @param viewMode integer
function SetCamViewModeForContext(context, viewMode) end

--- Setting ped to true allows the ped to shoot "friendlies". p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false. p1 = false & p2 = false for unable to aim at. p1 = true & p2 = false for able to aim at.
--- @param ped integer
--- @param toggle boolean
--- @param p2 boolean
function SetCanAttackFriendly(ped, toggle, p2) end

--- @param entity integer
--- @param toggle boolean
function SetCanAutoVaultOnEntity(entity, toggle) end

--- @param entity integer
--- @param toggle boolean
function SetCanClimbOnEntity(entity, toggle) end

--- Does the same as `_SET_CAN_PED_SELECT_WEAPON` except for all weapons.
--- @param ped integer
--- @param toggle boolean
function SetCanPedEquipAllWeapons(ped, toggle) end

--- Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
--- @param ped integer
--- @param weaponHash integer
--- @param toggle boolean
function SetCanPedEquipWeapon(ped, weaponHash, toggle) end

--- Hardcoded to not work in multiplayer.
--- @param vehicle integer
--- @param state boolean
function SetCanResprayVehicle(vehicle, state) end

--- @param vehicle integer
function SetCarBootOpen(vehicle) end

--- Prevents a specified entity from being detached from a Cargobob, even in the event of collisions.
--- @param cargobob integer
--- @param entity integer
function SetCargobobExcludeFromPickupEntity(cargobob, entity) end

--- Stops cargobob from being able to detach the attached vehicle.
--- @param cargobob integer
--- @param toggle boolean
function SetCargobobForceDontDetachVehicle(cargobob, toggle) end

--- Stops the cargobob from being able to attach any vehicle NativeDB Introduced: v1180
--- @param vehicle integer
--- @param toggle boolean
function SetCargobobHookCanAttach(vehicle, toggle) end

--- Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
--- @param cargobob integer
--- @param isActive boolean
function SetCargobobPickupMagnetActive(cargobob, isActive) end

--- @param vehicle integer
--- @param p1 number
function SetCargobobPickupMagnetEffectRadius(vehicle, p1) end

--- @param vehicle integer
--- @param p1 number
function SetCargobobPickupMagnetFalloff(vehicle, p1) end

--- @param cargobob integer
--- @param p1 number
function SetCargobobPickupMagnetPullRopeLength(cargobob, p1) end

--- @param cargobob integer
--- @param p1 number
function SetCargobobPickupMagnetPullStrength(cargobob, p1) end

--- @param cargobob integer
--- @param p1 number
function SetCargobobPickupMagnetReducedFalloff(cargobob, p1) end

--- @param cargobob integer
--- @param vehicle integer
function SetCargobobPickupMagnetReducedStrength(cargobob, vehicle) end

--- @param cargobob integer
--- @param strength number
function SetCargobobPickupMagnetStrength(cargobob, strength) end

--- @param cargobob integer
--- @param p1 number
function SetCargobobPickupRopeDampingMultiplier(cargobob, p1) end

--- @param vehicle integer
--- @param state integer
function SetCargobobPickupRopeType(vehicle, state) end

--- Something to do with "high speed bump severity"? if (!sub_87a46("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER")) { VEHICLE::_84FD40F56075E816(0.0); sub_8795b("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER", 1); }
--- @param multiplier number
function SetCarHighSpeedBumpSeverityMultiplier(multiplier) end

--- @param entity integer
function SetCgAtBoundcenter(entity) end

--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
function SetCgoffset(entity, x, y, z) end

--- Sets the cylinder height of the checkpoint. Parameters: * nearHeight - The height of the checkpoint when inside of the radius. * farHeight - The height of the checkpoint when outside of the radius. * radius - The radius of the checkpoint.
--- @param checkpoint integer
--- @param nearHeight number
--- @param farHeight number
--- @param radius number
function SetCheckpointCylinderHeight(checkpoint, nearHeight, farHeight, radius) end

--- This multiplies the height of the icon inside a checkpoint with the default height of about 2 units above the checkpoint's coordinates.
--- @param checkpoint integer
--- @param height_multiplier number
function SetCheckpointIconHeight(checkpoint, height_multiplier) end

--- @param checkpoint integer
--- @param scale number
function SetCheckpointIconScale(checkpoint, scale) end

--- Sets the checkpoint color.
--- @param checkpoint integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function SetCheckpointRgba(checkpoint, red, green, blue, alpha) end

--- Sets the checkpoint icon color.
--- @param checkpoint integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function SetCheckpointRgba2(checkpoint, red, green, blue, alpha) end

--- @param p0 boolean
function SetCinematicButtonActive(p0) end

--- @param p0 number
function SetCinematicCamShakeAmplitude(p0) end

--- Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
--- @param toggle boolean
function SetCinematicModeActive(toggle) end

function SetCinematicNewsChannelActiveThisUpdate() end

--- @param day integer
--- @param month integer
--- @param year integer
function SetClockDate(day, month, year) end

--- SET_CLOCK_TIME(12, 34, 56);
--- @param hour integer
--- @param minute integer
--- @param second integer
function SetClockTime(hour, minute, second) end

--- Allows modification of the cloud opacity. It can also be used in other contexts, such as when the player is in a switch state `IS_PLAYER_SWITCH_IN_PROGRESS`.
--- @param opacity number
function SetCloudsAlpha(opacity) end

--- Overrides the cloud settings, which are normally controlled by the weather, with the specified named version. This native allows for custom cloud formations and behaviors that deviate from the default settings associated with the game's current weather conditions. NativeDB Introduced: v323
--- @param overrideSettingsName string
function SetCloudSettingsOverride(overrideSettingsName) end

--- @param hudColor integer
function SetColourOfNextTextComponent(hudColor) end

--- @param ped integer
--- @param combatType integer
--- @param p2 number
function SetCombatFloat(ped, combatType, p2) end

--- @param padIndex integer
--- @param red integer
--- @param green integer
--- @param blue integer
function SetControlLightEffectColor(padIndex, red, green, blue) end

--- This is for simulating player input.
--- @param padIndex integer
--- @param control integer
--- @param amount number
--- @return any
function SetControlNormal(padIndex, control, amount) end

--- @param varName string
--- @param value string
function SetConvar(varName, value) end

--- Used to replicate a server variable onto clients.
--- @param varName string
--- @param value string
function SetConvarReplicated(varName, value) end

--- @param varName string
--- @param value string
function SetConvarServerInfo(varName, value) end

--- Sets whether or not scripted conversation flow should be controlled by anim triggers
--- @param enable boolean
function SetConversationAudioControlledByAnim(enable) end

--- Used to determine whether conversation should use robot speech or not
--- @param isPlaceHolder boolean
function SetConversationAudioPlaceholder(isPlaceHolder) end

--- Enables or disables the convertible roof on vehicles that support old-style GTA IV roofs, which are not animated. Setting `toggle` to true will apply the roof to the vehicle, and setting it to false will remove the roof, assuming the vehicle has versions with and without a roof. If you want to lock or unlock the roof mechanism, use `SET_CONVERTIBLE_ROOF_LATCH_STATE`. You can check if the vehicle has a roof with `DOES_VEHICLE_HAVE_ROOF`. NativeDB Introduced: v323 #### Vehicles with both roofed and roofless versions (others may exist; this list is compiled from decompiled scripts). * chino * voltic * buccaneer * buccaneer2 * chino2 * faction * faction2 * mamba
--- @param vehicle integer
--- @param toggle boolean
function SetConvertibleRoof(vehicle, toggle) end

--- This native is used to latch or unlatch the convertible roof of a vehicle. It allows for direct control over the roof's mechanism without actually opening or closing the roof. This can be useful for scenarios where you need to prepare a vehicle's roof to be opened or closed by another action or to ensure it remains fixed in its current state regardless of other interactions. NativeDB Introduced: v323
--- @param vehicle integer
--- @param bLatched boolean
function SetConvertibleRoofLatchState(vehicle, bLatched) end

--- @param toggle boolean
function SetCreateRandomCops(toggle) end

--- @param toggle boolean
function SetCreateRandomCopsNotOnScenarios(toggle) end

--- @param toggle boolean
function SetCreateRandomCopsOnScenarios(toggle) end

--- Requires a component_at_*_flsh to be attached to the weapon object
--- @param object integer
--- @param toggle boolean
function SetCreateWeaponObjectLightSource(object, toggle) end

--- @param toggle boolean
function SetCreditsActive(toggle) end

--- @param ped integer
--- @param weaponHash integer
--- @return any
function SetCurrentPedVehicleWeapon(ped, weaponHash) end

--- @param ped integer
--- @param weaponHash integer
--- @param bForceInHand boolean
function SetCurrentPedWeapon(ped, weaponHash, bForceInHand) end

--- SET_CURRENT_PED_WEAPON **This is the server-side RPC native equivalent of the client native SET_CURRENT_PED_WEAPON.**
--- @param ped integer
--- @param weaponHash integer
--- @param bForceInHand boolean
function SetCurrentPedWeapon(ped, weaponHash, bForceInHand) end

--- @param modifierName string
function SetCurrentPlayerTcmodifier(modifierName) end

--- @param x number
--- @param y number
--- @return any
function SetCursorLocation(x, y) end

--- @param x number
--- @param y number
--- @return any
function SetCursorLocation(x, y) end

--- Set a custom color for the MP HUD, providing a way to customize the HUD's appearance similar to character color changes in MP. cpp enum eHudColours { HUD_COLOUR_PURE_WHITE = 0, HUD_COLOUR_WHITE = 1, HUD_COLOUR_BLACK = 2, HUD_COLOUR_GREY = 3, HUD_COLOUR_GREYLIGHT = 4, HUD_COLOUR_GREYDARK = 5, HUD_COLOUR_RED = 6, HUD_COLOUR_REDLIGHT = 7, HUD_COLOUR_REDDARK = 8, HUD_COLOUR_BLUE = 9, HUD_COLOUR_BLUELIGHT = 10, HUD_COLOUR_BLUEDARK = 11, HUD_COLOUR_YELLOW = 12, HUD_COLOUR_YELLOWLIGHT = 13, HUD_COLOUR_YELLOWDARK = 14, HUD_COLOUR_ORANGE = 15, HUD_COLOUR_ORANGELIGHT = 16, HUD_COLOUR_ORANGEDARK = 17, HUD_COLOUR_GREEN = 18, HUD_COLOUR_GREENLIGHT = 19, HUD_COLOUR_GREENDARK = 20, HUD_COLOUR_PURPLE = 21, HUD_COLOUR_PURPLELIGHT = 22, HUD_COLOUR_PURPLEDARK = 23, HUD_COLOUR_PINK = 24, HUD_COLOUR_STAR = 25, HUD_COLOUR_STARLIGHT = 26, HUD_COLOUR_STARDARK = 27, HUD_COLOUR_NET_PLAYER1 = 28, HUD_COLOUR_NET_PLAYER2 = 29, HUD_COLOUR_NET_PLAYER3 = 30, HUD_COLOUR_NET_PLAYER4 = 31, HUD_COLOUR_NET_PLAYER5 = 32, HUD_COLOUR_NET_PLAYER6 = 33, HUD_COLOUR_NET_PLAYER7 = 34, HUD_COLOUR_NET_PLAYER8 = 35, HUD_COLOUR_NET_PLAYER9 = 36, HUD_COLOUR_NET_PLAYER10 = 37, HUD_COLOUR_NET_PLAYER11 = 38, HUD_COLOUR_NET_PLAYER12 = 39, HUD_COLOUR_NET_PLAYER13 = 40, HUD_COLOUR_NET_PLAYER14 = 41, HUD_COLOUR_NET_PLAYER15 = 42, HUD_COLOUR_NET_PLAYER16 = 43, HUD_COLOUR_NET_PLAYER17 = 44, HUD_COLOUR_NET_PLAYER18 = 45, HUD_COLOUR_NET_PLAYER19 = 46, HUD_COLOUR_NET_PLAYER20 = 47, HUD_COLOUR_NET_PLAYER21 = 48, HUD_COLOUR_NET_PLAYER22 = 49, HUD_COLOUR_NET_PLAYER23 = 50, HUD_COLOUR_NET_PLAYER24 = 51, HUD_COLOUR_NET_PLAYER25 = 52, HUD_COLOUR_NET_PLAYER26 = 53, HUD_COLOUR_NET_PLAYER27 = 54, HUD_COLOUR_NET_PLAYER28 = 55, HUD_COLOUR_NET_PLAYER29 = 56, HUD_COLOUR_NET_PLAYER30 = 57, HUD_COLOUR_NET_PLAYER31 = 58, HUD_COLOUR_NET_PLAYER32 = 59, HUD_COLOUR_SIMPLEBLIP_DEFAULT = 60, HUD_COLOUR_MENU_BLUE = 61, HUD_COLOUR_MENU_GREY_LIGHT = 62, HUD_COLOUR_MENU_BLUE_EXTRA_DARK = 63, HUD_COLOUR_MENU_YELLOW = 64, HUD_COLOUR_MENU_YELLOW_DARK = 65, HUD_COLOUR_MENU_GREEN = 66, HUD_COLOUR_MENU_GREY = 67, HUD_COLOUR_MENU_GREY_DARK = 68, HUD_COLOUR_MENU_HIGHLIGHT = 69, HUD_COLOUR_MENU_STANDARD = 70, HUD_COLOUR_MENU_DIMMED = 71, HUD_COLOUR_MENU_EXTRA_DIMMED = 72, HUD_COLOUR_BRIEF_TITLE = 73, HUD_COLOUR_MID_GREY_MP = 74, HUD_COLOUR_NET_PLAYER1_DARK = 75, HUD_COLOUR_NET_PLAYER2_DARK = 76, HUD_COLOUR_NET_PLAYER3_DARK = 77, HUD_COLOUR_NET_PLAYER4_DARK = 78, HUD_COLOUR_NET_PLAYER5_DARK = 79, HUD_COLOUR_NET_PLAYER6_DARK = 80, HUD_COLOUR_NET_PLAYER7_DARK = 81, HUD_COLOUR_NET_PLAYER8_DARK = 82, HUD_COLOUR_NET_PLAYER9_DARK = 83, HUD_COLOUR_NET_PLAYER10_DARK = 84, HUD_COLOUR_NET_PLAYER11_DARK = 85, HUD_COLOUR_NET_PLAYER12_DARK = 86, HUD_COLOUR_NET_PLAYER13_DARK = 87, HUD_COLOUR_NET_PLAYER14_DARK = 88, HUD_COLOUR_NET_PLAYER15_DARK = 89, HUD_COLOUR_NET_PLAYER16_DARK = 90, HUD_COLOUR_NET_PLAYER17_DARK = 91, HUD_COLOUR_NET_PLAYER18_DARK = 92, HUD_COLOUR_NET_PLAYER19_DARK = 93, HUD_COLOUR_NET_PLAYER20_DARK = 94, HUD_COLOUR_NET_PLAYER21_DARK = 95, HUD_COLOUR_NET_PLAYER22_DARK = 96, HUD_COLOUR_NET_PLAYER23_DARK = 97, HUD_COLOUR_NET_PLAYER24_DARK = 98, HUD_COLOUR_NET_PLAYER25_DARK = 99, HUD_COLOUR_NET_PLAYER26_DARK = 100, HUD_COLOUR_NET_PLAYER27_DARK = 101, HUD_COLOUR_NET_PLAYER28_DARK = 102, HUD_COLOUR_NET_PLAYER29_DARK = 103, HUD_COLOUR_NET_PLAYER30_DARK = 104, HUD_COLOUR_NET_PLAYER31_DARK = 105, HUD_COLOUR_NET_PLAYER32_DARK = 106, HUD_COLOUR_BRONZE = 107, HUD_COLOUR_SILVER = 108, HUD_COLOUR_GOLD = 109, HUD_COLOUR_PLATINUM = 110, HUD_COLOUR_GANG1 = 111, HUD_COLOUR_GANG2 = 112, HUD_COLOUR_GANG3 = 113, HUD_COLOUR_GANG4 = 114, HUD_COLOUR_SAME_CREW = 115, HUD_COLOUR_FREEMODE = 116, HUD_COLOUR_PAUSE_BG = 117, HUD_COLOUR_FRIENDLY = 118, HUD_COLOUR_ENEMY = 119, HUD_COLOUR_LOCATION = 120, HUD_COLOUR_PICKUP = 121, HUD_COLOUR_PAUSE_SINGLEPLAYER = 122, HUD_COLOUR_FREEMODE_DARK = 123, HUD_COLOUR_INACTIVE_MISSION = 124, HUD_COLOUR_DAMAGE = 125, HUD_COLOUR_PINKLIGHT = 126, HUD_COLOUR_PM_MITEM_HIGHLIGHT = 127, HUD_COLOUR_SCRIPT_VARIABLE = 128, HUD_COLOUR_YOGA = 129, HUD_COLOUR_TENNIS = 130, HUD_COLOUR_GOLF = 131, HUD_COLOUR_SHOOTING_RANGE = 132, HUD_COLOUR_FLIGHT_SCHOOL = 133, HUD_COLOUR_NORTH_BLUE = 134, HUD_COLOUR_SOCIAL_CLUB = 135, HUD_COLOUR_PLATFORM_BLUE = 136, HUD_COLOUR_PLATFORM_GREEN = 137, HUD_COLOUR_PLATFORM_GREY = 138, HUD_COLOUR_FACEBOOK_BLUE = 139, HUD_COLOUR_INGAME_BG = 140, HUD_COLOUR_DARTS = 141, HUD_COLOUR_WAYPOINT = 142, HUD_COLOUR_MICHAEL = 143, HUD_COLOUR_FRANKLIN = 144, HUD_COLOUR_TREVOR = 145, HUD_COLOUR_GOLF_P1 = 146, HUD_COLOUR_GOLF_P2 = 147, HUD_COLOUR_GOLF_P3 = 148, HUD_COLOUR_GOLF_P4 = 149, HUD_COLOUR_WAYPOINTLIGHT = 150, HUD_COLOUR_WAYPOINTDARK = 151, HUD_COLOUR_PANEL_LIGHT = 152, HUD_COLOUR_MICHAEL_DARK = 153, HUD_COLOUR_FRANKLIN_DARK = 154, HUD_COLOUR_TREVOR_DARK = 155, HUD_COLOUR_OBJECTIVE_ROUTE = 156, HUD_COLOUR_PAUSEMAP_TINT = 157, HUD_COLOUR_PAUSE_DESELECT = 158, HUD_COLOUR_PM_WEAPONS_PURCHASABLE = 159, HUD_COLOUR_PM_WEAPONS_LOCKED = 160, HUD_COLOUR_END_SCREEN_BG = 161, HUD_COLOUR_CHOP = 162, HUD_COLOUR_PAUSEMAP_TINT_HALF = 163, HUD_COLOUR_NORTH_BLUE_OFFICIAL = 164, HUD_COLOUR_SCRIPT_VARIABLE_2 = 165, HUD_COLOUR_H = 166, HUD_COLOUR_HDARK = 167, HUD_COLOUR_T = 168, HUD_COLOUR_TDARK = 169, HUD_COLOUR_HSHARD = 170, HUD_COLOUR_CONTROLLER_MICHAEL = 171 HUD_COLOUR_CONTROLLER_FRANKLIN = 172 HUD_COLOUR_CONTROLLER_TREVOR = 173 HUD_COLOUR_CONTROLLER_CHOP = 174, HUD_COLOUR_VIDEO_EDITOR_VIDEO = 175, HUD_COLOUR_VIDEO_EDITOR_AUDIO = 176, HUD_COLOUR_VIDEO_EDITOR_TEXT = 177, HUD_COLOUR_HB_BLUE = 178, HUD_COLOUR_HB_YELLOW = 179, HUD_COLOUR_VIDEO_EDITOR_SCORE = 180, HUD_COLOUR_VIDEO_EDITOR_AUDIO_FADEOUT = 181, HUD_COLOUR_VIDEO_EDITOR_TEXT_FADEOUT = 182, HUD_COLOUR_VIDEO_EDITOR_SCORE_FADEOUT = 183, HUD_COLOUR_HEIST_BACKGROUND = 184, HUD_COLOUR_VIDEO_EDITOR_AMBIENT = 185, HUD_COLOUR_VIDEO_EDITOR_AMBIENT_FADEOUT = 186, HUD_COLOUR_GANG_BOSS = 187, HUD_COLOUR_GOON = 188, HUD_COLOUR_BOSS = 189, HUD_COLOUR_LOW_FLOW = 190, HUD_COLOUR_LOW_FLOW_DARK = 191, HUD_COLOUR_G1 = 192, HUD_COLOUR_G2 = 193, HUD_COLOUR_G3 = 194, HUD_COLOUR_G4 = 195, HUD_COLOUR_G5 = 196, HUD_COLOUR_G6 = 197, HUD_COLOUR_G7 = 198, HUD_COLOUR_G8 = 199, HUD_COLOUR_G9 = 200, HUD_COLOUR_G10 = 201, HUD_COLOUR_G11 = 202, HUD_COLOUR_G12 = 203, HUD_COLOUR_G13 = 204, HUD_COLOUR_G14 = 205, HUD_COLOUR_G15 = 206, HUD_COLOUR_ADVERSARY = 207, HUD_COLOUR_DEGEN_RED = 208, HUD_COLOUR_DEGEN_YELLOW = 209, HUD_COLOUR_DEGEN_GREEN = 210, HUD_COLOUR_DEGEN_CYAN = 211, HUD_COLOUR_DEGEN_BLUE = 212, HUD_COLOUR_DEGEN_MAGENTA = 213, HUD_COLOUR_STUNT_1 = 214, HUD_COLOUR_STUNT_2 = 215, HUD_COLOUR_SPECIAL_RACE_SERIES = 216 HUD_COLOUR_SPECIAL_RACE_SERIES_DARK = 217, HUD_COLOUR_CS = 218 HUD_COLOUR_CS_DARK = 219, HUD_COLOUR_TECH_GREEN = 220, HUD_COLOUR_TECH_GREEN_DARK = 221, HUD_COLOUR_TECH_RED = 222, HUD_COLOUR_TECH_GREEN_VERY_DARK = 223, HUD_COLOUR_PLACEHOLDER_01 = 224, HUD_COLOUR_PLACEHOLDER_02 = 225, HUD_COLOUR_PLACEHOLDER_03 = 226, HUD_COLOUR_PLACEHOLDER_04 = 227, HUD_COLOUR_PLACEHOLDER_05 = 228, HUD_COLOUR_PLACEHOLDER_06 = 229, HUD_COLOUR_PLACEHOLDER_07 = 230, HUD_COLOUR_PLACEHOLDER_08 = 231, HUD_COLOUR_PLACEHOLDER_09 = 232, HUD_COLOUR_PLACEHOLDER_10 = 233, HUD_COLOUR_JUNK_ENERGY = 234 }; NativeDB Introduced: 2545
--- @param hudColorId integer
function SetCustomMpHudColor(hudColorId) end

--- Queues up a custom track list on the specified radio station. The content in the track list will be played as soon as possible. The station does not have to be frozen.
--- @param radioStation string
--- @param trackListName string
--- @param forceNow boolean
function SetCustomRadioTrackList(radioStation, trackListName, forceNow) end

--- All occurrences found in b617d, sorted alphabetically and identical lines removed: AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK"); AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM"); AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS"); Add a suffix to the cutscene audio name. Call before loading the cutscene.
--- @param name string
function SetCutsceneAudioOverride(name) end

--- @param p0 boolean
function SetCutsceneCanBeSkipped(p0) end

--- Only used in networked environment with MP cutscenes
--- @param cutsceneEntName string
--- @param p1 integer
--- @param p2 integer
function SetCutsceneEntityStreamingFlags(cutsceneEntName, p1, p2) end

--- @param p0 boolean
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
function SetCutsceneFadeValues(p0, p1, p2, p3) end

--- Sets cutscene location, used for multiplayer apartments/businesses.
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p4 integer
function SetCutsceneOrigin(x, y, z, heading, p4) end

--- See `SET_PED_COMPONENT_VARIATION`
--- @param cutsceneEntName string
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @param modelHash integer
function SetCutscenePedComponentVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) end

--- Sets the components for a cutscene ped, this will take precendence over the cutscene's component overrides. This does not require the entity be registered. See
--- @param cutsceneEntName string
--- @param ped integer
--- @param modelHash integer
function SetCutscenePedComponentVariationFromPed(cutsceneEntName, ped, modelHash) end

--- See `SET_PED_PROP_INDEX`
--- @param cutsceneEntName string
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @param modelHash integer
function SetCutscenePedPropVariation(cutsceneEntName, componentId, drawableId, textureId, modelHash) end

--- Only used twice in R* scripts
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
function SetCutsceneTriggerArea(p0, p1, p2, p3, p4, p5) end

--- @param entity integer
--- @param vertex integer
--- @param value number
function SetDamping(entity, vertex, value) end

--- NOTE: Debugging functions are not present in the retail version of the game.
--- @param enabled boolean
function SetDebugLinesAndSpheresDrawingActive(enabled) end

--- @param ped integer
--- @param name integer
function SetDecisionMaker(ped, name) end

--- Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm. Works only ~200 meters around the player.
--- @param intensity number
function SetDeepOceanScaler(intensity) end

--- Sets the default number plate text pattern for vehicles seen on the local client with the specified plate index as their *default* index (`plateProbabilities` from carvariations). For consistency, this should be used with the same value on all clients, since vehicles *without* custom text will use a seeded random number generator with this pattern to determine the default plate text. The default value is `11AAA111`, and using this or a NULL string will revert to the default game RNG. ### Pattern string format * `1` will lead to a random number from 0-9. * `A` will lead to a random letter from A-Z. * `.` will lead to a random letter *or* number, with 50% probability of being either. * `^1` will lead to a literal `1` being emitted. * `^A` will lead to a literal `A` being emitted. * Any other character will lead to said character being emitted. * A string shorter than 8 characters will be padded on the right.
--- @param plateIndex integer
--- @param pattern string
function SetDefaultVehicleNumberPlateTextPattern(plateIndex, pattern) end

--- Only used with the "akula" and "annihilator2" in the decompiled native scripts. NativeDB Introduced: v1290
--- @param vehicle integer
--- @param deploy boolean
--- @param p2 boolean
function SetDeployHeliStubWings(vehicle, deploy, p2) end

--- SET_*
function SetDirectorModeClearTriggeredFlag() end

--- @param player integer
--- @param toggle boolean
function SetDisableAmbientMeleeMove(player, toggle) end

--- Disables the additional physics forces applied to BMX bikes that enable them to perform tricks. NativeDB Introduced: v463
--- @param disableExtraTrickForces boolean
function SetDisableBmxExtraTrickForces(disableExtraTrickForces) end

--- @param object integer
--- @param toggle boolean
function SetDisableBreaking(object, toggle) end

function SetDisableDecalRenderingThisFrame() end

--- Prevents a vehicle from exploding upon sustaining body damage from physical collisions. This can be used to increase the durability of vehicles in high-impact scenarios, such as races or combat situations, by preventing them from being destroyed due to collision-induced body damage. For helicopters, you might want to check `SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE` instead. NativeDB Introduced: v1290
--- @param vehicle integer
--- @param disableExplode boolean
function SetDisableExplodeFromBodyDamageOnCollision(vehicle, disableExplode) end

--- @param object integer
--- @param toggle boolean
function SetDisableFragDamage(object, toggle) end

--- Prevents a helicopter from exploding due to relatively minor body damage. NativeDB Introduced: v1103
--- @param helicopter integer
--- @param disableExplode boolean
function SetDisableHeliExplodeFromBodyDamage(helicopter, disableExplode) end

--- Disables wings for `Deluxo` and `Oppressor MK II`. For the Deluxo, it retracts the wings immediately, preventing flight. For the Oppressor Mk II, the wings retract after landing and take-off is not possible, though it can still glide if launched into the air.
--- @param vehicle integer
--- @param toggle boolean
function SetDisableHoverModeFlight(vehicle, toggle) end

--- Prevents gas / petrol decals (aka gas / petrol trails and puddles) to be ignited on fire during the frame in which the native is called. **Note**: This native needs to be called every frame to prevent ignition.
function SetDisablePetrolDecalsIgnitingThisFrame() end

--- @param vehicle integer
--- @param toggle boolean
function SetDisablePretendOccupants(vehicle, toggle) end

--- @param toggle boolean
function SetDisableRandomTrainsThisFrame(toggle) end

--- @param vehicle integer
--- @param p1 boolean
function SetDisableSuperdummyMode(vehicle, p1) end

--- Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though. NativeDB Introduced: v1365
--- @param vehicle integer
--- @param turretIdx integer
function SetDisableTurretMovementThisFrame(vehicle, turretIdx) end

--- @param vehicle integer
--- @param toggle boolean
function SetDisableVehicleEngineFires(vehicle, toggle) end

--- True stops vtols from switching modes. Doesn't stop the sound though. NativeDB Introduced: v1290
--- @param vehicle integer
--- @param direction boolean
function SetDisableVehicleFlightNozzlePosition(vehicle, direction) end

--- @param vehicle integer
--- @param toggle boolean
function SetDisableVehiclePetrolTankDamage(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetDisableVehiclePetrolTankFires(vehicle, toggle) end

--- NativeDB Introduced: v1604
--- @param toggle boolean
function SetDisableVehicleUnk(toggle) end

--- NativeDB Introduced: v1604
--- @param toggle boolean
function SetDisableVehicleUnk_2(toggle) end

--- R\* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
--- @param vehicle integer
--- @param toggle boolean
function SetDisableVehicleWindowCollisions(vehicle, toggle) end

--- This native sets the app id for the discord rich presence implementation.
--- @param appId string
function SetDiscordAppId(appId) end

--- Sets a clickable button to be displayed in a player's Discord rich presence.
--- @param index integer
--- @param label string
--- @param url string
function SetDiscordRichPresenceAction(index, label, url) end

--- This native sets the image asset for the discord rich presence implementation.
--- @param assetName string
function SetDiscordRichPresenceAsset(assetName) end

--- This native sets the small image asset for the discord rich presence implementation.
--- @param assetName string
function SetDiscordRichPresenceAssetSmall(assetName) end

--- This native sets the hover text of the small image asset for the discord rich presence implementation.
--- @param text string
function SetDiscordRichPresenceAssetSmallText(text) end

--- This native sets the hover text of the image asset for the discord rich presence implementation.
--- @param text string
function SetDiscordRichPresenceAssetText(text) end

--- @param player integer
--- @param toggle boolean
function SetDispatchCopsForPlayer(player, toggle) end

--- @param p0 number
function SetDispatchIdealSpawnDistance(p0) end

--- @param x number
--- @param y number
--- @param z number
function SetDispatchSpawnLocation(x, y, z) end

--- @param p0 any
--- @param p1 number
function SetDispatchTimeBetweenSpawnAttempts(p0, p1) end

--- @param p0 any
--- @param p1 number
function SetDispatchTimeBetweenSpawnAttemptsMultiplier(p0, p1) end

--- Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
--- @param toggle boolean
function SetDistantCarsEnabled(toggle) end

--- This is a NOP function. It does nothing at all.
--- @param toggle boolean
function SetDitchPoliceModels(toggle) end

--- Sets the on-screen drawing origin for draw-functions in world coordinates. The effect can be reset by calling `CLEAR_DRAW_ORIGIN` and is limited to 32 different origins each frame.
--- @param x number
--- @param y number
--- @param z number
--- @param p3 any
function SetDrawOrigin(x, y, z, p3) end

--- Sets the on-screen drawing origin for draw-functions in world coordinates. The effect can be reset by calling `CLEAR_DRAW_ORIGIN` and is limited to 32 different origins each frame.
--- @param x number
--- @param y number
--- @param z number
--- @param is2d boolean
function SetDrawOrigin(x, y, z, is2d) end

--- NativeDB Introduced: v2372
--- @param vehicle integer
--- @param toggle boolean
function SetDriftTyresEnabled(vehicle, toggle) end

--- For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
--- @param shootingPed integer
--- @param targetPed integer
--- @param targetVehicle integer
--- @param x number
--- @param y number
--- @param z number
function SetDrivebyTaskTarget(shootingPed, targetPed, targetVehicle, x, y, z) end

--- The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
--- @param driver integer
--- @param ability number
function SetDriverAbility(driver, ability) end

--- range 0.0f - 1.0f
--- @param driver integer
--- @param aggressiveness number
function SetDriverAggressiveness(driver, aggressiveness) end

--- Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
--- @param driver integer
--- @param modifier number
function SetDriverRacingModifier(driver, modifier) end

--- @param driver integer
--- @param cruiseSpeed number
function SetDriveTaskCruiseSpeed(driver, cruiseSpeed) end

--- Sets the driving style for a ped currently performing a driving task. Each flag in the `eVehicleDrivingFlags` enum can be combined to create a driving style, with each enabling or disabling a specific driving behavior. The driving style can be set to one of the predefined driving styles, or a custom driving style can be created by combining the flags. This can be done by using the bitwise OR operator (`|`) to combine the flags or by adding the decimal values of the flags together. cpp enum eVehicleDrivingFlags { None = 0, StopForVehicles = 1, StopForPeds = 2, SwerveAroundAllVehicles = 4, SteerAroundStationaryVehicles = 8, SteerAroundPeds = 16, SteerAroundObjects = 32, DontSteerAroundPlayerPed = 64, StopAtTrafficLights = 128, GoOffRoadWhenAvoiding = 256, AllowGoingWrongWay = 512, Reverse = 1024, UseWanderFallbackInsteadOfStraightLine = 2048, AvoidRestrictedAreas = 4096, PreventBackgroundPathfinding = 8192, AdjustCruiseSpeedBasedOnRoadSpeed = 16384, UseShortCutLinks = 262144, ChangeLanesAroundObstructions = 524288, UseSwitchedOffNodes = 2097152, PreferNavmeshRoute = 4194304, PlaneTaxiMode = 8388608, ForceStraightLine = 16777216, UseStringPullingAtJunctions = 33554432, TryToAvoidHighways = 536870912, ForceJoinInRoadDirection = 1073741824, StopAtDestination = 2147483648, // StopForVehicles | StopForPeds | SteerAroundObjects | SteerAroundStationaryVehicles | StopAtTrafficLights | UseShortCutLinks | ChangeLanesAroundObstructions DrivingModeStopForVehicles = 786603, // StopForVehicles | StopForPeds | StopAtTrafficLights | UseShortCutLinks DrivingModeStopForVehiclesStrict = 262275, // SwerveAroundAllVehicles | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions | StopForVehicles DrivingModeAvoidVehicles = 786469, // SwerveAroundAllVehicles | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions DrivingModeAvoidVehiclesReckless = 786468, // StopForVehicles | SteerAroundStationaryVehicles | StopForPeds | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions DrivingModeStopForVehiclesIgnoreLights = 786475, // SwerveAroundAllVehicles | StopAtTrafficLights | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions | StopForVehicles DrivingModeAvoidVehiclesObeyLights = 786597, // SwerveAroundAllVehicles | StopAtTrafficLights | StopForPeds | SteerAroundObjects | UseShortCutLinks | ChangeLanesAroundObstructions | StopForVehicles DrivingModeAvoidVehiclesStopForPedsObeyLights = 786599, }
--- @param ped integer
--- @param drivingStyle integer
function SetDriveTaskDrivingStyle(ped, drivingStyle) end

--- @param p0 any
--- @param p1 number
function SetDriveTaskMaxCruiseSpeed(p0, p1) end

--- Navigates the specified DUI browser to a different URL.
--- @param duiObject integer
--- @param url string
function SetDuiUrl(duiObject, url) end

--- Allows StaticEmitter's without a linked entity to make use of environment features like occlusion and reverb even if they are located higher than 20.0 units above any static collision inside interiors. This native allows you to extend the probe range up to 150.0 units.
--- @param probeLength number
function SetEmitterProbeLength(probeLength) end

--- Retunes a named static emitter to the specified station
--- @param emitterName string
--- @param radioStation string
function SetEmitterRadioStation(emitterName, radioStation) end

--- Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}" NativeDB Introduced: v1604
--- @param entity integer
--- @param toggle boolean
--- @param p2 integer
function SetEnableArenaPropPhysics(entity, toggle, p2) end

--- NativeDB Introduced: v1604
--- @param entity integer
--- @param toggle boolean
--- @param p2 integer
--- @param ped integer
function SetEnableArenaPropPhysicsOnPed(entity, toggle, p2, ped) end

--- Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
--- @param ped integer
--- @param toggle boolean
function SetEnableBoundAnkles(ped, toggle) end

--- ped can not pull out a weapon when true
--- @param ped integer
--- @param toggle boolean
function SetEnableHandcuffs(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetEnablePedEnveffScale(ped, toggle) end

--- Enables diving motion when underwater.
--- @param ped integer
--- @param toggle boolean
function SetEnableScuba(ped, toggle) end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @param toggle boolean
function SetEnableScubaGearLight(ped, toggle) end

--- Enable/Disables global slipstream physics
--- @param toggle boolean
function SetEnableVehicleSlipstreaming(toggle) end

--- This native sets the entity's alpha level.
--- @param entity integer
--- @param alpha integer
--- @param skin boolean
function SetEntityAlpha(entity, alpha, skin) end

--- @param entity integer
--- @param toggle boolean
function SetEntityAlwaysPrerender(entity, toggle) end

--- NativeDB Introduced: v2372
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
function SetEntityAngularVelocity(entity, x, y, z) end

--- Animations list
--- @param entity integer
--- @param animDictionary string
--- @param animName string
--- @param time number
function SetEntityAnimCurrentTime(entity, animDictionary, animName, time) end

--- @param entity integer
--- @param animDictionary string
--- @param animName string
--- @param speedMultiplier number
function SetEntityAnimSpeed(entity, animDictionary, animName, speedMultiplier) end

--- Assigns an existing entity to be owned by the current script. If the entity was not owned by a script yet, this also means the entity will remain persistent until released. Note that this is not needed right after creating an entity as a script-created entity will automatically be assigned.
--- @param entity integer
--- @param scriptHostObject boolean
--- @param bGrabFromOtherScript boolean
function SetEntityAsMissionEntity(entity, scriptHostObject, bGrabFromOtherScript) end

--- Marks the specified entity (ped, vehicle or object) as no longer needed. Entities marked as no longer needed, will be deleted as the engine sees fit.
--- @param entity integer
--- @return integer
function SetEntityAsNoLongerNeeded(entity) end

--- @param entity integer
--- @param toggle boolean
function SetEntityCanBeDamaged(entity, toggle) end

--- @param entity integer
--- @param bCanBeDamaged boolean
--- @param relGroup integer
function SetEntityCanBeDamagedByRelationshipGroup(entity, bCanBeDamaged, relGroup) end

--- Sets whether the entity can be targeted without being in line-of-sight.
--- @param entity integer
--- @param toggle boolean
function SetEntityCanBeTargetedWithoutLos(entity, toggle) end

--- True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
--- @param entity integer
--- @param toggle boolean
function SetEntityCleanupByEngine(entity, toggle) end

--- @param entity integer
--- @param toggle boolean
--- @param keepPhysics boolean
function SetEntityCollision(entity, toggle, keepPhysics) end

--- @param entity integer
--- @param toggle boolean
--- @param keepPhysics boolean
function SetEntityCompletelyDisableCollision(entity, toggle, keepPhysics) end

--- Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis.
--- @param entity integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param alive boolean
--- @param deadFlag boolean
--- @param ragdollFlag boolean
--- @param clearArea boolean
function SetEntityCoords(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) end

--- Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis. **This is the server-side RPC native equivalent of the client native SET_ENTITY_COORDS.**
--- @param entity integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param alive boolean
--- @param deadFlag boolean
--- @param ragdollFlag boolean
--- @param clearArea boolean
function SetEntityCoords(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) end

--- Teleports an entity to specified coordinates directly, with options to maintain certain behaviors post-teleportation. **Note**: * This native allows precise placement of entities without the usual adjustments for collision or interaction with the environment that may occur with other teleportation natives. * The `keepTasks` and `keepIK` parameters are specifically useful for maintaining the current state of a ped, ensuring actions or animations are not abruptly stopped due to the teleportation. * Setting `doWarp` to `false` is useful when simulating continuous movement or when the entity should interact with its immediate surroundings upon arrival.
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param keepTasks boolean
--- @param keepIK boolean
--- @param doWarp boolean
function SetEntityCoordsNoOffset(entity, x, y, z, keepTasks, keepIK, doWarp) end

--- @param entity integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param alive boolean
--- @param deadFlag boolean
--- @param ragdollFlag boolean
--- @param clearArea boolean
function SetEntityCoordsWithoutPlantsReset(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea) end

--- SET_ENTITY_*
--- @param entity integer
--- @param p1 boolean
function SetEntityDecalsDisabled(entity, p1) end

--- It overrides the default distance culling radius of an entity. Set to `0.0` to reset. If you want to interact with an entity outside of your players' scopes set the radius to a huge number. **WARNING**: Culling natives are deprecated and have known, unfixable issues
--- @param entity integer
--- @param radius number
function SetEntityDistanceCullingRadius(entity, radius) end

--- Draws an outline around a given entity. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param entity integer
--- @param enabled boolean
function SetEntityDrawOutline(entity, enabled) end

--- Sets color for entity outline. `255, 0, 255, 255` by default.
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function SetEntityDrawOutlineColor(red, green, blue, alpha) end

--- Sets variant of shader that will be used to draw entity outline. Variants are: * **0**: Default value, gauss shader. * **1**: 2px wide solid color outline. * **2**: Fullscreen solid color except for entity.
--- @param shader integer
function SetEntityDrawOutlineShader(shader) end

--- @param entity integer
--- @param toggle boolean
function SetEntityDynamic(entity, toggle) end

--- @param speakerConversationIndex integer
--- @param entity integer
function SetEntityForNullConvPed(speakerConversationIndex, entity) end

--- @param entity integer
--- @param toggle boolean
function SetEntityHasGravity(entity, toggle) end

--- Set the heading of an entity in degrees also known as "Yaw".
--- @param entity integer
--- @param heading number
function SetEntityHeading(entity, heading) end

--- Set the heading of an entity in degrees also known as "Yaw". **This is the server-side RPC native equivalent of the client native SET_ENTITY_HEADING.**
--- @param entity integer
--- @param heading number
function SetEntityHeading(entity, heading) end

--- When setting health for a player ped, the game will clamp the health value to ensure it does not exceed the maximum health. This maximum health can be retrieved by calling `GET_PED_MAX_HEALTH`. It can also be modified by calling `SET_PED_MAX_HEALTH`. When setting the health for non-player peds or entities, the maximum health will be increased if the new health value exceeds the current maximum. Default health for male peds is `200`, for female peds it is `175`. ### Added parameters * **inflictor**: The handle for the entity that caused the damage.
--- @param entity integer
--- @param health integer
function SetEntityHealth(entity, health) end

--- @param entity integer
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function SetEntityIconColor(entity, red, green, blue, alpha) end

--- @param entity integer
--- @param toggle boolean
function SetEntityIconVisibility(entity, toggle) end

--- It allows to flag an entity to ignore the request control filter policy.
--- @param entity integer
--- @param ignore boolean
function SetEntityIgnoreRequestControlFilter(entity, ignore) end

--- Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either. If you use this for a ped and you want Ragdoll to stay enabled, then do: *(DWORD *)(pedAddress + 0x188) |= (1 << 9); Use this if you want to get the invincibility status: bool IsPedInvincible(Ped ped) { auto addr = getScriptHandleBaseAddress(ped); if (addr) { DWORD flag = *(DWORD *)(addr + 0x188); return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0); } return false; }
--- @param entity integer
--- @param toggle boolean
function SetEntityInvincible(entity, toggle) end

--- @param entity integer
--- @param p1 boolean
--- @param p2 number
function SetEntityIsTargetPriority(entity, p1, p2) end

--- @param entity integer
--- @param toggle boolean
function SetEntityLights(entity, toggle) end

--- Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid. Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player. NativeDB Added Parameter 3: Any p2
--- @param entity integer
--- @param toggle boolean
function SetEntityLoadCollisionFlag(entity, toggle) end

--- Sets the provided entity not visible for yourself for the current frame.
--- @param entity integer
function SetEntityLocallyInvisible(entity) end

--- Sets the provided entity visible for yourself for the current frame.
--- @param entity integer
function SetEntityLocallyVisible(entity) end

--- LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
--- @param entity integer
--- @param value integer
function SetEntityLodDist(entity, value) end

--- Sets an entity's matrix. Arguments are in the same order as with GET_ENTITY_MATRIX.
--- @param entity integer
--- @param forwardX number
--- @param forwardY number
--- @param forwardZ number
--- @param rightX number
--- @param rightY number
--- @param rightZ number
--- @param upX number
--- @param upY number
--- @param upZ number
--- @param atX number
--- @param atY number
--- @param atZ number
function SetEntityMatrix(entity, forwardX, forwardY, forwardZ, rightX, rightY, rightZ, upX, upY, upZ, atX, atY, atZ) end

--- For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
--- @param entity integer
--- @param value integer
function SetEntityMaxHealth(entity, value) end

--- @param entity integer
--- @param speed number
function SetEntityMaxSpeed(entity, speed) end

--- @param entity integer
--- @param toggle boolean
function SetEntityMotionBlur(entity, toggle) end

--- Calling this function disables collision between two entities. The importance of the order for entity1 and entity2 is unclear. The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
--- @param entity1 integer
--- @param entity2 integer
--- @param thisFrameOnly boolean
function SetEntityNoCollisionEntity(entity1, entity2, thisFrameOnly) end

--- @param entity integer
--- @param toggle boolean
function SetEntityOnlyDamagedByPlayer(entity, toggle) end

--- @param entity integer
--- @param p1 boolean
--- @param relationshipHash integer
function SetEntityOnlyDamagedByRelationshipGroup(entity, p1, relationshipHash) end

--- cpp enum EntityOrphanMode { // Default, this will delete the entity when it isn't relevant to any players // NOTE: this *doesn't* mean when they're no longer in scope DeleteWhenNotRelevant = 0, // The entity will be deleted whenever its original owner disconnects // NOTE: if this is set when the entities original owner has already left it will be // marked for deletion (similar to just calling DELETE_ENTITY) DeleteOnOwnerDisconnect = 1, // The entity will never be deleted by the server when it does relevancy checks // you should only use this on entities that need to be relatively persistent KeepEntity = 2 } Sets what happens when the entity is orphaned and no longer has its original owner. **NOTE**: This native doesn't guarantee the persistence of the entity.
--- @param entity integer
--- @param orphanMode integer
function SetEntityOrphanMode(entity, orphanMode) end

--- Enable / disable each type of damage. -------------- p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0->f_19, true, true, true, true, true, true, 1, true);
--- @param entity integer
--- @param bulletProof boolean
--- @param fireProof boolean
--- @param explosionProof boolean
--- @param collisionProof boolean
--- @param meleeProof boolean
--- @param steamProof boolean
--- @param p7 boolean
--- @param drownProof boolean
function SetEntityProofs(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof) end

--- @param entity integer
--- @param toggle boolean
function SetEntityProofUnk(entity, toggle) end

--- w is the correct parameter name!
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param w number
function SetEntityQuaternion(entity, x, y, z, w) end

--- @param entity integer
--- @param toggle boolean
function SetEntityRecordsCollisions(entity, toggle) end

--- @param entity integer
--- @param toggle boolean
function SetEntityRenderScorched(entity, toggle) end

--- @param entity integer
--- @param toggle boolean
function SetEntityRequiresMoreExpensiveRiverCheck(entity, toggle) end

--- Sets the rotation of a specified entity in the game world. NativeDB Introduced: v323
--- @param entity integer
--- @param pitch number
--- @param roll number
--- @param yaw number
--- @param rotationOrder integer
--- @param bDeadCheck boolean
function SetEntityRotation(entity, pitch, roll, yaw, rotationOrder, bDeadCheck) end

--- Sets the rotation of a specified entity in the game world. NativeDB Introduced: v323 **This is the server-side RPC native equivalent of the client native SET_ENTITY_ROTATION.**
--- @param entity integer
--- @param pitch number
--- @param roll number
--- @param yaw number
--- @param rotationOrder integer
--- @param bDeadCheck boolean
function SetEntityRotation(entity, pitch, roll, yaw, rotationOrder, bDeadCheck) end

--- Sets the routing bucket for the specified entity. Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
--- @param entity integer
--- @param bucket integer
function SetEntityRoutingBucket(entity, bucket) end

--- Changing traffic-lights will not change the behavior of NPCs. Example: here cpp enum eTrafficlightOverrideMode { TLO_RED = 0, TLO_AMBER = 1, TLO_GREEN = 2, TLO_NONE = 3 }
--- @param entity integer
--- @param state integer
function SetEntityTrafficlightOverride(entity, state) end

--- Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
function SetEntityVelocity(entity, x, y, z) end

--- Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement. **This is the server-side RPC native equivalent of the client native SET_ENTITY_VELOCITY.**
--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
function SetEntityVelocity(entity, x, y, z) end

--- Toggle the visibility of a given entity.
--- @param entity integer
--- @param toggle boolean
--- @param unk boolean
function SetEntityVisible(entity, toggle, unk) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function SetEntityVisibleInCutscene(p0, p1, p2) end

--- @param player integer
--- @param toggle boolean
function SetEveryoneIgnorePlayer(player, toggle) end

--- Groups found in the scripts used with this native: "AMMUNATION", "QUARRY", "Triathlon_1", "Triathlon_2", "Triathlon_3"
--- @param scenarioGroup string
function SetExclusiveScenarioGroup(scenarioGroup) end

--- @param player integer
function SetExplosiveAmmoThisFrame(player) end

--- @param player integer
function SetExplosiveMeleeThisFrame(player) end

--- @param modifierName string
function SetExtraTimecycleModifier(modifierName) end

--- Clipsets: "facials@gen_female@base" "facials@gen_male@base" "facials@p_m_zero@base" Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE: "mood_drunk\_1" "mood_stressed\_1" "mood_happy\_1" "mood_talking\_1" NativeDB Introduced: v1493
--- @param ped integer
--- @param animDict string
function SetFacialClipsetOverride(ped, animDict) end

--- @param ped integer
--- @param animName string
--- @param animDict string
function SetFacialIdleAnimOverride(ped, animName, animDict) end

--- Sets whether the game should fade in after the player dies or is arrested.
--- @param toggle boolean
function SetFadeInAfterDeathArrest(toggle) end

--- @param toggle boolean
function SetFadeInAfterLoad(toggle) end

--- Sets whether the game should fade out after the player is arrested.
--- @param toggle boolean
function SetFadeOutAfterArrest(toggle) end

--- Sets whether the game should fade out after the player dies.
--- @param toggle boolean
function SetFadeOutAfterDeath(toggle) end

--- Overrides the position of the main player blip for the current frame.
--- @param x number
--- @param y number
function SetFakePausemapPlayerPositionThisFrame(x, y) end

--- Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect. Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
--- @param fakeWantedLevel integer
function SetFakeWantedLevel(fakeWantedLevel) end

--- @param toggle boolean
function SetFarDrawVehicles(toggle) end

--- @param player integer
function SetFireAmmoThisFrame(player) end

--- SET_FIRE_\* NativeDB Introduced: v1734
--- @param p0 number
function SetFireSpreadRate(p0) end

--- @param distance number
function SetFirstPersonAimCamNearClipThisUpdate(distance) end

--- @param zoomFactor number
function SetFirstPersonAimCamZoomFactor(zoomFactor) end

--- @param minAngle number
--- @param maxAngle number
function SetFirstPersonCamPitchRange(minAngle, maxAngle) end

--- Purpose of p0 and p1 unknown.
--- @param p0 number
--- @param p1 number
--- @param fadeIn number
--- @param duration number
--- @param fadeOut number
function SetFlash(p0, p1, fadeIn, duration, fadeOut) end

--- Enables/disables flashlight on ped's weapon. NativeDB Introduced: v2060
--- @param ped integer
--- @param toggle boolean
function SetFlashLightEnabled(ped, toggle) end

--- @param distance number
--- @return any
function SetFlashLightFadeDistance(distance) end

--- Allows Weapon-Flashlight beams to stay visible while moving. Normally it only stays on while aiming.
--- @param state boolean
function SetFlashLightKeepOnWhileMoving(state) end

--- @param hudIndex integer
--- @param x number
--- @param y number
function SetFloatingHelpTextScreenPosition(hudIndex, x, y) end

--- ### Arrow Positions * 0 = Off / No arrow * 1 = Top * 2 = Left * 3 = Bottom * 4 = Right ### Note Any numeric value greater than 4 will result in a right arrow (Index 4) ### Important Needs to be called every frame Preview of the provided example code
--- @param hudIndex integer
--- @param style integer
--- @param hudColor integer
--- @param alpha integer
--- @param arrowPosition integer
--- @param boxOffset integer
function SetFloatingHelpTextStyle(hudIndex, style, hudColor, alpha, arrowPosition, boxOffset) end

--- @param hudIndex integer
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
function SetFloatingHelpTextToEntity(hudIndex, entity, offsetX, offsetY) end

--- @param hudIndex integer
--- @param x number
--- @param y number
--- @param z number
function SetFloatingHelpTextWorldPosition(hudIndex, x, y, z) end

--- @param cam integer
--- @param x number
--- @param y number
--- @param z number
function SetFlyCamCoordAndConstrain(cam, x, y, z) end

--- @param cam integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
function SetFlyCamHorizontalResponse(cam, p1, p2, p3) end

--- @param cam integer
--- @param height number
function SetFlyCamMaxHeight(cam, height) end

--- @param cam integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
function SetFlyCamVerticalSpeedMultiplier(cam, p1, p2, p3) end

--- Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.
--- @param vehMinSpeed number
--- @param unkMinSpeed number
--- @param unkModifier number
--- @param minDamage number
--- @return any
function SetFlyThroughWindscreenParams(vehMinSpeed, unkMinSpeed, unkModifier, minDamage) end

--- It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
--- @param entity integer
function SetFocusEntity(entity) end

--- Override the area where the camera will render the terrain. p3, p4 and p5 are usually set to 0.0
--- @param x number
--- @param y number
--- @param z number
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
function SetFocusPosAndVel(x, y, z, offsetX, offsetY, offsetZ) end

--- Overrides the ped follow camera (not first person camera) with the specified camera. The game loads all camera metadata from `update/update.rpf/x64/data/metadata/cameras.ymt` and `x64a.rpf/data/metadata/cameras.ymt` with the ped follow cameras being of type `camFollowPedCameraMetadata`. | Follow Camera Names | |----------------------------------------------| | DEFAULT_FOLLOW_PED_CAMERA | | FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA | | FOLLOW_PED_ON_EXILE1\_LADDER_CAMERA | | FOLLOW_PED_SKY_DIVING_CAMERA | | FOLLOW_PED_SKY_DIVING_FAMILY5\_CAMERA | | NIGHTCLUB_FOLLOW_PED_CAMERA | | FOLLOW_PED_INTIMIDATION_CAMERA | | FOLLOW_PED_IN_WATER_CAMERA | | FOLLOW_PED_PRONE_CAMERA | | FOLLOW_PED_ON_SEAT_CAMERA | | FOLLOW_PED_HANGING_UPSIDE_DOWN_CAMERA | | FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA | | CUSTOM_TRANSITION_AFTER_WARP_SKY_DIVE_CAMERA | | FOLLOW_PED_ON_HORSE_CAMERA | | FOLLOW_PED_ON_LOUNGER_CAMERA | Other camera hashes (names not found yet) cpp // 0x5DBBFB6E // 0xA38DB056 // 0x16B702A3 // 0x41D72A2E
--- @param camName string
--- @param easeTime integer
--- @return any
function SetFollowPedCamThisUpdate(camName, easeTime) end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the follow mode enum.
--- @param viewMode integer
function SetFollowPedCamViewMode(viewMode) end

--- NativeDB Introduced: v1365
--- @param seatIndex integer
function SetFollowTurretSeatCam(seatIndex) end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the follow mode enum.
--- @param viewMode integer
function SetFollowVehicleCamViewMode(viewMode) end

--- See `GET_FOLLOW_PED_CAM_VIEW_MODE` for the follow mode enum.
--- @param zoomLevel integer
function SetFollowVehicleCamZoomLevel(zoomLevel) end

--- @param ped integer
--- @param toggle boolean
function SetForceFootstepUpdate(ped, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetForceHdVehicle(vehicle, toggle) end

--- Sets whether a boat should remain in the non-physical, low LOD anchor mode even when a player is driving it. **Note**: This native requires SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER to be set to `true` to work properly. NativeDB Introduced: v323
--- @param boat integer
--- @param toggle boolean
function SetForceLowLodAnchorMode(boat, toggle) end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
function SetForceObjectThisFrame(x, y, z, p3) end

--- Forces footstep tracks on all surfaces. USE_/USING_*
--- @param toggle boolean
function SetForcePedFootstepsTracks(toggle) end

--- NativeDB Introduced: v1180
--- @param player integer
function SetForcePlayerToJump(player) end

--- @param ped integer
--- @param p1 boolean
--- @param type integer
--- @param p3 integer
function SetForceStepType(ped, p1, type, p3) end

--- Forces vehicle trails on all surfaces. USE_/USING_*
--- @param toggle boolean
function SetForceVehicleTrails(toggle) end

--- 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
--- @param vehicle integer
--- @param height number
function SetForkliftForkHeight(vehicle, height) end

--- @param active boolean
function SetFrontendActive(active) end

--- Allows the radio to be played in the frontend.
--- @param active boolean
function SetFrontendRadioActive(active) end

--- Sets fuel consumption rate multiplier for all vehicles operated by a player. This is a way to slow down or speed up fuel consumption for all vehicles at a time. If 0 - it practically means that fuel will not be consumed. By default is set to 1. When the multiplier is set to 1 a default 65 litre gas tank car with average fuel consumption can stay idle for ~16.67 hours or run with max RPM for ~2.5 hours. To customize fuel consumption per vehicle / vehicle class use `SET_HANDLING_FLOAT`/`SET_VEHICLE_HANDLING_FLOAT` natives with `fieldName` equal to `fPetrolConsumptionRate`. By default it is set to 0.5 for all vehicles.
--- @param multiplier number
function SetFuelConsumptionRateMultiplier(multiplier) end

--- Turns on and off fuel consumption in all vehicles operated by a player. NPC operated vehicles will not consume fuel to avoid traffic disruptions. The default Gta5 behaviour is fuel consumption turned off.
--- @param state boolean
function SetFuelConsumptionState(state) end

--- Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
--- @param toggle boolean
function SetGamePaused(toggle) end

--- @param toggle boolean
function SetGamePausesForStreaming(toggle) end

--- @param ped integer
function SetGameplayCamFollowPedThisUpdate(ped) end

--- Sets gameplay camera to hash NativeDB Introduced: v1180
--- @param camName string
function SetGameplayCamHash(camName) end

--- @param pitch number
function SetGameplayCamRawPitch(pitch) end

--- Does nothing NativeDB Added Parameter 2: Any p1
--- @param yaw number
function SetGameplayCamRawYaw(yaw) end

--- Sets the camera position relative to heading in float from -360 to +360. Heading is alwyas 0 in aiming camera.
--- @param heading number
function SetGameplayCamRelativeHeading(heading) end

--- This native sets the camera's pitch (rotation on the x-axis).
--- @param angle number
--- @param scalingFactor number
function SetGameplayCamRelativePitch(angle, scalingFactor) end

--- @param roll number
--- @param pitch number
--- @param yaw number
function SetGameplayCamRelativeRotation(roll, pitch, yaw) end

--- Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
--- @param amplitude number
function SetGameplayCamShakeAmplitude(amplitude) end

--- From b617 scripts: CAM::_21E253A7F8DA5DFB("DINGHY"); CAM::_21E253A7F8DA5DFB("ISSI2"); CAM::_21E253A7F8DA5DFB("SPEEDO");
--- @param vehicleName string
function SetGameplayCamVehicleCamera(vehicleName) end

--- @param vehicleModel integer
function SetGameplayCamVehicleCameraName(vehicleModel) end

--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param blendOutDuration integer
--- @param blendInDuration integer
--- @param unk integer
function SetGameplayCoordHint(x, y, z, duration, blendOutDuration, blendInDuration, unk) end

--- p6 & p7 - possibly length or time
--- @param entity integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param p4 boolean
--- @param p5 integer
--- @param p6 integer
--- @param p7 integer
--- @param p8 any
function SetGameplayEntityHint(entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8) end

--- @param toggle boolean
function SetGameplayHintAnimCloseup(toggle) end

--- @param xOffset number
function SetGameplayHintAnimOffsetx(xOffset) end

--- @param yOffset number
function SetGameplayHintAnimOffsety(yOffset) end

--- @param value number
function SetGameplayHintBaseOrbitPitchOffset(value) end

--- @param value number
function SetGameplayHintFollowDistanceScalar(value) end

--- @param FOV number
function SetGameplayHintFov(FOV) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @param p5 any
--- @param p6 any
--- @param p7 any
function SetGameplayObjectHint(p0, p1, p2, p3, p4, p5, p6, p7) end

--- @param p0 integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param p4 boolean
--- @param duration integer
--- @param blendOutDuration integer
--- @param blendInDuration integer
function SetGameplayPedHint(p0, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration) end

--- Focuses the camera on the specified vehicle.
--- @param vehicle integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param p4 boolean
--- @param time integer
--- @param easeInTime integer
--- @param easeOutTime integer
function SetGameplayVehicleHint(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime) end

--- @param gametypeName string
function SetGameType(gametypeName) end

--- @param toggle boolean
function SetGarbageTrucks(toggle) end

--- Sets the alpha value used by `_SET_LOCAL_PLAYER_AS_GHOST`, `SET_NETWORK_VEHICLE_AS_GHOST`, and `_NETWORK_SET_ENTITY_GHOSTED_WITH_OWNER`. 'Solidness' cannot be achieved using 255 - this will have the opposite effect of it defaulting to 128 it seems (or just having no effect at all).
--- @param alpha integer
function SetGhostedEntityAlpha(alpha) end

--- Birds will try to reach the given height.
--- @param height number
function SetGlobalMinBirdFlightHeight(height) end

--- @param massMul number
function SetGlobalPassengerMassMultiplier(massMul) end

--- Sets the global radio signal level, lower value will cause radio static. Used only a handful of times in scripts.
--- @param signalLevel number
function SetGlobalRadioSignalLevel(signalLevel) end

--- @param active boolean
function SetGpsActive(active) end

--- @param toggle boolean
--- @param radarThickness integer
--- @param mapThickness integer
function SetGpsCustomRouteRender(toggle, radarThickness, mapThickness) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
function SetGpsDisabledZone(x1, y1, z1, x2, y2, z2) end

--- Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint. You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX. **Setting a waypoint at the same coordinate:** Disabled Zone: <https://i.imgur.com/P9VUuxM.png> Enabled Zone (normal): <https://i.imgur.com/BPi24aw.png>
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param index integer
function SetGpsDisabledZoneAtIndex(x1, y1, z1, x2, y2, z2, index) end

--- Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS. Doesn't seem like the flags are actually read by the game at all.
--- @param p0 integer
--- @param p1 number
function SetGpsFlags(p0, p1) end

--- @param toggle boolean
function SetGpsFlashes(toggle) end

--- @param toggle boolean
function SetGpsMultiRouteRender(toggle) end

--- cpp enum eGravityLevel { GRAV_EARTH = 0, // earth gravity 9.8m/s2 GRAV_MOON = 1, // moon gravity 2.4m/s2 GRAV_LOW = 2, // very low gravity GRAV_ZERO = 3 // zero gravity }
--- @param level integer
function SetGravityLevel(level) end

--- 0: Freedom to move 1: Circle Around Leader 2: Alternative Circle Around Leader 3: Line, with Leader at center 4: Arrow Formation 5: "V" Formation 6: Line Follow Formation 7: Single Formation 8: Pairwise
--- @param groupId integer
--- @param formationType integer
function SetGroupFormation(groupId, formationType) end

--- @param groupId integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
function SetGroupFormationSpacing(groupId, p1, p2, p3) end

--- Sets the range at which members will automatically leave the group.
--- @param groupHandle integer
--- @param separationRange number
function SetGroupSeparationRange(groupHandle, separationRange) end

--- @param toggle boolean
function SetHandleRockstarMessageViaScript(toggle) end

--- Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta. Example: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`
--- @param vehicle string
--- @param class_ string
--- @param fieldName string
--- @param value any
function SetHandlingField(vehicle, class_, fieldName, value) end

--- Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta. Example: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`
--- @param vehicle string
--- @param class_ string
--- @param fieldName string
--- @param value number
function SetHandlingFloat(vehicle, class_, fieldName, value) end

--- Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.
--- @param vehicle string
--- @param class_ string
--- @param fieldName string
--- @param value integer
function SetHandlingInt(vehicle, class_, fieldName, value) end

--- Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta. Example: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`
--- @param vehicle string
--- @param class_ string
--- @param fieldName string
--- @param value vector3
function SetHandlingVector(vehicle, class_, fieldName, value) end

--- Sets profile setting 866 SET_*
--- @param value integer
function SetHasContentUnlocksFlags(value) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
function SetHdArea(x, y, z, radius) end

--- Preview: https://gfycat.com/MaleRareAmazonparrot
--- @param ped integer
--- @param r integer
--- @param g integer
--- @param b integer
--- @param id integer
function SetHeadBlendPaletteColor(ped, r, g, b, id) end

--- @param health integer
--- @param capacity integer
--- @param wasAdded boolean
function SetHealthHudDisplayValues(health, capacity, wasAdded) end

--- Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f); this native works on planes to?
--- @param vehicle integer
function SetHeliBladesFullSpeed(vehicle) end

--- Sets the speed of the helicopter blades in percentage of the full speed. vehicleHandle: The helicopter. speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
--- @param vehicle integer
--- @param speed number
function SetHeliBladesSpeed(vehicle, speed) end

--- Set a specific offset for helis chasing target in combat NativeDB Introduced: v1180
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
function SetHeliCombatOffset(vehicle, x, y, z) end

--- value between 0.0 and 1.0
--- @param helicopter integer
--- @param multiplier number
function SetHelicopterRollPitchYawMult(helicopter, multiplier) end

--- @param vehicle integer
--- @param health number
function SetHeliMainRotorHealth(vehicle, health) end

--- Makes a helicopter resistant to multiple explosions. When enabled, helicopters can survive two or more explosions. NativeDB Introduced: 2545
--- @param helicopter integer
--- @param bResistToExplosion boolean
function SetHeliResistToExplosion(helicopter, bResistToExplosion) end

--- Enables or disables the ability for a helicopter's tail boom to break off. NativeDB Introduced: v323
--- @param heli integer
--- @param toggle boolean
function SetHeliTailBoomCanBreakOff(heli, toggle) end

--- @param vehicle integer
--- @param health number
function SetHeliTailRotorHealth(vehicle, health) end

--- @param vehicle integer
--- @param p1 number
function SetHeliTurbulenceScalar(vehicle, p1) end

--- @param style integer
--- @param hudColor integer
--- @param alpha integer
--- @param p3 integer
--- @param p4 integer
function SetHelpMessageTextStyle(style, hudColor, alpha, p3, p4) end

--- @param p0 boolean
--- @param p1 boolean
--- @param nearplaneOut number
--- @param nearplaneIn number
--- @param farplaneOut number
--- @param farplaneIn number
function SetHidofOverride(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn) end

--- @param ped integer
--- @param duration any
--- @param p2 any
--- @param p3 any
function SetHighFallTask(ped, duration, p2, p3) end

--- @param vehicle integer
--- @param toggle boolean
function SetHornEnabled(vehicle, toggle) end

--- This native allows opening or closing the wings of the Deluxo/Oppressor. For the Deluxo, wing deployment depends on sufficient altitude.
--- @param vehicle integer
--- @param ratio number
function SetHoverModeWingRatio(vehicle, ratio) end

--- Sets the handler for HTTP requests made to the executing resource. Example request URL: `http://localhost:30120/http-test/ping` - this request will be sent to the `http-test` resource with the `/ping` path. The handler function assumes the following signature: ts function HttpHandler( request: { address: string; headers: Record<string, string>; method: string; path: string; setDataHandler(handler: (data: string) => void): void; setDataHandler(handler: (data: ArrayBuffer) => void, binary: 'binary'): void; setCancelHandler(handler: () => void): void; }, response: { writeHead(code: number, headers?: Record<string, string | string[]>): void; write(data: string): void; send(data?: string): void; } ): void; * **request**: The request object. * **address**: The IP address of the request sender. * **path**: The path to where the request was sent. * **headers**: The headers sent with the request. * **method**: The request method. * **setDataHandler**: Sets the handler for when a data body is passed with the request. Additionally you can pass the `'binary'` argument to receive a `BufferArray` in JavaScript or `System.Byte[]` in C# (has no effect in Lua). * **setCancelHandler**: Sets the handler for when the request is cancelled. * **response**: An object to control the response. * **writeHead**: Sets the status code & headers of the response. Can be only called once and won't work if called after running other response functions. * **write**: Writes to the response body without sending it. Can be called multiple times. * **send**: Writes to the response body and then sends it along with the status code & headers, finishing the request.
--- @param handler function
function SetHttpHandler(handler) end

--- See SET_SCRIPT_GFX_ALIGN for details about how gfx align works.
--- @param id integer
--- @param horizontalAlign integer
--- @param verticalAlign integer
function SetHudComponentAlign(id, horizontalAlign, verticalAlign) end

--- @param id integer
--- @param x number
--- @param y number
function SetHudComponentPosition(id, x, y) end

--- @param id integer
--- @param x number
--- @param y number
function SetHudComponentSize(id, x, y) end

--- @param vehicle integer
--- @param toggle boolean
function SetHydraulicRaised(vehicle, toggle) end

--- @param vehicle integer
--- @param state integer
function SetHydraulicWheelState(vehicle, state) end

--- Sets vehicle wheel hydraulic states transition. Known states: 0 - reset 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE) 2 - jump using wheel
--- @param vehicle integer
--- @param wheelId integer
--- @param state integer
--- @param value number
--- @param p4 number
function SetHydraulicWheelStateTransition(vehicle, wheelId, state, value, p4) end

--- Works only on vehicles that support hydraulic.
--- @param vehicle integer
--- @param wheelId integer
--- @param value number
function SetHydraulicWheelValue(vehicle, wheelId, value) end

--- @param player integer
--- @param toggle boolean
function SetIgnoreLowPriorityShockingEvents(player, toggle) end

--- @param toggle boolean
function SetIgnoreNoGpsFlag(toggle) end

--- See: SET_BLIP_ROUTE
--- @param toggle boolean
function SetIgnoreSecondaryRouteNodes(toggle) end

--- Sets whether or not ownership checks should be performed while trying to stow a carriable on a hunting wagon.
--- @param ignore boolean
function SetIgnoreVehicleOwnershipForStowing(ignore) end

--- Sets the IK target for a given IK part belonging to the ped. **Please note:** The IK target will only be valid for one update, so it needs to be set for as long as it is needed (to avoid IK targets not being cleared and getting stuck enabled). cpp enum eIkPart { IK_PART_INVALID = 0, // head IK_PART_HEAD = 1, // spine IK_PART_SPINE = 2, // Left Arm IK_PART_ARM_LEFT = 3, // Right Arm IK_PART_ARM_RIGHT = 4, // Left Leg IK_PART_LEG_LEFT = 5, // Right Leg IK_PART_LEG_RIGHT = 6 }; cpp enum eIkTargetFlags { ITF_DEFAULT = 0, // arm target relative to the handbone ITF_ARM_TARGET_WRT_HANDBON = 1, // arm target relative to the pointhelper ITF_ARM_TARGET_WRT_POINTHELPER = 2, // arm target relative to the ikhelper ITF_ARM_TARGET_WRT_IKHELPE = 4, // use animation tags directly ITF_IK_TAG_MODE_NORMAL = 8, // use animation tags in ALLOW mode ITF_IK_TAG_MODE_ALLOW = 16, // use animation tags in BLOCK mode ITF_IK_TAG_MODE_BLOCK = 32, // solve for orientation in addition to position ITF_ARM_USE_ORIENTATION = 64 }; NativeDB Introduced: v323
--- @param ped integer
--- @param ikIndex integer
--- @param entityLookAt integer
--- @param boneLookAt integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param ikTargetFlags integer
--- @param blendInDuration integer
--- @param blendOutDuration integer
function SetIkTarget(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, ikTargetFlags, blendInDuration, blendOutDuration) end

--- @param incidentId integer
--- @param dispatchService integer
--- @param numUnits integer
function SetIncidentRequestedUnits(incidentId, dispatchService, numUnits) end

--- SET_INCIDENT_*
--- @param incidentId integer
--- @param p1 number
function SetIncidentUnk(incidentId, p1) end

--- @param radioStation string
function SetInitialPlayerStation(radioStation) end

--- @param padIndex integer
--- @param control integer
function SetInputExclusive(padIndex, control) end

--- Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
--- @param flag integer
function SetInstancePriorityHint(flag) end

--- Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. It causes a loading screen to show as it reloads map data.
--- @param toggle integer
function SetInstancePriorityMode(toggle) end

--- @param interiorID integer
--- @param toggle boolean
function SetInteriorActive(interiorID, toggle) end

--- @param interior integer
--- @param entitySetName string
--- @param color integer
function SetInteriorEntitySetColor(interior, entitySetName, color) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param cornerIndex integer
--- @param posX number
--- @param posY number
--- @param posZ number
function SetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, posX, posY, posZ) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param entityIndex integer
--- @param flag integer
function SetInteriorPortalEntityFlag(interiorId, portalIndex, entityIndex, flag) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param flag integer
function SetInteriorPortalFlag(interiorId, portalIndex, flag) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param roomFrom integer
function SetInteriorPortalRoomFrom(interiorId, portalIndex, roomFrom) end

--- @param interiorId integer
--- @param portalIndex integer
--- @param roomTo integer
function SetInteriorPortalRoomTo(interiorId, portalIndex, roomTo) end

--- Overwrite the games default CPortalTracker interior detection range. This fixes potentially unwanted behaviour in the base game and allows you to build custom interiors with larger ceiling heights without running into graphical glitches. By default CPortalTracker will probe 4 units downward trying to reach collisions that are part of the interior the entity is in. If no collision can be found 16 units are used in some circumstances. There are 30+ hard coded special cases, only some of them exposed via script (for example `ENABLE_STADIUM_PROBES_THIS_FRAME`). This native allows you to extend the probe range up to 150 units which is the same value the game uses for the `xs_arena_interior`
--- @param probeLength number
function SetInteriorProbeLength(probeLength) end

--- @param interiorId integer
--- @param roomIndex integer
--- @param bbMinX number
--- @param bbMinY number
--- @param bbMinZ number
--- @param bbMaxX number
--- @param bbMaxY number
--- @param bbMaxZ number
function SetInteriorRoomExtents(interiorId, roomIndex, bbMinX, bbMinY, bbMinZ, bbMaxX, bbMaxY, bbMaxZ) end

--- @param interiorId integer
--- @param roomIndex integer
--- @param flag integer
function SetInteriorRoomFlag(interiorId, roomIndex, flag) end

--- @param interiorId integer
--- @param roomIndex integer
--- @param timecycleHash integer
function SetInteriorRoomTimecycle(interiorId, roomIndex, timecycleHash) end

--- NativeDB Introduced: v2372
--- @param toggle boolean
function SetInteriorZoomLevelDecreased(toggle) end

--- NativeDB Introduced: v1493
--- @param toggle boolean
function SetInteriorZoomLevelIncreased(toggle) end

--- @param p0 integer
--- @param p1 integer
function SetInVehicleCamStateThisUpdate(p0, p1) end

--- Enables the specified island. For more information, see islandhopper.meta NativeDB Introduced: v2189
--- @param islandName string
--- @param toggle boolean
function SetIslandEnabled(islandName, toggle) end

--- Toggles the visibility of resource names in the FiveM key mapping page.
--- @param hide boolean
function SetKeyMappingHideResources(hide) end

--- @param vehicle integer
function SetLastDrivenVehicle(vehicle) end

--- Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds. NativeDB Introduced: v1604
--- @param toggle boolean
function SetLaunchControlEnabled(toggle) end

--- @param distance number
function SetLightsCutoffDistanceTweak(distance) end

--- Formerly incorrectly named `USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR` due to incorrect treatment of console vs. PC native registration. Native name guessed through ordering. NativeDB Added Parameter 2: BOOL p1
--- @param toggle boolean
function SetLocalPlayerAsGhost(toggle) end

--- @param p0 boolean
function SetLocalPlayerCanCollectPortablePickups(p0) end

--- Maximum amount of pickup models that can be disallowed is 30. SET_LOCAL_PLAYER_*
--- @param modelHash integer
--- @param toggle boolean
function SetLocalPlayerCanUsePickupsWithThisModel(modelHash, toggle) end

--- @param p0 boolean
function SetLocalPlayerInvisibleLocally(p0) end

--- @param p0 boolean
--- @param p1 boolean
function SetLocalPlayerVisibleInCutscene(p0, p1) end

--- @param p0 boolean
function SetLocalPlayerVisibleLocally(p0) end

--- @param color integer
function SetMainPlayerBlipColour(color) end

--- Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled, you will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.
--- @param manualShutdown boolean
function SetManualShutdownLoadingScreenNui(manualShutdown) end

--- Possible p0 values: "prologue" "Prologue_Main"
--- @param name string
--- @param toggle boolean
function SetMapdatacullboxEnabled(name, toggle) end

--- @param mapName string
function SetMapName(mapName) end

--- Sets values to the zoom level data by index.
--- @param index integer
--- @param zoomScale number
--- @param zoomSpeed number
--- @param scrollSpeed number
--- @param tilesX number
--- @param tilesY number
function SetMapZoomDataLevel(index, zoomScale, zoomSpeed, scrollSpeed, tilesX, tilesY) end

--- @param maximumValue integer
function SetMaxArmourHudDisplay(maximumValue) end

--- @param maximumValue integer
function SetMaxHealthHudDisplay(maximumValue) end

--- @param modelHash integer
--- @param p1 integer
function SetMaxNumPortablePickupsCarriedByPlayer(modelHash, p1) end

--- @param maxWantedLevel integer
function SetMaxWantedLevel(maxWantedLevel) end

--- If this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..
--- @param p0 boolean
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param x3 number
--- @param y3 number
--- @param z3 number
function SetMicrophonePosition(p0, x1, y1, z1, x2, y2, z2, x3, y3, z3) end

--- Overrides how many real ms are equal to one game minute. A setter for `GetMillisecondsPerGameMinute`.
--- @param value integer
function SetMillisecondsPerGameMinute(value) end

--- @param toggle boolean
function SetMinigameInProgress(toggle) end

--- Argument must be 0.0f or above 38.0f, or it will be ignored. NativeDB Added Parameter 3: Any p2
--- @param altitude number
--- @param p1 boolean
function SetMinimapAltitudeIndicatorLevel(altitude, p1) end

--- @param toggle boolean
function SetMinimapBlockWaypoint(toggle) end

--- Sets the type for the minimap blip clipping object to be either rectangular or rounded.
--- @param type integer
function SetMinimapClipType(type) end

--- This native is used to colorize/toggle certain map components like the army base. Component IDs 6 through 14 are used by the freemode event King of the Castle in GTA Online. ### An incomplete list of component IDs: * **0**: Los Santos International Airport yellow runway markers * **1**: Sandy Shores Airfield yellow runway markers * **2**: McKenzie Field yellow runway markers * **6**: Vespucci Beach lifeguard building * **7**: Top level zone of Alien Camp (Hippy Camp) * **8**: Paleto Bay fire station drill tower * **9** Land Act Dam tower * **10** Pala Springs Aerial Tramway * **11** Galileo Observatory power unit * **12** Small zone (empty "interior") near Central Los Santos Medical Center * **13** Richman Mansion grotto * **14** 2 Alien Camp (Hippy Camp) circles * **15** Fort Zancudo
--- @param componentID integer
--- @param toggle boolean
--- @param hudColor integer
--- @return any
function SetMinimapComponent(componentID, toggle, hudColor) end

--- Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component.
--- @param name string
--- @param alignX string
--- @param alignY string
--- @param posX number
--- @param posY number
--- @param sizeX number
--- @param sizeY number
function SetMinimapComponentPosition(name, alignX, alignY, posX, posY, sizeX, sizeY) end

--- @param x number
--- @param y number
--- @param z number
function SetMinimapFowRevealCoordinate(x, y, z) end

--- Not much is known so far on what it does *exactly*. All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick. You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap. You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up. Use `SET_MINIMAP_GOLF_COURSE_OFF()` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
--- @param hole integer
function SetMinimapGolfCourse(hole) end

function SetMinimapGolfCourseOff() end

--- If true, the entire map will be revealed.
--- @param toggle boolean
function SetMinimapHideFow(toggle) end

--- Toggles the North Yankton map
--- @param toggle boolean
function SetMinimapInPrologue(toggle) end

--- @param toggle boolean
--- @param ped integer
function SetMinimapInSpectatorMode(toggle, ped) end

--- Sets the display info for a minimap overlay.
--- @param miniMap integer
--- @param x number
--- @param y number
--- @param xScale number
--- @param yScale number
--- @param alpha number
function SetMinimapOverlayDisplay(miniMap, x, y, xScale, yScale, alpha) end

--- Enables or disables the sonar sweep animation on the minimap. NativeDB Introduced: v2189
--- @param toggle boolean
function SetMinimapSonarSweep(toggle) end

--- Possible Types: 0 = Off, 1 = Regular, 2 = Expanded, 3 = Simple,
--- @param type integer
function SetMinimapType(type) end

--- If true, the player can't save the game. If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all. ^ also, if the mission flag is already set, the function does nothing at all
--- @param toggle boolean
function SetMissionFlag(toggle) end

--- @param p0 boolean
--- @param name string
function SetMissionName(p0, name) end

--- @param p0 boolean
--- @param name string
function SetMissionName_2(p0, name) end

--- p1 is always 0
--- @param p1 boolean
--- @param train integer
--- @return integer
function SetMissionTrainAsNoLongerNeeded(p1, train) end

--- @param train integer
--- @param x number
--- @param y number
--- @param z number
function SetMissionTrainCoords(train, x, y, z) end

--- Toggles depth of field on the cellphone camera.
--- @param toggle boolean
function SetMobilePhoneDofState(toggle) end

--- @param posX number
--- @param posY number
--- @param posZ number
function SetMobilePhonePosition(posX, posY, posZ) end

--- @param state boolean
function SetMobilePhoneRadioState(state) end

--- Last parameter is unknown and always zero.
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param p3 any
function SetMobilePhoneRotation(rotX, rotY, rotZ, p3) end

--- The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
--- @param scale number
function SetMobilePhoneScale(scale) end

--- @param toggle boolean
function SetMobileRadioEnabledDuringGameplay(toggle) end

--- Releases the script ownership assigned by REQUEST_MODEL. This command should be used when done using a specific model hash in script.
--- @param model integer
function SetModelAsNoLongerNeeded(model) end

--- **This native is deprecated and does nothing!**
--- @param modelHash integer
--- @param ratePerSecond number
--- @param headlightRotation number
--- @param invertRotation boolean
function SetModelHeadlightConfiguration(modelHash, ratePerSecond, headlightRotation, invertRotation) end

--- Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa. NativeDB Added Parameter 7: Any p6 NativeDB Added Parameter 8: Any p7
--- @param shootingPed integer
--- @param targetPed integer
--- @param targetVehicle integer
--- @param x number
--- @param y number
--- @param z number
function SetMountedWeaponTarget(shootingPed, targetPed, targetVehicle, x, y, z) end

--- Changes the mouse style. cpp enum eMousePointerStyle { ARROW = 1, ARROW_DIMMED = 2, HAND_OPEN = 3, HAND_GRAB = 4, HAND_MIDDLE_FINGER = 5, ARROW_LEFT = 6, ARROW_RIGHT = 7, ARROW_UP = 8, ARROW_DOWN = 9, ARROW_TRIMMING = 10, ARROW_PLUS = 11, ARROW_MINUS = 12 };
--- @param style integer
function SetMouseCursorStyle(style) end

--- Sets the mouse pointer to be active on current frame.
function SetMouseCursorThisFrame() end

--- Toggles the visibility of the cursor. Do note that if the game loses focus and then regains it, the cursor will become visible again.
--- @param isVisible boolean
function SetMouseCursorVisible(isVisible) end

--- name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
--- @param ped integer
--- @param name string
function SetMovementModeOverride(ped, name) end

--- Sets flag's sprite transparency. 0-255.
--- @param gamerTagId integer
--- @param component integer
--- @param alpha integer
function SetMpGamerTagAlpha(gamerTagId, component, alpha) end

--- @param gamerTagId integer
--- @param string string
function SetMpGamerTagBigText(gamerTagId, string) end

--- Sets a gamer tag's component colour
--- @param gamerTagId integer
--- @param component integer
--- @param hudColorIndex integer
function SetMpGamerTagColour(gamerTagId, component, hudColorIndex) end

--- By default, the player health value shown by a gamer tag's health bar is synchronised with the health of the ped it is attached to. This native disables that behaviour, allowing `_SET_MP_GAMER_TAG_OVERRIDE_PLAYER_HEALTH` to have an effect.
--- @param gamerTagId integer
--- @param toggle boolean
function SetMpGamerTagDisablePlayerHealthSync(gamerTagId, toggle) end

--- Should be enabled as component (2). Has 0 alpha by default.
--- @param gamerTagId integer
--- @param hudColorIndex integer
function SetMpGamerTagHealthBarColour(gamerTagId, hudColorIndex) end

--- displays wanted star above head
--- @param gamerTagId integer
--- @param count integer
function SetMpGamerTagMpBagLargeCount(gamerTagId, count) end

--- @param gamerTagId integer
--- @param string string
function SetMpGamerTagName(gamerTagId, string) end

--- Manually sets the player health value for a gamer tag, using the maximum health to calculate what percentage of the bar should be filled. Has no effect unless \_SET_MP_GAMER_TAG_DISABLE_PLAYER_HEALTH_SYNC has been called prior to disable synchronisation with the attached ped.
--- @param gamerTagId integer
--- @param health integer
--- @param maximumHealth integer
function SetMpGamerTagOverridePlayerHealth(gamerTagId, health, maximumHealth) end

--- Sets whether all tags should group (normal game behavior) or should remain independent and above each ped's respective head when in a vehicle.
--- @param enabled boolean
function SetMpGamerTagsUseVehicleBehavior(enabled) end

--- Sets the maximum distance at which all tags will be visible and which beyond will not be displayed. Distance is measured from the camera position.
--- @param distance number
function SetMpGamerTagsVisibleDistance(distance) end

--- Sets the health bar of a gamer tag to show the health of the last (or current) vehicle of the ped the gamer tag is attached to. The vehicle health value is stored separate from the player health and using it won't clear any player health overrides.
--- @param gamerTagId integer
--- @param toggle boolean
function SetMpGamerTagUseVehicleHealth(gamerTagId, toggle) end

--- cpp enum eMpGamerTagComponent { MP_TAG_GAMER_NAME = 0, MP_TAG_CREW_TAG = 1, MP_TAG_HEALTH_ARMOUR = 2, MP_TAG_BIG_TEXT = 3, MP_TAG_AUDIO_ICON = 4, MP_TAG_USING_MENU = 5, MP_TAG_PASSIVE_MODE = 6, MP_TAG_WANTED_STARS = 7, MP_TAG_DRIVER = 8, MP_TAG_CO_DRIVER = 9, MP_TAG_TAGGED = 10, MP_TAG_GAMER_NAME_NEARBY = 11, MP_TAG_ARROW = 12, MP_TAG_PACKAGES = 13, MP_TAG_INV_IF_PED_FOLLOWING = 14, MP_TAG_RANK_TEXT = 15, MP_TAG_TYPING = 16, MP_TAG_BAG_LARGE = 17, MP_TAG_ARROW = 18, MP_TAG_GANG_CEO = 19, MP_TAG_GANG_BIKER = 20, MP_TAG_BIKER_ARROW = 21, MP_TAG_MC_ROLE_PRESIDENT = 22, MP_TAG_MC_ROLE_VICE_PRESIDENT = 23, MP_TAG_MC_ROLE_ROAD_CAPTAIN = 24, MP_TAG_MC_ROLE_SARGEANT = 25, MP_TAG_MC_ROLE_ENFORCER = 26, MP_TAG_MC_ROLE_PROSPECT = 27, MP_TAG_TRANSMITTER = 28, MP_TAG_BOMB = 29 }; NativeDB Added Parameter 4: Any p3
--- @param gamerTagId integer
--- @param component integer
--- @param toggle boolean
function SetMpGamerTagVisibility(gamerTagId, component, toggle) end

--- Sets the visibility of all components of the gamer tag to the specified value.
--- @param gamerTagId integer
--- @param toggle boolean
function SetMpGamerTagVisibilityAll(gamerTagId, toggle) end

--- displays wanted star above head
--- @param gamerTagId integer
--- @param wantedlvl integer
function SetMpGamerTagWantedLevel(gamerTagId, wantedlvl) end

--- Preview image: ![](https://i.imgur.com/1BTmdyv.png) To change the bank balance use `STAT_SET_INT` with "BANK_BALANCE" to whatever value you need to.
function SetMultiplayerBankCash() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 integer
--- @param p1 integer
function SetMultiplayerHudCash(p0, p1) end

--- Preview image: ![](https://i.imgur.com/1BTmdyv.png) To change money value use `STAT_SET_INT` with "MP0\_WALLET_BALANCE" to whatever value you need to.
function SetMultiplayerWalletCash() end

--- @param toggle boolean
function SetNetworkCutsceneEntities(toggle) end

--- Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
--- @param vehicle integer
--- @param toggle boolean
function SetNetworkEnableVehiclePositionCorrection(vehicle, toggle) end

--- @param netId integer
--- @param player integer
--- @param toggle boolean
function SetNetworkIdAlwaysExistsForPlayer(netId, player, toggle) end

--- Whether or not another player is allowed to take control of the entity
--- @param netId integer
--- @param toggle boolean
function SetNetworkIdCanMigrate(netId, toggle) end

--- @param netId integer
--- @param toggle boolean
function SetNetworkIdExistsOnAllMachines(netId, toggle) end

--- @param netId integer
--- @param p1 boolean
--- @param p2 boolean
function SetNetworkIdVisibleInCutscene(netId, p1, p2) end

--- @param vehicle integer
--- @param toggle boolean
function SetNetworkVehicleAsGhost(vehicle, toggle) end

--- rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
--- @param vehicle integer
--- @param multiplier number
function SetNetworkVehiclePositionUpdateMultiplier(vehicle, multiplier) end

--- NativeDB Added Parameter 3: Any p2 NativeDB Added Parameter 4: Any p3
--- @param netId integer
--- @param time integer
function SetNetworkVehicleRespotTimer(netId, time) end

--- @param enabled boolean
function SetNetworkWalkMode(enabled) end

--- @param x number
--- @param y number
function SetNewWaypoint(x, y) end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 number
function SetNextDesiredMoveState(p0) end

--- @param modifierName string
function SetNextPlayerTcmodifier(modifierName) end

--- Enables Night Vision. Example: C#: Function.Call(Hash.SET_NIGHTVISION, true); C++: GRAPHICS::SET_NIGHTVISION(true); BOOL toggle: true = turns night vision on for your player. false = turns night vision off for your player.
--- @param toggle boolean
function SetNightvision(toggle) end

--- NativeDB Introduced: 3095 Activates or deactivates the nitrous system in the specified vehicle, based on the boolean value provided. You can clear the nitrous with `CLEAR_NITROUS`, if you want to have more control on the nitrous and those settings, use `SET_OVERRIDE_NITROUS_LEVEL`
--- @param vehicle integer
--- @param isActive boolean
function SetNitrousIsActive(vehicle, isActive) end

--- @param toggle boolean
function SetNoiseoveride(toggle) end

--- @param value number
function SetNoisinessoveride(value) end

--- @param toggle boolean
function SetNoLoadingScreen(toggle) end

--- @param hasFocus boolean
--- @param hasCursor boolean
function SetNuiFocus(hasFocus, hasCursor) end

--- @param keepInput boolean
function SetNuiFocusKeepInput(keepInput) end

--- Set the z-index of the NUI resource.
--- @param zIndex integer
function SetNuiZindex(zIndex) end

--- @param value integer
function SetNumberOfParkedVehicles(value) end

--- Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
--- @param object integer
--- @param toggle boolean
function SetObjectAllowLowLodBuoyancy(object, toggle) end

--- This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
--- @param object integer
--- @return integer
function SetObjectAsNoLongerNeeded(object) end

--- Overrides a flag on the object which determines if the object should be avoided by a vehicle in task: CTaskVehicleGoToPointWithAvoidanceAutomobile. Tested on vehicles that were created by the vehicle generators.
--- @param object integer
--- @param toggle boolean
function SetObjectForceVehiclesToAvoid(object, toggle) end

--- Sets color of embedded light source. Only appears in am_mp_nightclub.c for the nightclub dancefloor. Not sure what p1 does, seems to only ever be '1' in scripts. NativeDB Introduced: v1493
--- @param object integer
--- @param p1 boolean
--- @param r integer
--- @param g integer
--- @param b integer
--- @return any
function SetObjectLightColor(object, p1, r, g, b) end

--- rage::phArchetypeDamp p9: Some phBoundGeometry margin value, limited to (0.0, 0.1) exclusive.
--- @param object integer
--- @param mass number
--- @param gravityFactor number
--- @param linearC number
--- @param linearV number
--- @param linearV2 number
--- @param angularC number
--- @param angularV number
--- @param angularV2 number
--- @param p9 number
--- @param maxAngSpeed number
--- @param buoyancyFactor number
function SetObjectPhysicsParams(object, mass, gravityFactor, linearC, linearV, linearV2, angularC, angularV, angularV2, p9, maxAngSpeed, buoyancyFactor) end

--- @param object integer
--- @param duration number
function SetObjectStuntPropDuration(object, duration) end

--- Sets the intensity of Speed Boost and Slow Down props. The corresponding values for Speed Boosts in the Creator are:\ Weak: `15`\ Normal: `25`\ Strong: `35`\ Extra Strong: `45`\ Ultra Strong: `100` For Slow Downs:\ Weak: `44`\ Normal: `30`\ Strong: `16`
--- @param object integer
--- @param intensity integer
function SetObjectStuntPropSpeedup(object, intensity) end

--- @param object integer
--- @param targettable boolean
function SetObjectTargettable(object, targettable) end

--- @param object integer
--- @param setFlag34 boolean
--- @param setFlag35 boolean
function SetObjectTargettableByPlayer(object, setFlag34, setFlag35) end

--- cpp enum eObjectPaintVariants { Pacific = 0, Azure = 1, Nautical = 2, Continental = 3, Battleship = 4, Intrepid = 5, Uniform = 6, Classico = 7, Mediterranean = 8, Command = 9, Mariner = 10, Ruby = 11, Vintage = 12, Pristine = 13, Merchant = 14, Voyager = 15 };
--- @param object integer
--- @param textureVariation integer
function SetObjectTextureVariation(object, textureVariation) end

--- Enables or disables the opening of a vehicle's rear doors in the event of a sticky bomb explosion. This native is effective for armored vehicles, such as the Stockade (Brinks vehicle), allowing the rear doors to be opened through controlled explosions, which might otherwise remain locked due to the vehicle nature.
--- @param vehicle integer
--- @param toggle boolean
function SetOpenRearDoorsOnExplosion(vehicle, toggle) end

--- Set state to true to extend the wings, false to retract them.
--- @param vehicle integer
--- @param extend boolean
function SetOppressorTransformState(vehicle, extend) end

--- NativeDB Introduced: v1604 NativeDB Added Parameter 2 (2060): float durationMod : A multiplier applied to the default nitrous duration (default is 3 seconds). NativeDB Added Parameter 3 (2060): float power : A multiplier applied to the default nitrous power multiplier (default is 3). NativeDB Added Parameter 4 (2060): float rechargeTime : A multiplier applied to the default nitrous recharge rate. NativeDB Added Parameter 5 (2060): BOOL disableSound : A boolean to disable the default nitrous sound when the nitrous is active. Overrides the default settings of a vehicle's nitrous system, allowing custom control over its performance characteristics.
--- @param vehicle integer
--- @param override boolean
function SetOverrideNitrousLevel(vehicle, override) end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @param weatherType string
function SetOverrideWeather(weatherType) end

--- p0 always seems to be 0 duration in milliseconds frequency should range from about 10 (slow vibration) to 255 (very fast) example: SET_PAD_SHAKE(0, 100, 200);
--- @param padIndex integer
--- @param duration integer
--- @param frequency integer
function SetPadShake(padIndex, duration, frequency) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
function SetParachuteTaskTarget(ped, x, y, z) end

--- @param ped integer
--- @param thrust number
function SetParachuteTaskThrust(ped, thrust) end

--- @param multiplier number
function SetParkedVehicleDensityMultiplierThisFrame(multiplier) end

--- @param scale number
function SetParticleFxBulletImpactScale(scale) end

--- @param vehicle integer
--- @param p1 boolean
function SetParticleFxCamInsideNonplayerVehicle(vehicle, p1) end

--- @param p0 boolean
function SetParticleFxCamInsideVehicle(p0) end

--- @param ptfxHandle integer
--- @param alpha number
function SetParticleFxLoopedAlpha(ptfxHandle, alpha) end

--- Sets the colour tint of a previously started looped particle effect You can use the inverse lerp method to normalize in a range from 0.0 to 1.0 an rgb
--- @param ptfxHandle integer
--- @param r number
--- @param g number
--- @param b number
--- @param bLocalOnly boolean
function SetParticleFxLoopedColour(ptfxHandle, r, g, b, bLocalOnly) end

--- @param ptfxHandle integer
--- @param propertyName string
--- @param amount number
--- @param noNetwork boolean
function SetParticleFxLoopedEvolution(ptfxHandle, propertyName, amount, noNetwork) end

--- @param ptfxHandle integer
--- @param range number
function SetParticleFxLoopedFarClipDist(ptfxHandle, range) end

--- @param ptfxHandle integer
--- @param x number
--- @param y number
--- @param z number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
function SetParticleFxLoopedOffsets(ptfxHandle, x, y, z, rotX, rotY, rotZ) end

--- @param ptfxHandle integer
--- @param scale number
function SetParticleFxLoopedScale(ptfxHandle, scale) end

--- Usage example for C#: Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f }); Note: the argument alpha ranges from 0.0f-1.0f !
--- @param alpha number
function SetParticleFxNonLoopedAlpha(alpha) end

--- Only works on some fx's, while on others it might SEEM to work "properly", but the colors can be "strange" or even completly different from what you've expected. Reason for this is that those fx's might already have colors "baked into them" which then start to act as a "mixing palette", resulting in a different color than expected. A hypothetical example of this would be if the fx itself is already full (bright) red (RGB: 1.0, 0.0, 0.0) and you then set the color to (bright) green (RGB: 0.0, 1.0, 0.0), that it MIGHT result in Yellow (RGB: 1.0, 1.0, 0.0). This doc previously stated that the set color is **NOT** networked, however it does actually turns out to be networked. Tested with all fireworks effects and several other FX effects resulted in colored fx effects on all clients when used in combination with START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD. This might however not be the case for all types of particle fx's, so it's recommended to test this thoroughly with multiple clients before releasing your script for example.
--- @param r number
--- @param g number
--- @param b number
function SetParticleFxNonLoopedColour(r, g, b) end

--- NativeDB Introduced: v2699
--- @param p0 number
--- @param p1 number
--- @param scale number
function SetParticleFxNonLoopedEmitterScale(p0, p1, scale) end

--- @param oldAsset string
--- @param newAsset string
function SetParticleFxOverride(oldAsset, newAsset) end

--- @param p0 any
function SetParticleFxShootoutBoat(p0) end

--- This native is deprecated. If you're looking to: * Toggle the pause menu on, use `ACTIVATE_FRONTEND_MENU` * Toggle the pause menu off, use `SET_FRONTEND_ACTIVE` * Disable toggling the pause menu, use `DISABLE_FRONTEND_THIS_FRAME`
--- @param toggle boolean
function SetPauseMenuActive(toggle) end

--- Toggles the light state for the pause menu ped in frontend menus. This is used by R\* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online. Example: On: lights on Off: lights off
--- @param state boolean
function SetPauseMenuPedLighting(state) end

--- Toggles the pause menu ped sleep state for frontend menus. Example GIF
--- @param state boolean
function SetPauseMenuPedSleepState(state) end

--- accuracy = 0-100, 100 being perfectly accurate
--- @param ped integer
--- @param accuracy integer
function SetPedAccuracy(ped, accuracy) end

--- if "flag" is true, the AI blip will always be displayed for the specified ped, if it has an AI blip If "flag" is false, the AI blip will only be displayed when the player is in combat with the specified ped, if it has an AI blip
--- @param ped integer
--- @param toggle boolean
function SetPedAiBlipForcedOn(ped, toggle) end

--- @param ped integer
--- @param gangId integer
function SetPedAiBlipGangId(ped, gangId) end

--- @param ped integer
--- @param toggle boolean
function SetPedAiBlipHasCone(ped, toggle) end

--- @param ped integer
--- @param range number
function SetPedAiBlipNoticeRange(ped, range) end

--- @param ped integer
--- @param spriteId integer
function SetPedAiBlipSprite(ped, spriteId) end

--- value ranges from 0 to 3.
--- @param ped integer
--- @param value integer
function SetPedAlertness(ped, value) end

--- @param ped integer
--- @param toggle boolean
function SetPedAllowedToDuck(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedAllowVehiclesOverride(ped, toggle) end

--- stance: 0 = idle 1 = walk 2 = running p5 = usually set to true Animations list
--- @param ped integer
--- @param stance integer
--- @param animDictionary string
--- @param animationName string
--- @param p4 number
--- @param p5 boolean
function SetPedAlternateMovementAnim(ped, stance, animDictionary, animationName, p4, p5) end

--- Animations list
--- @param ped integer
--- @param animDict string
--- @param animName string
--- @param p3 number
--- @param p4 boolean
function SetPedAlternateWalkAnim(ped, animDict, animName, p3, p4) end

--- NativeDB Added Parameter 4: BOOL p3
--- @param ped integer
--- @param weaponHash integer
--- @param ammo integer
function SetPedAmmo(ped, weaponHash, ammo) end

--- NativeDB Added Parameter 4: BOOL p3 **This is the server-side RPC native equivalent of the client native SET_PED_AMMO.**
--- @param ped integer
--- @param weaponHash integer
--- @param ammo integer
function SetPedAmmo(ped, weaponHash, ammo) end

--- @param ped integer
--- @param ammoType integer
--- @param ammo integer
function SetPedAmmoByType(ped, ammoType, ammo) end

--- @param ped integer
--- @param ammo integer
function SetPedAmmoToDrop(ped, ammo) end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 boolean
--- @param p9 boolean
function SetPedAngledDefensiveArea(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9) end

--- Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
--- @param ped integer
--- @param toggle boolean
function SetPedAoBlobRendering(ped, toggle) end

--- Sets the armor of the specified ped. ped: The Ped to set the armor of. amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
--- @param ped integer
--- @param amount integer
function SetPedArmour(ped, amount) end

--- Sets the armor of the specified ped. ped: The Ped to set the armor of. amount: A value between 0 and 100 indicating the value to set the Ped's armor to. **This is the server-side RPC native equivalent of the client native SET_PED_ARMOUR.**
--- @param ped integer
--- @param amount integer
function SetPedArmour(ped, amount) end

--- Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
--- @param ped integer
--- @param toggle boolean
function SetPedAsCop(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedAsEnemy(ped, toggle) end

--- @param ped integer
--- @param groupId integer
function SetPedAsGroupLeader(ped, groupId) end

--- @param ped integer
--- @param groupId integer
function SetPedAsGroupMember(ped, groupId) end

--- This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
--- @param ped integer
--- @return integer
function SetPedAsNoLongerNeeded(ped) end

--- Enables/disables ped's "loud" footstep sound. NativeDB Introduced: v1493
--- @param ped integer
--- @param toggle boolean
function SetPedAudioFootstepLoud(ped, toggle) end

--- @param ped integer
--- @param p1 boolean
function SetPedAudioGender(ped, p1) end

--- @param ped integer
--- @param father integer
--- @param mother integer
--- @param fathersSide number
--- @param mothersSide number
function SetPedBlendFromParents(ped, father, mother, fathersSide, mothersSide) end

--- @param ped integer
--- @param toggle boolean
function SetPedBlocksPathingWhenDead(ped, toggle) end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
function SetPedBoundsOrientation(ped, p1, p2, p3, p4, p5) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanArmIk(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanBeDraggedOut(ped, toggle) end

--- state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
--- @param ped integer
--- @param state integer
function SetPedCanBeKnockedOffVehicle(ped, state) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanBeShotInVehicle(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanBeTargetedWhenInjured(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanBeTargetedWithoutLos(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanBeTargetted(ped, toggle) end

--- @param ped integer
--- @param player integer
--- @param toggle boolean
function SetPedCanBeTargettedByPlayer(ped, player, toggle) end

--- @param ped integer
--- @param team integer
--- @param toggle boolean
function SetPedCanBeTargettedByTeam(ped, team, toggle) end

--- It simply makes the said ped to cower behind cover object(wall, desk, car) Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
--- @param ped integer
--- @param toggle boolean
function SetPedCanCowerInCover(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanEvasiveDive(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanHeadIk(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanLegIk(ped, toggle) end

--- It makes the ped lose (or not lose) their props (like glasses or helmets/hat) when someone punches or pushes the ped. This is probably what's being used in GTA:O to keep players from knocking other player's hats/glasses off when in combat.
--- @param ped integer
--- @param loseProps boolean
--- @param p2 integer
function SetPedCanLosePropsOnDamage(ped, loseProps, p2) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanPeekInCover(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanPlayAmbientAnims(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanPlayAmbientBaseAnims(ped, toggle) end

--- Prevents a ped from playing ambient idle animations. **Note:** This native must be called every frame.
--- @param ped integer
--- @param bBlockIdleClips boolean
--- @param bRemoveIdleClipIfPlaying boolean
function SetPedCanPlayAmbientIdles(ped, bBlockIdleClips, bRemoveIdleClipIfPlaying) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanPlayGestureAnims(ped, toggle) end

--- @param ped integer
--- @param p1 boolean
function SetPedCanPlayInjuredAnims(ped, p1) end

--- p2 usually 0
--- @param ped integer
--- @param toggle boolean
--- @param p2 boolean
function SetPedCanPlayVisemeAnims(ped, toggle, p2) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanRagdoll(ped, toggle) end

--- SET_PED_CAN_RAGDOLL **This is the server-side RPC native equivalent of the client native SET_PED_CAN_RAGDOLL.**
--- @param ped integer
--- @param toggle boolean
function SetPedCanRagdoll(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanRagdollFromPlayerImpact(ped, toggle) end

--- @param ped integer
--- @param p1 boolean
--- @param p2 boolean
function SetPedCanSmashGlass(ped, p1, p2) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanSwitchWeapon(ped, toggle) end

--- This only will teleport the ped to the group leader if the group leader teleports (sets coords). Only works in singleplayer
--- @param pedHandle integer
--- @param groupHandle integer
--- @param toggle boolean
function SetPedCanTeleportToGroupLeader(pedHandle, groupHandle, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanTorsoIk(ped, toggle) end

--- @param ped integer
--- @param p1 boolean
function SetPedCanTorsoReactIk(ped, p1) end

--- @param ped integer
--- @param p1 boolean
function SetPedCanTorsoVehicleIk(ped, p1) end

--- @param ped integer
--- @param toggle boolean
function SetPedCanUseAutoConversationLookat(ped, toggle) end

--- Overrides the ped's collision capsule radius for the current tick. Must be called every tick to be effective. Setting this to 0.001 will allow warping through some objects.
--- @param ped integer
--- @param value number
function SetPedCapsule(ped, value) end

--- @param ped integer
--- @param xBias number
--- @param yBias number
function SetPedChanceOfFiringBlanks(ped, xBias, yBias) end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @param enabled boolean
function SetPedClothEventsEnabled(ped, enabled) end

--- @param ped integer
--- @param p1 integer
function SetPedClothPackageIndex(ped, p1) end

--- @param p0 any
--- @param p1 any
function SetPedClothProne(p0, p1) end

--- An alternative to SET_PED_COMPONENT_VARIATION that uses local collection indexing instead of the global one. The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version. Collection name and local index inside the collection can be obtained from the global index using GET_PED_COLLECTION_NAME_FROM_DRAWABLE and GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE natives.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @param drawableId integer
--- @param textureId integer
--- @param paletteId integer
function SetPedCollectionComponentVariation(ped, componentId, collection, drawableId, textureId, paletteId) end

--- An alternative to SET_PED_PRELOAD_PROP_DATA that uses local collection indexing instead of the global one. The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version. Collection name and local index inside the collection can be obtained from the global index using GET_PED_COLLECTION_NAME_FROM_PROP and GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP natives.
--- @param ped integer
--- @param anchorPoint integer
--- @param collection string
--- @param propIndex integer
--- @param textureId integer
function SetPedCollectionPreloadPropData(ped, anchorPoint, collection, propIndex, textureId) end

--- An alternative to SET_PED_PRELOAD_VARIATION_DATA that uses local collection indexing instead of the global one. The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version. Collection name and local index inside the collection can be obtained from the global index using GET_PED_COLLECTION_NAME_FROM_DRAWABLE and GET_PED_COLLECTION_LOCAL_INDEX_FROM_DRAWABLE natives.
--- @param ped integer
--- @param componentId integer
--- @param collection string
--- @param drawableId integer
--- @param textureId integer
function SetPedCollectionPreloadVariationData(ped, componentId, collection, drawableId, textureId) end

--- An alternative to SET_PED_PROP_INDEX that uses local collection indexing instead of the global one. The local / collection relative indexing is useful because the global index may get shifted after Title Update. While local index will remain the same which simplifies migration to the newer game version. Collection name and local index inside the collection can be obtained from the global index using GET_PED_COLLECTION_NAME_FROM_PROP and GET_PED_COLLECTION_LOCAL_INDEX_FROM_PROP natives.
--- @param ped integer
--- @param anchorPoint integer
--- @param collection string
--- @param propIndex integer
--- @param textureId integer
--- @param attach boolean
function SetPedCollectionPropIndex(ped, anchorPoint, collection, propIndex, textureId, attach) end

--- 100 would equal attack less then 50ish would mean run away Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta: 0: CA_Poor 1: CA_Average 2: CA_Professional Tested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.
--- @param ped integer
--- @param p1 integer
function SetPedCombatAbility(ped, p1) end

--- These combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta. So far, these are the equivalents found: cpp enum eCombatAttribute { CA_INVALID = -1, // AI will only use cover if this is set CA_USE_COVER = 0, // AI will only use vehicles if this is set CA_USE_VEHICLE = 1, // AI will only driveby from a vehicle if this is set CA_DO_DRIVEBYS = 2, // Will be forced to stay in a ny vehicel if this isn't set CA_LEAVE_VEHICLES = 3, // This ped can make decisions on whether to strafe or not based on distance to destination, recent bullet events, etc. CA_CAN_USE_DYNAMIC_STRAFE_DECISIONS = 4, // Ped will always fight upon getting threat response task CA_ALWAYS_FIGHT = 5, // If in combat and in a vehicle, the ped will flee rather than attacking CA_FLEE_WHILST_IN_VEHICLE = 6, // If in combat and chasing in a vehicle, the ped will keep a distance behind rather than ramming CA_JUST_FOLLOW_VEHICLE = 7, // Deprecated CA_PLAY_REACTION_ANIMS = 8, // Peds will scan for and react to dead peds found CA_WILL_SCAN_FOR_DEAD_PEDS = 9, // Deprecated CA_IS_A_GUARD = 10, // The ped will seek cover only CA_JUST_SEEK_COVER = 11, // Ped will only blind fire when in cover CA_BLIND_FIRE_IN_COVER = 12, // Ped may advance CA_AGGRESSIVE = 13, // Ped can investigate events such as distant gunfire, footsteps, explosions etc CA_CAN_INVESTIGATE = 14, // Ped can use a radio to call for backup (happens after a reaction) CA_CAN_USE_RADIO = 15, // Deprecated CA_CAN_CAPTURE_ENEMY_PEDS = 16, // Ped will always flee upon getting threat response task CA_ALWAYS_FLEE = 17, // Ped can do unarmed taunts in vehicle CA_CAN_TAUNT_IN_VEHICLE = 20, // Ped will be able to chase their targets if both are on foot and the target is running away CA_CAN_CHASE_TARGET_ON_FOOT = 21, // Ped can drag injured peds to safety CA_WILL_DRAG_INJURED_PEDS_TO_SAFETY = 22, // Ped will require LOS to the target it is aiming at before shooting CA_REQUIRES_LOS_TO_SHOOT = 23, // Ped is allowed to use proximity based fire rate (increasing fire rate at closer distances) CA_USE_PROXIMITY_FIRING_RATE = 24, // Normally peds can switch briefly to a secondary target in combat, setting this will prevent that CA_DISABLE_SECONDARY_TARGET = 25, // This will disable the flinching combat entry reactions for peds, instead only playing the turn and aim anims CA_DISABLE_ENTRY_REACTIONS = 26, // Force ped to be 100% accurate in all situations (added by Jay Reinebold) CA_PERFECT_ACCURACY = 27, // If we don't have cover and can't see our target it's possible we will advance, even if the target is in cover CA_CAN_USE_FRUSTRATED_ADVANCE = 28, // This will have the ped move to defensive areas and within attack windows before performing the cover search CA_MOVE_TO_LOCATION_BEFORE_COVER_SEARCH = 29, // Allow shooting of our weapon even if we don't have LOS (this isn't X-ray vision as it only affects weapon firing) CA_CAN_SHOOT_WITHOUT_LOS = 30, // Ped will try to maintain a min distance to the target, even if using defensive areas (currently only for cover finding + usage) CA_MAINTAIN_MIN_DISTANCE_TO_TARGET = 31, // Allows ped to use steamed variations of peeking anims CA_CAN_USE_PEEKING_VARIATIONS = 34, // Disables pinned down behaviors CA_DISABLE_PINNED_DOWN = 35, // Disables pinning down others CA_DISABLE_PIN_DOWN_OTHERS = 36, // When defensive area is reached the area is cleared and the ped is set to use defensive combat movement CA_OPEN_COMBAT_WHEN_DEFENSIVE_AREA_IS_REACHED = 37, // Disables bullet reactions CA_DISABLE_BULLET_REACTIONS = 38, // Allows ped to bust the player CA_CAN_BUST = 39, // This ped is ignored by other peds when wanted CA_IGNORED_BY_OTHER_PEDS_WHEN_WANTED = 40, // Ped is allowed to "jack" vehicles when needing to chase a target in combat CA_CAN_COMMANDEER_VEHICLES = 41, // Ped is allowed to flank CA_CAN_FLANK = 42, // Ped will switch to advance if they can't find cover CA_SWITCH_TO_ADVANCE_IF_CANT_FIND_COVER = 43, // Ped will switch to defensive if they are in cover CA_SWITCH_TO_DEFENSIVE_IF_IN_COVER = 44, // Ped will clear their primary defensive area when it is reached CA_CLEAR_PRIMARY_DEFENSIVE_AREA_WHEN_REACHED = 45, // Ped is allowed to fight armed peds when not armed CA_CAN_FIGHT_ARMED_PEDS_WHEN_NOT_ARMED = 46, // Ped is not allowed to use tactical points if set to use defensive movement (will only use cover) CA_ENABLE_TACTICAL_POINTS_WHEN_DEFENSIVE = 47, // Ped cannot adjust cover arcs when testing cover safety (atm done on corner cover points when ped usingdefensive area + no LOS) CA_DISABLE_COVER_ARC_ADJUSTMENTS = 48, // Ped may use reduced accuracy with large number of enemies attacking the same local player target CA_USE_ENEMY_ACCURACY_SCALING = 49, // Ped is allowed to charge the enemy position CA_CAN_CHARGE = 50, // When defensive area is reached the area is cleared and the ped is set to use will advance movement CA_REMOVE_AREA_SET_WILL_ADVANCE_WHEN_DEFENSIVE_AREA_REACHED = 51, // Use the vehicle attack mission during combat (only works on driver) CA_USE_VEHICLE_ATTACK = 52, // Use the vehicle attack mission during combat if the vehicle has mounted guns (only works on driver) CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS = 53, // Always equip best weapon in combat CA_ALWAYS_EQUIP_BEST_WEAPON = 54, // Ignores in water at depth visibility check CA_CAN_SEE_UNDERWATER_PEDS = 55, // Will prevent this ped from aiming at any AI targets that are in helicopters CA_DISABLE_AIM_AT_AI_TARGETS_IN_HELIS = 56, // Disables peds seeking due to no clear line of sight CA_DISABLE_SEEK_DUE_TO_LINE_OF_SIGHT = 57, // To be used when releasing missions peds if we don't want them fleeing from combat (mission peds already prevent flee) CA_DISABLE_FLEE_FROM_COMBAT = 58, // Disables target changes during vehicle pursuit CA_DISABLE_TARGET_CHANGES_DURING_VEHICLE_PURSUIT = 59, // Ped may throw a smoke grenade at player loitering in combat CA_CAN_THROW_SMOKE_GRENADE = 60, // Will clear a set defensive area if that area cannot be reached CA_CLEAR_AREA_SET_DEFENSIVE_IF_DEFENSIVE_CANNOT_BE_REACHED = 62, // Disable block from pursue during vehicle chases CA_DISABLE_BLOCK_FROM_PURSUE_DURING_VEHICLE_CHASE = 64, // Disable spin out during vehicle chases CA_DISABLE_SPIN_OUT_DURING_VEHICLE_CHASE = 65, // Disable cruise in front during block during vehicle chases CA_DISABLE_CRUISE_IN_FRONT_DURING_BLOCK_DURING_VEHICLE_CHASE = 66, // Makes it more likely that the ped will continue targeting a target with blocked los for a few seconds CA_CAN_IGNORE_BLOCKED_LOS_WEIGHTING = 67, // Disables the react to buddy shot behaviour. CA_DISABLE_REACT_TO_BUDDY_SHOT = 68, // Prefer pathing using navmesh over road nodes CA_PREFER_NAVMESH_DURING_VEHICLE_CHASE = 69, // Ignore road edges when avoiding CA_ALLOWED_TO_AVOID_OFFROAD_DURING_VEHICLE_CHASE = 70, // Permits ped to charge a target outside the assigned defensive area. CA_PERMIT_CHARGE_BEYOND_DEFENSIVE_AREA = 71, // This ped will switch to an RPG if target is in a vehicle, otherwise will use alternate weapon. CA_USE_ROCKETS_AGAINST_VEHICLES_ONLY = 72, // Disables peds moving to a tactical point without clear los CA_DISABLE_TACTICAL_POINTS_WITHOUT_CLEAR_LOS = 73, // Disables pull alongside during vehicle chase CA_DISABLE_PULL_ALONGSIDE_DURING_VEHICLE_CHASE = 74, // If set on a ped, they will not flee when all random peds flee is set to TRUE (they are still able to flee due to other reasons) CA_DISABLE_ALL_RANDOMS_FLEE = 78, // This ped will send out a script DeadPedSeenEvent when they see a dead ped CA_WILL_GENERATE_DEAD_PED_SEEN_SCRIPT_EVENTS = 79, // This will use the receiving peds sense range rather than the range supplied to the communicate event CA_USE_MAX_SENSE_RANGE_WHEN_RECEIVING_EVENTS = 80, // When aiming from a vehicle the ped will only aim at targets on his side of the vehicle CA_RESTRICT_IN_VEHICLE_AIMING_TO_CURRENT_SIDE = 81, // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming) CA_USE_DEFAULT_BLOCKED_LOS_POSITION_AND_DIRECTION = 82, // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming) CA_REQUIRES_LOS_TO_AIM = 83, // Allow vehicles spawned infront of target facing away to enter cruise and wait to block approaching target CA_CAN_CRUISE_AND_BLOCK_IN_VEHICLE = 84, // Peds flying aircraft will prefer to target other aircraft over entities on the ground CA_PREFER_AIR_COMBAT_WHEN_IN_AIRCRAFT = 85, //Allow peds flying aircraft to use dog fighting behaviours CA_ALLOW_DOG_FIGHTING = 86, // This will make the weight of targets who aircraft vehicles be reduced greatly compared to targets on foot or in ground based vehicles CA_PREFER_NON_AIRCRAFT_TARGETS = 87, //When peds are tasked to go to combat, they keep searching for a known target for a while before forcing an unknown one CA_PREFER_KNOWN_TARGETS_WHEN_COMBAT_CLOSEST_TARGET = 88, // Only allow mounted weapons to fire if within the correct attack angle (default 25-degree cone). On a flag in order to keep exiting behaviour and only fix in specific cases. CA_FORCE_CHECK_ATTACK_ANGLE_FOR_MOUNTED_GUNS = 89, // Blocks the firing state for passenger-controlled mounted weapons. Existing flags CA_USE_VEHICLE_ATTACK and CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS only work for drivers. CA_BLOCK_FIRE_FOR_VEHICLE_PASSENGER_MOUNTED_GUNS = 90 };
--- @param ped integer
--- @param attributeIndex integer
--- @param enabled boolean
function SetPedCombatAttributes(ped, attributeIndex, enabled) end

--- 0 - Stationary (Will just stand in place) 1 - Defensive (Will try to find cover and very likely to blind fire) 2 - Offensive (Will attempt to charge at enemy but take cover as well) 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
--- @param ped integer
--- @param combatMovement integer
function SetPedCombatMovement(ped, combatMovement) end

--- Define the scope within which the ped will engage in combat with the target. cpp enum eCombatRange { CR_NEAR = 0, // keeps within 5-15m CR_MEDIUM = 1, // keeps within 7-30m CR_FAR = 2, // keeps within 15-40m CR_VERY_FAR = 3 // keeps within 22-45m };
--- @param ped integer
--- @param range integer
function SetPedCombatRange(ped, range) end

--- This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model. ### MP Freemode list of components **0**: Face **1**: Mask **2**: Hair **3**: Torso **4**: Leg **5**: Parachute / bag **6**: Shoes **7**: Accessory **8**: Undershirt **9**: Kevlar **10**: Badge **11**: Torso 2 List of Component IDs cpp // Components enum ePedVarComp { PV_COMP_INVALID = 0xFFFFFFFF, PV_COMP_HEAD = 0, // "HEAD" PV_COMP_BERD = 1, // "BEARD" PV_COMP_HAIR = 2, // "HAIR" PV_COMP_UPPR = 3, // "UPPER" PV_COMP_LOWR = 4, // "LOWER" PV_COMP_HAND = 5, // "HAND" PV_COMP_FEET = 6, // "FEET" PV_COMP_TEEF = 7, // "TEETH" PV_COMP_ACCS = 8, // "ACCESSORIES" PV_COMP_TASK = 9, // "TASK" PV_COMP_DECL = 10, // "DECL" PV_COMP_JBIB = 11, // "JBIB" PV_COMP_MAX = 12, };
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @param paletteId integer
function SetPedComponentVariation(ped, componentId, drawableId, textureId, paletteId) end

--- This native is used to set component variation on a ped. Components, drawables and textures IDs are related to the ped model. ### MP Freemode list of components **0**: Face **1**: Mask **2**: Hair **3**: Torso **4**: Leg **5**: Parachute / bag **6**: Shoes **7**: Accessory **8**: Undershirt **9**: Kevlar **10**: Badge **11**: Torso 2 List of Component IDs cpp // Components enum ePedVarComp { PV_COMP_INVALID = 0xFFFFFFFF, PV_COMP_HEAD = 0, // "HEAD" PV_COMP_BERD = 1, // "BEARD" PV_COMP_HAIR = 2, // "HAIR" PV_COMP_UPPR = 3, // "UPPER" PV_COMP_LOWR = 4, // "LOWER" PV_COMP_HAND = 5, // "HAND" PV_COMP_FEET = 6, // "FEET" PV_COMP_TEEF = 7, // "TEETH" PV_COMP_ACCS = 8, // "ACCESSORIES" PV_COMP_TASK = 9, // "TASK" PV_COMP_DECL = 10, // "DECL" PV_COMP_JBIB = 11, // "JBIB" PV_COMP_MAX = 12, }; **This is the server-side RPC native equivalent of the client native SET_PED_COMPONENT_VARIATION.**
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @param paletteId integer
function SetPedComponentVariation(ped, componentId, drawableId, textureId, paletteId) end

--- cpp // Potential names and hash collisions included as comments enum ePedConfigFlags { CPED_CONFIG_FLAG_CreatedByFactory = 0, CPED_CONFIG_FLAG_CanBeShotInVehicle = 1, CPED_CONFIG_FLAG_NoCriticalHits = 2, CPED_CONFIG_FLAG_DrownsInWater = 3, CPED_CONFIG_FLAG_DrownsInSinkingVehicle = 4, CPED_CONFIG_FLAG_DiesInstantlyWhenSwimming = 5, CPED_CONFIG_FLAG_HasBulletProofVest = 6, CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7, CPED_CONFIG_FLAG_NeverFallOffSkis = 8, CPED_CONFIG_FLAG_NeverEverTargetThisPed = 9, CPED_CONFIG_FLAG_ThisPedIsATargetPriority = 10, CPED_CONFIG_FLAG_TargettableWithNoLos = 11, CPED_CONFIG_FLAG_DoesntListenToPlayerGroupCommands = 12, CPED_CONFIG_FLAG_NeverLeavesGroup = 13, CPED_CONFIG_FLAG_DoesntDropWeaponsWhenDead = 14, CPED_CONFIG_FLAG_SetDelayedWeaponAsCurrent = 15, CPED_CONFIG_FLAG_KeepTasksAfterCleanUp = 16, CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17, CPED_CONFIG_FLAG_HasAScriptBrain = 18, CPED_CONFIG_FLAG_WaitingForScriptBrainToLoad = 19, CPED_CONFIG_FLAG_AllowMedicsToReviveMe = 20, CPED_CONFIG_FLAG_MoneyHasBeenGivenByScript = 21, CPED_CONFIG_FLAG_NotAllowedToCrouch = 22, CPED_CONFIG_FLAG_DeathPickupsPersist = 23, CPED_CONFIG_FLAG_IgnoreSeenMelee = 24, CPED_CONFIG_FLAG_ForceDieIfInjured = 25, CPED_CONFIG_FLAG_DontDragMeOutCar = 26, CPED_CONFIG_FLAG_StayInCarOnJack = 27, CPED_CONFIG_FLAG_ForceDieInCar = 28, CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29, CPED_CONFIG_FLAG_WillRemainOnBoatAfterMissionEnds = 30, CPED_CONFIG_FLAG_DontStoreAsPersistent = 31, CPED_CONFIG_FLAG_WillFlyThroughWindscreen = 32, CPED_CONFIG_FLAG_DieWhenRagdoll = 33, CPED_CONFIG_FLAG_HasHelmet = 34, CPED_CONFIG_FLAG_UseHelmet = 35, CPED_CONFIG_FLAG_DontTakeOffHelmet = 36, CPED_CONFIG_FLAG_HideInCutscene = 37, CPED_CONFIG_FLAG_PedIsEnemyToPlayer = 38, CPED_CONFIG_FLAG_DisableEvasiveDives = 39, CPED_CONFIG_FLAG_PedGeneratesDeadBodyEvents = 40, CPED_CONFIG_FLAG_DontAttackPlayerWithoutWantedLevel = 41, CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42, CPED_CONFIG_FLAG_DisablePlayerLockon = 43, CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44, CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45, _0xDB115BFA = 46, CPED_CONFIG_FLAG_PedBeingDeleted = 47, CPED_CONFIG_FLAG_BlockWeaponSwitching = 48, CPED_CONFIG_FLAG_BlockGroupPedAimedAtResponse = 49, CPED_CONFIG_FLAG_WillFollowLeaderAnyMeans = 50, CPED_CONFIG_FLAG_BlippedByScript = 51, CPED_CONFIG_FLAG_DrawRadarVisualField = 52, CPED_CONFIG_FLAG_StopWeaponFiringOnImpact = 53, CPED_CONFIG_FLAG_DissableAutoFallOffTests = 54, CPED_CONFIG_FLAG_SteerAroundDeadBodies = 55, CPED_CONFIG_FLAG_ConstrainToNavMesh = 56, CPED_CONFIG_FLAG_SyncingAnimatedProps = 57, CPED_CONFIG_FLAG_IsFiring = 58, CPED_CONFIG_FLAG_WasFiring = 59, CPED_CONFIG_FLAG_IsStanding = 60, CPED_CONFIG_FLAG_WasStanding = 61, CPED_CONFIG_FLAG_InVehicle = 62, CPED_CONFIG_FLAG_OnMount = 63, CPED_CONFIG_FLAG_AttachedToVehicle = 64, CPED_CONFIG_FLAG_IsSwimming = 65, CPED_CONFIG_FLAG_WasSwimming = 66, CPED_CONFIG_FLAG_IsSkiing = 67, CPED_CONFIG_FLAG_IsSitting = 68, CPED_CONFIG_FLAG_KilledByStealth = 69, CPED_CONFIG_FLAG_KilledByTakedown = 70, CPED_CONFIG_FLAG_Knockedout = 71, CPED_CONFIG_FLAG_ClearRadarBlipOnDeath = 72, CPED_CONFIG_FLAG_JustGotOffTrain = 73, CPED_CONFIG_FLAG_JustGotOnTrain = 74, CPED_CONFIG_FLAG_UsingCoverPoint = 75, CPED_CONFIG_FLAG_IsInTheAir = 76, CPED_CONFIG_FLAG_KnockedUpIntoAir = 77, CPED_CONFIG_FLAG_IsAimingGun = 78, CPED_CONFIG_FLAG_HasJustLeftCar = 79, CPED_CONFIG_FLAG_TargetWhenInjuredAllowed = 80, CPED_CONFIG_FLAG_CurrLeftFootCollNM = 81, CPED_CONFIG_FLAG_PrevLeftFootCollNM = 82, CPED_CONFIG_FLAG_CurrRightFootCollNM = 83, CPED_CONFIG_FLAG_PrevRightFootCollNM = 84, CPED_CONFIG_FLAG_HasBeenBumpedInCar = 85, CPED_CONFIG_FLAG_InWaterTaskQuitToClimbLadder = 86, CPED_CONFIG_FLAG_NMTwoHandedWeaponBothHandsConstrained = 87, CPED_CONFIG_FLAG_CreatedBloodPoolTimer = 88, CPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact = 89, CPED_CONFIG_FLAG_GroupPedFailedToEnterCover = 90, CPED_CONFIG_FLAG_AlreadyChattedOnPhone = 91, CPED_CONFIG_FLAG_AlreadyReactedToPedOnRoof = 92, CPED_CONFIG_FLAG_ForcePedLoadCover = 93, CPED_CONFIG_FLAG_BlockCoweringInCover = 94, CPED_CONFIG_FLAG_BlockPeekingInCover = 95, CPED_CONFIG_FLAG_JustLeftCarNotCheckedForDoors = 96, CPED_CONFIG_FLAG_VaultFromCover = 97, CPED_CONFIG_FLAG_AutoConversationLookAts = 98, CPED_CONFIG_FLAG_UsingCrouchedPedCapsule = 99, CPED_CONFIG_FLAG_HasDeadPedBeenReported = 100, CPED_CONFIG_FLAG_ForcedAim = 101, CPED_CONFIG_FLAG_SteersAroundPeds = 102, CPED_CONFIG_FLAG_SteersAroundObjects = 103, CPED_CONFIG_FLAG_OpenDoorArmIK = 104, CPED_CONFIG_FLAG_ForceReload = 105, CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106, CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107, CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108, CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109, CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110, CPED_CONFIG_FLAG_IsBeingDraggedToSafety = 111, CPED_CONFIG_FLAG_HasBeenDraggedToSafety = 112, CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113, CPED_CONFIG_FLAG_ForceScriptControlledKnockout = 114, CPED_CONFIG_FLAG_FallOutOfVehicleWhenKilled = 115, CPED_CONFIG_FLAG_GetOutBurningVehicle = 116, CPED_CONFIG_FLAG_BumpedByPlayer = 117, CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118, CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119, CPED_CONFIG_FLAG_IsHandCuffed = 120, CPED_CONFIG_FLAG_IsAnkleCuffed = 121, CPED_CONFIG_FLAG_DisableMelee = 122, CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123, CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124, CPED_CONFIG_FLAG_UNUSED_REPLACE_ME = 125, CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126, CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127, CPED_CONFIG_FLAG_CanBeAgitated = 128, CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129, CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130, CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131, CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132, CPED_CONFIG_FLAG_ForcePedToBeDragged = 133, CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134, CPED_CONFIG_FLAG_IsScuba = 135, CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136, CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137, CPED_CONFIG_FLAG_RidingTrain = 138, CPED_CONFIG_FLAG_ArrestResult = 139, CPED_CONFIG_FLAG_CanAttackFriendly = 140, CPED_CONFIG_FLAG_WillJackAnyPlayer = 141, CPED_CONFIG_FLAG_BumpedByPlayerVehicle = 142, CPED_CONFIG_FLAG_DodgedPlayerVehicle = 143, CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144, CPED_CONFIG_FLAG_NoCopWantedAggro = 145, CPED_CONFIG_FLAG_DisableLadderClimbing = 146, CPED_CONFIG_FLAG_StairsDetected = 147, CPED_CONFIG_FLAG_SlopeDetected = 148, CPED_CONFIG_FLAG_HelmetHasBeenShot = 149, CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150, CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151, CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152, CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153, CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154, CPED_CONFIG_FLAG_CanPerformArrest = 155, CPED_CONFIG_FLAG_CanPerformUncuff = 156, CPED_CONFIG_FLAG_CanBeArrested = 157, CPED_CONFIG_FLAG_MoverConstrictedByOpposingCollisions = 158, CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159, CPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject = 160, CPED_CONFIG_FLAG_DontActivateRagdollFromMelee = 161, CPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet = 162, CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning = 163, CPED_CONFIG_FLAG_DontActivateRagdollFromFalling = 164, CPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet = 165, CPED_CONFIG_FLAG_IsInjured = 166, CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167, CPED_CONFIG_FLAG_SwimmingTasksRunning = 168, CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169, CPED_CONFIG_FLAG_ForceDirectEntry = 170, CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171, CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172, CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173, CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174, CPED_CONFIG_FLAG_PlayerInContactWithKinematicPed = 175, CPED_CONFIG_FLAG_PlayerInContactWithSomethingOtherThanKinematicPed = 176, CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177, CPED_CONFIG_FLAG_AdditionalRappellingPed = 178, CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179, CPED_CONFIG_FLAG_IsInCustody = 180, CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181, CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182, CPED_CONFIG_FLAG_IsAgitated = 183, CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184, CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185, CPED_CONFIG_FLAG_EnableWeaponBlocking = 186, CPED_CONFIG_FLAG_HasHurtStarted = 187, CPED_CONFIG_FLAG_DisableHurt = 188, CPED_CONFIG_FLAG_PlayerIsWeird = 189, CPED_CONFIG_FLAG_PedHadPhoneConversation = 190, CPED_CONFIG_FLAG_BeganCrossingRoad = 191, CPED_CONFIG_FLAG_WarpIntoLeadersVehicle = 192, CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193, CPED_CONFIG_FLAG_UsingScenario = 194, CPED_CONFIG_FLAG_VisibleOnScreen = 195, CPED_CONFIG_FLAG_DontCollideWithKinematic = 196, CPED_CONFIG_FLAG_ActivateOnSwitchFromLowPhysicsLod = 197, CPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead = 198, CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199, CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200, CPED_CONFIG_FLAG_UseDiminishingAmmoRate = 201, CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202, CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203, CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204, CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205, CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206, CPED_CONFIG_FLAG_LowPhysicsLodMayPlaceOnNavMesh = 207, CPED_CONFIG_FLAG_DisableExplosionReactions = 208, CPED_CONFIG_FLAG_DodgedPlayer = 209, CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210, CPED_CONFIG_FLAG_ForcedToStayInCover = 211, CPED_CONFIG_FLAG_GeneratesSoundEvents = 212, CPED_CONFIG_FLAG_ListensToSoundEvents = 213, CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214, CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215, CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216, CPED_CONFIG_FLAG_ForceExitToSkyDive = 217, CPED_CONFIG_FLAG_SteersAroundVehicles = 218, CPED_CONFIG_FLAG_AllowPedInVehiclesOverrideTaskFlags = 219, CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220, CPED_CONFIG_FLAG_DisableExitToSkyDive = 221, CPED_CONFIG_FLAG_ScriptHasDisabledCollision = 222, CPED_CONFIG_FLAG_UseAmbientModelScaling = 223, CPED_CONFIG_FLAG_DontWatchFirstOnNextHurryAway = 224, CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225, CPED_CONFIG_FLAG_DisablePedAvoidance = 226, CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227, CPED_CONFIG_FLAG_CanLosePropsOnDamage = 228, CPED_CONFIG_FLAG_DisablePanicInVehicle = 229, CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230, CPED_CONFIG_FLAG_HasShotBeenReactedToFromFront = 231, CPED_CONFIG_FLAG_HasShotBeenReactedToFromBack = 232, CPED_CONFIG_FLAG_HasShotBeenReactedToFromLeft = 233, CPED_CONFIG_FLAG_HasShotBeenReactedToFromRight = 234, CPED_CONFIG_FLAG_AllowBlockDeadPedRagdollActivation = 235, CPED_CONFIG_FLAG_IsHoldingProp = 236, CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237, CPED_CONFIG_FLAG_ForcePlayNormalScenarioExitOnNextScriptCommand = 238, CPED_CONFIG_FLAG_ForcePlayImmediateScenarioExitOnNextScriptCommand = 239, CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240, CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241, CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242, CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243, CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244, CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245, CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246, CPED_CONFIG_FLAG_InStrafeTransition = 247, CPED_CONFIG_FLAG_CanPlayInCarIdles = 248, CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249, CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250, CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251, CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252, CPED_CONFIG_FLAG_OnStairs = 253, CPED_CONFIG_FLAG_SimulatingAiming = 254, CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255, CPED_CONFIG_FLAG_ParentCarIsBeingRemoved = 256, CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257, CPED_CONFIG_FLAG_CanLoseHelmetOnDamage = 258, CPED_CONFIG_FLAG_NeverDoScenarioExitProbeChecks = 259, CPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles = 260, CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261, CPED_CONFIG_FLAG_JustLeftVehicleNeedsReset = 262, CPED_CONFIG_FLAG_TeleportIfCantReachPlayer = 263, CPED_CONFIG_FLAG_PedsInVehiclePositionNeedsReset = 264, CPED_CONFIG_FLAG_PedsFullyInSeat = 265, CPED_CONFIG_FLAG_AllowPlayerLockOnIfFriendly = 266, CPED_CONFIG_FLAG_UseCameraHeadingForDesiredDirectionLockOnTest = 267, CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268, CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269, CPED_CONFIG_FLAG_OnStairSlope = 270, CPED_CONFIG_FLAG_HasPlayedNMGetup = 271, CPED_CONFIG_FLAG_DontBlipCop = 272, CPED_CONFIG_FLAG_SpawnedAtExtendedRangeScenario = 273, CPED_CONFIG_FLAG_WalkAlongsideLeaderWhenClose = 274, CPED_CONFIG_FLAG_KillWhenTrapped = 275, CPED_CONFIG_FLAG_EdgeDetected = 276, CPED_CONFIG_FLAG_AlwaysWakeUpPhysicsOfIntersectedPeds = 277, CPED_CONFIG_FLAG_EquippedAmbientLoadOutWeapon = 278, CPED_CONFIG_FLAG_AvoidTearGas = 279, CPED_CONFIG_FLAG_StoppedSpeechUponFreezing = 280, CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281, CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282, CPED_CONFIG_FLAG_ThrownFromVehicleDueToExhaustion = 283, CPED_CONFIG_FLAG_UpdateEnclosedSearchRegion = 284, CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285, CPED_CONFIG_FLAG_ShouldChargeNow = 286, CPED_CONFIG_FLAG_RagdollingOnBoat = 287, CPED_CONFIG_FLAG_HasBrandishedWeapon = 288, CPED_CONFIG_FLAG_AllowMinorReactionsAsMissionPed = 289, CPED_CONFIG_FLAG_BlockDeadBodyShockingEventsWhenDead = 290, CPED_CONFIG_FLAG_PedHasBeenSeen = 291, CPED_CONFIG_FLAG_PedIsInReusePool = 292, CPED_CONFIG_FLAG_PedWasReused = 293, CPED_CONFIG_FLAG_DisableShockingEvents = 294, CPED_CONFIG_FLAG_MovedUsingLowLodPhysicsSinceLastActive = 295, CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296, CPED_CONFIG_FLAG_ForcePlayFleeScenarioExitOnNextScriptCommand = 297, CPED_CONFIG_FLAG_JustBumpedIntoVehicle = 298, CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299, CPED_CONFIG_FLAG_ShouldThrowSmokeNow = 300, CPED_CONFIG_FLAG_DisablePedConstraints = 301, CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302, CPED_CONFIG_FLAG_CreatedByDispatch = 303, CPED_CONFIG_FLAG_PointGunLeftHandSupporting = 304, CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305, CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerPedImpact = 306, CPED_CONFIG_FLAG_DontActivateRagdollFromAiRagdollImpact = 307, CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerRagdollImpact = 308, CPED_CONFIG_FLAG_DisableQuadrupedSpring = 309, CPED_CONFIG_FLAG_IsInCluster = 310, CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311, CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312, CPED_CONFIG_FLAG_PreferInjuredGetup = 313, CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314, CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315, CPED_CONFIG_FLAG_JackedAbandonedCar = 316, CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317, CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318, CPED_CONFIG_FLAG_HasPortablePickupAttached = 319, CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320, CPED_CONFIG_FLAG_HasClothCollisionBounds = 321, CPED_CONFIG_FLAG_HasHighHeels = 322, CPED_CONFIG_FLAG_TreatAsAmbientPedForDriverLockOn = 323, CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324, CPED_CONFIG_FLAG_SpawnedAtScenario = 325, CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326, CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327, CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328, CPED_CONFIG_FLAG_DisableTalkTo = 329, CPED_CONFIG_FLAG_DontBlip = 330, CPED_CONFIG_FLAG_IsSwitchingWeapon = 331, CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332, CPED_CONFIG_FLAG_ScriptForceNoTimesliceIntelligenceUpdate = 333, CPED_CONFIG_FLAG_JackedOutOfMyVehicle = 334, CPED_CONFIG_FLAG_WentIntoCombatAfterBeingJacked = 335, CPED_CONFIG_FLAG_DontActivateRagdollForVehicleGrab = 336, CPED_CONFIG_FLAG_ForcePackageCharacterCloth = 337, CPED_CONFIG_FLAG_DontRemoveWithValidOrder = 338, CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339, CPED_CONFIG_FLAG_ForcedToStayInCoverDueToPlayerSwitch = 340, CPED_CONFIG_FLAG_ForceProneCharacterCloth = 341, CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342, CPED_CONFIG_FLAG_InToStrafeTransition = 343, CPED_CONFIG_FLAG_KilledByStandardMelee = 344, CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345, CPED_CONFIG_FLAG_ForcePlayDirectedNormalScenarioExitOnNextScriptCommand = 346, CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347, CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348, CPED_CONFIG_FLAG_EquipJetpack = 349, CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350, CPED_CONFIG_FLAG_ScriptHasCompletelyDisabledCollision = 351, CPED_CONFIG_FLAG_NeverDoScenarioNavChecks = 352, CPED_CONFIG_FLAG_ForceSynchronousScenarioExitChecking = 353, CPED_CONFIG_FLAG_ThrowingGrenadeWhileAiming = 354, CPED_CONFIG_FLAG_HeadbobToRadioEnabled = 355, CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356, CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357, CPED_CONFIG_FLAG_DontBlipNotSynced = 358, CPED_CONFIG_FLAG_IsDuckingInVehicle = 359, CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360, CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361, CPED_CONFIG_FLAG_HasReserveParachute = 362, CPED_CONFIG_FLAG_UseReserveParachute = 363, CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364, CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365, CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366, CPED_CONFIG_FLAG_DontActivateRagdollFromSmokeGrenade = 367, CPED_CONFIG_FLAG_LinkMBRToOwnerOnChain = 368, CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayer = 369, CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayerVehicle = 370, CPED_CONFIG_FLAG_InFPSUnholsterTransition = 371, CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372, CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373, CPED_CONFIG_FLAG_NeverLeaveTrain = 374, CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375, CPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll = 376, CPED_CONFIG_FLAG_ExitingFPSCombatRoll = 377, CPED_CONFIG_FLAG_ScriptHasControlOfPlayer = 378, CPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile = 379, CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380, CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInAircraft = 381, CPED_CONFIG_FLAG_WasPlayingFPSGetup = 382, CPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult = 383, CPED_CONFIG_FLAG_PreferNoPriorityRemoval = 384, CPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire = 385, CPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim = 386, CPED_CONFIG_FLAG_SwitchingCharactersInFirstPerson = 387, CPED_CONFIG_FLAG_IsClimbingLadder = 388, CPED_CONFIG_FLAG_HasBareFeet = 389, CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390, CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391, CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392, CPED_CONFIG_FLAG_ResetLastVehicleOnVehicleExit = 393, CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394, CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395, CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396, CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397, CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398, CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399, CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400, CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401, CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402, CPED_CONFIG_FLAG_ChangeFromPermanentToAmbientPopTypeOnMigration = 403, CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404, CPED_CONFIG_FLAG_UsingLowriderLeans = 405, CPED_CONFIG_FLAG_UsingAlternateLowriderLeans = 406, CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407, CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408, CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409, CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410, CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411, CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412, CPED_CONFIG_FLAG_IsHolsteringWeapon = 413, CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414, CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415, CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416, CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417, CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418, CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419, CPED_CONFIG_FLAG_IsPerformingVehicleMelee = 420, CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421, CPED_CONFIG_FLAG_DisableVehicleCombat = 422, CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamage = 423, CPED_CONFIG_FLAG_AllowBikeAlternateAnimations = 424, CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamageNonSynced = 425, CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426, CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427, CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428, CPED_CONFIG_FLAG_DisableStartEngine = 429, CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430, CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431, CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432, CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433, CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434, CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435, CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436, CPED_CONFIG_FLAG_DontShoutTargetPosition = 437, CPED_CONFIG_FLAG_DisableHelmetArmor = 438, CPED_CONFIG_FLAG_CreatedByConcealedPlayer = 439, CPED_CONFIG_FLAG_PermanentlyDisablePotentialToBeWalkedIntoResponse = 440, CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441, CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442, CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443, CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444, CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445, CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446, CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447, CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448, CPED_CONFIG_FLAG_FiresDummyRockets = 449, CPED_CONFIG_FLAG_PedIsArresting = 450, CPED_CONFIG_FLAG_IsDecoyPed = 451, CPED_CONFIG_FLAG_HasEstablishedDecoy = 452, CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453, CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454, CPED_CONFIG_FLAG_HitByTranqWeapon = 455, CPED_CONFIG_FLAG_CanBeIncapacitated = 456, CPED_CONFIG_FLAG_ForcedAimFromArrest = 457, CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458, _0x4376ABF2 = 459, CPED_CONFIG_FLAG_RagdollFloatsIndefinitely = 460, CPED_CONFIG_FLAG_BlockElectricWeaponDamage = 461, _0x262A3B8E = 462, _0x1AA79A25 = 463, }
--- @param ped integer
--- @param flagId integer
--- @param value boolean
function SetPedConfigFlag(ped, flagId, value) end

--- cpp // Potential names and hash collisions included as comments enum ePedConfigFlags { CPED_CONFIG_FLAG_CreatedByFactory = 0, CPED_CONFIG_FLAG_CanBeShotInVehicle = 1, CPED_CONFIG_FLAG_NoCriticalHits = 2, CPED_CONFIG_FLAG_DrownsInWater = 3, CPED_CONFIG_FLAG_DrownsInSinkingVehicle = 4, CPED_CONFIG_FLAG_DiesInstantlyWhenSwimming = 5, CPED_CONFIG_FLAG_HasBulletProofVest = 6, CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7, CPED_CONFIG_FLAG_NeverFallOffSkis = 8, CPED_CONFIG_FLAG_NeverEverTargetThisPed = 9, CPED_CONFIG_FLAG_ThisPedIsATargetPriority = 10, CPED_CONFIG_FLAG_TargettableWithNoLos = 11, CPED_CONFIG_FLAG_DoesntListenToPlayerGroupCommands = 12, CPED_CONFIG_FLAG_NeverLeavesGroup = 13, CPED_CONFIG_FLAG_DoesntDropWeaponsWhenDead = 14, CPED_CONFIG_FLAG_SetDelayedWeaponAsCurrent = 15, CPED_CONFIG_FLAG_KeepTasksAfterCleanUp = 16, CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17, CPED_CONFIG_FLAG_HasAScriptBrain = 18, CPED_CONFIG_FLAG_WaitingForScriptBrainToLoad = 19, CPED_CONFIG_FLAG_AllowMedicsToReviveMe = 20, CPED_CONFIG_FLAG_MoneyHasBeenGivenByScript = 21, CPED_CONFIG_FLAG_NotAllowedToCrouch = 22, CPED_CONFIG_FLAG_DeathPickupsPersist = 23, CPED_CONFIG_FLAG_IgnoreSeenMelee = 24, CPED_CONFIG_FLAG_ForceDieIfInjured = 25, CPED_CONFIG_FLAG_DontDragMeOutCar = 26, CPED_CONFIG_FLAG_StayInCarOnJack = 27, CPED_CONFIG_FLAG_ForceDieInCar = 28, CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29, CPED_CONFIG_FLAG_WillRemainOnBoatAfterMissionEnds = 30, CPED_CONFIG_FLAG_DontStoreAsPersistent = 31, CPED_CONFIG_FLAG_WillFlyThroughWindscreen = 32, CPED_CONFIG_FLAG_DieWhenRagdoll = 33, CPED_CONFIG_FLAG_HasHelmet = 34, CPED_CONFIG_FLAG_UseHelmet = 35, CPED_CONFIG_FLAG_DontTakeOffHelmet = 36, CPED_CONFIG_FLAG_HideInCutscene = 37, CPED_CONFIG_FLAG_PedIsEnemyToPlayer = 38, CPED_CONFIG_FLAG_DisableEvasiveDives = 39, CPED_CONFIG_FLAG_PedGeneratesDeadBodyEvents = 40, CPED_CONFIG_FLAG_DontAttackPlayerWithoutWantedLevel = 41, CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42, CPED_CONFIG_FLAG_DisablePlayerLockon = 43, CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44, CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45, _0xDB115BFA = 46, CPED_CONFIG_FLAG_PedBeingDeleted = 47, CPED_CONFIG_FLAG_BlockWeaponSwitching = 48, CPED_CONFIG_FLAG_BlockGroupPedAimedAtResponse = 49, CPED_CONFIG_FLAG_WillFollowLeaderAnyMeans = 50, CPED_CONFIG_FLAG_BlippedByScript = 51, CPED_CONFIG_FLAG_DrawRadarVisualField = 52, CPED_CONFIG_FLAG_StopWeaponFiringOnImpact = 53, CPED_CONFIG_FLAG_DissableAutoFallOffTests = 54, CPED_CONFIG_FLAG_SteerAroundDeadBodies = 55, CPED_CONFIG_FLAG_ConstrainToNavMesh = 56, CPED_CONFIG_FLAG_SyncingAnimatedProps = 57, CPED_CONFIG_FLAG_IsFiring = 58, CPED_CONFIG_FLAG_WasFiring = 59, CPED_CONFIG_FLAG_IsStanding = 60, CPED_CONFIG_FLAG_WasStanding = 61, CPED_CONFIG_FLAG_InVehicle = 62, CPED_CONFIG_FLAG_OnMount = 63, CPED_CONFIG_FLAG_AttachedToVehicle = 64, CPED_CONFIG_FLAG_IsSwimming = 65, CPED_CONFIG_FLAG_WasSwimming = 66, CPED_CONFIG_FLAG_IsSkiing = 67, CPED_CONFIG_FLAG_IsSitting = 68, CPED_CONFIG_FLAG_KilledByStealth = 69, CPED_CONFIG_FLAG_KilledByTakedown = 70, CPED_CONFIG_FLAG_Knockedout = 71, CPED_CONFIG_FLAG_ClearRadarBlipOnDeath = 72, CPED_CONFIG_FLAG_JustGotOffTrain = 73, CPED_CONFIG_FLAG_JustGotOnTrain = 74, CPED_CONFIG_FLAG_UsingCoverPoint = 75, CPED_CONFIG_FLAG_IsInTheAir = 76, CPED_CONFIG_FLAG_KnockedUpIntoAir = 77, CPED_CONFIG_FLAG_IsAimingGun = 78, CPED_CONFIG_FLAG_HasJustLeftCar = 79, CPED_CONFIG_FLAG_TargetWhenInjuredAllowed = 80, CPED_CONFIG_FLAG_CurrLeftFootCollNM = 81, CPED_CONFIG_FLAG_PrevLeftFootCollNM = 82, CPED_CONFIG_FLAG_CurrRightFootCollNM = 83, CPED_CONFIG_FLAG_PrevRightFootCollNM = 84, CPED_CONFIG_FLAG_HasBeenBumpedInCar = 85, CPED_CONFIG_FLAG_InWaterTaskQuitToClimbLadder = 86, CPED_CONFIG_FLAG_NMTwoHandedWeaponBothHandsConstrained = 87, CPED_CONFIG_FLAG_CreatedBloodPoolTimer = 88, CPED_CONFIG_FLAG_DontActivateRagdollFromAnyPedImpact = 89, CPED_CONFIG_FLAG_GroupPedFailedToEnterCover = 90, CPED_CONFIG_FLAG_AlreadyChattedOnPhone = 91, CPED_CONFIG_FLAG_AlreadyReactedToPedOnRoof = 92, CPED_CONFIG_FLAG_ForcePedLoadCover = 93, CPED_CONFIG_FLAG_BlockCoweringInCover = 94, CPED_CONFIG_FLAG_BlockPeekingInCover = 95, CPED_CONFIG_FLAG_JustLeftCarNotCheckedForDoors = 96, CPED_CONFIG_FLAG_VaultFromCover = 97, CPED_CONFIG_FLAG_AutoConversationLookAts = 98, CPED_CONFIG_FLAG_UsingCrouchedPedCapsule = 99, CPED_CONFIG_FLAG_HasDeadPedBeenReported = 100, CPED_CONFIG_FLAG_ForcedAim = 101, CPED_CONFIG_FLAG_SteersAroundPeds = 102, CPED_CONFIG_FLAG_SteersAroundObjects = 103, CPED_CONFIG_FLAG_OpenDoorArmIK = 104, CPED_CONFIG_FLAG_ForceReload = 105, CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106, CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107, CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108, CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109, CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110, CPED_CONFIG_FLAG_IsBeingDraggedToSafety = 111, CPED_CONFIG_FLAG_HasBeenDraggedToSafety = 112, CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113, CPED_CONFIG_FLAG_ForceScriptControlledKnockout = 114, CPED_CONFIG_FLAG_FallOutOfVehicleWhenKilled = 115, CPED_CONFIG_FLAG_GetOutBurningVehicle = 116, CPED_CONFIG_FLAG_BumpedByPlayer = 117, CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118, CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119, CPED_CONFIG_FLAG_IsHandCuffed = 120, CPED_CONFIG_FLAG_IsAnkleCuffed = 121, CPED_CONFIG_FLAG_DisableMelee = 122, CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123, CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124, CPED_CONFIG_FLAG_UNUSED_REPLACE_ME = 125, CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126, CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127, CPED_CONFIG_FLAG_CanBeAgitated = 128, CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129, CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130, CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131, CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132, CPED_CONFIG_FLAG_ForcePedToBeDragged = 133, CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134, CPED_CONFIG_FLAG_IsScuba = 135, CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136, CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137, CPED_CONFIG_FLAG_RidingTrain = 138, CPED_CONFIG_FLAG_ArrestResult = 139, CPED_CONFIG_FLAG_CanAttackFriendly = 140, CPED_CONFIG_FLAG_WillJackAnyPlayer = 141, CPED_CONFIG_FLAG_BumpedByPlayerVehicle = 142, CPED_CONFIG_FLAG_DodgedPlayerVehicle = 143, CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144, CPED_CONFIG_FLAG_NoCopWantedAggro = 145, CPED_CONFIG_FLAG_DisableLadderClimbing = 146, CPED_CONFIG_FLAG_StairsDetected = 147, CPED_CONFIG_FLAG_SlopeDetected = 148, CPED_CONFIG_FLAG_HelmetHasBeenShot = 149, CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150, CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151, CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152, CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153, CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154, CPED_CONFIG_FLAG_CanPerformArrest = 155, CPED_CONFIG_FLAG_CanPerformUncuff = 156, CPED_CONFIG_FLAG_CanBeArrested = 157, CPED_CONFIG_FLAG_MoverConstrictedByOpposingCollisions = 158, CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159, CPED_CONFIG_FLAG_DontActivateRagdollFromImpactObject = 160, CPED_CONFIG_FLAG_DontActivateRagdollFromMelee = 161, CPED_CONFIG_FLAG_DontActivateRagdollFromWaterJet = 162, CPED_CONFIG_FLAG_DontActivateRagdollFromDrowning = 163, CPED_CONFIG_FLAG_DontActivateRagdollFromFalling = 164, CPED_CONFIG_FLAG_DontActivateRagdollFromRubberBullet = 165, CPED_CONFIG_FLAG_IsInjured = 166, CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167, CPED_CONFIG_FLAG_SwimmingTasksRunning = 168, CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169, CPED_CONFIG_FLAG_ForceDirectEntry = 170, CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171, CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172, CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173, CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174, CPED_CONFIG_FLAG_PlayerInContactWithKinematicPed = 175, CPED_CONFIG_FLAG_PlayerInContactWithSomethingOtherThanKinematicPed = 176, CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177, CPED_CONFIG_FLAG_AdditionalRappellingPed = 178, CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179, CPED_CONFIG_FLAG_IsInCustody = 180, CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181, CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182, CPED_CONFIG_FLAG_IsAgitated = 183, CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184, CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185, CPED_CONFIG_FLAG_EnableWeaponBlocking = 186, CPED_CONFIG_FLAG_HasHurtStarted = 187, CPED_CONFIG_FLAG_DisableHurt = 188, CPED_CONFIG_FLAG_PlayerIsWeird = 189, CPED_CONFIG_FLAG_PedHadPhoneConversation = 190, CPED_CONFIG_FLAG_BeganCrossingRoad = 191, CPED_CONFIG_FLAG_WarpIntoLeadersVehicle = 192, CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193, CPED_CONFIG_FLAG_UsingScenario = 194, CPED_CONFIG_FLAG_VisibleOnScreen = 195, CPED_CONFIG_FLAG_DontCollideWithKinematic = 196, CPED_CONFIG_FLAG_ActivateOnSwitchFromLowPhysicsLod = 197, CPED_CONFIG_FLAG_DontActivateRagdollOnPedCollisionWhenDead = 198, CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199, CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200, CPED_CONFIG_FLAG_UseDiminishingAmmoRate = 201, CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202, CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203, CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204, CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205, CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206, CPED_CONFIG_FLAG_LowPhysicsLodMayPlaceOnNavMesh = 207, CPED_CONFIG_FLAG_DisableExplosionReactions = 208, CPED_CONFIG_FLAG_DodgedPlayer = 209, CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210, CPED_CONFIG_FLAG_ForcedToStayInCover = 211, CPED_CONFIG_FLAG_GeneratesSoundEvents = 212, CPED_CONFIG_FLAG_ListensToSoundEvents = 213, CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214, CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215, CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216, CPED_CONFIG_FLAG_ForceExitToSkyDive = 217, CPED_CONFIG_FLAG_SteersAroundVehicles = 218, CPED_CONFIG_FLAG_AllowPedInVehiclesOverrideTaskFlags = 219, CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220, CPED_CONFIG_FLAG_DisableExitToSkyDive = 221, CPED_CONFIG_FLAG_ScriptHasDisabledCollision = 222, CPED_CONFIG_FLAG_UseAmbientModelScaling = 223, CPED_CONFIG_FLAG_DontWatchFirstOnNextHurryAway = 224, CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225, CPED_CONFIG_FLAG_DisablePedAvoidance = 226, CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227, CPED_CONFIG_FLAG_CanLosePropsOnDamage = 228, CPED_CONFIG_FLAG_DisablePanicInVehicle = 229, CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230, CPED_CONFIG_FLAG_HasShotBeenReactedToFromFront = 231, CPED_CONFIG_FLAG_HasShotBeenReactedToFromBack = 232, CPED_CONFIG_FLAG_HasShotBeenReactedToFromLeft = 233, CPED_CONFIG_FLAG_HasShotBeenReactedToFromRight = 234, CPED_CONFIG_FLAG_AllowBlockDeadPedRagdollActivation = 235, CPED_CONFIG_FLAG_IsHoldingProp = 236, CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237, CPED_CONFIG_FLAG_ForcePlayNormalScenarioExitOnNextScriptCommand = 238, CPED_CONFIG_FLAG_ForcePlayImmediateScenarioExitOnNextScriptCommand = 239, CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240, CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241, CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242, CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243, CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244, CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245, CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246, CPED_CONFIG_FLAG_InStrafeTransition = 247, CPED_CONFIG_FLAG_CanPlayInCarIdles = 248, CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249, CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250, CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251, CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252, CPED_CONFIG_FLAG_OnStairs = 253, CPED_CONFIG_FLAG_SimulatingAiming = 254, CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255, CPED_CONFIG_FLAG_ParentCarIsBeingRemoved = 256, CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257, CPED_CONFIG_FLAG_CanLoseHelmetOnDamage = 258, CPED_CONFIG_FLAG_NeverDoScenarioExitProbeChecks = 259, CPED_CONFIG_FLAG_SuppressLowLODRagdollSwitchWhenCorpseSettles = 260, CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261, CPED_CONFIG_FLAG_JustLeftVehicleNeedsReset = 262, CPED_CONFIG_FLAG_TeleportIfCantReachPlayer = 263, CPED_CONFIG_FLAG_PedsInVehiclePositionNeedsReset = 264, CPED_CONFIG_FLAG_PedsFullyInSeat = 265, CPED_CONFIG_FLAG_AllowPlayerLockOnIfFriendly = 266, CPED_CONFIG_FLAG_UseCameraHeadingForDesiredDirectionLockOnTest = 267, CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268, CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269, CPED_CONFIG_FLAG_OnStairSlope = 270, CPED_CONFIG_FLAG_HasPlayedNMGetup = 271, CPED_CONFIG_FLAG_DontBlipCop = 272, CPED_CONFIG_FLAG_SpawnedAtExtendedRangeScenario = 273, CPED_CONFIG_FLAG_WalkAlongsideLeaderWhenClose = 274, CPED_CONFIG_FLAG_KillWhenTrapped = 275, CPED_CONFIG_FLAG_EdgeDetected = 276, CPED_CONFIG_FLAG_AlwaysWakeUpPhysicsOfIntersectedPeds = 277, CPED_CONFIG_FLAG_EquippedAmbientLoadOutWeapon = 278, CPED_CONFIG_FLAG_AvoidTearGas = 279, CPED_CONFIG_FLAG_StoppedSpeechUponFreezing = 280, CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281, CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282, CPED_CONFIG_FLAG_ThrownFromVehicleDueToExhaustion = 283, CPED_CONFIG_FLAG_UpdateEnclosedSearchRegion = 284, CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285, CPED_CONFIG_FLAG_ShouldChargeNow = 286, CPED_CONFIG_FLAG_RagdollingOnBoat = 287, CPED_CONFIG_FLAG_HasBrandishedWeapon = 288, CPED_CONFIG_FLAG_AllowMinorReactionsAsMissionPed = 289, CPED_CONFIG_FLAG_BlockDeadBodyShockingEventsWhenDead = 290, CPED_CONFIG_FLAG_PedHasBeenSeen = 291, CPED_CONFIG_FLAG_PedIsInReusePool = 292, CPED_CONFIG_FLAG_PedWasReused = 293, CPED_CONFIG_FLAG_DisableShockingEvents = 294, CPED_CONFIG_FLAG_MovedUsingLowLodPhysicsSinceLastActive = 295, CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296, CPED_CONFIG_FLAG_ForcePlayFleeScenarioExitOnNextScriptCommand = 297, CPED_CONFIG_FLAG_JustBumpedIntoVehicle = 298, CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299, CPED_CONFIG_FLAG_ShouldThrowSmokeNow = 300, CPED_CONFIG_FLAG_DisablePedConstraints = 301, CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302, CPED_CONFIG_FLAG_CreatedByDispatch = 303, CPED_CONFIG_FLAG_PointGunLeftHandSupporting = 304, CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305, CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerPedImpact = 306, CPED_CONFIG_FLAG_DontActivateRagdollFromAiRagdollImpact = 307, CPED_CONFIG_FLAG_DontActivateRagdollFromPlayerRagdollImpact = 308, CPED_CONFIG_FLAG_DisableQuadrupedSpring = 309, CPED_CONFIG_FLAG_IsInCluster = 310, CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311, CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312, CPED_CONFIG_FLAG_PreferInjuredGetup = 313, CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314, CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315, CPED_CONFIG_FLAG_JackedAbandonedCar = 316, CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317, CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318, CPED_CONFIG_FLAG_HasPortablePickupAttached = 319, CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320, CPED_CONFIG_FLAG_HasClothCollisionBounds = 321, CPED_CONFIG_FLAG_HasHighHeels = 322, CPED_CONFIG_FLAG_TreatAsAmbientPedForDriverLockOn = 323, CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324, CPED_CONFIG_FLAG_SpawnedAtScenario = 325, CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326, CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327, CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328, CPED_CONFIG_FLAG_DisableTalkTo = 329, CPED_CONFIG_FLAG_DontBlip = 330, CPED_CONFIG_FLAG_IsSwitchingWeapon = 331, CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332, CPED_CONFIG_FLAG_ScriptForceNoTimesliceIntelligenceUpdate = 333, CPED_CONFIG_FLAG_JackedOutOfMyVehicle = 334, CPED_CONFIG_FLAG_WentIntoCombatAfterBeingJacked = 335, CPED_CONFIG_FLAG_DontActivateRagdollForVehicleGrab = 336, CPED_CONFIG_FLAG_ForcePackageCharacterCloth = 337, CPED_CONFIG_FLAG_DontRemoveWithValidOrder = 338, CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339, CPED_CONFIG_FLAG_ForcedToStayInCoverDueToPlayerSwitch = 340, CPED_CONFIG_FLAG_ForceProneCharacterCloth = 341, CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342, CPED_CONFIG_FLAG_InToStrafeTransition = 343, CPED_CONFIG_FLAG_KilledByStandardMelee = 344, CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345, CPED_CONFIG_FLAG_ForcePlayDirectedNormalScenarioExitOnNextScriptCommand = 346, CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347, CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348, CPED_CONFIG_FLAG_EquipJetpack = 349, CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350, CPED_CONFIG_FLAG_ScriptHasCompletelyDisabledCollision = 351, CPED_CONFIG_FLAG_NeverDoScenarioNavChecks = 352, CPED_CONFIG_FLAG_ForceSynchronousScenarioExitChecking = 353, CPED_CONFIG_FLAG_ThrowingGrenadeWhileAiming = 354, CPED_CONFIG_FLAG_HeadbobToRadioEnabled = 355, CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356, CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357, CPED_CONFIG_FLAG_DontBlipNotSynced = 358, CPED_CONFIG_FLAG_IsDuckingInVehicle = 359, CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360, CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361, CPED_CONFIG_FLAG_HasReserveParachute = 362, CPED_CONFIG_FLAG_UseReserveParachute = 363, CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364, CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365, CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366, CPED_CONFIG_FLAG_DontActivateRagdollFromSmokeGrenade = 367, CPED_CONFIG_FLAG_LinkMBRToOwnerOnChain = 368, CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayer = 369, CPED_CONFIG_FLAG_AmbientFriendBumpedByPlayerVehicle = 370, CPED_CONFIG_FLAG_InFPSUnholsterTransition = 371, CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372, CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373, CPED_CONFIG_FLAG_NeverLeaveTrain = 374, CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375, CPED_CONFIG_FLAG_UseFPSUnholsterTransitionDuringCombatRoll = 376, CPED_CONFIG_FLAG_ExitingFPSCombatRoll = 377, CPED_CONFIG_FLAG_ScriptHasControlOfPlayer = 378, CPED_CONFIG_FLAG_PlayFPSIdleFidgetsForProjectile = 379, CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380, CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInAircraft = 381, CPED_CONFIG_FLAG_WasPlayingFPSGetup = 382, CPED_CONFIG_FLAG_WasPlayingFPSMeleeActionResult = 383, CPED_CONFIG_FLAG_PreferNoPriorityRemoval = 384, CPED_CONFIG_FLAG_FPSFidgetsAbortedOnFire = 385, CPED_CONFIG_FLAG_ForceFPSIKWithUpperBodyAnim = 386, CPED_CONFIG_FLAG_SwitchingCharactersInFirstPerson = 387, CPED_CONFIG_FLAG_IsClimbingLadder = 388, CPED_CONFIG_FLAG_HasBareFeet = 389, CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390, CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391, CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392, CPED_CONFIG_FLAG_ResetLastVehicleOnVehicleExit = 393, CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394, CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395, CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396, CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397, CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398, CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399, CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400, CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401, CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402, CPED_CONFIG_FLAG_ChangeFromPermanentToAmbientPopTypeOnMigration = 403, CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404, CPED_CONFIG_FLAG_UsingLowriderLeans = 405, CPED_CONFIG_FLAG_UsingAlternateLowriderLeans = 406, CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407, CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408, CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409, CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410, CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411, CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412, CPED_CONFIG_FLAG_IsHolsteringWeapon = 413, CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414, CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415, CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416, CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417, CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418, CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419, CPED_CONFIG_FLAG_IsPerformingVehicleMelee = 420, CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421, CPED_CONFIG_FLAG_DisableVehicleCombat = 422, CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamage = 423, CPED_CONFIG_FLAG_AllowBikeAlternateAnimations = 424, CPED_CONFIG_FLAG_TreatAsFriendlyForTargetingAndDamageNonSynced = 425, CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426, CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427, CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428, CPED_CONFIG_FLAG_DisableStartEngine = 429, CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430, CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431, CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432, CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433, CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434, CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435, CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436, CPED_CONFIG_FLAG_DontShoutTargetPosition = 437, CPED_CONFIG_FLAG_DisableHelmetArmor = 438, CPED_CONFIG_FLAG_CreatedByConcealedPlayer = 439, CPED_CONFIG_FLAG_PermanentlyDisablePotentialToBeWalkedIntoResponse = 440, CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441, CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442, CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443, CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444, CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445, CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446, CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447, CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448, CPED_CONFIG_FLAG_FiresDummyRockets = 449, CPED_CONFIG_FLAG_PedIsArresting = 450, CPED_CONFIG_FLAG_IsDecoyPed = 451, CPED_CONFIG_FLAG_HasEstablishedDecoy = 452, CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453, CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454, CPED_CONFIG_FLAG_HitByTranqWeapon = 455, CPED_CONFIG_FLAG_CanBeIncapacitated = 456, CPED_CONFIG_FLAG_ForcedAimFromArrest = 457, CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458, _0x4376ABF2 = 459, CPED_CONFIG_FLAG_RagdollFloatsIndefinitely = 460, CPED_CONFIG_FLAG_BlockElectricWeaponDamage = 461, _0x262A3B8E = 462, _0x1AA79A25 = 463, } **This is the server-side RPC native equivalent of the client native SET_PED_CONFIG_FLAG.**
--- @param ped integer
--- @param flagId integer
--- @param value boolean
function SetPedConfigFlag(ped, flagId, value) end

--- teleports ped to coords along with the vehicle ped is in
--- @param ped integer
--- @param posX number
--- @param posY number
--- @param posZ number
function SetPedCoordsKeepVehicle(ped, posX, posY, posZ) end

--- @param ped integer
--- @param posX number
--- @param posY number
--- @param posZ number
function SetPedCoordsNoGang(ped, posX, posY, posZ) end

--- Found in the b617d scripts: PED::_9DBA107B4937F809(v_7, "trevor_heist_cover_2h"); SET_PED_MO*
--- @param ped integer
--- @param p1 string
function SetPedCoverClipsetOverride(ped, p1) end

--- p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
--- @param ped integer
--- @param p1 string
function SetPedCowerHash(ped, p1) end

--- Has 5 parameters since latest patches.
--- @param ped integer
--- @param visible boolean
--- @param deselectWeapon boolean
--- @param p3 boolean
--- @param p4 boolean
function SetPedCurrentWeaponVisible(ped, visible, deselectWeapon, p3, p4) end

--- Sets Ped Default Clothes
--- @param ped integer
function SetPedDefaultComponentVariation(ped) end

--- Sets Ped Default Clothes **This is the server-side RPC native equivalent of the client native SET_PED_DEFAULT_COMPONENT_VARIATION.**
--- @param ped integer
function SetPedDefaultComponentVariation(ped) end

--- @param ped integer
--- @param attachPed integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 boolean
--- @param p10 boolean
function SetPedDefensiveAreaAttachedToPed(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10) end

--- @param ped integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
function SetPedDefensiveAreaDirection(ped, p1, p2, p3, p4) end

--- @param ped integer
--- @param target integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param radius number
--- @param p6 boolean
function SetPedDefensiveSphereAttachedToPed(ped, target, xOffset, yOffset, zOffset, radius, p6) end

--- @param ped integer
--- @param target integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param radius number
--- @param p6 boolean
function SetPedDefensiveSphereAttachedToVehicle(ped, target, xOffset, yOffset, zOffset, radius, p6) end

--- **Usage:** Call this native every frame
--- @param multiplier number
function SetPedDensityMultiplierThisFrame(multiplier) end

--- @param ped integer
--- @param heading number
function SetPedDesiredHeading(ped, heading) end

--- @param ped integer
--- @param p1 number
function SetPedDesiredMoveBlendRatio(ped, p1) end

--- @param ped integer
--- @param toggle boolean
function SetPedDiesInSinkingVehicle(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedDiesInstantlyInWater(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedDiesInVehicle(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedDiesInWater(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedDiesWhenInjured(ped, toggle) end

--- @param ped integer
--- @param clipset string
function SetPedDriveByClipsetOverride(ped, clipset) end

--- @param ped integer
--- @param weaponHash integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param ammoCount integer
function SetPedDropsInventoryWeapon(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount) end

--- @param ped integer
function SetPedDropsWeapon(ped) end

--- @param ped integer
--- @param toggle boolean
function SetPedDropsWeaponsWhenDead(ped, toggle) end

--- This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
--- @param ped integer
--- @param toggle boolean
function SetPedDucking(ped, toggle) end

--- This native sets the glow intensity of illuminated clothing items. This native does **NOT** need to be executed every tick. This native is **NOT** synced with other connected players, you will have to set the opacity on the ped on all clients individually. Glow intensity is a value between `0.0` and `1.0`. In some older decompiled scripts this is known as `_SET_PED_REFLECTION_INTENSITY`. Since there's no joaat hash for this, I find `_SET_PED_ILLUMINATED_CLOTHING_GLOW_INTENSITY` more descriptive than `_SET_PED_REFLECTION_INTENSITY`. Use `GetPedIlluminatedClothingGlowIntensity` to get the illuminated clothing glow intensity of a specific ped. Intensity: `1.0`: ![](https://www.vespura.com/hi/i/2018-11-13\_17-03\_c2e23\_229.png) Intensity: `0.0`: ![](https://www.vespura.com/hi/i/2018-11-13\_17-03\_35c33\_230.png) **Examples code result**: ![](https://www.vespura.com/hi/i/2018-11-13\_17-11\_10199\_232.gif) (Direct link if embed doesn't work: here)
--- @param ped integer
--- @param intensity number
function SetPedEmissiveIntensity(ped, intensity) end

--- @param ped integer
--- @param toggle boolean
function SetPedEnableWeaponBlocking(ped, toggle) end

--- Something related to the environmental effects natives. In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
--- @param ped integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetPedEnveffColorModulator(ped, r, g, b) end

--- Values look to be between 0.0 and 1.0 From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0 You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
--- @param ped integer
--- @param value number
function SetPedEnveffScale(ped, value) end

--- Used for freemode (online) characters. Indices: 1. black 2. very light blue/green 3. dark blue 4. brown 5. darker brown 6. light brown 7. blue 8. light blue 9. pink 10. yellow 11. purple 12. black 13. dark green 14. light brown 15. yellow/black pattern 16. light colored spiral pattern 17. shiny red 18. shiny half blue/half red 19. half black/half light blue 20. white/red perimter 21. green snake 22. red snake 23. dark blue snake 24. dark yellow 25. bright yellow 26. all black 27. red small pupil 28. devil blue/black 29. white small pupil 30. glossed over
--- @param ped integer
--- @param index integer
function SetPedEyeColor(ped, index) end

--- Used for freemode (online) characters. Indices: 1. black 2. very light blue/green 3. dark blue 4. brown 5. darker brown 6. light brown 7. blue 8. light blue 9. pink 10. yellow 11. purple 12. black 13. dark green 14. light brown 15. yellow/black pattern 16. light colored spiral pattern 17. shiny red 18. shiny half blue/half red 19. half black/half light blue 20. white/red perimter 21. green snake 22. red snake 23. dark blue snake 24. dark yellow 25. bright yellow 26. all black 27. red small pupil 28. devil blue/black 29. white small pupil 30. glossed over **This is the server-side RPC native equivalent of the client native \_SET_PED_EYE_COLOR.**
--- @param ped integer
--- @param index integer
function SetPedEyeColor(ped, index) end

--- Sets the various freemode face features, e.g. nose length, chin shape. **Indexes (From 0 to 19):** Parentheses indicate morph scale/direction as in (-1.0 to 1.0) * **0**: Nose Width (Thin/Wide) * **1**: Nose Peak (Up/Down) * **2**: Nose Length (Long/Short) * **3**: Nose Bone Curveness (Crooked/Curved) * **4**: Nose Tip (Up/Down) * **5**: Nose Bone Twist (Left/Right) * **6**: Eyebrow (Up/Down) * **7**: Eyebrow (In/Out) * **8**: Cheek Bones (Up/Down) * **9**: Cheek Sideways Bone Size (In/Out) * **10**: Cheek Bones Width (Puffed/Gaunt) * **11**: Eye Opening (Both) (Wide/Squinted) * **12**: Lip Thickness (Both) (Fat/Thin) * **13**: Jaw Bone Width (Narrow/Wide) * **14**: Jaw Bone Shape (Round/Square) * **15**: Chin Bone (Up/Down) * **16**: Chin Bone Length (In/Out or Backward/Forward) * **17**: Chin Bone Shape (Pointed/Square) * **18**: Chin Hole (Chin Bum) * **19**: Neck Thickness (Thin/Thick) **Note:** You may need to call `SetPedHeadBlendData` prior to calling this native in order for it to work.
--- @param ped integer
--- @param index integer
--- @param scale number
function SetPedFaceFeature(ped, index, scale) end

--- Sets the various freemode face features, e.g. nose length, chin shape. **Indexes (From 0 to 19):** Parentheses indicate morph scale/direction as in (-1.0 to 1.0) * **0**: Nose Width (Thin/Wide) * **1**: Nose Peak (Up/Down) * **2**: Nose Length (Long/Short) * **3**: Nose Bone Curveness (Crooked/Curved) * **4**: Nose Tip (Up/Down) * **5**: Nose Bone Twist (Left/Right) * **6**: Eyebrow (Up/Down) * **7**: Eyebrow (In/Out) * **8**: Cheek Bones (Up/Down) * **9**: Cheek Sideways Bone Size (In/Out) * **10**: Cheek Bones Width (Puffed/Gaunt) * **11**: Eye Opening (Both) (Wide/Squinted) * **12**: Lip Thickness (Both) (Fat/Thin) * **13**: Jaw Bone Width (Narrow/Wide) * **14**: Jaw Bone Shape (Round/Square) * **15**: Chin Bone (Up/Down) * **16**: Chin Bone Length (In/Out or Backward/Forward) * **17**: Chin Bone Shape (Pointed/Square) * **18**: Chin Hole (Chin Bum) * **19**: Neck Thickness (Thin/Thick) **Note:** You may need to call `SetPedHeadBlendData` prior to calling this native in order for it to work. **This is the server-side RPC native equivalent of the client native \_SET_PED_FACE_FEATURE.**
--- @param ped integer
--- @param index integer
--- @param scale number
function SetPedFaceFeature(ped, index, scale) end

--- FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 ) FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 ) FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 ) FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 ) FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 ) FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 ) FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 ) FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 ) FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 ) FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 ) FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 ) FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 ) FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 ) FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 ) FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 ) FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 ) if anyone is interested firing pattern info: pastebin.com/Px036isB
--- @param ped integer
--- @param patternHash integer
function SetPedFiringPattern(ped, patternHash) end

--- bit 15 (0x8000) = force cower
--- @param ped integer
--- @param attributeFlags integer
--- @param enable boolean
function SetPedFleeAttributes(ped, attributeFlags, enable) end

--- p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE"). p2 is always true.
--- @param ped integer
--- @param gadgetHash integer
--- @param p2 boolean
function SetPedGadget(ped, gadgetHash, p2) end

--- @param ped integer
--- @param toggle boolean
function SetPedGeneratesDeadBodyEvents(ped, toggle) end

--- From the scripts: PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(), "ANIM_GROUP_GESTURE_MISS_FRA0"); PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(), "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
--- @param ped integer
--- @param animGroupGesture string
function SetPedGestureGroup(ped, animGroupGesture) end

--- @param ped integer
--- @param toggle boolean
function SetPedGetOutUpsideDownVehicle(ped, toggle) end

--- enable or disable the gravity of a ped Examples: PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001); PED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);
--- @param ped integer
--- @param toggle boolean
function SetPedGravity(ped, toggle) end

--- @param ped integer
--- @param index integer
function SetPedGroupMemberPassengerIndex(ped, index) end

--- Sets the tint index for the hair on the specified ped. NativeDB Introduced: v323
--- @param ped integer
--- @param colorID integer
--- @param highlightColorID integer
function SetPedHairTint(ped, colorID, highlightColorID) end

--- Sets the tint index for the hair on the specified ped. NativeDB Introduced: v323 **This is the server-side RPC native equivalent of the client native SET_PED_HAIR_TINT.**
--- @param ped integer
--- @param colorID integer
--- @param highlightColorID integer
function SetPedHairTint(ped, colorID, highlightColorID) end

--- This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives. See gtaforums.com/topic/884370-native-research-ai-blips for further information.
--- @param ped integer
--- @param hasCone boolean
function SetPedHasAiBlip(ped, hasCone) end

--- @param ped integer
--- @param hasCone boolean
--- @param color integer
function SetPedHasAiBlipWithColor(ped, hasCone, color) end

--- For more info please refer to this topic. **Other information:** IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br> This native function is often called prior to calling natives such as: * `SetPedHairColor` * `SetPedHeadOverlayColor` * `SetPedHeadOverlay` * `SetPedFaceFeature`
--- @param ped integer
--- @param shapeFirstID integer
--- @param shapeSecondID integer
--- @param shapeThirdID integer
--- @param skinFirstID integer
--- @param skinSecondID integer
--- @param skinThirdID integer
--- @param shapeMix number
--- @param skinMix number
--- @param thirdMix number
--- @param isParent boolean
function SetPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) end

--- For more info please refer to this topic. **Other information:** IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.</br> This native function is often called prior to calling natives such as: * `SetPedHairColor` * `SetPedHeadOverlayColor` * `SetPedHeadOverlay` * `SetPedFaceFeature` **This is the server-side RPC native equivalent of the client native SET_PED_HEAD_BLEND_DATA.**
--- @param ped integer
--- @param shapeFirstID integer
--- @param shapeSecondID integer
--- @param shapeThirdID integer
--- @param skinFirstID integer
--- @param skinSecondID integer
--- @param skinThirdID integer
--- @param shapeMix number
--- @param skinMix number
--- @param thirdMix number
--- @param isParent boolean
function SetPedHeadBlendData(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent) end

--- OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. overlayID Part Index, to disable 0 Blemishes 0 - 23, 255 1 Facial Hair 0 - 28, 255 2 Eyebrows 0 - 33, 255 3 Ageing 0 - 14, 255 4 Makeup 0 - 74, 255 5 Blush 0 - 6, 255 6 Complexion 0 - 11, 255 7 Sun Damage 0 - 10, 255 8 Lipstick 0 - 9, 255 9 Moles/Freckles 0 - 17, 255 10 Chest Hair 0 - 16, 255 11 Body Blemishes 0 - 11, 255 12 Add Body Blemishes 0 - 1, 255 **Note:** You may need to call `SetPedHeadBlendData` prior to calling this native in order for it to work.
--- @param ped integer
--- @param overlayID integer
--- @param index integer
--- @param opacity number
function SetPedHeadOverlay(ped, overlayID, index, opacity) end

--- OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. overlayID Part Index, to disable 0 Blemishes 0 - 23, 255 1 Facial Hair 0 - 28, 255 2 Eyebrows 0 - 33, 255 3 Ageing 0 - 14, 255 4 Makeup 0 - 74, 255 5 Blush 0 - 6, 255 6 Complexion 0 - 11, 255 7 Sun Damage 0 - 10, 255 8 Lipstick 0 - 9, 255 9 Moles/Freckles 0 - 17, 255 10 Chest Hair 0 - 16, 255 11 Body Blemishes 0 - 11, 255 12 Add Body Blemishes 0 - 1, 255 **Note:** You may need to call `SetPedHeadBlendData` prior to calling this native in order for it to work. **This is the server-side RPC native equivalent of the client native SET_PED_HEAD_OVERLAY.**
--- @param ped integer
--- @param overlayID integer
--- @param index integer
--- @param opacity number
function SetPedHeadOverlay(ped, overlayID, index, opacity) end

--- Used for freemode (online) characters. Called after SET_PED_HEAD_OVERLAY(). **Note:** You may need to call `SetPedHeadBlendData` prior to calling this native in order for it to work.
--- @param ped integer
--- @param overlayID integer
--- @param colorType integer
--- @param colorID integer
--- @param secondColorID integer
function SetPedHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID) end

--- Used for freemode (online) characters. Called after SET_PED_HEAD_OVERLAY(). **Note:** You may need to call `SetPedHeadBlendData` prior to calling this native in order for it to work. **This is the server-side RPC native equivalent of the client native \_SET_PED_HEAD_OVERLAY_COLOR.**
--- @param ped integer
--- @param overlayID integer
--- @param colorType integer
--- @param colorID integer
--- @param secondColorID integer
function SetPedHeadOverlayColor(ped, overlayID, colorType, colorID, secondColorID) end

--- @param ped integer
--- @param value number
function SetPedHearingRange(ped, value) end

--- @param ped integer
--- @param heatScale number
function SetPedHeatscaleOverride(ped, heatScale) end

--- Sets whether a pedestrian should wear a helmet.
--- @param ped integer
--- @param bEnable boolean
function SetPedHelmet(ped, bEnable) end

--- @param ped integer
--- @param helmetFlag integer
function SetPedHelmetFlag(ped, helmetFlag) end

--- NativeDB Added Parameter 3: BOOL p2
--- @param ped integer
--- @param propIndex integer
function SetPedHelmetPropIndex(ped, propIndex) end

--- @param ped integer
--- @param textureIndex integer
function SetPedHelmetTextureIndex(ped, textureIndex) end

--- @param ped integer
--- @param p1 boolean
--- @param p2 integer
--- @param p3 integer
function SetPedHelmetUnk(ped, p1, p2, p3) end

--- @param ped integer
--- @param toggle boolean
function SetPedHighlyPerceptive(ped, toggle) end

--- @param ped integer
--- @param value number
function SetPedIdRange(ped, value) end

--- @param ped integer
function SetPedIncreasedAvoidanceRadius(ped) end

--- @param ped integer
--- @param toggle boolean
--- @param weaponHash integer
function SetPedInfiniteAmmo(ped, toggle, weaponHash) end

--- @param ped integer
--- @param toggle boolean
function SetPedInfiniteAmmoClip(ped, toggle) end

--- @param ped integer
--- @param vehicle integer
--- @param seatIndex integer
function SetPedIntoVehicle(ped, vehicle, seatIndex) end

--- SET_PED_INTO_VEHICLE **This is the server-side RPC native equivalent of the client native SET_PED_INTO_VEHICLE.**
--- @param ped integer
--- @param vehicle integer
--- @param seatIndex integer
function SetPedIntoVehicle(ped, vehicle, seatIndex) end

--- PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER")); PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER")); PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT")); PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR")); PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE")); PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY")); PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE")); PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
--- @param ped integer
--- @param context integer
function SetPedInVehicleContext(ped, context) end

--- Sets the ped so they sound drunk
--- @param ped integer
--- @param toggle boolean
function SetPedIsDrunk(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedKeepTask(ped, toggle) end

--- "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
--- @param ped integer
--- @param mode integer
function SetPedLegIkMode(ped, mode) end

--- @param ped integer
--- @param multiplier number
function SetPedLodMultiplier(ped, multiplier) end

--- @param ped integer
--- @param value integer
function SetPedMaxHealth(ped, value) end

--- @param ped integer
--- @param value number
function SetPedMaxMoveBlendRatio(ped, value) end

--- @param ped integer
--- @param value number
function SetPedMaxTimeInWater(ped, value) end

--- Set the maximum time a ped can stay underwater. Maximum seems to be 50 seconds.
--- @param ped integer
--- @param value number
function SetPedMaxTimeUnderwater(ped, value) end

--- Override the limits on the number and types of melee combatants. The game is limited to at most ten combatants among the three types: primary, secondary, and observers. This native infers the number of observers based on the primary and secondary counts.
--- @param primaryCount integer
--- @param secondaryCount integer
--- @param populationPedCount integer
function SetPedMeleeCombatLimits(primaryCount, secondaryCount, populationPedCount) end

--- Overwrites the minimum time the ped will stay on the ground for after being stunned. Setting this while the ped is stunned will not alter the duration of the current stun but will still effect future stuns. Passing -1 into the second parameter `minTimeInMs` will reset the modifier, making it use the weapons original `DamageTime` as the stun duration (see `update/update.rpf/common/data/ai/weapons.meta`) **NOTE**: Unlike what the native name implies, this works on any weapon that has its `DamageType` in the `weapons.meta` set to `ELECTRIC`.
--- @param ped integer
--- @param minTimeInMs integer
function SetPedMinGroundTimeForStungun(ped, minTimeInMs) end

--- @param ped integer
--- @param value number
function SetPedMinMoveBlendRatio(ped, value) end

--- @param model integer
--- @param toggle boolean
function SetPedModelIsSuppressed(model, toggle) end

--- Overrides a ped model personality type.
--- @param modelHash integer
--- @param personalityHash integer
function SetPedModelPersonality(modelHash, personalityHash) end

--- Maximum possible amount of money on MP is 2000. ~JX ----------------------------------------------------------------------------- Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
--- @param ped integer
--- @param amount integer
function SetPedMoney(ped, amount) end

--- @param ped integer
--- @param toggle boolean
function SetPedMotionBlur(ped, toggle) end

--- @param ped integer
function SetPedMoveAnimsBlendOut(ped) end

--- List of movement clipsets: Thanks to elsewhat for list. "ANIM_GROUP_MOVE_BALLISTIC" "ANIM_GROUP_MOVE_LEMAR_ALLEY" "clipset@move@trash_fast_turn" "FEMALE_FAST_RUNNER" "missfbi4prepp1_garbageman" "move_characters@franklin@fire" "move_characters@Jimmy@slow@" "move_characters@michael@fire" "move_f@flee@a" "move_f@scared" "move_f@sexy@a" "move_heist_lester" "move_injured_generic" "move_lester_CaneUp" "move_m@bag" "MOVE_M@BAIL_BOND_NOT_TAZERED" "MOVE_M@BAIL_BOND_TAZERED" "move_m@brave" "move_m@casual@d" "move_m@drunk@moderatedrunk" "MOVE_M@DRUNK@MODERATEDRUNK" "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP" "MOVE_M@DRUNK@SLIGHTLYDRUNK" "MOVE_M@DRUNK@VERYDRUNK" "move_m@fire" "move_m@gangster@var_e" "move_m@gangster@var_f" "move_m@gangster@var_i" "move_m@JOG@" "MOVE_M@PRISON_GAURD" "MOVE_P_M_ONE" "MOVE_P_M_ONE_BRIEFCASE" "move_p_m_zero_janitor" "move_p_m_zero_slow" "move_ped_bucket" "move_ped_crouched" "move_ped_mop" "MOVE_M@FEMME@" "MOVE_F@FEMME@" "MOVE_M@GANGSTER@NG" "MOVE_F@GANGSTER@NG" "MOVE_M@POSH@" "MOVE_F@POSH@" "MOVE_M@TOUGH_GUY@" "MOVE_F@TOUGH_GUY@" ~ NotCrunchyTaco
--- @param ped integer
--- @param clipSet string
--- @param transitionSpeed number
function SetPedMovementClipset(ped, clipSet, transitionSpeed) end

--- Min: 0.00 Max: 10.00 Can be used in combo with fast run cheat. When value is set to 10.00: Sprinting without fast run cheat: 66 m/s Sprinting with fast run cheat: 77 m/s Needs to be looped! Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
--- @param ped integer
--- @param value number
function SetPedMoveRateOverride(ped, value) end

--- NOTE: Debugging functions are not present in the retail version of the game. *untested but char *name could also be a hash for a localized string
--- @param ped integer
--- @param name string
function SetPedNameDebug(ped, name) end

--- @param ped integer
--- @param toggle boolean
function SetPedNeverLeavesGroup(ped, toggle) end

--- The distance between these points, is the diagonal of a box (remember it's 3D).
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
function SetPedNonCreationArea(x1, y1, z1, x2, y2, z2) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @return any
function SetPedPanicExitScenario(ped, x, y, z) end

--- @param ped integer
--- @param tintIndex integer
function SetPedParachuteTintIndex(ped, tintIndex) end

--- @param ped integer
--- @param avoidFire boolean
function SetPedPathAvoidFire(ped, avoidFire) end

--- @param ped integer
--- @param Toggle boolean
function SetPedPathCanDropFromHeight(ped, Toggle) end

--- @param ped integer
--- @param Toggle boolean
function SetPedPathCanUseClimbovers(ped, Toggle) end

--- @param ped integer
--- @param Toggle boolean
function SetPedPathCanUseLadders(ped, Toggle) end

--- Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
--- @param ped integer
--- @param modifier number
function SetPedPathClimbCostModifier(ped, modifier) end

--- @param ped integer
--- @param mayEnterWater boolean
function SetPedPathMayEnterWater(ped, mayEnterWater) end

--- @param ped integer
--- @param avoidWater boolean
function SetPedPathPreferToAvoidWater(ped, avoidWater) end

--- NativeDB Added Parameter 7: Any p6
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
function SetPedPathsBackToOriginal(p0, p1, p2, p3, p4, p5) end

--- NativeDB Added Parameter 8: Any p7
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param unknown boolean
function SetPedPathsInArea(x1, y1, z1, x2, y2, z2, unknown) end

--- Sets the palette index of a ped's phone. | Value | Color | | :---: | :-----: | | `0` | Light Blue | | `1` | Green | | `2` | Red | | `3` | Orange | | `4` | Grey | | `5` | Purple | | `6` | Pink | NativeDB Introduced: v323
--- @param ped integer
--- @param index integer
function SetPedPhonePaletteIdx(ped, index) end

--- i could be time. Only example in the decompiled scripts uses it as -1.
--- @param ped integer
--- @param pinned boolean
--- @param i integer
--- @return any
function SetPedPinnedDown(ped, pinned, i) end

--- **This native does absolutely nothing, just a nullsub** Points to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.
--- @param ped integer
--- @param toggle boolean
function SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped, toggle) end

--- Sets the memory budget level for ped population.
--- @param budgetLevel integer
function SetPedPopulationBudget(budgetLevel) end

--- @param ped integer
--- @param itemSet any
function SetPedPreferredCoverSet(ped, itemSet) end

--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @return any
function SetPedPreloadPropData(ped, componentId, drawableId, textureId) end

--- from extreme3.c4 PED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8)); p1 is probably componentId
--- @param ped integer
--- @param slot integer
--- @param drawableId integer
--- @param textureId integer
--- @return any
function SetPedPreloadVariationData(ped, slot, drawableId, textureId) end

--- This is only called once in the scripts. sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1); sub_1CA8("WORLD_HUMAN_SMOKING", 2); PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
--- @param ped integer
--- @param lookAt integer
function SetPedPrimaryLookat(ped, lookAt) end

--- This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model. ### MP Freemode list of props **0**: Hats **1**: Glasses **2**: Ears **6**: Watches **7**: Bracelets List of Prop IDs cpp enum eAnchorPoints { ANCHOR_HEAD = 0, // "p_head" ANCHOR_EYES = 1, // "p_eyes" ANCHOR_EARS = 2, // "p_ears" ANCHOR_MOUTH = 3, // "p_mouth" ANCHOR_LEFT_HAND = 4, // "p_lhand" ANCHOR_RIGHT_HAND = 5, // "p_rhand" ANCHOR_LEFT_WRIST = 6, // "p_lwrist" ANCHOR_RIGHT_WRIST = 7, // "p_rwrist" ANCHOR_HIP = 8, // "p_lhip" ANCHOR_LEFT_FOOT = 9, // "p_lfoot" ANCHOR_RIGHT_FOOT = 10, // "p_rfoot" ANCHOR_PH_L_HAND = 11, // "ph_lhand" ANCHOR_PH_R_HAND = 12, // "ph_rhand" NUM_ANCHORS = 13, };
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @param attach boolean
function SetPedPropIndex(ped, componentId, drawableId, textureId, attach) end

--- This native is used to set prop variation on a ped. Components, drawables and textures IDs are related to the ped model. ### MP Freemode list of props **0**: Hats **1**: Glasses **2**: Ears **6**: Watches **7**: Bracelets List of Prop IDs cpp enum eAnchorPoints { ANCHOR_HEAD = 0, // "p_head" ANCHOR_EYES = 1, // "p_eyes" ANCHOR_EARS = 2, // "p_ears" ANCHOR_MOUTH = 3, // "p_mouth" ANCHOR_LEFT_HAND = 4, // "p_lhand" ANCHOR_RIGHT_HAND = 5, // "p_rhand" ANCHOR_LEFT_WRIST = 6, // "p_lwrist" ANCHOR_RIGHT_WRIST = 7, // "p_rwrist" ANCHOR_HIP = 8, // "p_lhip" ANCHOR_LEFT_FOOT = 9, // "p_lfoot" ANCHOR_RIGHT_FOOT = 10, // "p_rfoot" ANCHOR_PH_L_HAND = 11, // "ph_lhand" ANCHOR_PH_R_HAND = 12, // "ph_rhand" NUM_ANCHORS = 13, }; **This is the server-side RPC native equivalent of the client native SET_PED_PROP_INDEX.**
--- @param ped integer
--- @param componentId integer
--- @param drawableId integer
--- @param textureId integer
--- @param attach boolean
function SetPedPropIndex(ped, componentId, drawableId, textureId, attach) end

--- @param ped integer
--- @param pedRace integer
--- @param pvgHash integer
function SetPedRaceAndVoiceGroup(ped, pedRace, pvgHash) end

--- @param ped integer
function SetPedRagdollForceFall(ped) end

--- Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk. Needs to be recalled after each ragdoll from a Collision.
--- @param ped integer
--- @param toggle boolean
function SetPedRagdollOnCollision(ped, toggle) end

--- p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused.
--- @param ped integer
--- @param p1 integer
function SetPedRandomComponentVariation(ped, p1) end

--- p1 is always 0 in R* scripts; and a quick disassembly seems to indicate that p1 is unused. **This is the server-side RPC native equivalent of the client native SET_PED_RANDOM_COMPONENT_VARIATION.**
--- @param ped integer
--- @param p1 integer
function SetPedRandomComponentVariation(ped, p1) end

--- @param ped integer
function SetPedRandomProps(ped) end

--- SET_PED_RANDOM_PROPS **This is the server-side RPC native equivalent of the client native SET_PED_RANDOM_PROPS.**
--- @param ped integer
function SetPedRandomProps(ped) end

--- @param ped integer
--- @param hash integer
function SetPedRelationshipGroupDefaultHash(ped, hash) end

--- @param ped integer
--- @param hash integer
function SetPedRelationshipGroupHash(ped, hash) end

--- @param ped integer
--- @param p1 any
function SetPedReserveParachuteTintIndex(ped, p1) end

--- PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1); Known values:
--- @param ped integer
--- @param flagId integer
--- @param doReset boolean
function SetPedResetFlag(ped, flagId, doReset) end

--- PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1); Known values: **This is the server-side RPC native equivalent of the client native SET_PED_RESET_FLAG.**
--- @param ped integer
--- @param flagId integer
--- @param doReset boolean
function SetPedResetFlag(ped, flagId, doReset) end

--- This native sets a scuba mask for freemode models and an oxygen bottle for player_\* models. It works on freemode and player_\* models.
--- @param ped integer
function SetPedScubaGearVariation(ped) end

--- @param ped integer
--- @param value number
function SetPedSeeingRange(ped, value) end

--- Returns handle of the projectile.
--- @param ped integer
--- @param p1 number
--- @return any
function SetPedShootOrdnanceWeapon(ped, p1) end

--- shootRate 0-1000
--- @param ped integer
--- @param shootRate integer
function SetPedShootRate(ped, shootRate) end

--- Fires a weapon at a coordinate using a ped.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param toggle boolean
function SetPedShootsAtCoord(ped, x, y, z, toggle) end

--- When this ped receives its next script task, they will exit from their scenario using the normal scenario exit. Exiting the scenario may take several frames while the ped is playing the exit animation. If the ped is not currently using a scenario at the time of the command or 0,0,0 is specified as the reaction position, then the ped will by default attempt to direct their exit forwards.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @return any
function SetPedShouldPlayDirectedScenarioExit(ped, x, y, z) end

--- @param ped integer
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function SetPedShouldPlayFleeScenarioExit(ped, p1, p2, p3) end

--- @param ped integer
function SetPedShouldPlayImmediateScenarioExit(ped) end

--- @param ped integer
function SetPedShouldPlayNormalScenarioExit(ped) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 boolean
--- @param p6 boolean
function SetPedSphereDefensiveArea(ped, x, y, z, radius, p5, p6) end

--- @param ped integer
--- @param toggle boolean
function SetPedStayInVehicleWhenJacked(ped, toggle) end

--- p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
--- @param ped integer
--- @param p1 boolean
--- @param action string
function SetPedStealthMovement(ped, p1, action) end

--- @param ped integer
--- @param toggle boolean
function SetPedSteersAroundObjects(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedSteersAroundPeds(ped, toggle) end

--- @param ped integer
--- @param toggle boolean
function SetPedSteersAroundVehicles(ped, toggle) end

--- @param ped integer
--- @param clipSet string
function SetPedStrafeClipset(ped, clipSet) end

--- Ped no longer takes critical damage modifiers if set to FALSE. Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
--- @param ped integer
--- @param toggle boolean
function SetPedSuffersCriticalHits(ped, toggle) end

--- Sweat is set to 100.0 or 0.0 in the decompiled scripts.
--- @param ped integer
--- @param sweat number
function SetPedSweat(ped, sweat) end

--- Only 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.
--- @param ped integer
--- @param responseType integer
function SetPedTargetLossResponse(ped, responseType) end

--- @param ped integer
--- @param radius number
--- @param maxFriends integer
function SetPedToInformRespectedFriends(ped, radius, maxFriends) end

--- @param ped integer
--- @param toggle boolean
function SetPedToLoadCover(ped, toggle) end

--- p4/p5: Unusued in TU27 ### Ragdoll Types **0**: CTaskNMRelax **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments. **Else**: CTaskNMBalance
--- @param ped integer
--- @param time1 integer
--- @param time2 integer
--- @param ragdollType integer
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
--- @return any
function SetPedToRagdoll(ped, time1, time2, ragdollType, p4, p5, p6) end

--- p4/p5: Unusued in TU27 ### Ragdoll Types **0**: CTaskNMRelax **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments. **Else**: CTaskNMBalance **This is the server-side RPC native equivalent of the client native SET_PED_TO_RAGDOLL.**
--- @param ped integer
--- @param time1 integer
--- @param time2 integer
--- @param ragdollType integer
--- @param p4 boolean
--- @param p5 boolean
--- @param p6 boolean
function SetPedToRagdoll(ped, time1, time2, ragdollType, p4, p5, p6) end

--- Return variable is never used in R*'s scripts. Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings. x, y, and z are coordinates, most likely to where the ped will fall. p7 is probably the force of the fall, but untested, so I left the variable name the same. p8 to p13 are always 0f in R*'s scripts. (Simplified) Example of the usage of the function from R*'s scripts: ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
--- @param ped integer
--- @param time integer
--- @param p2 integer
--- @param ragdollType integer
--- @param x number
--- @param y number
--- @param z number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param p11 number
--- @param p12 number
--- @param p13 number
--- @return any
function SetPedToRagdollWithFall(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13) end

--- Return variable is never used in R*'s scripts. Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings. x, y, and z are coordinates, most likely to where the ped will fall. p7 is probably the force of the fall, but untested, so I left the variable name the same. p8 to p13 are always 0f in R*'s scripts. (Simplified) Example of the usage of the function from R*'s scripts: ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f); **This is the server-side RPC native equivalent of the client native SET_PED_TO_RAGDOLL_WITH_FALL.**
--- @param ped integer
--- @param time integer
--- @param p2 integer
--- @param ragdollType integer
--- @param x number
--- @param y number
--- @param z number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @param p11 number
--- @param p12 number
--- @param p13 number
function SetPedToRagdollWithFall(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13) end

--- Purpose: The game's default values for these make shooting while traveling Left quite a bit slower than shooting while traveling right (This could be a game-balance thing?) Default Min: -45 Degrees Default Max: 135 Degrees \ ,- ~ ||~ - , , ' \ x x ' , , \ x x x , , \ x x , , \ x x , , \ x , , \ x , , \ x x , , \ x , , , ' ' - , \_ \_ \_ , ' \\ If the transition angle is within the shaded portion (x), there will be no transition(Quicker) The angle corresponds to where you are looking(North on the circle) vs. the heading of your Ped. Note: For some reason, You can set these values to whatever you'd like with this native, but keep in mind that the transitional spin is only clockwise for some reason. I'd personally recommend something like -135/135
--- @param min number
--- @param max number
function SetPedTurningThresholds(min, max) end

--- p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
--- @param ped integer
--- @param p1 boolean
--- @param p2 integer
--- @param action string
function SetPedUsingActionMode(ped, p1, p2, action) end

--- NativeDB Added Parameter 5: Any p4
--- @param ped integer
--- @param vehicle integer
--- @param seatIndex integer
--- @param flags integer
function SetPedVehicleForcedSeatUsage(ped, vehicle, seatIndex, flags) end

--- @param ped integer
--- @param angle number
function SetPedVisualFieldCenterAngle(ped, angle) end

--- @param ped integer
--- @param value number
function SetPedVisualFieldMaxAngle(ped, value) end

--- This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
--- @param ped integer
--- @param angle number
function SetPedVisualFieldMaxElevationAngle(ped, angle) end

--- @param ped integer
--- @param value number
function SetPedVisualFieldMinAngle(ped, value) end

--- This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
--- @param ped integer
--- @param angle number
function SetPedVisualFieldMinElevationAngle(ped, angle) end

--- @param ped integer
--- @param range number
function SetPedVisualFieldPeripheralRange(ped, range) end

--- Calls the same internal function `_SET_PED_VOICE_GROUP` calls, but passes `voiceGroupHash` (defined as a parameter in the referenced native) as `0`.
--- @param ped integer
function SetPedVoiceFull(ped) end

--- From the scripts: AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG")); AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG")); AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG")); AUDIO::_SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
--- @param ped integer
--- @param voiceGroupHash integer
function SetPedVoiceGroup(ped, voiceGroupHash) end

--- Dat151RelType == 29 NativeDB Introduced: v2699
--- @param ped integer
--- @param voiceGroupHash integer
function SetPedVoiceGroupRace(ped, voiceGroupHash) end

--- Overrides the calculated ped density that is used to modulate the ambient ped walla sounds (in exteriors only) If you want to use this for interiors, use SET_PED_INTERIOR_WALLA_DENSITY
--- @param density number
--- @param applyValue number
function SetPedWallaDensity(density, applyValue) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @return any
function SetPedWaypointRouteOffset(p0, p1, p2, p3) end

--- @param ped integer
--- @param weaponHash integer
--- @param camoComponentHash integer
--- @param colorIndex integer
function SetPedWeaponLiveryColor(ped, weaponHash, camoComponentHash, colorIndex) end

--- @param ped integer
--- @param clipSet string
function SetPedWeaponMovementClipset(ped, clipSet) end

--- tintIndex can be the following: 0 : Default/Black 1 : Green 2 : Gold 3 : Pink 4 : Army 5 : LSPD 6 : Orange 7 : Platinum tintIndex for MK2 weapons : 0 : Classic Black 1 : Classic Gray 2 : Classic Two-Tone 3 : Classic White 4 : Classic Beige 5 : Classic Green 6 : Classic Blue 7 : Classic Earth 8 : Classic Brown & Black 9 : Red Contrast 10 : Blue Contrast 11 : Yellow Contrast 12 : Orange Contrast 13 : Bold Pink 14 : Bold Purple & Yellow 15 : Bold Orange 16 : Bold Green & Purple 17 : Bold Red Features 18 : Bold Green Features 19 : Bold Cyan Features 20 : Bold Yellow Features 21 : Bold Red & White 22 : Bold Blue & White 23 : Metallic Gold 24 : Metallic Platinum 25 : Metallic Gray & Lilac 26 : Metallic Purple & Lime 27 : Metallic Red 28 : Metallic Green 29 : Metallic Blue 30 : Metallic White & Aqua 31 : Metallic Orange & Yellow 32 : Mettalic Red and Yellow
--- @param ped integer
--- @param weaponHash integer
--- @param tintIndex integer
function SetPedWeaponTintIndex(ped, weaponHash, tintIndex) end

--- combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
--- @param ped integer
function SetPedWetnessEnabledThisFrame(ped) end

--- It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
--- @param ped integer
--- @param height number
function SetPedWetnessHeight(ped, height) end

--- @param p0 number
function SetPickupAmmoAmountScaler(p0) end

--- Configures an entity to either allow or prevent it from being picked up by Cargobobs. NativeDB Introduced: v1180
--- @param entity integer
--- @param toggle boolean
function SetPickUpByCargobobDisabled(entity, toggle) end

--- @param multiplier number
function SetPickupGenerationRangeMultiplier(multiplier) end

--- @param p0 any
--- @param p1 any
function SetPickupHiddenWhenUncollectable(p0, p1) end

--- @param pickup integer
--- @param duration integer
function SetPickupRegenerationTime(pickup, duration) end

--- min: 1.9f, max: 100.0f
--- @param cargobob integer
--- @param length1 number
--- @param length2 number
--- @param state boolean
function SetPickupRopeLengthForCargobob(cargobob, length1, length2, state) end

--- @param p0 any
--- @param p1 any
function SetPickupUncollectable(p0, p1) end

--- Works just like SET_VEHICLE_ENGINE_HEALTH, didn't saw any difference. But this native works only for planes.
--- @param vehicle integer
--- @param health number
function SetPlaneEngineHealth(vehicle, health) end

--- @param plane integer
--- @param health number
function SetPlanePropellersHealth(plane, health) end

--- @param vehicle integer
--- @param toggle boolean
function SetPlaneResistToExplosion(vehicle, toggle) end

--- Adjusts the scale of damage applied to a specified section of a plane. In the decompiled scripts the `damageScale` is always set to `0f` (maybe to disable damages on the specified section) cpp enum ePlaneDamageSection { WING_L = 0, WING_R = 1, TAIL = 2, ENGINE_L = 3, ENGINE_R = 4, ELEVATOR_L = 5, ELEVATOR_R = 6, AILERON_L = 7, AILERON_R = 8, RUDDER = 9, RUDDER_2 = 10, AIRBRAKE_L = 11, AIRBRAKE_R = 12 } NativeDB Introduced: v1290
--- @param vehicle integer
--- @param damageSection integer
--- @param damageScale number
function SetPlaneSectionDamageScale(vehicle, damageSection, damageScale) end

--- This native sets the turbulence multiplier. It only works for planes. 0.0 = no turbulence at all. 1.0 = heavy turbulence. Works by just calling it once, does not need to be called every tick.
--- @param vehicle integer
--- @param multiplier number
function SetPlaneTurbulenceMultiplier(vehicle, multiplier) end

--- @param vehicle integer
--- @param speed number
function SetPlaybackSpeed(vehicle, speed) end

--- Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
--- @param vehicle integer
--- @param drivingStyle integer
function SetPlaybackToUseAi(vehicle, drivingStyle) end

--- Time is number of milliseconds before reverting, zero for indefinitely.
--- @param vehicle integer
--- @param time integer
--- @param drivingStyle integer
--- @param p3 boolean
function SetPlaybackToUseAiTryToRevertBackLater(vehicle, time, drivingStyle, p3) end

--- @param player integer
--- @param zoneId integer
--- @param enable boolean
function SetPlayerAirDefenseZoneFlag(player, zoneId, enable) end

--- Sets a player ped to use his ANGRY speech contexts
--- @param ped integer
--- @param isAngry boolean
function SetPlayerAngry(ped, isAngry) end

--- @param player integer
--- @param state boolean
function SetPlayerBluetoothState(player, state) end

--- Sets whether this player can be hassled by gangs.
--- @param player integer
--- @param toggle boolean
function SetPlayerCanBeHassledByGangs(player, toggle) end

--- Sets whether the player is able to do drive-bys in vehicle (shooting & aiming in vehicles), this also includes middle finger taunts. This is a toggle, it does not have to be ran every frame.
--- @param player integer
--- @param toggle boolean
function SetPlayerCanDoDriveBy(player, toggle) end

--- @param player integer
--- @param enabled boolean
function SetPlayerCanLeaveParachuteSmokeTrail(player, enabled) end

--- Sets whether this player can take cover.
--- @param player integer
--- @param toggle boolean
function SetPlayerCanUseCover(player, toggle) end

--- 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
--- @param value integer
function SetPlayerClothLockCounter(value) end

--- Every occurrence was either 0 or 2.
--- @param index integer
function SetPlayerClothPackageIndex(index) end

--- @param player integer
--- @param p1 integer
function SetPlayerClothPinFrames(player, p1) end

--- Flags: SPC_AMBIENT_SCRIPT = (1 << 1), SPC_CLEAR_TASKS = (1 << 2), SPC_REMOVE_FIRES = (1 << 3), SPC_REMOVE_EXPLOSIONS = (1 << 4), SPC_REMOVE_PROJECTILES = (1 << 5), SPC_DEACTIVATE_GADGETS = (1 << 6), SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7), SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8), SPC_ALLOW_PLAYER_DAMAGE = (1 << 9), SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10), SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11), SPC_ALLOW_PAD_SHAKE = (1 << 12) See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
--- @param player integer
--- @param bHasControl boolean
--- @param flags integer
function SetPlayerControl(player, bHasControl, flags) end

--- Flags: SPC_AMBIENT_SCRIPT = (1 << 1), SPC_CLEAR_TASKS = (1 << 2), SPC_REMOVE_FIRES = (1 << 3), SPC_REMOVE_EXPLOSIONS = (1 << 4), SPC_REMOVE_PROJECTILES = (1 << 5), SPC_DEACTIVATE_GADGETS = (1 << 6), SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7), SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8), SPC_ALLOW_PLAYER_DAMAGE = (1 << 9), SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10), SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11), SPC_ALLOW_PAD_SHAKE = (1 << 12) See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt **This is the server-side RPC native equivalent of the client native SET_PLAYER_CONTROL.**
--- @param player integer
--- @param bHasControl boolean
--- @param flags integer
function SetPlayerControl(player, bHasControl, flags) end

--- Sets the culling radius for the specified player. Set to `0.0` to reset. **WARNING**: Culling natives are deprecated and have known, unfixable issues
--- @param playerSrc integer
--- @param radius number
function SetPlayerCullingRadius(playerSrc, radius) end

--- @param player integer
--- @param distance number
function SetPlayerFallDistance(player, distance) end

--- @param player integer
--- @param toggle boolean
function SetPlayerForcedAim(player, toggle) end

--- @param player integer
--- @param toggle boolean
function SetPlayerForcedZoom(player, toggle) end

--- @param player integer
--- @param toggle boolean
function SetPlayerForceSkipAimIntro(player, toggle) end

--- @param player integer
function SetPlayerHasReserveParachute(player) end

--- @param player integer
--- @param limit number
function SetPlayerHealthRechargeLimit(player, limit) end

--- This multiplier is reset to `1.0` every time the player ped is changed, often times via `SET_PLAYER_MODEL` or `CHANGE_PLAYER_PED`.
--- @param player integer
--- @param regenRate number
function SetPlayerHealthRechargeMultiplier(player, regenRate) end

--- NativeDB Introduced: v1180
--- @param player integer
--- @param p1 boolean
function SetPlayerHomingRocketDisabled(player, p1) end

--- Make the player impervious to all forms of damage.
--- @param player integer
--- @param bInvincible boolean
function SetPlayerInvincible(player, bInvincible) end

--- Make the player impervious to all forms of damage. **This is the server-side RPC native equivalent of the client native SET_PLAYER_INVINCIBLE.**
--- @param player integer
--- @param bInvincible boolean
function SetPlayerInvincible(player, bInvincible) end

--- @param player integer
--- @param toggle boolean
function SetPlayerInvincibleKeepRagdollEnabled(player, toggle) end

--- @param player integer
--- @param toggle boolean
function SetPlayerInvisibleLocally(player, toggle) end

--- If toggle is true, the ped's head is shown in the pause menu If toggle is false, the ped's head is not shown in the pause menu
--- @param toggle boolean
function SetPlayerIsInAnimalForm(toggle) end

--- If toggle is true, hides special ability bar / character name in the pause menu If toggle is false, shows special ability bar / character name in the pause menu SET_PLAYER_*
--- @param toggle boolean
function SetPlayerIsInDirectorMode(toggle) end

--- @param player integer
--- @param toggle boolean
function SetPlayerLeavePedBehind(player, toggle) end

--- Used to toggle the square up aim.
--- @param player integer
--- @param toggle boolean
function SetPlayerLockon(player, toggle) end

--- Affects the range of auto aim target.
--- @param player integer
--- @param range number
function SetPlayerLockonRangeOverride(player, range) end

--- Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
--- @param player integer
--- @param value integer
function SetPlayerMaxArmour(player, value) end

--- @param playerId integer
--- @param maxStamina number
--- @return any
function SetPlayerMaxStamina(playerId, maxStamina) end

--- Establishes a reset flag to prevent the player from entering any vehicle. Not that this native must be called every frame.
--- @param player integer
function SetPlayerMayNotEnterAnyVehicle(player) end

--- Limit the player to only enter this vehicle. Note set vehicle to false if you want them to access any vehicle.
--- @param player integer
--- @param vehicle integer
function SetPlayerMayOnlyEnterThisVehicle(player, vehicle) end

--- NativeDB Added Parameter 3: BOOL p2
--- @param player integer
--- @param modifier number
function SetPlayerMeleeWeaponDamageModifier(player, modifier) end

--- modifier's min value is 0.1
--- @param player integer
--- @param modifier number
function SetPlayerMeleeWeaponDefenseModifier(player, modifier) end

--- Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this. As per usual, make sure to request the model first and wait until it has loaded.
--- @param player integer
--- @param model integer
function SetPlayerModel(player, model) end

--- Set the model for a specific Player. Note that this will destroy the current Ped for the Player and create a new one, any reference to the old ped will be invalid after calling this. As per usual, make sure to request the model first and wait until it has loaded. **This is the server-side RPC native equivalent of the client native SET_PLAYER_MODEL.**
--- @param player integer
--- @param model integer
function SetPlayerModel(player, model) end

--- @param player integer
--- @param multiplier number
function SetPlayerNoiseMultiplier(player, multiplier) end

--- @param toggle boolean
function SetPlayerpadShakesWhenControllerDisabled(toggle) end

--- example: PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);
--- @param player integer
--- @param model integer
function SetPlayerParachuteModelOverride(player, model) end

--- @param player integer
--- @param model integer
function SetPlayerParachutePackModelOverride(player, model) end

--- tints 0- 13 0 - unkown 1 - unkown 2 - unkown 3 - unkown 4 - unkown
--- @param player integer
--- @param tintIndex integer
function SetPlayerParachutePackTintIndex(player, tintIndex) end

--- @param player integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetPlayerParachuteSmokeTrailColor(player, r, g, b) end

--- Tints: None = -1, Rainbow = 0, Red = 1, SeasideStripes = 2, WidowMaker = 3, Patriot = 4, Blue = 5, Black = 6, Hornet = 7, AirFocce = 8, Desert = 9, Shadow = 10, HighAltitude = 11, Airbone = 12, Sunrise = 13,
--- @param player integer
--- @param tintIndex integer
function SetPlayerParachuteTintIndex(player, tintIndex) end

--- p1 was always 5. p4 was always false.
--- @param player integer
--- @param p1 integer
--- @param p2 any
--- @param p3 any
--- @param p4 boolean
function SetPlayerParachuteVariationOverride(player, p1, p2, p3, p4) end

--- NativeDB Introduced: v2372
--- @param player integer
--- @param model integer
function SetPlayerReserveParachuteModelOverride(player, model) end

--- Tints: None = -1, Rainbow = 0, Red = 1, SeasideStripes = 2, WidowMaker = 3, Patriot = 4, Blue = 5, Black = 6, Hornet = 7, AirFocce = 8, Desert = 9, Shadow = 10, HighAltitude = 11, Airbone = 12, Sunrise = 13,
--- @param player integer
--- @param index integer
function SetPlayerReserveParachuteTintIndex(player, index) end

--- example: flags: 0-6 PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6); wouldnt the flag be the seatIndex?
--- @param player integer
--- @param flags integer
function SetPlayerResetFlagPreferRearSeats(player, flags) end

--- SET_PLAYER_*
--- @param toggle boolean
function SetPlayerRockstarEditorDisabled(toggle) end

--- Sets the routing bucket for the specified player. Routing buckets are also known as 'dimensions' or 'virtual worlds' in past echoes, however they are population-aware.
--- @param playerSrc integer
--- @param bucket integer
function SetPlayerRoutingBucket(playerSrc, bucket) end

--- @param style integer
function SetPlayerShortSwitchStyle(style) end

--- @param player integer
--- @param toggle boolean
function SetPlayerSimulateAiming(player, toggle) end

--- @param vehicle integer
function SetPlayersLastVehicle(vehicle) end

--- Values around 1.0f to 2.0f used in game scripts.
--- @param player integer
--- @param multiplier number
function SetPlayerSneakingNoiseMultiplier(player, multiplier) end

--- @param player integer
--- @param toggle boolean
function SetPlayerSprint(player, toggle) end

--- @param playerId integer
--- @param stamina number
--- @return any
function SetPlayerStamina(playerId, stamina) end

--- @param player integer
--- @param value number
function SetPlayerStealthPerceptionModifier(player, value) end

--- All names can be found in playerswitchestablishingshots.meta
--- @param name string
function SetPlayerSwitchEstablishingShot(name) end

--- @param cameraCoordX number
--- @param cameraCoordY number
--- @param cameraCoordZ number
--- @param camRotationX number
--- @param camRotationY number
--- @param camRotationZ number
--- @param camFov number
--- @param camFarClip number
--- @param rotationOrder integer
function SetPlayerSwitchOutro(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder) end

--- the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation. This function doesn't need to be called every frame, it works like a switcher.
--- @param player integer
--- @param state boolean
function SetPlayerTalkingOverride(player, state) end

--- Sets your targeting mode. 0 = Assisted Aim - Full 1 = Assisted Aim - Partial 2 = Free Aim - Assisted 3 = Free Aim
--- @param targetMode integer
function SetPlayerTargetingMode(targetMode) end

--- @param targetLevel integer
function SetPlayerTargetLevel(targetLevel) end

--- @param value number
function SetPlayerTcmodifierTransition(value) end

--- Set the player's current team.
--- @param player integer
--- @param team integer
function SetPlayerTeam(player, team) end

--- Seems to lock the underwater timer of the specified player. Set `percentage` to `50.0` will reduce the value of GET_PLAYER_UNDERWATER_TIME_REMAINING to 5.0. If you want to increase the underwater time for ped, use SET_PED_MAX_TIME_UNDERWATER instead. Using this native after SET_PED_MAX_TIME_UNDERWATER **WILL NOT** get what you want. For example, if you set the max time underwater to `100.0` seconds using SET_PED_MAX_TIME_UNDERWATER and then call this native and set the `percentage` to 50.0, you will not get `50.0`, instead `2.0`.
--- @param player integer
--- @param percentage number
--- @return any
function SetPlayerUnderwaterTimeRemaining(player, percentage) end

--- Enable player vehicle specific alarm disarm/arm sound triggering
--- @param vehicle integer
--- @param active boolean
function SetPlayerVehicleAlarmAudioActive(vehicle, active) end

--- modifier's min value is 0.1
--- @param player integer
--- @param modifier number
function SetPlayerVehicleDamageModifier(player, modifier) end

--- modifier's min value is 0.1
--- @param player integer
--- @param modifier number
function SetPlayerVehicleDefenseModifier(player, modifier) end

--- @param player integer
--- @param toggle boolean
function SetPlayerVisibleLocally(player, toggle) end

--- # Predominant call signatures PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)); # Parameter value ranges P0: PLAYER::PLAYER_ID() P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1) P2: Not set by any call
--- @param player integer
--- @param p2 boolean
--- @param p3 boolean
--- @return vector3
function SetPlayerWantedCentrePosition(player, p2, p3) end

--- @param player integer
--- @param wantedLevel integer
--- @param delayedResponse boolean
function SetPlayerWantedLevel(player, wantedLevel, delayedResponse) end

--- SET_PLAYER_WANTED_LEVEL **This is the server-side RPC native equivalent of the client native SET_PLAYER_WANTED_LEVEL.**
--- @param player integer
--- @param wantedLevel integer
--- @param delayedResponse boolean
function SetPlayerWantedLevel(player, wantedLevel, delayedResponse) end

--- @param player integer
--- @param wantedLevel integer
--- @param delayedResponse boolean
function SetPlayerWantedLevelNoDrop(player, wantedLevel, delayedResponse) end

--- Forces any pending wanted level to be applied to the specified player immediately. Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW. Second parameter is unknown (always false).
--- @param player integer
--- @param p1 boolean
function SetPlayerWantedLevelNow(player, p1) end

--- The native ensures the 'modifier' parameter is 0.1 or greater.
--- @param player integer
--- @param modifier number
function SetPlayerWeaponDamageModifier(player, modifier) end

--- @param player integer
--- @param modifier number
function SetPlayerWeaponDefenseModifier(player, modifier) end

--- @param player integer
--- @param modifier number
function SetPlayerWeaponDefenseModifier_2(player, modifier) end

--- Sets flag on vehicle that changes behaviour in relation to when player gets wanted level
--- @param vehicle integer
--- @param p1 boolean
function SetPoliceFocusWillTrackVehicle(vehicle, p1) end

--- The player will be ignored by the police if toggle is set to true
--- @param player integer
--- @param toggle boolean
function SetPoliceIgnorePlayer(player, toggle) end

--- If toggle is set to false: The police won't be shown on the (mini)map If toggle is set to true: The police will be shown on the (mini)map
--- @param toggle boolean
function SetPoliceRadarBlips(toggle) end

--- Min and max are usually 100.0 and 200.0
--- @param x number
--- @param y number
--- @param z number
--- @param min number
--- @param max number
function SetPopControlSphereThisFrame(x, y, z, min, max) end

--- @param oldPortalSettingsName string
--- @param newPortalSettingsName string
function SetPortalSettingsOverride(oldPortalSettingsName, newPortalSettingsName) end

--- @param enabled boolean
function SetPositionedPlayerVehicleRadioEmitterEnabled(enabled) end

--- @param speakerConversationIndex integer
--- @param x number
--- @param y number
--- @param z number
function SetPositionForNullConvPed(speakerConversationIndex, x, y, z) end

function SetProfileSettingPrologueComplete() end

--- @param toggle boolean
function SetRaceTrackRender(toggle) end

function SetRadarAsExteriorThisFrame() end

--- List of interior hashes: pastebin.com/1FUyXNqY Not for every interior zoom > 0 available.
--- @param interior integer
--- @param x number
--- @param y number
--- @param heading integer
--- @param zoom integer
function SetRadarAsInteriorThisFrame(interior, x, y, heading, zoom) end

--- zoomLevel ranges from 0 to 200
--- @param zoomLevel integer
function SetRadarZoom(zoomLevel) end

--- @param zoom number
function SetRadarZoomPrecise(zoom) end

--- @param blip integer
--- @param zoom number
function SetRadarZoomToBlip(blip, zoom) end

--- @param zoom number
function SetRadarZoomToDistance(zoom) end

--- @param toggle boolean
function SetRadioAutoUnfreeze(toggle) end

--- @param fadeTime number
function SetRadioFrontendFadeTime(fadeTime) end

--- Doesn't have an effect in Story Mode. NativeDB Introduced: v2372
--- @param radioStation string
--- @param toggle boolean
function SetRadioStationIsVisible(radioStation, toggle) end

--- 6 calls in the b617d scripts, removed identical lines: AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1); AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0); AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
--- @param radioStation string
--- @param toggle boolean
function SetRadioStationMusicOnly(radioStation, toggle) end

--- Sets radio station by index.
--- @param radioStation integer
function SetRadioToStationIndex(radioStation) end

--- Find the radio station list here
--- @param stationName string
function SetRadioToStationName(stationName) end

--- Only found this one in the decompiled scripts: AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
--- @param radioStation string
--- @param radioTrack string
function SetRadioTrack(radioStation, radioTrack) end

--- NativeDB Introduced: v1493
--- @param radioStationName string
--- @param mixName string
--- @param p2 integer
function SetRadioTrackMix(radioStationName, mixName, p2) end

--- Enabling this on a radius blip will make it outline only.\ Please note that this only works on a **radius** blip (i.e. one generated using `ADD_BLIP_FOR_RADIUS`), not a normal blip. **Example result:**\ example-image
--- @param blip integer
--- @param toggle boolean
function SetRadiusBlipEdge(blip, toggle) end

--- Works for both player and peds, but some flags don't seem to work for the player (1, for example) 1 - Blocks ragdolling when shot. 2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation. 4 - Blocks ragdolling when set on fire. ----------------------------------------------------------------------- There seem to be 26 flags
--- @param ped integer
--- @param flags integer
function SetRagdollBlockingFlags(ped, flags) end

--- Controls rain, rain sounds and the creation of puddles. With an `level` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that. With an `level` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles. To use the rain level of the current weather, call this native with `-1f` as `level`.
--- @param level number
function SetRainLevel(level) end

--- @param toggle boolean
function SetRandomBoats(toggle) end

--- NativeDB Introduced: v2372
--- @param toggle boolean
function SetRandomBoatsInMp(toggle) end

--- If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all. Does nothing if the mission flag is set.
--- @param toggle boolean
function SetRandomEventFlag(toggle) end

--- @param seed integer
function SetRandomSeed(seed) end

--- Enables spawning random trains on the preset tracks. Requires `SWITCH_TRAIN_TRACK` and `SET_TRAIN_TRACK_SPAWN_FREQUENCY` to be set.
--- @param toggle boolean
function SetRandomTrains(toggle) end

--- @param multiplier number
function SetRandomVehicleDensityMultiplierThisFrame(multiplier) end

function SetRandomWeatherType() end

--- Lowers the vehicle's stance. Only works for vehicles that support this feature. NativeDB Introduced: v2372
--- @param vehicle integer
--- @param enable boolean
function SetReduceDriftVehicleSuspension(vehicle, enable) end

--- @param toggle boolean
function SetReducePedModelBudget(toggle) end

--- @param toggle boolean
function SetReduceVehicleModelBudget(toggle) end

--- Sets the relationship between two groups. This should be called twice (once for each group). Relationship types: 0 = Companion 1 = Respect 2 = Like 3 = Neutral 4 = Dislike 5 = Hate 255 = Pedestrians Example: PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C); PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
--- @param relationship integer
--- @param group1 integer
--- @param group2 integer
function SetRelationshipBetweenGroups(relationship, group1, group2) end

--- @param group integer
--- @param p1 boolean
function SetRelationshipGroupDontAffectWantedLevel(group, p1) end

--- Enables ghosting between specific players. Name is between `_SET_RELATIONSHIP_GROUP_DONT_AFFECT_WANTED_LEVEL` and `SET_ROADS_BACK_TO_ORIGINAL`.
--- @param player integer
--- @param p1 boolean
function SetRelationshipToPlayer(player, p1) end

--- @param toggle boolean
function SetRenderHdOnly(toggle) end

--- makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
--- @param train integer
--- @param toggle boolean
function SetRenderTrainAsDerailed(train, toggle) end

--- A setter for GET_RESOURCE_KVP_STRING.
--- @param key string
--- @param value string
function SetResourceKvp(key, value) end

--- A setter for GET_RESOURCE_KVP_FLOAT.
--- @param key string
--- @param value number
function SetResourceKvpFloat(key, value) end

--- Nonsynchronous SET_RESOURCE_KVP_FLOAT operation; see FLUSH_RESOURCE_KVP.
--- @param key string
--- @param value number
function SetResourceKvpFloatNoSync(key, value) end

--- A setter for GET_RESOURCE_KVP_INT.
--- @param key string
--- @param value integer
function SetResourceKvpInt(key, value) end

--- Nonsynchronous SET_RESOURCE_KVP_INT operation; see FLUSH_RESOURCE_KVP.
--- @param key string
--- @param value integer
function SetResourceKvpIntNoSync(key, value) end

--- Nonsynchronous SET_RESOURCE_KVP operation; see FLUSH_RESOURCE_KVP.
--- @param key string
--- @param value string
function SetResourceKvpNoSync(key, value) end

--- @param x number
--- @param y number
--- @param z number
--- @param heading number
function SetRestartCustomPosition(x, y, z, heading) end

--- Sets the player's rich presence detail state for social platform providers to a specified string.
--- @param presenceState string
function SetRichPresence(presenceState) end

--- Activates riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
--- @param toggle boolean
function SetRiotModeEnabled(toggle) end

--- missing a last parameter int p6 NativeDB Added Parameter 7: Any p6
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
function SetRoadsBackToOriginal(p0, p1, p2, p3, p4, p5) end

--- See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area. NativeDB Added Parameter 8: Any p7 bool p7 - always 1
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
function SetRoadsBackToOriginalInAngledArea(x1, y1, z1, x2, y2, z2, width) end

--- unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments. See `IS_POINT_IN_ANGLED_AREA` for the definition of an angled area.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param width number
--- @param unknown1 boolean
--- @param unknown2 boolean
--- @param unknown3 boolean
function SetRoadsInAngledArea(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3) end

--- When this is set to false, all nodes in the area get disabled. `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards. If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param nodeEnabled boolean
--- @param unknown2 boolean
function SetRoadsInArea(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2) end

--- Set's the ropes length change rate, which is the speed that rope should wind if started.
--- @param rope integer
--- @param lengthChangeRate number
function SetRopeLengthChangeRate(rope, lengthChangeRate) end

--- Toggles whether the usage of ADD_ROPE should create an underlying CNetworkRopeWorldStateData. By default this is set to false.
--- @param shouldCreate boolean
function SetRopesCreateNetworkWorldState(shouldCreate) end

--- Sets the entity lockdown mode for a specific routing bucket. Lockdown modes are: | Mode | Meaning | | ---------- | ---------------------------------------------------------- | | `strict` | No entities can be created by clients at all. | | `relaxed` | Only script-owned entities created by clients are blocked. | | `inactive` | Clients can create any entity they want. |
--- @param bucketId integer
--- @param mode string
function SetRoutingBucketEntityLockdownMode(bucketId, mode) end

--- Sets whether or not the specified routing bucket has automatically-created population enabled.
--- @param bucketId integer
--- @param mode boolean
function SetRoutingBucketPopulationEnabled(bucketId, mode) end

--- Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however. Just call it one time, it is not required to be called once every tick. Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default. It is not possible to "decrease" speed. Anything below 1 will be ignored.
--- @param player integer
--- @param multiplier number
function SetRunSprintMultiplierForPlayer(player, multiplier) end

--- @param tex integer
--- @param buffer string
--- @param length integer
--- @return any
function SetRuntimeTextureArgbData(tex, buffer, length) end

--- Replaces the pixel data in a runtime texture with the image data from a file in the current resource, or a data URL. If the bitmap is a different size compared to the existing texture, it will be resampled. This command may end up executed asynchronously, and only update the texture data at a later time.
--- @param tex integer
--- @param fileName string
--- @return any
function SetRuntimeTextureImage(tex, fileName) end

--- Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect.
--- @param tex integer
--- @param x integer
--- @param y integer
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function SetRuntimeTexturePixel(tex, x, y, r, g, b, a) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function SetSaveHouse(p0, p1, p2) end

--- ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
--- @param ignoreVehicle boolean
function SetSaveMenuActive(ignoreVehicle) end

--- Sets profile setting 501
--- @param transactionId integer
function SetSaveMigrationTransactionId(transactionId) end

--- @param scaleformHandle integer
--- @return integer
function SetScaleformMovieAsNoLongerNeeded(scaleformHandle) end

--- NativeDB Introduced: v573 Configures a Scaleform movie to render to a large render target (1280x720), which is useful for ensuring higher quality and clarity in certain display scenarios. Such as displaying the name of an organization (CEO Office) in a visually impactful way for example.
--- @param scaleformMovieId integer
--- @param useLargeRT boolean
function SetScaleformMovieToUseLargeRt(scaleformMovieId, useLargeRT) end

--- Adjusts a scaleform movie's dimensions to fit a large rendertarget. Mostly used in casino scripts.
--- @param scaleformHandle integer
--- @param toggle boolean
function SetScaleformMovieToUseSuperLargeRt(scaleformHandle, toggle) end

--- @param scaleform integer
--- @param toggle boolean
function SetScaleformMovieToUseSystemTime(scaleform, toggle) end

--- Occurrences in the b617d scripts: pastebin.com/Tvg2PRHU
--- @param scenarioGroup string
--- @param p1 boolean
function SetScenarioGroupEnabled(scenarioGroup, p1) end

--- Set the number of scenario peds on the entire map
--- @param interiorMult number
--- @param exteriorMult number
function SetScenarioPedDensityMultiplierThisFrame(interiorMult, exteriorMult) end

--- @param x number
--- @param y number
--- @param z number
--- @param range number
--- @param p4 integer
function SetScenarioPedsSpawnInSphereArea(x, y, z, range, p4) end

--- Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
--- @param value boolean
function SetScenarioPedsToBeReturnedByNextCommand(value) end

--- seems to enable/disable specific scenario-types from happening in the game world. Here are some scenario types from the scripts: "WORLD_MOUNTAIN_LION_REST" "WORLD_MOUNTAIN_LION_WANDER" "DRIVE" "WORLD_VEHICLE_POLICE_BIKE" "WORLD_VEHICLE_POLICE_CAR" "WORLD_VEHICLE_POLICE_NEXT_TO_CAR" "WORLD_VEHICLE_DRIVE_SOLO" "WORLD_VEHICLE_BIKER" "WORLD_VEHICLE_DRIVE_PASSENGERS" "WORLD_VEHICLE_SALTON_DIRT_BIKE" "WORLD_VEHICLE_BICYCLE_MOUNTAIN" "PROP_HUMAN_SEAT_CHAIR" "WORLD_VEHICLE_ATTRACTOR" "WORLD_HUMAN_LEANING" "WORLD_HUMAN_HANG_OUT_STREET" "WORLD_HUMAN_DRINKING" "WORLD_HUMAN_SMOKING" "WORLD_HUMAN_GUARD_STAND" "WORLD_HUMAN_CLIPBOARD" "WORLD_HUMAN_HIKER" "WORLD_VEHICLE_EMPTY" "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE" "WORLD_HUMAN_PAPARAZZI" "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN" "WORLD_VEHICLE_PARK_PARALLEL" "WORLD_VEHICLE_CONSTRUCTION_SOLO" "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS" "WORLD_VEHICLE_TRUCK_LOGS" scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
--- @param scenarioType string
--- @param toggle boolean
function SetScenarioTypeEnabled(scenarioType, toggle) end

--- @param scriptName string
function SetScriptAsNoLongerNeeded(scriptName) end

--- @param ped integer
--- @param p1 number
function SetScriptedAnimSeatOffset(ped, p1) end

--- @param x number
--- @param y number
--- @param z number
function SetScriptedConversionCoordThisFrame(x, y, z) end

--- This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration. These values are equivalent to `alignX` and `alignY` in `common:/data/ui/frontend.xml`, which can be used as a baseline for default alignment. Valid values for `horizontalAlign`, from original documentation: * **C (67)** - Center: DRAW_TEXT starts in the middle of the screen, while DRAW_RECT starts on the right; both move with the right side of the screen. * **L (76)** - Left: Anchors to the left side, DRAW_RECT starts on the left side of the screen, same as DRAW_TEXT when centered. * **R (82)** - Right: DRAW_TEXT starts on the left side (normal 0,0), while DRAW_RECT starts some short distance away from the right side of the screen, both move with the right side of the screen. Valid values for `verticalAlign`, from original documentation: * **B (66)** - Bottom: DRAW_RECT starts about as far as the middle of the map from the bottom, while DRAW_TEXT is about rather centered. * **C (67)** - Center: It starts at a certain distance from the bottom, but the distance is fixed, the distance is different from 66. * **T (84)** - Top: Anchors to the top, DRAW_RECT starts on the top of the screen, DRAW_TEXT just below it. Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73). For example, you can use `SET_SCRIPT_GFX_ALIGN(0, 84)` to only scale on the Y axis (to the top), but not change the X axis. To reset the value, use `RESET_SCRIPT_GFX_ALIGN`.
--- @param horizontalAlign integer
--- @param verticalAlign integer
function SetScriptGfxAlign(horizontalAlign, verticalAlign) end

--- Sets the draw offset/calculated size for `SET_SCRIPT_GFX_ALIGN`. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
--- @param x number
--- @param y number
--- @param w number
--- @param h number
function SetScriptGfxAlignParams(x, y, w, h) end

--- Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
--- @param flag boolean
function SetScriptGfxDrawBehindPausemenu(flag) end

--- Sets the draw order for script draw commands. Examples from decompiled scripts: GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7); GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v\_4, v\_5, v\_6, a\_0.\_f172, 0); GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1); GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0); cpp enum eGfxDrawOrder { GFX_ORDER_BEFORE_HUD_PRIORITY_LOW = 0, GFX_ORDER_BEFORE_HUD = 1, GFX_ORDER_BEFORE_HUD_PRIORITY_HIGH = 2, GFX_ORDER_AFTER_HUD_PRIORITY_LOW = 3, GFX_ORDER_AFTER_HUD = 4, GFX_ORDER_AFTER_HUD_PRIORITY_HIGH = 5, GFX_ORDER_AFTER_FADE_PRIORITY_LOW = 6, GFX_ORDER_AFTER_FADE = 7, GFX_ORDER_AFTER_FADE_PRIORITY_HIGH = 8, }
--- @param order integer
function SetScriptGfxDrawOrder(order) end

--- @param doorHash integer
--- @param toggle boolean
function SetScriptUpdateDoorAudio(doorHash, toggle) end

--- Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function SetScriptVariable_2HudColour(r, g, b, a) end

--- Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function SetScriptVariableHudColour(r, g, b, a) end

--- Only called once in the decompiled scripts. Presumably activates the specified generator.
--- @param vehicleGenerator integer
--- @param enabled boolean
function SetScriptVehicleGenerator(vehicleGenerator, enabled) end

--- @param scriptHash integer
function SetScriptWithNameHashAsNoLongerNeeded(scriptHash) end

--- Toggles Heatvision on/off.
--- @param toggle boolean
function SetSeethrough(toggle) end

--- @param taskSequenceId integer
--- @param _repeat boolean
function SetSequenceToRepeat(taskSequenceId, _repeat) end

--- NativeDB Introduced: v2372
--- @param vehicle integer
--- @param toggle boolean
function SetSirenKeepOn(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetSirenWithNoDriver(vehicle, toggle) end

--- @param name string
--- @param path string
--- @param data string
function SetSnakeoilForEntry(name, path, data) end

--- NativeDB Introduced: v1868
--- @param level number
function SetSnowLevel(level) end

--- HUD::SET_SOCIAL_CLUB_TOUR("Gallery"); HUD::SET_SOCIAL_CLUB_TOUR("Missions"); HUD::SET_SOCIAL_CLUB_TOUR("General"); HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
--- @param name string
function SetSocialClubTour(name) end

--- NativeDB Added Parameter 3: Any p2
--- @param player integer
--- @param p1 integer
function SetSpecialAbility(player, p1) end

--- @param multiplier number
function SetSpecialAbilityMultiplier(multiplier) end

--- Allows locking the hover/non-hover mode of a vehicle, such as the flying mode of the `Deluxo`. In the decompiled scripts, this native is used on `oppressor2` but couldn't get it to work on it.
--- @param vehicle integer
--- @param toggle boolean
function SetSpecialFlightModeAllowed(vehicle, toggle) end

--- Used alongside `SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO`, this function initiates hover transformation for vehicles with a hover mode, like the `Deluxo`, based on a specified ratio (0.0 to 1.0). Incorrect values can glitch the vehicle. Without pairing, vehicles revert to car mode. Ineffective on the `oppressor2`
--- @param vehicle integer
--- @param ratio number
function SetSpecialFlightModeRatio(vehicle, ratio) end

--- According to decompiled scripts this should work with the `deluxo` and `oppressor2` vehicles. Does nothing when used on `oppressor2`. For the deluxo: * Set `state` to `0.0`: Fully transform to a 'road' vehicle (non-hover mode). * Set `state` to `1.0`: Fully transform to a 'flying' vehicle (hover mode). If you set it to something like 0.5, then something weird happens, you end up in some 50% hover mode, 50% not hover mode. This doesn't need to be called every tick, just once and the vehicle will transform to that state at the usual transform speed. It'll just stop transforming when it reaches the state you provided. Once this native is used then players will just be able to hit the vehicle transform key to toggle the transformation cycle; it won't block users from using the key.
--- @param vehicle integer
--- @param state number
function SetSpecialFlightModeTargetRatio(vehicle, state) end

--- @param p0 number
function SetSrlTime(p0) end

--- Internal function for setting a state bag value.
--- @param bagName string
--- @param keyName string
--- @param valueData string
--- @param valueLength integer
--- @param replicated boolean
function SetStateBagValue(bagName, keyName, valueData, valueLength, replicated) end

--- Hardcoded to not work in multiplayer. Used to lock/unlock doors to interior areas of the game. (Possible) Door Types: pastebin.com/9S2m3qA4 Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior. Locked means that the heading is locked. p6 is always 0. 225 door types, model names and coords found in stripclub.c4: pastebin.com/gywnbzsH get door info: pastebin.com/i14rbekD
--- @param type integer
--- @param x number
--- @param y number
--- @param z number
--- @param locked boolean
--- @param heading number
--- @param p6 boolean
function SetStateOfClosestDoorOfType(type, x, y, z, locked, heading, p6) end

--- Defines the state of a destructible object. Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords. State 2 == object just spawned State 4 == Beginning of the animation State 6 == Start animation State 9 == End of the animation
--- @param object integer
--- @param state integer
function SetStateOfRayfireMapObject(object, state) end

--- Example: AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false); AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false); AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false); This turns off surrounding sounds not connected directly to peds.
--- @param emitterName string
--- @param toggle boolean
function SetStaticEmitterEnabled(emitterName, toggle) end

--- Access to the store for shark cards etc...
--- @param toggle boolean
function SetStoreEnabled(toggle) end

--- @param textureDict string
function SetStreamedTextureDictAsNoLongerNeeded(textureDict) end

--- @param toggle boolean
function SetStreaming(toggle) end

--- @param toggle boolean
function SetStuntJumpsCanTrigger(toggle) end

--- @param vehicle integer
--- @param toggle boolean
--- @param depth1 number
--- @param depth2 number
--- @param depth3 number
function SetSubmarineCrushDepths(vehicle, toggle, depth1, depth2, depth3) end

--- Allows the player to perform super jumps. This function must be called every frame for it to work. It basically OR's a flag for a single frame, allowing the ped to perform a super jump only when the flag is set.
--- @param player integer
function SetSuperJumpThisFrame(player) end

--- Swim speed multiplier. Multiplier goes up to 1.49 Just call it one time, it is not required to be called once every tick. - Note copied from below native. Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
--- @param player integer
--- @param multiplier number
function SetSwimMultiplierForPlayer(player, multiplier) end

--- @param sceneID integer
--- @param toggle boolean
function SetSynchronizedSceneHoldLastFrame(sceneID, toggle) end

--- @param sceneID integer
--- @param toggle boolean
function SetSynchronizedSceneLooped(sceneID, toggle) end

--- @param sceneID integer
--- @param x number
--- @param y number
--- @param z number
--- @param roll number
--- @param pitch number
--- @param yaw number
--- @param p7 boolean
function SetSynchronizedSceneOrigin(sceneID, x, y, z, roll, pitch, yaw, p7) end

--- @param sceneID integer
--- @param phase number
function SetSynchronizedScenePhase(sceneID, phase) end

--- @param sceneID integer
--- @param rate number
function SetSynchronizedSceneRate(sceneID, rate) end

--- Override the camera work of the third-person camera to table game for current frame only. | HashKey | Hash | Game | | :---------------------------------: | :-----------:| :-------------: | | `CASINO_LUCKY_WHEEL_CAMERA` | `5891389` | Lucky Wheel | | `CASINO_SLOT_MACHINE_CAMERA` | `518572876` | Slots | | `CASINO_ROULETTE_CAMERA` | `71681063` | Roulette | | `CASINO_BLACKJACK_CAMERA` | `-2124244681` | Blackjack | | `CASINO_POKER_CAMERA` | `-1938411241` | Three Cards | | `CASINO_INSIDE_TRACK_CAMERA` | `1929822423` | Inside Track | | `ARCADE_LOVE_PROFESSOR_P1_CAMERA` | `545868034` | LoveProfessorP1 | | `ARCADE_LOVE_PROFESSOR_P2_CAMERA` | `935304251` | LoveProfessorP2 |
--- @param hash integer
--- @return any
function SetTableGamesCameraThisUpdate(hash) end

--- @param ped integer
--- @param signalName string
--- @param value boolean
function SetTaskMoveNetworkSignalBool(ped, signalName, value) end

--- p0 - PLAYER::PLAYER_PED_ID(); p1 - "Phase", "Wobble", "x_axis","y_axis","introphase","speed". p2 - From what i can see it goes up to 1f (maybe). -LcGamingHD Example: TASK::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
--- @param ped integer
--- @param signalName string
--- @param value number
function SetTaskMoveNetworkSignalFloat(ped, signalName, value) end

--- NativeDB Introduced: v1493
--- @param ped integer
--- @param signalName string
--- @param value number
function SetTaskMoveNetworkSignalFloat_2(ped, signalName, value) end

--- * Flag 1: Aggressive ramming of suspect * Flag 2: Ram attempts * Flag 8: Medium-aggressive boxing tactic with a bit of PIT * Flag 16: Ramming, seems to be slightly less aggressive than 1-2. * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
--- @param ped integer
--- @param flag integer
--- @param set boolean
function SetTaskVehicleChaseBehaviorFlag(ped, flag, set) end

--- @param ped integer
--- @param distance number
function SetTaskVehicleChaseIdealPursuitDistance(ped, distance) end

--- @param plane integer
--- @param height integer
function SetTaskVehicleGotoPlaneMinHeightAboveTerrain(plane, height) end

--- This is not tested - it's just an assumption. Doesn't seem to work. I'll try with an int instead. --JT Read the scripts, im dumpass. Doesn't work at all, wether with an bool neither an int if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) { VEHICLE::SET_TAXI_LIGHTS(l_115, 1); }
--- @param vehicle integer
--- @param state boolean
function SetTaxiLights(vehicle, state) end

--- @param object integer
--- @param p1 any
--- @param p2 boolean
function SetTeamPickupObject(object, p1, p2) end

--- @param align boolean
function SetTextCentre(align) end

--- @param enabled boolean
--- @return any
function SetTextChatEnabled(enabled) end

--- colors you input not same as you think? A: for some reason its R B G A
--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function SetTextColour(red, green, blue, alpha) end

--- distance - shadow distance in pixels, both horizontal and vertical r, g, b, a - color
--- @param distance integer
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function SetTextDropshadow(distance, r, g, b, a) end

function SetTextDropShadow() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 integer
--- @param r integer
--- @param g integer
--- @param b integer
--- @param a integer
function SetTextEdge(p0, r, g, b, a) end

--- cpp enum eTextFonts { FONT_STANDARD = 0, FONT_CURSIVE = 1, FONT_ROCKSTAR_TAG = 2, FONT_LEADERBOAR0D = 3, FONT_CONDENSED = 4, FONT_STYLE_FIXED_WIDTH_NUMBERS = 5, FONT_CONDENSED_NOT_GAMERNAME = 6, FONT_STYLE_PRICEDOWN = 7, FONT_STYLE_TAXI = 8, }
--- @param fontType integer
function SetTextFont(fontType) end

--- Sets the text font for the current text drawing command.
--- @param fontId integer
function SetTextFontForCurrentCommand(fontId) end

--- Toggles if the text input box can be opened with `DISPLAY_ONSCREEN_KEYBOARD`.
--- @param state boolean
function SetTextInputBoxEnabled(state) end

--- Types - 0: Center-Justify 1: Left-Justify 2: Right-Justify Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
--- @param justifyType integer
function SetTextJustification(justifyType) end

--- @param justifyType integer
function SetTextJustification(justifyType) end

--- @param p0 integer
function SetTextLeading(p0) end

function SetTextOutline() end

--- **This native does absolutely nothing, just a nullsub**
--- @param p0 boolean
function SetTextProportional(p0) end

--- @param renderId integer
function SetTextRenderId(renderId) end

--- @param toggle boolean
function SetTextRightJustify(toggle) end

--- Size range : 0F to 1.0F p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
--- @param scale number
--- @param size number
function SetTextScale(scale, size) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param modelHash integer
--- @param textureVariation integer
--- @return any
function SetTextureVariationOfClosestObjectOfType(x, y, z, radius, modelHash, textureVariation) end

--- It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right. start - left boundry on screen position (0.0 - 1.0) end - right boundry on screen position (0.0 - 1.0)
--- @param start number
--- @param _end number
function SetTextWrap(start, _end) end

--- @param start number
--- @param _end number
function SetTextWrap(start, _end) end

--- @param distance number
function SetThirdPersonAimCamNearClipThisUpdate(distance) end

--- @param toggle boolean
function SetThisScriptCanBePaused(toggle) end

--- Normally, blips can only be removed by the script or resource that created them. However, this native function allows a script to bypass this logic and remove blips from any script.
--- @param toggle boolean
function SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle) end

--- 0 = high 1 = normal 2 = low
--- @param priority integer
function SetThreadPriority(priority) end

--- Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml") Parameters: modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
--- @param modifierName string
function SetTimecycleModifier(modifierName) end

--- @param strength number
function SetTimecycleModifierStrength(strength) end

--- @param modifierName string
--- @param varName string
--- @param value1 number
--- @param value2 number
function SetTimecycleModifierVar(modifierName, varName, value1, value2) end

--- Sets the value for the timer A in milliseconds
--- @param value integer
function Settimera(value) end

--- Sets the value for the timer B in milliseconds
--- @param value integer
function Settimerb(value) end

--- Maximum value is 1. At a value of 0 the game will still run at a minimum time scale. Slow Motion 1: 0.6 Slow Motion 2: 0.4 Slow Motion 3: 0.2
--- @param timeScale number
function SetTimeScale(timeScale) end

--- Sets the braking distance of the track. Used by trains to determine the point to slow down when entering a station.
--- @param track integer
--- @param brakingDistance number
function SetTrackBrakingDistance(track, brakingDistance) end

--- @param point integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
function SetTrackedPointInfo(point, x, y, z, radius) end

--- Toggles the track being active. If disabled mission trains will not be able to spawn on this track and will look for the next closest track to spawn
--- @param track integer
--- @param enabled boolean
function SetTrackEnabled(track, enabled) end

--- Sets the state of a track junction.
--- @param junctionIndex integer
--- @param state boolean
--- @return any
function SetTrackJunctionActive(junctionIndex, state) end

--- Sets the max speed for the train tracks. Used by ambient trains and for station calculations
--- @param track integer
--- @param newSpeed integer
function SetTrackMaxSpeed(track, newSpeed) end

--- @param vehicle integer
--- @param p1 number
function SetTrailerInverseMassScale(vehicle, p1) end

--- Inverse of 0x95CF53B3D687F9FA NativeDB Added Parameter 1: Vehicle vehicle
--- @param trailer integer
function SetTrailerLegsLowered(trailer) end

--- in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
--- @param vehicle integer
function SetTrailerLegsRaised(vehicle) end

--- Used to control train speed, can be used to start and stop its movement as well.
--- @param train integer
--- @param speed number
function SetTrainCruiseSpeed(train, speed) end

--- Sets the ratio that a door is open for on a train.
--- @param train integer
--- @param doorIndex integer
--- @param ratio number
function SetTrainDoorOpenRatio(train, doorIndex, ratio) end

--- Enables or disables whether train doors should be forced open whilst a player is inside the train. This is enabled by default in multiplayer.
--- @param forceOpen boolean
function SetTrainsForceDoorsOpen(forceOpen) end

--- @param train integer
--- @param speed number
function SetTrainSpeed(train, speed) end

--- @param train integer
--- @param state integer
function SetTrainState(train, state) end

--- Toggles a train's ability to stop at stations
--- @param train integer
--- @param state boolean
function SetTrainStopAtStations(train, state) end

--- Only called once inside main_persitant with the parameters, 0
--- @param trackIndex integer
--- @param frequency integer
function SetTrainTrackSpawnFrequency(trackIndex, frequency) end

--- Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted. In decompiled scripts the only value used for transformRate is 2.5.
--- @param vehicle integer
--- @param transformRate number
function SetTransformRateForAnimation(vehicle, transformRate) end

--- Changes the key used to transform a vehicle into submarine mode. When set to true, the transformation key switches from the default raise/lower convertible roof key (usually 'H') to the special vehicle transformation key (usually 'X'). NativeDB Introduced: v1365
--- @param vehicle integer
--- @param useAlternateInput boolean
function SetTransformToSubmarineUsesAlternateInput(vehicle, useAlternateInput) end

--- This native doesn't work like `SetWeatherTypeTransition`.
--- @param modifierName string
--- @param transition number
function SetTransitionTimecycleModifier(modifierName, transition) end

--- Probably changes tvs from being a 3d audio to being "global" audio
--- @param toggle boolean
function SetTvAudioFrontend(toggle) end

--- @param channel integer
function SetTvChannel(channel) end

--- Loads specified video sequence into the TV Channel TV_Channel ranges from 0-2 VideoSequence can be any of the following: "PL_STD_CNT" CNT Standard Channel "PL_STD_WZL" Weazel Standard Channel "PL_LO_CNT" "PL_LO_WZL" "PL_SP_WORKOUT" "PL_SP_INV" - Jay Norris Assassination Mission Fail "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success "PL_LO_RS" - Righteous Slaughter Ad "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene "PL_SP_PLSH1\_INTRO" "PL_LES1\_FAME_OR_SHAME" "PL_STD_WZL_FOS_EP2" "PL_MP_WEAZEL" - Weazel Logo on loop "PL_MP_CCTV" - Generic CCTV loop Restart: 0=video sequence continues as normal 1=sequence restarts from beginning every time that channel is selected The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT). https://pastebin.com/zUzGB6h7
--- @param tvChannel integer
--- @param playlistName string
--- @param restart boolean
function SetTvChannelPlaylist(tvChannel, playlistName, restart) end

--- @param tvChannel integer
--- @param playlistName string
--- @param hour integer
function SetTvChannelPlaylistAtHour(tvChannel, playlistName, hour) end

--- @param volume number
function SetTvVolume(volume) end

--- NativeDB Introduced: v1868
--- @param vehicle integer
--- @param wheelIndex integer
--- @param health number
function SetTyreHealth(vehicle, wheelIndex, health) end

--- Controls how fast the tires wear out. Default values from Rockstar's Open Wheel Race JSON's: "owrtss" (Soft): 2.2 "owrtsm" (Medium): 1.7 "owrtsh" (Hard): 1.2 Usable wheels: 0: wheel_lf 1: wheel_rf 2: wheel_lm1 3: wheel_rm1 4: wheel_lr 5: wheel_rr NativeDB Introduced: v2060
--- @param vehicle integer
--- @param wheelIndex integer
--- @param multiplier number
function SetTyreSoftnessMultiplier(vehicle, wheelIndex, multiplier) end

--- Controls how much traction the wheel loses. Default values from Rockstar's Open Wheel Race JSON's: "owrtds" (Soft): 0.05 "owrtdm" (Medium): 0.45 "owrtdh" (Hard): 0.8 Usable wheels: 0: wheel_lf 1: wheel_rf 2: wheel_lm1 3: wheel_rm1 4: wheel_lr 5: wheel_rr NativeDB Introduced: v2060
--- @param vehicle integer
--- @param wheelIndex integer
--- @param multiplier number
function SetTyreTractionLossMultiplier(vehicle, wheelIndex, multiplier) end

--- NativeDB Introduced: v1868
--- @param vehicle integer
--- @param wheelIndex integer
--- @param multiplier number
function SetTyreWearMultiplier(vehicle, wheelIndex, multiplier) end

--- NativeDB Introduced: v1365
--- @param value boolean
function SetUnkGlobalBoolRelatedToDamage(value) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 integer
--- @return any
function SetupShopPedApparelQuery(p0, p1, p2, p3) end

--- character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female. componentId is between 0 and 11 and corresponds to the usual component slots. p1 could be the outfit number; unsure. p2 is usually -1; unknown function. p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props. p4 is usually -1; unknown function. componentId is -1 when p3 is true in decompiled scripts.
--- @param character integer
--- @param p1 integer
--- @param p2 integer
--- @param p3 boolean
--- @param p4 integer
--- @param componentId integer
--- @return any
function SetupShopPedApparelQueryTu(character, p1, p2, p3, p4, componentId) end

--- characters 0: Michael 1: Franklin 2: Trevor 3: MPMale 4: MPFemale
--- @param character integer
--- @param p1 boolean
--- @return any
function SetupShopPedOutfitQuery(character, p1) end

--- Needs to be called every tick to make the active camera use a high depth of field.\ The DoF can be customized using `SET_CAM_NEAR_DOF`, `SET_CAM_FAR_DOF`, `SET_CAM_USE_SHALLOW_DOF_MODE`, `SET_CAM_DOF_STRENGTH` and other DoF related natives. ### Usage Example A usage example for this native can be found in the following native documentation: `SET_CAM_DOF_STRENGTH`.
function SetUseHiDof() end

--- Only used in R* Script fm_mission_controller_2020 NativeDB Introduced: v2699
function SetUseHiDofInCutscene() end

--- Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
--- @param vehicle integer
--- @param toggle boolean
function SetUseHigherVehicleJumpForce(vehicle, toggle) end

--- Switches the display of the in-game minimap to the Cayo Perico map. This native needs to be called every frame to maintain the toggled state effectively. NativeDB Introduced: v2189
--- @param toggle boolean
function SetUseIslandMap(toggle) end

--- @param toggle boolean
function SetUserRadioControlEnabled(toggle) end

--- Sets a global mode which makes the pause menu map show 'Destination' instead of 'Waypoint' in the key legend on the bottom of the screen. <!-- Name guess: - alphabetical function order, below [SET_USER_RADIO_CONTROL_ENABLED, SET_USE_HI_DOF], above SET_VARIABLE_ON_SOUND. -->
--- @param toggle boolean
function SetUseWaypointAsDestination(toggle) end

--- SET_VARIABLE_ON_*
--- @param variableName string
--- @param value number
function SetVariableOnCutsceneAudio(variableName, value) end

--- @param soundId integer
--- @param variableName string
--- @param value number
function SetVariableOnSound(soundId, variableName, value) end

--- From the scripts, p0: "ArmWrestlingIntensity", "INOUT", "Monkey_Stream", "ZoomLevel"
--- @param p0 string
--- @param p1 number
function SetVariableOnStream(p0, p1) end

--- AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0); AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
--- @param variableName string
--- @param value number
function SetVariableOnUnderWaterStream(variableName, value) end

--- NativeDB Introduced: v2372
--- @param vehicle integer
function SetVehHasRadioOverride(vehicle) end

--- This native is used to simulate a high-speed impact for a vehicle when it collides with a breakable object (frag). It's particularly useful in scripted sequences where a vehicle is required to break through a barrier but might not actually be moving at a sufficient speed to do so realistically. Note that this setting is temporary and will reset after one frame, so it needs to be called every frame for a lasting effect.
--- @param vehicle integer
--- @param actHighSpeed boolean
function SetVehicleActAsIfHighSpeedForFragSmashing(vehicle, actHighSpeed) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleActiveDuringPlayback(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleActiveForPedNavigation(vehicle, toggle) end

--- @param vehicle integer
--- @param state boolean
function SetVehicleAlarm(vehicle, state) end

--- SET_VEHICLE_ALARM **This is the server-side RPC native equivalent of the client native SET_VEHICLE_ALARM.**
--- @param vehicle integer
--- @param state boolean
function SetVehicleAlarm(vehicle, state) end

--- @param vehicle integer
--- @param time integer
function SetVehicleAlarmTimeLeft(vehicle, time) end

--- Makes the vehicle accept no passengers.
--- @param veh integer
--- @param toggle boolean
function SetVehicleAllowNoPassengersLockon(veh, toggle) end

--- This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
--- @param vehicle integer
--- @return integer
function SetVehicleAsNoLongerNeeded(vehicle) end

--- Vehicle will make a 'rattling' noise when decelerating
--- @param vehicle integer
--- @param intensity number
function SetVehicleAudioBodyDamageFactor(vehicle, intensity) end

--- @param vehicle integer
--- @param damageFactor number
function SetVehicleAudioEngineDamageFactor(vehicle, damageFactor) end

--- @param vehicle integer
--- @param p1 boolean
--- @param p2 any
--- @return any
function SetVehicleAutomaticallyAttaches(vehicle, p1, p2) end

--- Disables the vehicle from being repaired when a vehicle extra is enabled.
--- @param vehicle integer
--- @param value boolean
function SetVehicleAutoRepairDisabled(vehicle, value) end

--- p2 often set to 1000.0 in the decompiled scripts.
--- @param vehicle integer
--- @param value number
function SetVehicleBodyHealth(vehicle, value) end

--- p2 often set to 1000.0 in the decompiled scripts. **This is the server-side RPC native equivalent of the client native SET_VEHICLE_BODY_HEALTH.**
--- @param vehicle integer
--- @param value number
function SetVehicleBodyHealth(vehicle, value) end

--- Sets the amount of bombs that this vehicle has. As far as I know, this does *not* impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane. In decompiled scripts this is used to deduct from or add to the count whenever bombs are dropped or purchased/restocked. Use `_GET_AIRCRAFT_BOMB_COUNT` to get the amount of bombs on that vehicle.
--- @param aircraft integer
--- @param bombCount integer
function SetVehicleBombCount(aircraft, bombCount) end

--- SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0); SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0); Will give a boost-soundeffect.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleBoostActive(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleBrake(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleBrakeLights(vehicle, toggle) end

--- Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
--- @param vehicle integer
--- @param position number
--- @param p2 boolean
function SetVehicleBulldozerArmPosition(vehicle, position, p2) end

--- On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleBurnout(vehicle, toggle) end

--- SET_VEHICLE_AL*
--- @param vehicle integer
--- @param canBeLockedOn boolean
--- @param unk boolean
function SetVehicleCanBeLockedOn(vehicle, canBeLockedOn, unk) end

--- This has not yet been tested - it's just an assumption of what the types could be.
--- @param vehicle integer
--- @param state boolean
function SetVehicleCanBeTargetted(vehicle, state) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanBeUsedByFleeingPeds(vehicle, toggle) end

--- @param vehicle integer
--- @param state boolean
function SetVehicleCanBeVisiblyDamaged(vehicle, state) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanBreak(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanDeformWheels(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanEngineOperateOnFire(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanLeakOil(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanLeakPetrol(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleCanSaveInGarage(vehicle, toggle) end

--- Previously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision) from Decrypted Scripts I found VEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2/*2*/], 420.0);
--- @param vehicle integer
--- @param height number
function SetVehicleCeilingHeight(vehicle, height) end

--- <1.0 - Decreased torque =1.0 - Default torque >1.0 - Increased torque Negative values will cause the vehicle to go backwards instead of forwards while accelerating. value - is between 0.2 and 1.8 in the decompiled scripts. This needs to be called every frame to take effect.
--- @param vehicle integer
--- @param value number
function SetVehicleCheatPowerIncrease(vehicle, value) end

--- @param vehicle integer
--- @param clutch number
function SetVehicleClutch(vehicle, clutch) end

--- Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter). Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.)
--- @param vehicle integer
--- @param colorCombination integer
function SetVehicleColourCombination(vehicle, colorCombination) end

--- Sets the selected vehicle's colors to their default value (specific variant specified using the colorCombination parameter). Range of possible values for colorCombination is currently unknown, I couldn't find where these values are stored either (Disquse's guess was vehicles.meta but I haven't seen it in there.) **This is the server-side RPC native equivalent of the client native SET_VEHICLE_COLOUR_COMBINATION.**
--- @param vehicle integer
--- @param colorCombination integer
function SetVehicleColourCombination(vehicle, colorCombination) end

--- colorPrimary & colorSecondary are the paint indexes for the vehicle. For a list of valid paint indexes, view: pastebin.com/pwHci0xK
--- @param vehicle integer
--- @param colorPrimary integer
--- @param colorSecondary integer
function SetVehicleColours(vehicle, colorPrimary, colorSecondary) end

--- colorPrimary & colorSecondary are the paint indexes for the vehicle. For a list of valid paint indexes, view: pastebin.com/pwHci0xK **This is the server-side RPC native equivalent of the client native SET_VEHICLE_COLOURS.**
--- @param vehicle integer
--- @param colorPrimary integer
--- @param colorSecondary integer
function SetVehicleColours(vehicle, colorPrimary, colorSecondary) end

--- Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls) Doesn't work for planes/helis.
--- @param vehicle integer
--- @param state boolean
function SetVehicleControlsInverted(vehicle, state) end

--- Similar to `_SET_AIRCRAFT_BOMB_COUNT`, this sets the amount of countermeasures that are present on this vehicle. Use `_GET_AIRCRAFT_COUNTERMEASURE_COUNT` to get the current amount.
--- @param aircraft integer
--- @param count integer
function SetVehicleCountermeasureCount(aircraft, count) end

--- @param vehicle integer
--- @param gear integer
function SetVehicleCurrentGear(vehicle, gear) end

--- @param vehicle integer
--- @param rpm number
function SetVehicleCurrentRpm(vehicle, rpm) end

--- p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
--- @param vehicle integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetVehicleCustomPrimaryColour(vehicle, r, g, b) end

--- p1, p2, p3 are RGB values for color (255,0,0 for Red, ect) **This is the server-side RPC native equivalent of the client native SET_VEHICLE_CUSTOM_PRIMARY_COLOUR.**
--- @param vehicle integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetVehicleCustomPrimaryColour(vehicle, r, g, b) end

--- p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
--- @param vehicle integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetVehicleCustomSecondaryColour(vehicle, r, g, b) end

--- p1, p2, p3 are RGB values for color (255,0,0 for Red, ect) **This is the server-side RPC native equivalent of the client native SET_VEHICLE_CUSTOM_SECONDARY_COLOUR.**
--- @param vehicle integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetVehicleCustomSecondaryColour(vehicle, r, g, b) end

--- Apply damage to vehicle at a location. Location is relative to vehicle model (not world). Radius of effect damage applied in a sphere at impact location When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
--- @param vehicle integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param damage number
--- @param radius number
--- @param focusOnModel boolean
function SetVehicleDamage(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel) end

--- SET_VEHICLE_D*
--- @param vehicle integer
--- @param p1 number
--- @return any
function SetVehicleDamageModifier(vehicle, p1) end

--- @param vehicle integer
--- @param color integer
function SetVehicleDashboardColor(vehicle, color) end

--- This fixes the deformation of a vehicle but the vehicle health doesn't improve
--- @param vehicle integer
function SetVehicleDeformationFixed(vehicle) end

--- **Usage:** * Use this native inside a looped function. * Values: * `0.0` = no vehicles on streets * `1.0` = normal vehicles on streets `1.0` Seems to be the maximum.
--- @param multiplier number
function SetVehicleDensityMultiplierThisFrame(multiplier) end

--- Sets the dirt level of the passed vehicle.
--- @param vehicle integer
--- @param dirtLevel number
function SetVehicleDirtLevel(vehicle, dirtLevel) end

--- Sets the dirt level of the passed vehicle. **This is the server-side RPC native equivalent of the client native SET_VEHICLE_DIRT_LEVEL.**
--- @param vehicle integer
--- @param dirtLevel number
function SetVehicleDirtLevel(vehicle, dirtLevel) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleDisableTowing(vehicle, toggle) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @param deleteDoor boolean
function SetVehicleDoorBroken(vehicle, doorIndex, deleteDoor) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT` **This is the server-side RPC native equivalent of the client native SET_VEHICLE_DOOR_BROKEN.**
--- @param vehicle integer
--- @param doorIndex integer
--- @param deleteDoor boolean
function SetVehicleDoorBroken(vehicle, doorIndex, deleteDoor) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @param isBreakable boolean
function SetVehicleDoorCanBreak(vehicle, doorIndex, isBreakable) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @param speed integer
--- @param angle number
function SetVehicleDoorControl(vehicle, doorIndex, speed, angle) end

--- See eDoorId declared in `SET_VEHICLE_DOOR_SHUT`
--- @param vehicle integer
--- @param doorIndex integer
--- @param forceClose boolean
--- @param lock boolean
--- @param p4 boolean
function SetVehicleDoorLatched(vehicle, doorIndex, forceClose, lock, p4) end

--- Sets the specified door index open on the passed vehicle. See `IS_VEHICLE_DOOR_FULLY_OPEN`.
--- @param vehicle integer
--- @param doorIndex integer
--- @param loose boolean
--- @param openInstantly boolean
function SetVehicleDoorOpen(vehicle, doorIndex, loose, openInstantly) end

--- Sets the specified door index shut on the passed vehicle. cpp enum eDoorId { VEH_EXT_DOOR_DSIDE_F = 0, VEH_EXT_DOOR_DSIDE_R = 1, VEH_EXT_DOOR_PSIDE_F = 2, VEH_EXT_DOOR_PSIDE_R = 3, VEH_EXT_BONNET = 4, VEH_EXT_BOOT = 5, // 0x872E72B8 = 0xFFFFFFFF, }
--- @param vehicle integer
--- @param doorIndex integer
--- @param closeInstantly boolean
function SetVehicleDoorShut(vehicle, doorIndex, closeInstantly) end

--- Locks the doors of a specified vehicle to a defined lock state, affecting how players and NPCs can interact with the vehicle. NativeDB Introduced: v323 cpp enum eVehicleLockState { // No specific lock state, vehicle behaves according to the game's default settings. VEHICLELOCK_NONE = 0, // Vehicle is fully unlocked, allowing free entry by players and NPCs. VEHICLELOCK_UNLOCKED = 1, // Vehicle is locked, preventing entry by players and NPCs. VEHICLELOCK_LOCKED = 2, // Vehicle locks out only players, allowing NPCs to enter. VEHICLELOCK_LOCKOUT_PLAYER_ONLY = 3, // Vehicle is locked once a player enters, preventing others from entering. VEHICLELOCK_LOCKED_PLAYER_INSIDE = 4, // Vehicle starts in a locked state, but may be unlocked through game events. VEHICLELOCK_LOCKED_INITIALLY = 5, // Forces the vehicle's doors to shut and lock. VEHICLELOCK_FORCE_SHUT_DOORS = 6, // Vehicle is locked but can still be damaged. VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7, // Vehicle is locked, but its trunk/boot remains unlocked. VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED = 8, // Vehicle is locked and does not allow passengers, except for the driver. VEHICLELOCK_LOCKED_NO_PASSENGERS = 9, // Vehicle is completely locked, preventing entry entirely, even if previously inside. VEHICLELOCK_CANNOT_ENTER = 10 };
--- @param vehicle integer
--- @param doorLockStatus integer
function SetVehicleDoorsLocked(vehicle, doorLockStatus) end

--- Locks the doors of a specified vehicle to a defined lock state, affecting how players and NPCs can interact with the vehicle. NativeDB Introduced: v323 cpp enum eVehicleLockState { // No specific lock state, vehicle behaves according to the game's default settings. VEHICLELOCK_NONE = 0, // Vehicle is fully unlocked, allowing free entry by players and NPCs. VEHICLELOCK_UNLOCKED = 1, // Vehicle is locked, preventing entry by players and NPCs. VEHICLELOCK_LOCKED = 2, // Vehicle locks out only players, allowing NPCs to enter. VEHICLELOCK_LOCKOUT_PLAYER_ONLY = 3, // Vehicle is locked once a player enters, preventing others from entering. VEHICLELOCK_LOCKED_PLAYER_INSIDE = 4, // Vehicle starts in a locked state, but may be unlocked through game events. VEHICLELOCK_LOCKED_INITIALLY = 5, // Forces the vehicle's doors to shut and lock. VEHICLELOCK_FORCE_SHUT_DOORS = 6, // Vehicle is locked but can still be damaged. VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED = 7, // Vehicle is locked, but its trunk/boot remains unlocked. VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED = 8, // Vehicle is locked and does not allow passengers, except for the driver. VEHICLELOCK_LOCKED_NO_PASSENGERS = 9, // Vehicle is completely locked, preventing entry entirely, even if previously inside. VEHICLELOCK_CANNOT_ENTER = 10 }; **This is the server-side RPC native equivalent of the client native SET_VEHICLE_DOORS_LOCKED.**
--- @param vehicle integer
--- @param doorLockStatus integer
function SetVehicleDoorsLocked(vehicle, doorLockStatus) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleDoorsLockedForAllPlayers(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleDoorsLockedForNonScriptPlayers(vehicle, toggle) end

--- @param vehicle integer
--- @param player integer
--- @param toggle boolean
function SetVehicleDoorsLockedForPlayer(vehicle, player, toggle) end

--- @param vehicle integer
--- @param team integer
--- @param toggle boolean
function SetVehicleDoorsLockedForTeam(vehicle, team, toggle) end

--- NativeDB Introduced: v1365
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleDoorsLockedForUnk(vehicle, toggle) end

--- Closes all doors of a vehicle:
--- @param vehicle integer
--- @param closeInstantly boolean
function SetVehicleDoorsShut(vehicle, closeInstantly) end

--- Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money. youtu.be/3arlUxzHl5Y i.imgur.com/WrNpYFs.jpg
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleDropsMoneyWhenBlownUp(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleEngineCanDegrade(vehicle, toggle) end

--- 1000 is max health Begins leaking gas at around 650 health -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement ------------------------- Minimum: -4000 Maximum: 1000 -4000: Engine is destroyed 0 and below: Engine catches fire and health rapidly declines 300: Engine is smoking and losing functionality 1000: Engine is perfect
--- @param vehicle integer
--- @param health number
function SetVehicleEngineHealth(vehicle, health) end

--- Starts or stops the engine on the specified vehicle. From what I've tested when I do this to a helicopter the propellers turn off after the engine has started.
--- @param vehicle integer
--- @param value boolean
--- @param instantly boolean
--- @param disableAutoStart boolean
function SetVehicleEngineOn(vehicle, value, instantly, disableAutoStart) end

--- @param vehicle integer
--- @param temperature number
function SetVehicleEngineTemperature(vehicle, temperature) end

--- Examples with a besra: * fade value `0.0` * fade value `0.5` * fade value `1.0` The parameter fade is a value from 0-1, where 0 is fresh paint.
--- @param vehicle integer
--- @param fade number
function SetVehicleEnveffScale(vehicle, fade) end

--- Incorrectly named `SET_VEHICLE_EXCLUSIVE_DRIVER`; likely `SET_VEHICLE_ALLOW_*`. Toggles a flag related to `SET_VEHICLE_EXCLUSIVE_DRIVER`, however, doesn't enable that feature (or trigger script events related to it). See `_SET_VEHICLE_EXCLUSIVE_DRIVER_2`. NativeDB Removed Parameter 2: int index
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleExclusiveDriver(vehicle, toggle) end

--- The **actual** `SET_VEHICLE_EXCLUSIVE_DRIVER` native.
--- @param vehicle integer
--- @param ped integer
--- @param index integer
function SetVehicleExclusiveDriver_2(vehicle, ped, index) end

--- Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleExplodesOnHighExplosionDamage(vehicle, toggle) end

--- Max value is 32767
--- @param vehicle integer
--- @param range integer
function SetVehicleExtendedRemovalRange(vehicle, range) end

--- Note: only some vehicle have extras extra ids are from 1 - 9 depending on the vehicle ------------------------------------------------- ^ not sure if outdated or simply wrong. Max extra ID for b944 is 14 ------------------------------------------------- p2 is not a on/off toggle. mostly 0 means on and 1 means off. not sure if it really should be a BOOL. ------------------------------------------------- Confirmed p2 does not work as a bool. Changed to int. [0=on, 1=off]
--- @param vehicle integer
--- @param extraId integer
--- @param disable boolean
function SetVehicleExtra(vehicle, extraId, disable) end

--- They use the same color indexs as SET_VEHICLE_COLOURS.
--- @param vehicle integer
--- @param pearlescentColor integer
--- @param wheelColor integer
function SetVehicleExtraColours(vehicle, pearlescentColor, wheelColor) end

--- Fix a given vehicle. If the vehicle's engine's broken then you cannot fix it with this native.
--- @param vehicle integer
function SetVehicleFixed(vehicle) end

--- This native is a setter for `GET_VEHICLE_HAS_FLAG`.
--- @param vehicle integer
--- @param flagIndex integer
--- @param value boolean
--- @return any
function SetVehicleFlag(vehicle, flagIndex, value) end

--- @param vehicle integer
--- @param angleRatio number
function SetVehicleFlightNozzlePosition(vehicle, angleRatio) end

--- @param vehicle integer
--- @param angle number
function SetVehicleFlightNozzlePositionImmediate(vehicle, angle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleForceAfterburner(vehicle, toggle) end

--- SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer. Speed is in meters per second You can convert meters/s to mph here: http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
--- @param vehicle integer
--- @param speed number
function SetVehicleForwardSpeed(vehicle, speed) end

--- Seems to be related to the metal parts, not tyres (like i was expecting lol) Must be called every tick.
--- @param vehicle integer
--- @param friction number
function SetVehicleFrictionOverride(vehicle, friction) end

--- @param vehicle integer
--- @param level number
function SetVehicleFuelLevel(vehicle, level) end

--- It switch to highbeam when p1 is set to true.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleFullbeam(vehicle, toggle) end

--- Sets the vehicles gear ratio on choosen gear, reverse gear needs to be a negative float and forward moving gear needs to be a positive float. Refer to the examples if confused.
--- @param vehicle integer
--- @param gear integer
--- @param ratio number
function SetVehicleGearRatio(vehicle, gear, ratio) end

--- Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleGeneratesEngineShockingEvents(vehicle, toggle) end

--- Specifies an area of interest where cargens will focus on spawning vehicles You can clear the area of interest with `CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST`
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
function SetVehicleGeneratorAreaOfInterest(x, y, z, radius) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleGravity(vehicle, toggle) end

--- @param vehicle integer
--- @param gravity number
function SetVehicleGravityAmount(vehicle, gravity) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleHandbrake(vehicle, toggle) end

--- Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation. Example: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @param value any
function SetVehicleHandlingField(vehicle, class_, fieldName, value) end

--- Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation. Example: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @param value number
function SetVehicleHandlingFloat(vehicle, class_, fieldName, value) end

--- @param vehicle integer
--- @param hash integer
function SetVehicleHandlingHashForAi(vehicle, hash) end

--- Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation.
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @param value integer
function SetVehicleHandlingInt(vehicle, class_, fieldName, value) end

--- Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation.
--- @param vehicle integer
--- @param class_ string
--- @param fieldName string
--- @param value vector3
function SetVehicleHandlingVector(vehicle, class_, fieldName, value) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleHasBeenDrivenFlag(vehicle, toggle) end

--- @param vehicle integer
--- @param owned boolean
function SetVehicleHasBeenOwnedByPlayer(vehicle, owned) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleHasMutedSirens(vehicle, toggle) end

--- if true, axles won't bend.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleHasStrongAxles(vehicle, toggle) end

--- Sets whether the vehicle's lights can be broken. NativeDB Introduced: v323
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleHasUnbreakableLights(vehicle, toggle) end

--- Sets the vehicle headlight shadow flags. NativeDB Introduced: v323 cpp enum eVehicleHeadlightShadowFlags { // Default (Lights can be toggled between off, normal and high beams) NO_HEADLIGHT_SHADOWS = 0, // Lights Disabled (Lights are fully disabled, cannot be toggled) HEADLIGHTS_CAST_DYNAMIC_SHADOWS = 1, // Always On (Lights can be toggled between normal and high beams) HEADLIGHTS_CAST_STATIC_SHADOWS = 2, HEADLIGHTS_CAST_FULL_SHADOWS = 3 };
--- @param vehicle integer
--- @param flag integer
function SetVehicleHeadlightShadows(vehicle, flag) end

--- @param vehicle integer
--- @param gear integer
function SetVehicleHighGear(vehicle, gear) end

--- NativeDB Introduced: v1365
--- @param vehicle integer
--- @param value integer
function SetVehicleHornVariation(vehicle, value) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleInactiveDuringPlayback(vehicle, toggle) end

--- Sets the turn signal enabled for a vehicle. Set turnSignal to 1 for left light, 0 for right light.
--- @param vehicle integer
--- @param turnSignal integer
--- @param toggle boolean
function SetVehicleIndicatorLights(vehicle, turnSignal, toggle) end

--- @param vehicle integer
--- @param doorIndex integer
--- @param doorLockStatus integer
function SetVehicleIndividualDoorsLocked(vehicle, doorIndex, doorLockStatus) end

--- This native sets whether a specific vehicle influences the player's wanted level when it is involved in an incident that typically triggers a wanted response, such as being marked as a "victim" vehicle. This is particularly useful when utilizing the wanted system from GTA, and you want to prevent a vehicle from affecting the wanted level when it is stolen. In the decompiled scripts this native is only used to disable the influence of the vehicle on the wanted level.
--- @param vehicle integer
--- @param influenceWantedLevel boolean
function SetVehicleInfluencesWantedLevel(vehicle, influenceWantedLevel) end

--- @param vehicle integer
--- @param color integer
function SetVehicleInteriorColor(vehicle, color) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleInteriorlight(vehicle, toggle) end

--- Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleIsConsideredByPlayer(vehicle, toggle) end

--- p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleIsRacing(vehicle, toggle) end

--- @param vehicle integer
--- @param isStolen boolean
function SetVehicleIsStolen(vehicle, isStolen) end

--- Sets the wanted state of this vehicle.
--- @param vehicle integer
--- @param state boolean
function SetVehicleIsWanted(vehicle, state) end

--- Calling this native will keep a vehicle's engine running after exiting.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleKeepEngineOnWhenAbandoned(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleKersAllowed(vehicle, toggle) end

--- This multiplier has no limit, by default the game has this set to `1.0`.
--- @param vehicle integer
--- @param multiplier number
function SetVehicleLightMultiplier(vehicle, multiplier) end

--- Sets the vehicle lights state. Allowing for different lighting modes. NativeDB Introduced: v323 cpp enum eVehicleLightSetting { // Normal light behavior. Lights cycle through off, then low beams, then high beams. // Note: It's affected by day or night; high beams don't exist in daytime. NO_VEHICLE_LIGHT_OVERRIDE = 0, // Vehicle doesn't have lights, always off. FORCE_VEHICLE_LIGHTS_OFF = 1, // Vehicle has always-on lights. // During day: Cycles between low beams and high beams. // At night: Cycles between low beams, low beams, and high beams. FORCE_VEHICLE_LIGHTS_ON = 2, // Sets vehicle lights on. Behaves like normal lights (same as 0). SET_VEHICLE_LIGHTS_ON = 3, // Sets vehicle lights off. Behaves like normal lights (same as 0). SET_VEHICLE_LIGHTS_OFF = 4 };
--- @param vehicle integer
--- @param state integer
function SetVehicleLights(vehicle, state) end

--- @param vehicle integer
--- @param livery integer
function SetVehicleLivery(vehicle, livery) end

--- @param vehicle integer
--- @param multiplier number
function SetVehicleLodMultiplier(vehicle, multiplier) end

--- To reset the max speed, set the `speed` value to `0.0` or lower.
--- @param vehicle integer
--- @param speed number
function SetVehicleMaxSpeed(vehicle, speed) end

--- cpp // eVehicleModType values modified to conform to script native reorganization (see 0x140D25327 in 1604). enum eVehicleModType { VMT_SPOILER = 0, VMT_BUMPER_F = 1, VMT_BUMPER_R = 2, VMT_SKIRT = 3, VMT_EXHAUST = 4, VMT_CHASSIS = 5, VMT_GRILL = 6, VMT_BONNET = 7, VMT_WING_L = 8, VMT_WING_R = 9, VMT_ROOF = 10, VMT_ENGINE = 11, VMT_BRAKES = 12, VMT_GEARBOX = 13, VMT_HORN = 14, VMT_SUSPENSION = 15, VMT_ARMOUR = 16, VMT_NITROUS = 17, VMT_TURBO = 18, VMT_SUBWOOFER = 19, VMT_TYRE_SMOKE = 20, VMT_HYDRAULICS = 21, VMT_XENON_LIGHTS = 22, VMT_WHEELS = 23, VMT_WHEELS_REAR_OR_HYDRAULICS = 24, VMT_PLTHOLDER = 25, VMT_PLTVANITY = 26, VMT_INTERIOR1 = 27, VMT_INTERIOR2 = 28, VMT_INTERIOR3 = 29, VMT_INTERIOR4 = 30, VMT_INTERIOR5 = 31, VMT_SEATS = 32, VMT_STEERING = 33, VMT_KNOB = 34, VMT_PLAQUE = 35, VMT_ICE = 36, VMT_TRUNK = 37, VMT_HYDRO = 38, VMT_ENGINEBAY1 = 39, VMT_ENGINEBAY2 = 40, VMT_ENGINEBAY3 = 41, VMT_CHASSIS2 = 42, VMT_CHASSIS3 = 43, VMT_CHASSIS4 = 44, VMT_CHASSIS5 = 45, VMT_DOOR_L = 46, VMT_DOOR_R = 47, VMT_LIVERY_MOD = 48, VMT_LIGHTBAR = 49, };
--- @param vehicle integer
--- @param modType integer
--- @param modIndex integer
--- @param customTires boolean
function SetVehicleMod(vehicle, modType, modIndex, customTires) end

--- Changes the secondary paint type and color paintType: 0: Normal 1: Metallic 2: Pearl 3: Matte 4: Metal 5: Chrome color: number of the color
--- @param vehicle integer
--- @param paintType integer
--- @param color integer
function SetVehicleModColor_2(vehicle, paintType, color) end

--- paintType: 0: Normal 1: Metallic 2: Pearl 3: Matte 4: Metal 5: Chrome color: number of the color. p3 seems to always be 0.
--- @param vehicle integer
--- @param paintType integer
--- @param color integer
--- @param pearlescentColor integer
function SetVehicleModColor1(vehicle, paintType, color, pearlescentColor) end

--- seems to make the vehicle stop spawning naturally in traffic. Here's an essential example: VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY("taco"), true);
--- @param model integer
--- @param suppressed boolean
function SetVehicleModelIsSuppressed(model, suppressed) end

--- Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
--- @param vehicle integer
--- @param modKit integer
function SetVehicleModKit(vehicle, modKit) end

--- This method is utilized solely for debugging purposes and is functional only in debug builds of the game. Please note that its functionality may not be available in the retail version.
--- @param vehicle integer
--- @param name string
function SetVehicleNameDebug(vehicle, name) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleNeedsToBeHotwired(vehicle, toggle) end

--- Sets the neon lights of the specified vehicle on/off. Indices: 0 = Left 1 = Right 2 = Front 3 = Back
--- @param vehicle integer
--- @param index integer
--- @param toggle boolean
function SetVehicleNeonLightEnabled(vehicle, index, toggle) end

--- NativeDB Introduced: v1493
--- @param vehicle integer
--- @param color integer
function SetVehicleNeonLightsColor_2(vehicle, color) end

--- Sets the color of the neon lights on the specified vehicle. RGB values and colour names taken from the decompiled scripts: | Colour | R | G | B | |---------------|:---:|:---:|:---:| | White | 222 | 222 | 255 | | Blue | 2 | 21 | 255 | | Electric Blue | 3 | 83 | 255 | | Mint Green | 0 | 255 | 140 | | Lime Green | 94 | 255 | 1 | | Yellow | 255 | 255 | 0 | | Golden Shower | 255 | 150 | 0 | | Orange | 255 | 62 | 0 | | Red | 255 | 1 | 1 | | Pony Pink | 255 | 50 | 100 | | Hot Pink | 255 | 5 | 190 | | Purple | 35 | 1 | 255 | | Blacklight | 15 | 3 | 255 |
--- @param vehicle integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetVehicleNeonLightsColour(vehicle, r, g, b) end

--- @param vehicle integer
--- @param nextGear integer
function SetVehicleNextGear(vehicle, nextGear) end

--- Sets the maximum distance in which \_SET_VEHICLE_NITRO_ENABLED PTFX are rendered. Distance is measured from the camera position.
--- @param range number
function SetVehicleNitroPtfxRange(range) end

--- @param vehicle integer
--- @param plateText string
function SetVehicleNumberPlateText(vehicle, plateText) end

--- SET_VEHICLE_NUMBER_PLATE_TEXT **This is the server-side RPC native equivalent of the client native SET_VEHICLE_NUMBER_PLATE_TEXT.**
--- @param vehicle integer
--- @param plateText string
function SetVehicleNumberPlateText(vehicle, plateText) end

--- Please refer to `GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX` for plate indicies.
--- @param vehicle integer
--- @param plateIndex integer
function SetVehicleNumberPlateTextIndex(vehicle, plateIndex) end

--- @param vehicle integer
--- @param level number
function SetVehicleOilLevel(vehicle, level) end

--- Sets a vehicle on the ground on all wheels. Returns whether or not the operation was successful. NativeDB Added Parameter 2: float p1
--- @param vehicle integer
--- @return any
function SetVehicleOnGroundProperly(vehicle) end

--- Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
--- @param vehicle integer
--- @param killDriver boolean
--- @param explodeOnImpact boolean
function SetVehicleOutOfControl(vehicle, killDriver, explodeOnImpact) end

--- @param vehicle integer
--- @param active boolean
function SetVehicleParachuteActive(vehicle, active) end

--- parachuteModel = 230075693
--- @param vehicle integer
--- @param modelHash integer
function SetVehicleParachuteModel(vehicle, modelHash) end

--- colorIndex = 0 - 7
--- @param vehicle integer
--- @param textureVariation integer
function SetVehicleParachuteTextureVariation(vehicle, textureVariation) end

--- 1000 is max health Begins leaking gas at around 650 health
--- @param vehicle integer
--- @param health number
function SetVehiclePetrolTankHealth(vehicle, health) end

--- Set the vehicle's pitch bias. Only works on planes.
--- @param vehicle integer
--- @param value number
function SetVehiclePitchBias(vehicle, value) end

--- @param p0 integer
function SetVehiclePopulationBudget(p0) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleProvidesCover(vehicle, toggle) end

--- can't seem to enable radio on cop cars etc
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleRadioEnabled(vehicle, toggle) end

--- @param vehicle integer
--- @param loud boolean
function SetVehicleRadioLoud(vehicle, loud) end

--- @param vehicle integer
--- @param p1 number
function SetVehicleRampLaunchModifier(vehicle, p1) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleRampSidewaysLaunchMotion(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleRampUpwardsLaunchMotion(vehicle, toggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleReceivesRampDamage(vehicle, toggle) end

--- Reduces grip significantly so it's hard to go anywhere.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleReduceGrip(vehicle, toggle) end

--- Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP. NativeDB Introduced: v1604
--- @param vehicle integer
--- @param val integer
function SetVehicleReduceTraction(vehicle, val) end

--- @param vehicle integer
--- @param active boolean
function SetVehicleRocketBoostActive(vehicle, active) end

--- @param vehicle integer
--- @param percentage number
function SetVehicleRocketBoostPercentage(vehicle, percentage) end

--- @param vehicle integer
--- @param time number
function SetVehicleRocketBoostRefillTime(vehicle, time) end

--- Set the vehicle's roll bias. Only works on planes.
--- @param vehicle integer
--- @param value number
function SetVehicleRollBias(vehicle, value) end

--- Used to set the tornado custom (convertible) rooftop livery. Livery value that works for tornado custom is between 0 and 9 from what i can tell. Maybe 0-8 even. Might work on other custom vehicles but im not sure what those might be, only confirmed it working with the tornado custom.
--- @param vehicle integer
--- @param livery integer
function SetVehicleRoofLivery(vehicle, livery) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleRudderBroken(vehicle, toggle) end

--- Only works during nighttime.
--- @param heli integer
--- @param toggle boolean
--- @param canBeUsedByAI boolean
function SetVehicleSearchlight(heli, toggle, canBeUsedByAI) end

--- Adds some kind of shadow to the vehicle. -1 disables the effect. DISABLE_*
--- @param vehicle integer
--- @param p1 integer
--- @param p2 integer
function SetVehicleShadowEffect(vehicle, p1, p2) end

--- Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example: WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
--- @param driver integer
--- @param entity integer
--- @param xTarget number
--- @param yTarget number
--- @param zTarget number
function SetVehicleShootAtTarget(driver, entity, xTarget, yTarget, zTarget) end

--- If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleSilent(vehicle, toggle) end

--- Activate siren on vehicle (Only works if the vehicle has a siren).
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleSiren(vehicle, toggle) end

--- Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED. ============================================ May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho. Btw, func_1333 ends up calling this func which uses this native, void func_1338(int iParam0)//Position { ENTITY::FREEZE_ENTITY_POSITION(iParam0, true); ENTITY::SET_ENTITY_COLLISION(iParam0, false, 0); ENTITY::SET_ENTITY_INVINCIBLE(iParam0, true); VEHICLE::_0xDF594D8D(iParam0, true); }
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleSt(vehicle, toggle) end

--- Overrides the vehicle's startup engine rev sound. You can reset this with RESET_VEHICLE_STARTUP_REV_SOUND
--- @param vehicle integer
--- @param soundName string
--- @param setName string
function SetVehicleStartupRevSound(vehicle, soundName, setName) end

--- Locks the vehicle's steering to the desired angle, explained below. Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle. Steer bias: -1.0 = full right 0.0 = centered steering 1.0 = full left
--- @param vehicle integer
--- @param value number
function SetVehicleSteerBias(vehicle, value) end

--- @param vehicle integer
--- @param angle number
function SetVehicleSteeringAngle(vehicle, angle) end

--- @param vehicle integer
--- @param scalar number
function SetVehicleSteeringBiasScalar(vehicle, scalar) end

--- @param vehicle integer
--- @param scale number
function SetVehicleSteeringScale(vehicle, scale) end

--- If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleStrong(vehicle, toggle) end

--- Sets the height of the vehicle's suspension. This changes the same value set by Suspension in the mod shop. Negatives values raise the car. Positive values lower the car. This is change is visual only. The collision of the vehicle will not move.
--- @param vehicle integer
--- @param newHeight number
function SetVehicleSuspensionHeight(vehicle, newHeight) end

--- @param vehicle integer
--- @param position number
--- @param p2 boolean
function SetVehicleTankTurretPosition(vehicle, position, p2) end

--- @param vehicle integer
--- @param ped integer
--- @param toggle boolean
function SetVehicleTimedExplosion(vehicle, ped, toggle) end

--- Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
--- @param vehicle integer
--- @param position number
function SetVehicleTowTruckArmPosition(vehicle, position) end

--- @param vehicle integer
--- @param pressure number
function SetVehicleTurboPressure(vehicle, pressure) end

--- @param vehicle integer
--- @param speed number
function SetVehicleTurretSpeedThisFrame(vehicle, speed) end

--- Toggles specific flag on turret NativeDB Introduced: v1290
--- @param vehicle integer
--- @param index integer
--- @param toggle boolean
function SetVehicleTurretUnk(vehicle, index, toggle) end

--- "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0) to burst all tyres type it 8 times where p1 = 0 to 7. p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them. '0 = wheel_lf / bike, plane or jet front '1 = wheel_rf '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right '45 = 6 wheels trailer mid wheel left '47 = 6 wheels trailer mid wheel right
--- @param vehicle integer
--- @param index integer
--- @param onRim boolean
--- @param p3 number
function SetVehicleTyreBurst(vehicle, index, onRim, p3) end

--- tyreIndex = 0 to 4 on normal vehicles '0 = wheel_lf / bike, plane or jet front '1 = wheel_rf '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right '45 = 6 wheels trailer mid wheel left '47 = 6 wheels trailer mid wheel right
--- @param vehicle integer
--- @param tyreIndex integer
function SetVehicleTyreFixed(vehicle, tyreIndex) end

--- Allows you to toggle bulletproof tires.
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleTyresCanBurst(vehicle, toggle) end

--- Sets the tire smoke's color of this vehicle. vehicle: The vehicle that is the target of this method. r: The red level in the RGB color code. g: The green level in the RGB color code. b: The blue level in the RGB color code. Note: setting r,g,b to 0 will give the car independance day tyre smoke
--- @param vehicle integer
--- @param r integer
--- @param g integer
--- @param b integer
function SetVehicleTyreSmokeColor(vehicle, r, g, b) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleUndriveable(vehicle, toggle) end

--- @param vehicle integer
--- @param multiplier number
function SetVehicleUnkDamageMultiplier(vehicle, multiplier) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleUseAlternateHandling(vehicle, toggle) end

--- @param p0 integer
--- @param p1 boolean
--- @param p2 boolean
--- @param p3 boolean
--- @return any
function SetVehicleUseCutsceneWheelCompression(p0, p1, p2, p3) end

--- NativeDB Introduced: v3095 Enables or disables the use of the vehicle's horn button for activating the nitrous system.
--- @param vehicle integer
--- @param bToggle boolean
function SetVehicleUseHornButtonForNitrous(vehicle, bToggle) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleUsePlayerLightSettings(vehicle, toggle) end

--- vehicle must be a plane
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleUsesLargeRearRamp(vehicle, toggle) end

--- @param vehicle integer
--- @param weaponIndex integer
--- @param capacity integer
function SetVehicleWeaponCapacity(vehicle, weaponIndex, capacity) end

--- @param vehicle integer
--- @param weaponSlot integer
function SetVehicleWeaponsDisabled(vehicle, weaponSlot) end

--- Sets brake pressure of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS. Normal values around 1.0f
--- @param vehicle integer
--- @param wheelIndex integer
--- @param pressure number
function SetVehicleWheelBrakePressure(vehicle, wheelIndex, pressure) end

--- Sets the flags of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param flags integer
function SetVehicleWheelFlags(vehicle, wheelIndex, flags) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @param health number
function SetVehicleWheelHealth(vehicle, wheelIndex, health) end

--- Example script: https://pastebin.com/J6XGbkCW List of known states: 1: Not wheeling. 65: Vehicle is ready to do wheelie (burnouting). 129: Vehicle is doing wheelie.
--- @param vehicle integer
--- @param state integer
function SetVehicleWheelieState(vehicle, state) end

--- Sets whether the wheel is powered. On all wheel drive cars this works to change which wheels receive power, but if a car's fDriveBiasFront doesn't send power to that wheel, it won't get power anyway. This can be fixed by changing the fDriveBiasFront with SET_VEHICLE_HANDLING_FLOAT. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS. This is a shortcut to a flag in SET_VEHICLE_WHEEL_FLAGS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param powered boolean
function SetVehicleWheelIsPowered(vehicle, wheelIndex, powered) end

--- Sets power being sent to a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param power number
function SetVehicleWheelPower(vehicle, wheelIndex, power) end

--- Not sure what this changes, probably determines physical rim size in case the tire is blown.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param value number
function SetVehicleWheelRimColliderSize(vehicle, wheelIndex, value) end

--- Sets the rotation speed of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param speed number
function SetVehicleWheelRotationSpeed(vehicle, wheelIndex, speed) end

--- @param vehicle integer
--- @param enabled boolean
function SetVehicleWheelsCanBreak(vehicle, enabled) end

--- @param vehicle integer
--- @param toggle boolean
function SetVehicleWheelsCanBreakOffWhenBlowUp(vehicle, toggle) end

--- Related to monster trucks in native scripts. NativeDB Introduced: v1604
--- @param vehicle integer
--- @param toggle boolean
function SetVehicleWheelsDealDamage(vehicle, toggle) end

--- Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle). Only works on non-default wheels. Returns whether change was successful (can be false if trying to set size for non-default wheels).
--- @param vehicle integer
--- @param size number
--- @return any
function SetVehicleWheelSize(vehicle, size) end

--- Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size).
--- @param vehicle integer
--- @param wheelIndex integer
--- @param value number
function SetVehicleWheelTireColliderSize(vehicle, wheelIndex, value) end

--- Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width).
--- @param vehicle integer
--- @param wheelIndex integer
--- @param value number
function SetVehicleWheelTireColliderWidth(vehicle, wheelIndex, value) end

--- Sets the traction vector length of a wheel. Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
--- @param vehicle integer
--- @param wheelIndex integer
--- @param length number
function SetVehicleWheelTractionVectorLength(vehicle, wheelIndex, length) end

--- Refer to GET_VEHICLE_WHEEL_TYPE for wheel types.
--- @param vehicle integer
--- @param wheelType integer
function SetVehicleWheelType(vehicle, wheelType) end

--- Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle). Only works on non-default wheels. Returns whether change was successful (can be false if trying to set width for non-default wheels).
--- @param vehicle integer
--- @param width number
--- @return any
function SetVehicleWheelWidth(vehicle, width) end

--- Adjusts the offset of the specified wheel relative to the wheel's axle center. Needs to be called every frame in order to function properly, as GTA will reset the offset otherwise. This function can be especially useful to set the track width of a vehicle, for example: function SetVehicleFrontTrackWidth(vehicle, width) SetVehicleWheelXOffset(vehicle, 0, -width/2) SetVehicleWheelXOffset(vehicle, 1, width/2) end
--- @param vehicle integer
--- @param wheelIndex integer
--- @param offset number
function SetVehicleWheelXOffset(vehicle, wheelIndex, offset) end

--- @param vehicle integer
--- @param wheelIndex integer
--- @param value number
function SetVehicleWheelYRotation(vehicle, wheelIndex, value) end

--- cpp enum WindowTints { WINDOWTINT_NONE = 0, WINDOWTINT_PURE_BLACK = 1, WINDOWTINT_DARKSMOKE = 2, WINDOWTINT_LIGHTSMOKE = 3, WINDOWTINT_STOCK = 4, WINDOWTINT_LIMO = 5, WINDOWTINT_GREEN = 6 };
--- @param vehicle integer
--- @param tint integer
function SetVehicleWindowTint(vehicle, tint) end

--- Paint index goes from 0 to 12. You can find the list of colors and ids here: \_GET_VEHICLE_HEADLIGHTS_COLOUR
--- @param vehicle integer
--- @param color integer
function SetVehicleXenonLightsColor(vehicle, color) end

--- Sets custom vehicle xenon lights color, allowing to use RGB palette. The game will ignore lights color set by \_SET_VEHICLE_XENON_LIGHTS_COLOR when custom color is active. This native is not synced between players. Requires xenon lights mod to be set on vehicle.
--- @param vehicle integer
--- @param red integer
--- @param green integer
--- @param blue integer
function SetVehicleXenonLightsCustomColor(vehicle, red, green, blue) end

--- @param gripFactor number
function SetVehicleXmasSnowFactor(gripFactor) end

--- Find the radio station list here
--- @param vehicle integer
--- @param radioStation string
function SetVehRadioStation(vehicle, radioStation) end

--- Overrides a floating point value from `visualsettings.dat` temporarily.
--- @param name string
--- @param value number
function SetVisualSettingFloat(name, value) end

--- SET_* Only called within 1 script for x360. 'fm_mission_controller' and it used on an object. Ran after these 2 natives, set_object_targettable(uParam0, 0); set_entity_invincible(uParam0, 1);
--- @param entity integer
--- @param toggle boolean
function SetWaitForCollisionsBeforeProbe(entity, toggle) end

--- Max value is 1.0
--- @param player integer
--- @param difficulty number
function SetWantedLevelDifficulty(player, difficulty) end

--- NativeDB Introduced: v2060
--- @param player integer
--- @param wantedLevel integer
--- @param lossTime integer
function SetWantedLevelHiddenEvasionTime(player, wantedLevel, lossTime) end

--- @param multiplier number
function SetWantedLevelMultiplier(multiplier) end

--- cpp enum eInstructionalButtonTypes { NONE = 0, SELECT = 1, OK = 2, YES = 4, BACK = 8, BACK_SELECT = 9, BACK_OK = 10, BACK_YES = 12, CANCEL = 16, CANCEL_SELECT = 17, CANCEL_OK = 18, CANCEL_YES = 20, NO = 32, NO_SELECT = 33, NO_OK = 34, YES_NO = 36, RETRY = 64, RETRY_SELECT = 65, RETRY_OK = 66, RETRY_YES = 68, RETRY_BACK = 72, RETRY_BACK_SELECT = 73, RETRY_BACK_OK = 74, RETRY_BACK_YES = 76, RETRY_CANCEL = 80, RETRY_CANCEL_SELECT = 81, RETRY_CANCEL_OK = 82, RETRY_CANCEL_YES = 84, SKIP = 256, SKIP_SELECT = 257, SKIP_OK = 258, SKIP_YES = 260, SKIP_BACK = 264, SKIP_BACK_SELECT = 265, SKIP_BACK_OK = 266, SKIP_BACK_YES = 268, SKIP_CANCEL = 272, SKIP_CANCEL_SELECT = 273, SKIP_CANCEL_OK = 274, SKIP_CANCEL_YES = 276, CONTINUE = 16384, BACK_CONTINUE = 16392, CANCEL_CONTINUE = 16400, LOADING_SPINNER = 134217728, SELECT_LOADING_SPINNER = 134217729, OK_LOADING_SPINNER = 134217730, YES_LOADING_SPINNER = 134217732, BACK_LOADING_SPINNER = 134217736, BACK_SELECT_LOADING_SPINNER = 134217737, BACK_OK_LOADING_SPINNER = 134217738, BACK_YES_LOADING_SPINNER = 134217740, CANCEL_LOADING_SPINNER = 134217744, CANCEL_SELECT_LOADING_SPINNER = 134217745, CANCEL_OK_LOADING_SPINNER = 134217746, CANCEL_YES_LOADING_SPINNER = 134217748 } Note: this list is definitely NOT complete, but these are the ones I've been able to find before giving up because it's such a boring thing to look for 'good' combinations. **Result of the example code:** <https://i.imgur.com/imwoimm.png>
--- @param entryLine1 string
--- @param instructionalKey integer
--- @param entryLine2 string
--- @param p3 boolean
--- @param p4 integer
--- @param background string
--- @param p6 string
--- @param showBg boolean
--- @param errorCode integer
function SetWarningMessage(entryLine1, instructionalKey, entryLine2, p3, p4, background, p6, showBg, errorCode) end

--- Param names copied from the corresponding scaleform function "SET_LIST_ROW"
--- @param index integer
--- @param name string
--- @param cash integer
--- @param rp integer
--- @param lvl integer
--- @param colour integer
--- @return any
function SetWarningMessageListRow(index, name, cash, rp, lvl, colour) end

--- instructionalKey enum list: Buttons = { Empty = 0, Select = 1, -- (RETURN) Ok = 2, -- (RETURN) Yes = 4, -- (RETURN) Back = 8, -- (ESC) Cancel = 16, -- (ESC) No = 32, -- (ESC) RetrySpace = 64, -- (SPACE) Restart = 128, -- (SPACE) Skip = 256, -- (SPACE) Quit = 512, -- (ESC) Adjust = 1024, -- (ARROWS) SpaceKey = 2048, -- (SPACE) Share = 4096, -- (SPACE) SignIn = 8192, -- (SPACE) Continue = 16384, -- (RETURN) AdjustLeftRight = 32768, -- (SCROLL L/R) AdjustUpDown = 65536, -- (SCROLL U/D) Overwrite = 131072, -- (SPACE) SocialClubSignup = 262144, -- (RETURN) Confirm = 524288, -- (RETURN) Queue = 1048576, -- (RETURN) RetryReturn = 2097152, -- (RETURN) BackEsc = 4194304, -- (ESC) SocialClub = 8388608, -- (RETURN) Spectate = 16777216, -- (SPACE) OkEsc = 33554432, -- (ESC) CancelTransfer = 67108864, -- (ESC) LoadingSpinner = 134217728, NoReturnToGTA = 268435456, -- (ESC) CancelEsc = 536870912, -- (ESC) } Alt = { Empty = 0, No = 1, -- (SPACE) Host = 2, -- (ESC) SearchForJob = 4, -- (RETURN) ReturnKey = 8, -- (TURN) Freemode = 16, -- (ESC) } **Result of the example code:** <https://i.imgur.com/TvmNF4k.png>
--- @param labelTitle string
--- @param labelMsg string
--- @param p2 integer
--- @param p3 integer
--- @param labelMsg2 string
--- @param p5 boolean
--- @param p6 integer
--- @param p7 integer
--- @param p8 string
--- @param p9 string
--- @param background boolean
--- @param errorCode integer
function SetWarningMessageWithAlert(labelTitle, labelMsg, p2, p3, labelMsg2, p5, p6, p7, p8, p9, background, errorCode) end

--- You can only use text entries. No custom text. C# Example : Function.Call(Hash._SET_WARNING_MESSAGE_2, "HUD_QUIT", "HUD_CGIGNORE", 2, "HUD_CGINVITE", 0, -1, 0, 0, 1); you can recreate this easily with scaleforms --------------- Fixed native name, from before nativedb restoration. NativeDB Added Parameter 10: Any p9
--- @param titleMsg string
--- @param entryLine1 string
--- @param flags integer
--- @param promptMsg string
--- @param p4 boolean
--- @param p5 any
--- @param background boolean
--- @param showBg boolean
--- @return any
function SetWarningMessageWithHeader(titleMsg, entryLine1, flags, promptMsg, p4, p5, background, showBg) end

--- You can only use text entries. No custom text. NativeDB Added Parameter 11: Any p10
--- @param entryHeader string
--- @param entryLine1 string
--- @param instructionalKey any
--- @param entryLine2 string
--- @param p4 boolean
--- @param p5 any
--- @param p6 any
--- @param p9 boolean
--- @return any
--- @return any
function SetWarningMessageWithHeaderAndSubstringFlags(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p9) end

--- Sets a warning message for one frame with header and upper buttons bit field that don't fit the standard 32 bit set.
--- @param headerTextLabel string
--- @param line1TextLabel string
--- @param buttonsBitField integer
--- @param buttonsBitFieldUpper integer
--- @param line2TextLabel string
--- @param addNumber boolean
--- @param numberToAdd integer
--- @param firstSubstring string
--- @param secondSubstring string
--- @param showBackground boolean
--- @param errorCode integer
function SetWarningMessageWithHeaderExtended(headerTextLabel, line1TextLabel, buttonsBitField, buttonsBitFieldUpper, line2TextLabel, addNumber, numberToAdd, firstSubstring, secondSubstring, showBackground, errorCode) end

--- Sets world clip boundaries for water quads file (water.xml, water_heistisland.xml) Used internally by LOAD_GLOBAL_WATER_FILE
--- @param minX integer
--- @param minY integer
--- @param maxX integer
--- @param maxY integer
function SetWaterAreaClipRect(minX, minY, maxX, maxY) end

--- @param waterQuad integer
--- @param a0 integer
--- @param a1 integer
--- @param a2 integer
--- @param a3 integer
--- @return any
function SetWaterQuadAlpha(waterQuad, a0, a1, a2, a3) end

--- This native allows you to update the bounds of a specified water quad index.
--- @param waterQuad integer
--- @param minX integer
--- @param minY integer
--- @param maxX integer
--- @param maxY integer
--- @return any
function SetWaterQuadBounds(waterQuad, minX, minY, maxX, maxY) end

--- @param waterQuad integer
--- @param hasLimitedDepth boolean
--- @return any
function SetWaterQuadHasLimitedDepth(waterQuad, hasLimitedDepth) end

--- @param waterQuad integer
--- @param isInvisible boolean
--- @return any
function SetWaterQuadIsInvisible(waterQuad, isInvisible) end

--- @param waterQuad integer
--- @param level number
--- @return any
function SetWaterQuadLevel(waterQuad, level) end

--- @param waterQuad integer
--- @param noStencil boolean
--- @return any
function SetWaterQuadNoStencil(waterQuad, noStencil) end

--- This native allows you to update the water quad type. Valid type definitions: * **0** Square * **1** Right triangle where the 90 degree angle is at maxX, minY * **2** Right triangle where the 90 degree angle is at minX, minY * **3** Right triangle where the 90 degree angle is at minX, maxY * **4** Right triangle where the 90 degree angle is at maxY, maxY
--- @param waterQuad integer
--- @param type integer
--- @return any
function SetWaterQuadType(waterQuad, type) end

--- @param waveQuad integer
--- @param amplitude number
--- @return any
function SetWaveQuadAmplitude(waveQuad, amplitude) end

--- This native allows you to update the bounds of a specified water quad index.
--- @param waveQuad integer
--- @param minX integer
--- @param minY integer
--- @param maxX integer
--- @param maxY integer
--- @return any
function SetWaveQuadBounds(waveQuad, minX, minY, maxX, maxY) end

--- directionX/Y should be constrained between -1.0 and 1.0 A positive value will create the wave starting at min and rolling towards max A negative value will create the wave starting at max and rolling towards min Applying both values allows you to make diagonal waves
--- @param waveQuad integer
--- @param directionX number
--- @param directionY number
--- @return any
function SetWaveQuadDirection(waveQuad, directionX, directionY) end

--- This native removes the current waypoint from the map. Example: C#: Function.Call(Hash.SET_WAYPOINT_OFF); C++: HUD::SET_WAYPOINT_OFF();
function SetWaypointOff() end

--- Changes the selected ped aiming animation style, you can find the list of animations below. These are stored in the `weaponanimations.meta` file located in `Grand Theft Auto V\update\update.rpf\common\data\ai\weaponanimations.meta`. For Lua, it's best if you send the animation using compile-time jenkins hashes to avoid overhead. An example is shown down below. ### Animations cpp enum eWeaponAnimationOverrides { Ballistic = 0x5534A626, Default = 0xE4DF46D5, Franklin = 0x44C24694, Gang = 0xBC066B98, Michael = 0x55932F38, MP_F_Freemode = 0xACB10C83, Trevor = 0x2737D5AC, Hillbilly = 0x8503D409, Gang1H = 0x724A7AB7, FirstPerson = 0xEE38E8E0, FirstPersonAiming = 0xC76297A3, FirstPersonRNG = 0xA4FDD608, FirstPersonScope = 0x28117C22, FirstPersonMichael = 0xEAA2550B, FirstPersonMichaelAiming = 0x3E6FF30F, FirstPersonMichaelRNG = 0xB7A826C1, FirstPersonMichaelScope = 0xC554CF97, FirstPersonFranklin = 0xC407163A, FirstPersonFranklinAiming = 0x3D4B7B03, FirstPersonFranklinRNG = 0xBE79B0B4, FirstPersonFranklinScope = 0xAFEA6593, FirstPersonTrevor = 0xA65D5351, FirstPersonTrevorAiming = 0xF9BE8ED9, FirstPersonTrevorRNG = 0xD181ED09, FirstPersonTrevorScope = 0x34A67D6D, FirstPersonMPFemale = 0x8431583F, Fat = 0xC531A409, SuperFat = 0x529E5780, Female = 0x6D155A1B, GangFemale = 0x678ADF82, }
--- @param ped integer
--- @param animStyle integer
function SetWeaponAnimationOverride(ped, animStyle) end

--- Changes the weapon damage output by the given multiplier value. Does NOT need to be called every frame.
--- @param weaponHash integer
--- @param damageMultiplier number
function SetWeaponDamageModifier(weaponHash, damageMultiplier) end

--- NativeDB Introduced: v2372
--- @param weaponHash integer
--- @param multiplier number
function SetWeaponExplosionRadiusMultiplier(weaponHash, multiplier) end

--- @param weaponObject integer
--- @param camoComponentHash integer
--- @param colorIndex integer
function SetWeaponObjectLiveryColor(weaponObject, camoComponentHash, colorIndex) end

--- @param weapon integer
--- @param tintIndex integer
function SetWeaponObjectTintIndex(weapon, tintIndex) end

--- A setter for the recoil shake amplitude of a weapon.
--- @param weaponHash integer
--- @param amplitude number
function SetWeaponRecoilShakeAmplitude(weaponHash, amplitude) end

--- Disables weapons aim blocking due to environment for local player. For non-player peds SET_PED_ENABLE_WEAPON_BLOCKING can be used.
--- @param state boolean
function SetWeaponsNoAimBlocking(state) end

--- Disables the game's built-in auto-reloading.
--- @param state boolean
function SetWeaponsNoAutoreload(state) end

--- Disables autoswapping to another weapon when the current weapon runs out of ammo.
--- @param state boolean
function SetWeaponsNoAutoswap(state) end

--- @param index integer
--- @param typeName string
--- @param timeMult integer
--- @return any
function SetWeatherCycleEntry(index, typeName, timeMult) end

--- Sets whether or not the weather should be owned by the network subsystem. To be able to use \_SET_WEATHER_TYPE_TRANSITION, this has to be set to false.
--- @param network boolean
function SetWeatherOwnedByNetwork(network) end

--- Immediately changes the game's weather to the specified type, which will then persist for one cycle before the game resumes its natural weather progression. **Note:** This native is not supported in networked sessions. Please refer to `SET_OVERRIDE_WEATHER` or `SET_WEATHER_TYPE_NOW_PERSIST` if you want to override weather in networked sessions. NativeDB Introduced: v323 **Weather Types:** * CLEAR * EXTRASUNNY * CLOUDS * OVERCAST * RAIN * CLEARING * THUNDER * SMOG * FOGGY * XMAS * SNOW * SNOWLIGHT * BLIZZARD * HALLOWEEN * NEUTRAL
--- @param weatherType string
function SetWeatherTypeNow(weatherType) end

--- Refer to `SET_WEATHER_TYPE_NOW` for weather types.
--- @param weatherType string
function SetWeatherTypeNowPersist(weatherType) end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types.
--- @param weatherType string
--- @param time number
function SetWeatherTypeOvertimePersist(weatherType, time) end

--- Sets the current weather type to persist indefinitely until changed. **Note:** This native is not supported in networked sessions. Please refer to `SET_OVERRIDE_WEATHER` or `SET_WEATHER_TYPE_NOW_PERSIST` if you want to override weather in networked sessions. NativeDB Introduced: v323
--- @param weatherType string
function SetWeatherTypePersist(weatherType) end

--- Refer to `SET_WEATHER_TYPE_NOW_PERSIST` for weather types. Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1: execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
--- @param weatherType1 integer
--- @param weatherType2 integer
--- @param percentWeather2 number
function SetWeatherTypeTransition(weatherType1, weatherType2, percentWeather2) end

--- @param p0 boolean
--- @param p1 integer
function SetWidescreenBorders(p0, p1) end

--- @param p0 any
function SetWidescreenFormat(p0) end

--- Sets the the raw wind speed value. The wind speed will stay persistent until it is reset (see examples).
--- @param speed number
function SetWind(speed) end

--- Sets the wind direction. The wind direction will stay persistent until it is reset (see examples).
--- @param direction number
function SetWindDirection(direction) end

--- Using this native will clamp the wind speed value to a range of 0.0 - 12.0. The wind speed will stay persistent until it is reset (see examples).
--- @param speed number
function SetWindSpeed(speed) end

--- @param zoneId integer
--- @param toggle boolean
function SetZoneEnabled(zoneId, toggle) end

--- Possible shake types (updated b617d): DEATH_FAIL_IN_EFFECT_SHAKE DRUNK_SHAKE FAMILY5_DRUG_TRIP_SHAKE HAND_SHAKE JOLT_SHAKE LARGE_EXPLOSION_SHAKE MEDIUM_EXPLOSION_SHAKE SMALL_EXPLOSION_SHAKE ROAD_VIBRATION_SHAKE SKY_DIVING_SHAKE VIBRATE_SHAKE
--- @param cam integer
--- @param type string
--- @param amplitude number
function ShakeCam(cam, type, amplitude) end

--- p0 argument found in the b617d scripts: "DRUNK_SHAKE"
--- @param p0 string
--- @param p1 number
function ShakeCinematicCam(p0, p1) end

--- Possible shake types (updated b617d): DEATH_FAIL_IN_EFFECT_SHAKE DRUNK_SHAKE FAMILY5_DRUG_TRIP_SHAKE HAND_SHAKE JOLT_SHAKE LARGE_EXPLOSION_SHAKE MEDIUM_EXPLOSION_SHAKE SMALL_EXPLOSION_SHAKE ROAD_VIBRATION_SHAKE SKY_DIVING_SHAKE VIBRATE_SHAKE
--- @param shakeName string
--- @param intensity number
function ShakeGameplayCam(shakeName, intensity) end

--- CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
--- @param p0 string
--- @param p1 number
function ShakeScriptGlobal(p0, p1) end

--- Left bit shifts a value. It is advised you use the `<<` operator instead of this native. It does the same and is faster.
--- @param value integer
--- @param bitShift integer
--- @return any
function ShiftLeft(value, bitShift) end

--- Right bit shifts a value. It is advised you use the `>>` operator instead of this native. It does the same and is faster.
--- @param value integer
--- @param bitShift integer
--- @return any
function ShiftRight(value, bitShift) end

--- Shoots a bullet from the first vector to the second vector. The weapon used as weaponHash should already be loaded via REQUEST_WEAPON_ASSET, otherwise the bullet may fail to materialise.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param damage integer
--- @param pureAccuracy boolean
--- @param weaponHash integer
--- @param ownerPed integer
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param speed number
function ShootSingleBulletBetweenCoords(x1, y1, z1, x2, y2, z2, damage, pureAccuracy, weaponHash, ownerPed, isAudible, isInvisible, speed) end

--- entity - entity to ignore NativeDB Added Parameter 15: Any p14
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param damage integer
--- @param p7 boolean
--- @param weaponHash integer
--- @param ownerPed integer
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param speed number
--- @param entity integer
function ShootSingleBulletBetweenCoordsIgnoreEntity(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity) end

--- NativeDB Added Parameter 19: Any p18 NativeDB Added Parameter 20: Any p19 NativeDB Added Parameter 21: Any p20
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param damage integer
--- @param p7 boolean
--- @param weaponHash integer
--- @param ownerPed integer
--- @param isAudible boolean
--- @param isInvisible boolean
--- @param speed number
--- @param entity integer
--- @param p14 boolean
--- @param p15 boolean
--- @param p16 boolean
--- @param p17 boolean
function ShootSingleBulletBetweenCoordsIgnoreEntityNew(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, p16, p17) end

--- Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
--- @return any
function ShouldUseMetricMeasurements() end

--- Controls the visibility of the "Contact" instructional buttons on the map screen. NativeDB Introduced: 2545
--- @param toggle boolean
function ShowContactInstructionalButton(toggle) end

--- Enables or disables the blue half circle ![](https://i.imgur.com/iZes9Ec.png) around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`. To toggle the right side of the circle use: `SHOW_FRIEND_INDICATOR_ON_BLIP`. Example code result: ![](https://i.imgur.com/iZ9tNWl.png)
--- @param blip integer
--- @param toggle boolean
function ShowCrewIndicatorOnBlip(blip, toggle) end

--- Highlights a blip by a half cyan circle on the right side of the blip. ![](https://i.imgur.com/FrV9M4e.png) Indicating that that player is a friend (in GTA:O). This color can not be changed. To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`.
--- @param blip integer
--- @param toggle boolean
function ShowFriendIndicatorOnBlip(blip, toggle) end

--- Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP* NativeDB Introduced: v2699
--- @param blip integer
--- @param toggle boolean
function ShowHasCompletedIndicatorOnBlip(blip, toggle) end

--- Adds the GTA: Online player heading indicator to a blip.
--- @param blip integer
--- @param toggle boolean
function ShowHeadingIndicatorOnBlip(blip, toggle) end

--- @param blip integer
--- @param toggle boolean
function ShowHeightOnBlip(blip, toggle) end

--- This function shows various HUD (Heads-up Display) components. Listed below are the integers and the corresponding HUD component. * 1 : WANTED_STARS * 2 : WEAPON_ICON * 3 : CASH * 4 : MP_CASH * 5 : MP_MESSAGE * 6 : VEHICLE_NAME * 7 : AREA_NAME * 8 : VEHICLE_CLASS * 9 : STREET_NAME * 10 : HELP_TEXT * 11 : FLOATING_HELP_TEXT\_1 * 12 : FLOATING_HELP_TEXT\_2 * 13 : CASH_CHANGE * 14 : RETICLE * 15 : SUBTITLE_TEXT * 16 : RADIO_STATIONS * 17 : SAVING_GAME * 18 : GAME_STREAM * 19 : WEAPON_WHEEL * 20 : WEAPON_WHEEL_STATS * 21 : HUD_COMPONENTS * 22 : HUD_WEAPONS These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD component.
--- @param id integer
function ShowHudComponentThisFrame(id) end

--- @param blip integer
--- @param number integer
function ShowNumberOnBlip(blip, number) end

--- Toggles a cyan outline around the blip. Color can be changed with `SET_BLIP_SECONDARY_COLOUR`. Enabling this circle will override the "crew" and "friend" half-circles (see `SHOW_CREW_INDICATOR_ON_BLIP` and `SHOW_FRIEND_INDICATOR_ON_BLIP`).
--- @param blip integer
--- @param toggle boolean
function ShowOutlineIndicatorOnBlip(blip, toggle) end

--- SHOW_\* NativeDB Introduced: v1734
--- @param id integer
function ShowScriptedHudComponentThisFrame(id) end

function ShowSigninUi() end

--- @param p0 boolean
function ShowStartMissionInstructionalButton(p0) end

--- Adds a green checkmark on top of a blip.
--- @param blip integer
--- @param toggle boolean
function ShowTickOnBlip(blip, toggle) end

--- Starts a new singleplayer game (at the prologue).
function ShutdownAndLaunchSinglePlayerGame() end

--- Disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game. If you're already in SP then it'll re-load singleplayer. You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all. Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
--- @return any
function ShutdownAndLoadMostRecentSave() end

function ShutdownCreatorBudget() end

function ShutdownLoadingScreen() end

--- Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.
function ShutdownLoadingScreenNui() end

--- This is to make the player walk without accepting input. Call this native every frame so you can control the direction of your ped.
--- @param player integer
--- @param amount number
--- @param gaitType integer
--- @param rotationSpeed number
--- @param p4 boolean
--- @param p5 boolean
function SimulatePlayerInputGait(player, amount, gaitType, rotationSpeed, p4, p5) end

--- Returns the sine of the given number.
--- @param value number
--- @return any
function Sin(value) end

function SkipRadioForward() end

--- SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
--- @param vehicle integer
--- @param time number
function SkipTimeInPlaybackRecordedVehicle(vehicle, time) end

--- @param vehicle integer
function SkipToEndAndStopPlaybackRecordedVehicle(vehicle) end

function SkipToNextScriptedConversationLine() end

--- This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
--- @param t number
--- @param x number
--- @param y number
--- @param z number
--- @param w number
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param w1 number
--- @return number
--- @return number
--- @return number
--- @return number
function SlerpNearQuaternion(t, x, y, z, w, x1, y1, z1, w1) end

--- Returns true if the object has finished moving. If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed. See also: https://gtagmodding.com/opcode-database/opcode/034E/ Has to be looped until it returns true.
--- @param object integer
--- @param toX number
--- @param toY number
--- @param toZ number
--- @param speedX number
--- @param speedY number
--- @param speedZ number
--- @param collision boolean
--- @return any
function SlideObject(object, toX, toY, toZ, speedX, speedY, speedZ, collision) end

--- Smashes a vehicles window. See eWindowId declared in `IS_VEHICLE_WINDOW_INTACT`.
--- @param vehicle integer
--- @param windowIndex integer
function SmashVehicleWindow(vehicle, windowIndex) end

--- SET_*
--- @param vehicle integer
function SoundVehicleHornThisFrame(vehicle) end

function SpawnpointsCancelSearch() end

--- @return any
function SpawnpointsGetNumSearchResults() end

--- @param randomInt integer
--- @return number
--- @return number
--- @return number
function SpawnpointsGetSearchResult(randomInt) end

--- @param p0 any
--- @return any
function SpawnpointsGetSearchResultFlags(p0) end

--- @return any
function SpawnpointsIsSearchActive() end

--- @return any
function SpawnpointsIsSearchComplete() end

--- @return any
function SpawnpointsIsSearchFailed() end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param interiorFlags integer
--- @param scale number
--- @param duration integer
function SpawnpointsStartSearch(p0, p1, p2, p3, p4, interiorFlags, scale, duration) end

--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param interiorFlags integer
--- @param scale number
--- @param duration integer
function SpawnpointsStartSearchInAngledArea(x, y, z, p3, p4, p5, p6, interiorFlags, scale, duration) end

--- NativeDB Added Parameter 2: Any p1
--- @param player any
function SpecialAbilityActivate(player) end

--- p1 appears as 5, 10, 15, 25, or 30. p2 is always true. NativeDB Added Parameter 4: Any p3
--- @param player integer
--- @param p1 integer
--- @param p2 boolean
function SpecialAbilityChargeAbsolute(player, p1, p2) end

--- p1 appears to always be 1 (only comes up twice) NativeDB Added Parameter 3: Any p2
--- @param player integer
--- @param p2 integer
function SpecialAbilityChargeContinuous(player, p2) end

--- 2 matches. p1 was always true. NativeDB Added Parameter 4: Any p3
--- @param player integer
--- @param p1 boolean
--- @param p2 boolean
function SpecialAbilityChargeLarge(player, p1, p2) end

--- Only 1 match. Both p1 & p2 were true. NativeDB Added Parameter 4: Any p3
--- @param player integer
--- @param p1 boolean
--- @param p2 boolean
function SpecialAbilityChargeMedium(player, p1, p2) end

--- normalizedValue is from 0.0 - 1.0 p2 is always 1 NativeDB Added Parameter 4: Any p3
--- @param player integer
--- @param normalizedValue number
--- @param p2 boolean
function SpecialAbilityChargeNormalized(player, normalizedValue, p2) end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
function SpecialAbilityChargeOnMissionFailed(player) end

--- Every occurrence of p1 & p2 were both true. NativeDB Added Parameter 4: Any p3
--- @param player integer
--- @param p1 boolean
--- @param p2 boolean
function SpecialAbilityChargeSmall(player, p1, p2) end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
function SpecialAbilityDeactivate(player) end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
function SpecialAbilityDeactivateFast(player) end

--- NativeDB Added Parameter 2: Any p1
--- @param p0 any
function SpecialAbilityDeplete(p0) end

--- p1 was always true. NativeDB Added Parameter 3: Any p2
--- @param player integer
--- @param p1 boolean
function SpecialAbilityDepleteMeter(player, p1) end

--- Also known as _RECHARGE_SPECIAL_ABILITY NativeDB Added Parameter 3: Any p2
--- @param player integer
--- @param p1 boolean
function SpecialAbilityFillMeter(player, p1) end

--- NativeDB Added Parameter 2: Any p1
--- @param playerModel integer
function SpecialAbilityLock(playerModel) end

--- NativeDB Added Parameter 2: Any p1
--- @param player integer
function SpecialAbilityReset(player) end

--- NativeDB Added Parameter 2: Any p1
--- @param playerModel integer
function SpecialAbilityUnlock(playerModel) end

--- Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.\ Only to be used in very specific situations where the ped needs to be inside the car still but not attached.
--- @param ped integer
--- @param noCollisionUntilClear boolean
function SpecialFunctionDoNotUse(ped, noCollisionUntilClear) end

--- @param value number
--- @return any
function Sqrt(value) end

--- @param vehicle integer
--- @param entity integer
--- @param p2 number
function StabiliseEntityAttachedToHeli(vehicle, entity, p2) end

--- You should call PREPARE_ALARM and wait for its value to be true before using this
--- @param alarmName string
--- @param skipStartup boolean
function StartAlarm(alarmName, skipStartup) end

--- Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound. List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC
--- @param scene string
--- @return any
function StartAudioScene(scene) end

--- Begins with START_*. Next character in the name is either D or E.
function StartBenchmarkRecording() end

--- flags: Usually 0.
--- @param flags integer
function StartCutscene(flags) end

--- Similar to `SET_CUTSCENE_ORIGIN` but without heading and doesn't need `START_CUTSCENE`
--- @param x number
--- @param y number
--- @param z number
--- @param flags integer
function StartCutsceneAtCoords(x, y, z, flags) end

--- @param entity integer
--- @return any
function StartEntityFire(entity) end

--- Does the same as START_SHAPE_TEST_LOS_PROBE, except blocking until the shape test completes. Use START_SHAPE_TEST_LOS_PROBE instead. Literally. Rockstar named this correctly: it's expensive, and it's synchronous.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param flags integer
--- @param entity integer
--- @param p8 integer
--- @return any
function StartExpensiveSynchronousShapeTestLosProbe(x1, y1, z1, x2, y2, z2, flags, entity, p8) end

--- Equivalent of START_FIND_KVP, but for another resource than the current one.
--- @param resourceName string
--- @param prefix string
--- @return any
function StartFindExternalKvp(resourceName, prefix) end

--- @param prefix string
--- @return any
function StartFindKvp(prefix) end

--- @param duration integer
function StartFiringAmnesty(duration) end

--- Starts a new GPS custom-route, allowing you to plot lines on the map. Lines are drawn directly between points. The GPS custom route works like the GPS multi route, except it does not follow roads. **Example result:** ![](https://i.imgur.com/BDm5pzt.png)
--- @param hudColor integer
--- @param displayOnFoot boolean
--- @param followPlayer boolean
function StartGpsCustomRoute(hudColor, displayOnFoot, followPlayer) end

--- Starts a new GPS multi-route, allowing you to create custom GPS paths. GPS functions like the waypoint, except it can contain multiple points it's forced to go through. Once the player has passed a point, the GPS will no longer force its path through it. Works independently from the player-placed waypoint and blip routes. **Example result:** ![](https://i.imgur.com/ZZHQatX.png)
--- @param hudColor integer
--- @param routeFromPlayer boolean
--- @param displayOnFoot boolean
function StartGpsMultiRoute(hudColor, routeFromPlayer, displayOnFoot) end

--- network fx NativeDB Added Parameter 13: Any p12 NativeDB Added Parameter 14: Any p13 NativeDB Added Parameter 15: Any p14 NativeDB Added Parameter 16: Any p15
--- @param effectName string
--- @param entity integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartNetworkedParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) end

--- network fx NativeDB Added Parameter 14: Any p13 NativeDB Added Parameter 15: Any p14 NativeDB Added Parameter 16: Any p15 NativeDB Added Parameter 17: Any p16
--- @param effectName string
--- @param entity integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param boneIndex integer
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartNetworkedParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) end

--- NOTE: the USE_PARTICLE_FX_ASSET needs to be called before EVERY StartNetworkedParticleFxNonLoopedAtCoord(....) call! List with lots of particle effects: https://vespura.com/fivem/particle-list/ Note: Not all particles on this list are for non looped and vice versa, neither are all of them suited/meant to have SetParticleFxNonLoopedColour(....) called on them. NativeDB Added Parameter 12: BOOL p11
--- @param effectName string
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartNetworkedParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) end

--- @param effectName string
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param scale number
--- @param axisX boolean
--- @param axisY boolean
--- @param axisZ boolean
--- @return any
function StartNetworkedParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) end

--- NativeDB Introduced: v2189
--- @param effectName string
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param boneIndex integer
--- @param scale number
--- @param axisX boolean
--- @param axisY boolean
--- @param axisZ boolean
--- @return any
function StartNetworkedParticleFxNonLoopedOnEntityBone(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) end

--- @param effectName string
--- @param ped integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param boneIndex integer
--- @param scale number
--- @param axisX boolean
--- @param axisY boolean
--- @param axisZ boolean
--- @return any
function StartNetworkedParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) end

--- Examples: g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424); l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828); SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000); SYSTEM::START_NEW_SCRIPT("emergencycall", 512); SYSTEM::START_NEW_SCRIPT("emergencycall", 512); SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424); SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000); SYSTEM::START_NEW_SCRIPT("tennis_family", 3650); SYSTEM::START_NEW_SCRIPT("Celebrations", 3650); Decompiled examples of usage when starting a script: SCRIPT::REQUEST_SCRIPT(a_0); if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) { SYSTEM::START_NEW_SCRIPT(a_0, v_3); SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0); return 1; } or: v_2 = "MrsPhilips2"; SCRIPT::REQUEST_SCRIPT(v_2); while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) { SCRIPT::REQUEST_SCRIPT(v_2); SYSTEM::WAIT(0); } sub_8792(36); SYSTEM::START_NEW_SCRIPT(v_2, 17000); SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2); All native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi
--- @param scriptName string
--- @param stackSize integer
--- @return any
function StartNewScript(scriptName, stackSize) end

--- return : script thread id, 0 if failed Pass pointer to struct of args in p1, size of struct goes into p2
--- @param scriptName string
--- @param argCount integer
--- @param stackSize integer
--- @return any
--- @return any
function StartNewScriptWithArgs(scriptName, argCount, stackSize) end

--- @param scriptHash integer
--- @param stackSize integer
--- @return any
function StartNewScriptWithNameHash(scriptHash, stackSize) end

--- @param scriptHash integer
--- @param argCount integer
--- @param stackSize integer
--- @return any
--- @return any
function StartNewScriptWithNameHashAndArgs(scriptHash, argCount, stackSize) end

--- GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0) p11 seems to be always 0
--- @param effectName string
--- @param x number
--- @param y number
--- @param z number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @param p11 boolean
--- @return any
function StartParticleFxLoopedAtCoord(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11) end

--- @param effectName string
--- @param entity integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartParticleFxLoopedOnEntity(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) end

--- @param effectName string
--- @param entity integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param boneIndex integer
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartParticleFxLoopedOnEntityBone(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) end

--- @param effectName string
--- @param ped integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param boneIndex integer
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartParticleFxLoopedOnPedBone(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis) end

--- GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0); Axis - Invert Axis Flags list: pastebin.com/N9unUFWY ------------------------------------------------------------------- C# Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function. char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate. float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f bool xaxis, yaxis, zaxis = To bool the axis values. example: Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
--- @param effectName string
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param xRot number
--- @param yRot number
--- @param zRot number
--- @param scale number
--- @param xAxis boolean
--- @param yAxis boolean
--- @param zAxis boolean
--- @return any
function StartParticleFxNonLoopedAtCoord(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis) end

--- Starts a particle effect on an entity for example your player. List: pastebin.com/N9unUFWY Example: C#: Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2"); Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2"); Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false); Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
--- @param effectName string
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param scale number
--- @param axisX boolean
--- @param axisY boolean
--- @param axisZ boolean
--- @return any
function StartParticleFxNonLoopedOnEntity(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ) end

--- GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0); Axis - Invert Axis Flags list: pastebin.com/N9unUFWY
--- @param effectName string
--- @param ped integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param boneIndex integer
--- @param scale number
--- @param axisX boolean
--- @param axisY boolean
--- @param axisZ boolean
--- @return any
function StartParticleFxNonLoopedOnPedBone(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ) end

--- @param p0 number
function StartPetrolTrailDecals(p0) end

--- p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer). See `REQUEST_VEHICLE_RECORDING`.
--- @param vehicle integer
--- @param recording integer
--- @param script string
--- @param p3 boolean
function StartPlaybackRecordedVehicle(vehicle, recording, script, p3) end

--- AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording. 0x1F2E4E06DEA8992B is a related native that deals with the AI physics for such recordings.
--- @param vehicle integer
--- @param recording integer
--- @param script string
--- @param speed number
--- @param drivingStyle integer
function StartPlaybackRecordedVehicleUsingAi(vehicle, recording, script, speed, drivingStyle) end

--- flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components. time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
--- @param vehicle integer
--- @param recording integer
--- @param script string
--- @param flags integer
--- @param time integer
--- @param drivingStyle integer
function StartPlaybackRecordedVehicleWithFlags(vehicle, recording, script, flags, time, drivingStyle) end

--- cpp enum ePlayerSwitchType { SWITCH_TYPE_AUTO = 0, SWITCH_TYPE_LONG = 1, SWITCH_TYPE_MEDIUM = 2, SWITCH_TYPE_SHORT = 3 }; cpp enum eSwitchFlags { SKIP_INTRO = 1, SKIP_OUTRO = 2, PAUSE_BEFORE_PAN = 4, PAUSE_BEFORE_OUTRO = 8, SKIP_PAN = 16, UNKNOWN_DEST = 32, DESCENT_ONLY = 64, START_FROM_CAMPOS = 128, PAUSE_BEFORE_ASCENT = 256, PAUSE_BEFORE_DESCENT = 512, ALLOW_SNIPER_AIM_INTRO = 1024, ALLOW_SNIPER_AIM_OUTRO = 2048, SKIP_TOP_DESCENT = 4096, SUPPRESS_OUTRO_FX = 8192, SUPPRESS_INTRO_FX = 16384, DELAY_ASCENT_FX = 32768 }
--- @param from integer
--- @param to integer
--- @param flags integer
--- @param switchType integer
function StartPlayerSwitch(from, to, flags, switchType) end

--- Teleports the player to the given coordinates. If findCollisionLand is true it will try to find the Z value for you, this however has a timeout of 100 frames. When trying to find the Z value the native will take longer the higher the difference from the given Z to the ground, this combined with the timeout can cause the teleport to just teleport to the given Z value, so try to estimate the z value, so don't just pass in 1000.0. Also if you're in a vehicle and teleportWithVehicle is true it will not find the Z value for you.
--- @param player integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param teleportWithVehicle boolean
--- @param findCollisionLand boolean
--- @param p7 boolean
function StartPlayerTeleport(player, x, y, z, heading, teleportWithVehicle, findCollisionLand, p7) end

--- For use with PRELOAD_SCRIPT_CONVERSATION and GET_IS_PRELOADED_CONVERSATION_READY
function StartPreloadedConversation() end

--- Starts recording a replay.\ If already recording a replay, does nothing.
--- @param mode integer
function StartRecording(mode) end

--- @param resourceName string
--- @return any
function StartResource(resourceName) end

--- @param ropeId integer
function StartRopeUnwindingFront(ropeId) end

--- @param ropeId integer
function StartRopeWinding(ropeId) end

--- @param size integer
--- @param arrayName string
--- @return any
function StartSaveArrayWithSize(size, arrayName) end

--- @param p1 any
--- @param p2 boolean
--- @return any
function StartSaveData(p1, p2) end

--- @param size integer
--- @param structName string
--- @return any
function StartSaveStructWithSize(size, structName) end

--- @param displaySubtitles boolean
--- @param addToBriefScreen boolean
--- @param cloneConversation boolean
--- @param interruptible boolean
function StartScriptConversation(displaySubtitles, addToBriefScreen, cloneConversation, interruptible) end

--- Starts a fire: xyz: Location of fire maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing. isGasFire: Whether or not the fire is powered by gasoline.
--- @param X number
--- @param Y number
--- @param Z number
--- @param maxChildren integer
--- @param isGasFire boolean
--- @return any
function StartScriptFire(X, Y, Z, maxChildren, isGasFire) end

--- @param displaySubtitles boolean
--- @param addToBriefScreen boolean
function StartScriptPhoneConversation(displaySubtitles, addToBriefScreen) end

--- See `START_SHAPE_TEST_LOS_PROBE` for flags.
--- @param entity integer
--- @param flags1 integer
--- @param flags2 integer
--- @return any
function StartShapeTestBound(entity, flags1, flags2) end

--- See `START_SHAPE_TEST_LOS_PROBE` for flags.
--- @param entity integer
--- @param flags1 integer
--- @param flags2 integer
--- @return any
function StartShapeTestBoundingBox(entity, flags1, flags2) end

--- For more information, see `START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE` and `START_SHAPE_TEST_LOS_PROBE`.
--- @param x number
--- @param y number
--- @param z number
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param p9 integer
--- @param flags integer
--- @param entity integer
--- @param p12 integer
--- @return any
function StartShapeTestBox(x, y, z, x1, y1, z1, rotX, rotY, rotZ, p9, flags, entity, p12) end

--- Raycast from point to point, where the ray has a radius.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius number
--- @param flags integer
--- @param entity integer
--- @param p9 integer
--- @return any
function StartShapeTestCapsule(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) end

--- Asynchronously starts a line-of-sight (raycast) world probe shape test. cpp enum eTraceFlags { None = 0, IntersectWorld = 1, IntersectVehicles = 2, IntersectPeds = 4, IntersectRagdolls = 8, IntersectObjects = 16, IntersectWater = 32, IntersectGlass = 64, IntersectRiver = 128, IntersectFoliage = 256, IntersectEverything = -1 } NOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres. Use the handle with GET_SHAPE_TEST_RESULT or GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL until it returns 0 or 2.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param traceFlags integer
--- @param entity integer
--- @param options integer
--- @return any
function StartShapeTestLosProbe(x1, y1, z1, x2, y2, z2, traceFlags, entity, options) end

--- Since it is only used in the PC version, likely some mouse-friendly shape test. Uses **in** vector arguments. Asynchronous. it returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT. In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7 See `START_SHAPE_TEST_LOS_PROBE` for flags.
--- @param flag integer
--- @param entity integer
--- @param flag2 integer
--- @return any
--- @return vector3
--- @return vector3
function StartShapeTestSurroundingCoords(flag, entity, flag2) end

--- Performs the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param radius number
--- @param flags integer
--- @param entity integer
--- @param p9 integer
--- @return any
function StartShapeTestSweptSphere(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9) end

--- @param vehicle integer
function StartVehicleAlarm(vehicle) end

--- Sounds the horn for the specified vehicle. Note that if a player is in the vehicle, it will only sound briefly.
--- @param vehicle integer
--- @param duration integer
--- @param mode integer
--- @param forever boolean
function StartVehicleHorn(vehicle, duration, mode, forever) end

--- Example: for (v_2 = 0; v_2 <= 4; v_2 += 1) { STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2); }
--- @param statSlot integer
--- @return any
function StatClearSlotForReload(statSlot) end

--- @param p0 any
--- @return any
function StatDeleteSlot(p0) end

--- @param bagName string
--- @param key string
--- @return any
function StateBagHasKey(bagName, key) end

--- @param statHash integer
--- @param p2 any
--- @return any
--- @return boolean
function StatGetBool(statHash, p2) end

--- p2 - Default value? Seems to be -1 most of the time.
--- @param statName integer
--- @param mask integer
--- @param p2 integer
--- @return any
function StatGetBoolMasked(statName, mask, p2) end

--- @return any
function StatGetCancelSaveMigrationStatus() end

--- @param statHash integer
--- @param p2 any
--- @param p3 any
--- @return any
--- @return any
function StatGetDate(statHash, p2, p3) end

--- @param statHash integer
--- @param p2 any
--- @return any
--- @return number
function StatGetFloat(statHash, p2) end

--- p2 appears to always be -1
--- @param statHash integer
--- @param p2 integer
--- @return any
--- @return integer
function StatGetInt(statHash, p2) end

--- @param statName integer
--- @return any
function StatGetLicensePlate(statName) end

--- @param p0 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @return any
--- @return any
function StatGetMaskedInt(p0, p2, p3, p4) end

--- @param statName integer
--- @return any
function StatGetNumberOfDays(statName) end

--- @param statName integer
--- @return any
function StatGetNumberOfHours(statName) end

--- @param statName integer
--- @return any
function StatGetNumberOfMinutes(statName) end

--- @param statName integer
--- @return any
function StatGetNumberOfSeconds(statName) end

--- Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_BOOL_MASKED"?
--- @param p0 integer
--- @return any
function StatGetPackedBoolMask(p0) end

--- Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
--- @param p0 integer
--- @return any
function StatGetPackedIntMask(p0) end

--- @param p0 any
--- @param p4 any
--- @return any
--- @return any
--- @return any
--- @return any
function StatGetPos(p0, p4) end

--- @return any
--- @return integer
function StatGetSaveMigrationConsumeContentUnlockStatus() end

--- @return any
--- @return any
function StatGetSaveMigrationStatus() end

--- p1 is always -1 in the script files
--- @param statHash integer
--- @param p1 integer
--- @return any
function StatGetString(statHash, p1) end

--- Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists.
--- @param p0 any
--- @return any
function StatGetUserId(p0) end

--- @param statName integer
--- @param value number
function StatIncrement(statName, value) end

--- @param p0 integer
--- @return any
function StatLoad(p0) end

--- @param p0 any
--- @return any
function StatLoadPending(p0) end

--- platformName must be one of the following: ps3, xbox360, ps4, xboxone
--- @param platformName string
--- @return any
function StatMigrateSave(platformName) end

--- NativeDB Added Parameter 4: Any p3
--- @param p0 integer
--- @param p1 boolean
--- @param p2 integer
--- @return any
function StatSave(p0, p1, p2) end

--- @return any
function StatSaveMigrationCancel() end

--- @param contentId integer
--- @param srcPlatform string
--- @param srcGamerHandle string
--- @return any
function StatSaveMigrationConsumeContentUnlock(contentId, srcPlatform, srcGamerHandle) end

--- @return any
function StatSaveMigrationStatusStart() end

--- @return any
function StatSavePending() end

--- @return any
function StatSavePendingOrRequested() end

--- @param toggle boolean
function StatSetBlockSaves(toggle) end

--- Example: STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
--- @param statName integer
--- @param value boolean
--- @param save boolean
--- @return any
function StatSetBool(statName, value, save) end

--- @param statName integer
--- @param value boolean
--- @param mask integer
--- @param save boolean
--- @return any
function StatSetBoolMasked(statName, value, mask, save) end

function StatSetCheatIsActive() end

--- p1 always true.
--- @param statName integer
--- @param p1 boolean
--- @return any
function StatSetCurrentPosixTime(statName, p1) end

--- 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7). The structure looks like this: int year int month int day int hour int minute int second int millisecond The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
--- @param statName integer
--- @param numFields integer
--- @param save boolean
--- @return any
--- @return any
function StatSetDate(statName, numFields, save) end

--- Example: STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
--- @param statName integer
--- @param value number
--- @param save boolean
--- @return any
function StatSetFloat(statName, value, save) end

--- The following values have been found in the decompiled scripts: "RC_ABI1" "RC_ABI2" "RC_BA1" "RC_BA2" "RC_BA3" "RC_BA3A" "RC_BA3C" "RC_BA4" "RC_DRE1" "RC_EPS1" "RC_EPS2" "RC_EPS3" "RC_EPS4" "RC_EPS5" "RC_EPS6" "RC_EPS7" "RC_EPS8" "RC_EXT1" "RC_EXT2" "RC_EXT3" "RC_EXT4" "RC_FAN1" "RC_FAN2" "RC_FAN3" "RC_HAO1" "RC_HUN1" "RC_HUN2" "RC_JOS1" "RC_JOS2" "RC_JOS3" "RC_JOS4" "RC_MAU1" "RC_MIN1" "RC_MIN2" "RC_MIN3" "RC_MRS1" "RC_MRS2" "RC_NI1" "RC_NI1A" "RC_NI1B" "RC_NI1C" "RC_NI1D" "RC_NI2" "RC_NI3" "RC_OME1" "RC_OME2" "RC_PA1" "RC_PA2" "RC_PA3" "RC_PA3A" "RC_PA3B" "RC_PA4" "RC_RAM1" "RC_RAM2" "RC_RAM3" "RC_RAM4" "RC_RAM5" "RC_SAS1" "RC_TON1" "RC_TON2" "RC_TON3" "RC_TON4" "RC_TON5"
--- @param statName integer
--- @param value string
--- @param save boolean
--- @return any
function StatSetGxtLabel(statName, value, save) end

--- @param statName integer
--- @param value integer
--- @param save boolean
--- @return any
function StatSetInt(statName, value, save) end

--- @param statName integer
--- @param str string
--- @return any
function StatSetLicensePlate(statName, str) end

--- @param statName integer
--- @param p1 any
--- @param p2 any
--- @param p3 integer
--- @param save boolean
--- @return any
function StatSetMaskedInt(statName, p1, p2, p3, save) end

--- @param statName integer
--- @param x number
--- @param y number
--- @param z number
--- @param save boolean
--- @return any
function StatSetPos(statName, x, y, z, save) end

--- Does not take effect immediately, unfortunately. profileSetting seems to only be 936, 937 and 938 in scripts
--- @param profileSetting integer
--- @param value integer
function StatSetProfileSettingValue(profileSetting, value) end

--- @param statName integer
--- @param value string
--- @param save boolean
--- @return any
function StatSetString(statName, value, save) end

--- @param statName integer
--- @param value string
--- @param save boolean
--- @return any
function StatSetUserId(statName, value, save) end

--- @param p0 any
--- @return any
function StatSlotIsLoaded(p0) end

--- @param alarmName string
--- @param instantStop boolean
function StopAlarm(alarmName, instantStop) end

--- @param instantStop boolean
function StopAllAlarms(instantStop) end

function StopAllGarageActivity() end

--- Looks like p1 may be a flag, still need to do some research, though.
--- @param ped integer
--- @param p1 integer
--- @param p2 boolean
function StopAnimPlayback(ped, p1, p2) end

--- Animations list
--- @param ped integer
--- @param animDictionary string
--- @param animationName string
--- @param animExitSpeed number
function StopAnimTask(ped, animDictionary, animationName, animExitSpeed) end

function StopAnyPedModelBeingSuppressed() end

--- Stops the named mixing scene (which was previously started by this script)
--- @param sceneName string
function StopAudioScene(sceneName) end

--- Stops all mixed scenes which were previously started by this script
function StopAudioScenes() end

--- Begins with STOP_*. Next character in the name is either D or E.
function StopBenchmarkRecording() end

--- NativeDB Introduced: v1290
--- @param binkMovie integer
function StopBinkMovie(binkMovie) end

--- Stops CTaskBringVehicleToHalt
--- @param vehicle integer
function StopBringVehicleToHalt(vehicle) end

--- @param cam integer
function StopCamPointing(cam) end

--- @param cam integer
--- @param p1 boolean
function StopCamShaking(cam, p1) end

--- @param p0 boolean
function StopCinematicCamShaking(p0) end

--- @param p0 integer
function StopCinematicShot(p0) end

--- Stops currently playing ambient speech.
--- @param ped integer
function StopCurrentPlayingAmbientSpeech(ped) end

--- Stops currently playing speech (Pain, ambient, scripted, breathing).
--- @param ped integer
function StopCurrentPlayingSpeech(ped) end

--- @param p0 boolean
function StopCutscene(p0) end

--- Stops audio for the current cutscene.
function StopCutsceneAudio() end

function StopCutsceneCamShaking() end

--- Stop cutscene instantly, will dump registered entities right where they were when ran.
function StopCutsceneImmediately() end

--- RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
--- @param entity integer
--- @param animation string
--- @param animGroup string
--- @param p3 number
--- @return any
function StopEntityAnim(entity, animation, animGroup, p3) end

--- @param entity integer
function StopEntityFire(entity) end

--- @param x number
--- @param y number
--- @param z number
--- @param radius number
function StopFireInRange(x, y, z, radius) end

--- @param bStopImmediately boolean
function StopGameplayCamShaking(bStopImmediately) end

--- Terminates the current gameplay hint camera, with an option for immediate cessation or a gradual fade out. NativeDB Introduced: v323
--- @param bStopImmediately boolean
function StopGameplayHint(bStopImmediately) end

--- @param padIndex integer
function StopPadShake(padIndex) end

--- p1 is always 0 in the native scripts
--- @param ptfxHandle integer
--- @param p1 boolean
function StopParticleFxLooped(ptfxHandle, p1) end

--- Stops a ped's ringtone from playing
--- @param ped integer
function StopPedRingtone(ped) end

--- This doesn't stop a piece of dialogue that has been triggered. This stops the ability to force ambient dialogue if set to true - however setting it to false, then triggering a context, then setting it to true again will allow this. Nb. This does not sync over the network, it will only affect peds locally. Use STOP_PED_SPEAKING_SYNCED if you need to affect peds on other machines too.
--- @param ped integer
--- @param shouldDisable boolean
function StopPedSpeaking(ped, shouldDisable) end

--- This doesn't stop a piece of dialogue that has been triggered. This stops the ability to force ambient dialogue if set to true - however setting it to false, then triggering a context, then setting it to true again will allow this. The ped will also be prevented from speaking on remote machines. Use STOP_PED_SPEAKING if you just want to affect the local machine.
--- @param ped integer
--- @param shouldDisable boolean
function StopPedSpeakingSynced(ped, shouldDisable) end

--- @param ped integer
function StopPedWeaponFiringWhenDropped(ped) end

--- @param vehicle integer
function StopPlaybackRecordedVehicle(vehicle) end

function StopPlayerSwitch() end

--- Disables the player's teleportation
function StopPlayerTeleport() end

--- Stops recording and discards the recorded clip.
function StopRecordingAndDiscardClip() end

--- Stops recording and saves the recorded clip.
function StopRecordingAndSaveClip() end

--- Disable recording for this frame only.
function StopRecordingThisFrame() end

--- Instructs the game engine to stop rendering scripted cameras and transition back to the gameplay camera, optionally applying custom blending and rendering options. cpp enum eRenderingOptionFlags { RO_NO_OPTIONS = 0, RO_STOP_RENDERING_OPTION_WHEN_PLAYER_EXITS_INTO_COVER = 1 }; cpp enum eCamSplineSmoothingFlags { // No smoothing just moves at a constant rate CAM_SPLINE_NO_SMOOTH = 0, // Decelerates when approaching a node CAM_SPLINE_SLOW_IN_SMOOTH = 1, // Accelerates slowly when leaving a node CAM_SPLINE_SLOW_OUT_SMOOTH = 2, // Decelerates when approaching a node and accelerates slowly when leaving a node CAM_SPLINE_SLOW_IN_OUT_SMOOTH = 3, CAM_SPLINE_VERY_SLOW_IN = 4, CAM_SPLINE_VERY_SLOW_OUT = 5, CAM_SPLINE_VERY_SLOW_IN_SLOW_OUT = 6, CAM_SPLINE_SLOW_IN_VERY_SLOW_OUT = 7, CAM_SPLINE_VERY_SLOW_IN_VERY_SLOW_OUT = 8, CAM_SPLINE_EASE_IN = 9, CAM_SPLINE_EASE_OUT = 10, CAM_SPLINE_QUADRATIC_EASE_IN = 11, CAM_SPLINE_QUADRATIC_EASE_OUT = 12, CAM_SPLINE_QUADRATIC_EASE_IN_OUT = 13, CAM_SPLINE_CUBIC_EASE_IN = 14, CAM_SPLINE_CUBIC_EASE_OUT = 15, CAM_SPLINE_CUBIC_EASE_IN_OUT = 16, CAM_SPLINE_QUARTIC_EASE_IN = 17, CAM_SPLINE_QUARTIC_EASE_OUT = 18, CAM_SPLINE_QUARTIC_EASE_IN_OUT = 19, CAM_SPLINE_QUINTIC_EASE_IN = 20, CAM_SPLINE_QUINTIC_EASE_OUT = 21, CAM_SPLINE_QUINTIC_EASE_IN_OUT = 22, CAM_SPLINE_CIRCULAR_EASE_IN = 23, CAM_SPLINE_CIRCULAR_EASE_OUT = 24, CAM_SPLINE_CIRCULAR_EASE_IN_OUT = 25 }; NativeDB Added Parameter 4: int renderingOptions : An integer bitmask of eRenderingOptionFlags to apply specific rendering behaviors during the transition. RO_NO_OPTIONS signifies no special options are applied. NativeDB Introduced: v323
--- @param bShouldApplyAcrossAllThreads boolean
--- @param distanceToBlend number
--- @param blendType integer
function StopRenderingScriptCamsUsingCatchUp(bShouldApplyAcrossAllThreads, distanceToBlend, blendType) end

--- @param resourceName string
--- @return any
function StopResource(resourceName) end

--- @param ropeId integer
function StopRopeUnwindingFront(ropeId) end

--- @param ropeId integer
function StopRopeWinding(ropeId) end

function StopSaveArray() end

function StopSaveData() end

function StopSaveStruct() end

--- @param finishCurrentLine boolean
--- @return any
function StopScriptedConversation(finishCurrentLine) end

--- Stops the currently active global camera shake that was initiated by a script. You can check if a global camera shake is active using IS_SCRIPT_GLOBAL_SHAKING. NativeDB Introduced: v323
--- @param bStopImmediately boolean
function StopScriptGlobalShaking(bStopImmediately) end

--- Stops all smoke grenade sounds
function StopSmokeGrenadeExplosionSounds() end

--- Stops the sound from currently playing, there isn't a way to resume a sound after stopping it.
--- @param soundId integer
function StopSound(soundId) end

function StopStream() end

--- @param p0 any
--- @return any
function StopSynchronizedAudioEvent(p0) end

--- p1 sync task id?
--- @param entity integer
--- @param p1 number
--- @param p2 boolean
--- @return any
function StopSynchronizedEntityAnim(entity, p1, p2) end

--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 any
--- @param p5 number
--- @return any
function StopSynchronizedMapEntityAnim(p0, p1, p2, p3, p4, p5) end

--- Always returns zero.
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 any
--- @param p8 any
--- @return any
function StreamvolCreateFrustum(p0, p1, p2, p3, p4, p5, p6, p7, p8) end

--- Always returns zero.
--- @param p0 number
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 any
--- @return any
function StreamvolCreateLine(p0, p1, p2, p3, p4, p5, p6) end

--- Always returns zero.
--- @param x number
--- @param y number
--- @param z number
--- @param rad number
--- @param p4 any
--- @param p5 any
--- @return any
function StreamvolCreateSphere(x, y, z, rad, p4, p5) end

--- @param unused any
function StreamvolDelete(unused) end

--- @param unused any
--- @return any
function StreamvolHasLoaded(unused) end

--- @param unused any
--- @return any
function StreamvolIsValid(unused) end

--- Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case. If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
--- @param string string
--- @return any
--- @return integer
function StringToInt(string) end

function SuppressAgitationEventsNextFrame() end

--- Suppresses a crime for a given player for this frame only. **Note:** This native needs to be executed inside a thread if a crime is meant to be suppressed for a given amount of time.
--- @param player integer
--- @param crimeType integer
function SuppressCrimeThisFrame(player, crimeType) end

function SuppressFrontendRenderingThisFrame() end

function SuppressShockingEventsNextFrame() end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
--- @param eventType integer
function SuppressShockingEventTypeNextFrame(eventType) end

--- Suppresses or enables a specific type of random event for the current frame. cpp enum eEventType { RC_PED_STEAL_VEHICLE = 0, RC_PED_JAY_WALK_LIGHT = 1, RC_COP_PURSUE = 2, RC_COP_PURSUE_VEHICLE_FLEE_SPAWNED = 3, RC_COP_VEHICLE_DRIVING_FAST = 4, RC_COP_VEHICLE_DRIVING_SLOW = 5, RC_DRIVER_RECKLESS = 6, RC_DRIVER_PRO = 7, RC_PED_PURSUE_WHEN_HIT_BY_CAR = 8 }
--- @param eventType integer
--- @param enable boolean
function SupressRandomEventThisFrame(eventType, enable) end

--- Used in carsteal3 script with p0 = "Carsteal4_spycar". S*
--- @param name string
--- @return any
function SwitchToInputMappingScheme(name) end

--- Same as 0x3D42B92563939375 S*
--- @param name string
--- @return any
function SwitchToInputMappingScheme_2(name) end

--- You can check if the player is in a Switch state with `IS_PLAYER_SWITCH_IN_PROGRESS`. ***Note:** Doesn't act normally when used on Mount Chiliad.*
--- @param ped integer
--- @param flags integer
--- @param switchType integer
function SwitchToMultiFirstpart(ped, flags, switchType) end

--- After using `SWITCH_TO_MULTI_FIRSTPART` , use this native to smoothly return the camera to the player's character.
--- @param ped integer
function SwitchToMultiSecondpart(ped) end

--- Toggles whether ambient trains can spawn on the specified track or not. | trackId | File | Description | | --- | --- | --- | | 0 | `trains1.dat` | Main track around SA | | 1 | `trains2.dat` | Davis Quartz Quarry branch | | 2 | `trains3.dat` | Second track alongside live track along Roy Lewenstein Blv. | | 3 | `trains4.dat` | Metro track circuit | | 4 | `trains5.dat` | Branch in Mirror Park Railyard | | 5 | `trains6.dat` | Branch in Mirror Park Railyard | | 6 | `trains7.dat` | LS branch to Mirror Park Railyard | | 7 | `trains8.dat` | Overground part of metro track along Forum Dr. | | 8 | `trains9.dat` | Branch to Mirror Park Railyard | | 9 | `trains10.dat` | Yankton train | | 10 | `trains11.dat` | Part of metro track near mission row | | 11 | `trains12.dat` | Yankton prologue mission train | Tracks IDs `0` and `3` are the main tracks you find trains on during normal gameplay, all the others are used during missions and are not complete tracks.
--- @param trackId integer
--- @param state boolean
function SwitchTrainTrack(trackId, state) end

--- Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick. To enable the keys again, use `0x14621BB1DF14E2B2`.
function TakeControlOfFrontend() end

--- @param scene integer
function TakeOwnershipOfSynchronizedScene(scene) end

--- @param p0 number
--- @return any
function Tan(p0) end

--- Makes the specified ped achieve the specified heading. pedHandle: The handle of the ped to assign the task to. heading: The desired heading. timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
--- @param ped integer
--- @param heading number
--- @param timeout integer
function TaskAchieveHeading(ped, heading, timeout) end

--- @param ped integer
--- @param ped2 integer
function TaskAgitatedAction(ped, ped2) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param time integer
--- @param bInstantBlendToAim boolean
--- @param bPlayAimIntro boolean
function TaskAimGunAtCoord(ped, x, y, z, time, bInstantBlendToAim, bPlayAimIntro) end

--- duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
--- @param ped integer
--- @param entity integer
--- @param duration integer
--- @param bInstantBlendToAim boolean
function TaskAimGunAtEntity(ped, entity, duration, bInstantBlendToAim) end

--- @param ped integer
--- @param scriptTask integer
--- @param bDisableBlockingClip boolean
--- @param bInstantBlendToAim boolean
function TaskAimGunScripted(ped, scriptTask, bDisableBlockingClip, bInstantBlendToAim) end

--- @param ped integer
--- @param targetPed integer
--- @param x number
--- @param y number
--- @param z number
--- @param iGunTaskType integer
--- @param bDisableBlockingClip boolean
--- @param bForceAim boolean
function TaskAimGunScriptedWithTarget(ped, targetPed, x, y, z, iGunTaskType, bDisableBlockingClip, bForceAim) end

--- Example from "me_amanda1.ysc.c4": TASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID()); Example from "armenian1.ysc.c4": if (!PED::IS_PED_INJURED(l_B18[0/*1*/])) { TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID()); } I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod. Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
--- @param ped integer
--- @param target integer
function TaskArrestPed(ped, target) end

--- All parameters except ped and boat are optional, with `pedTarget`, `vehicleTarget`, `x`, `y`, `z` being dependent on `missionType` (ie. Attack/Flee mission types require a target ped/vehicle, whereas GoTo mission types require either `x`, `y`, `z` or a target ped/vehicle). If you don't want to use a parameter; pass `0.0f` for `x`, `y` and `z`, `0` for `pedTarget`, `vehicleTarget` and other int parameters, and `-1.0f` for the remaining float parameters. cpp enum eBoatMissionFlags { None = 0, StopAtEnd = 1, StopAtShore = 2, AvoidShore = 4, PreferForward = 8, NeverStop = 16, NeverNavMesh = 32, NeverRoute = 64, ForceBeached = 128, UseWanderRoute = 256, UseFleeRoute = 512, NeverPause = 1024, // StopAtEnd | StopAtShore | AvoidShore DefaultSettings = 7, // StopAtEnd | StopAtShore | AvoidShore | PreferForward | NeverNavMesh | NeverRoute OpenOceanSettings = 111, // StopAtEnd | StopAtShore | AvoidShore | PreferForward | NeverNavMesh | NeverPause BoatTaxiSettings = 1071, }
--- @param ped integer
--- @param boat integer
--- @param vehicleTarget integer
--- @param pedTarget integer
--- @param x number
--- @param y number
--- @param z number
--- @param missionType integer
--- @param speed number
--- @param drivingStyle integer
--- @param radius number
--- @param missionFlags integer
function TaskBoatMission(ped, boat, vehicleTarget, pedTarget, x, y, z, missionType, speed, drivingStyle, radius, missionFlags) end

--- p2 tend to be 16, 17 or 1 p3 to p7 tend to be 0.0
--- @param ped integer
--- @param target integer
--- @param p2 any
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
function TaskChatToPed(ped, target, p2, p3, p4, p5, p6, p7) end

--- @param p0 any
function TaskClearDefensiveArea(p0) end

--- Not clear what it actually does, but here's how script uses it - if (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...) { if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID())) { TASK::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID()); } ... } Another one where it doesn't "look" at current player - TASK::TASK_PLAY_ANIM(l_3ED, "missheist_agency2aig_2", "look_at_phone_a", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0); PED::_2208438012482A1A(l_3ED, 0, 0); TASK::TASK_CLEAR_LOOK_AT(l_3ED);
--- @param ped integer
function TaskClearLookAt(ped) end

--- Climbs or vaults the nearest thing.
--- @param ped integer
--- @param unused boolean
function TaskClimb(ped, unused) end

--- @param ped integer
--- @param p1 integer
function TaskClimbLadder(ped, p1) end

--- Despite its name, it only attacks ONE hated target. The one closest hated target. p2 seems to be always 0
--- @param ped integer
--- @param radius number
--- @param p2 integer
function TaskCombatHatedTargetsAroundPed(ped, radius, p2) end

--- @param p0 any
--- @param p1 number
--- @param p2 any
--- @param p3 any
function TaskCombatHatedTargetsAroundPedTimed(p0, p1, p2, p3) end

--- Despite its name, it only attacks ONE hated target. The one closest to the specified position.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 any
function TaskCombatHatedTargetsInArea(ped, x, y, z, radius, p5) end

--- Makes the specified ped attack the target ped. p2 should be 0 p3 should be 16
--- @param ped integer
--- @param targetPed integer
--- @param p2 integer
--- @param p3 integer
function TaskCombatPed(ped, targetPed, p2, p3) end

--- Makes the specified ped attack the target ped. p2 should be 0 p3 should be 16 **This is the server-side RPC native equivalent of the client native TASK_COMBAT_PED.**
--- @param ped integer
--- @param targetPed integer
--- @param p2 integer
--- @param p3 integer
function TaskCombatPed(ped, targetPed, p2, p3) end

--- @param p0 any
--- @param ped integer
--- @param p2 integer
--- @param p3 any
function TaskCombatPedTimed(p0, ped, p2, p3) end

--- The ped will act like NPC's involved in a gunfight. The ped will squat down with their heads held in place and look around.
--- @param ped integer
--- @param duration integer
function TaskCower(ped, duration) end

--- Example: TASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby}); Needs working example. Doesn't seem to do anything. I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common. I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target. I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
--- @param driverPed integer
--- @param targetPed integer
--- @param targetVehicle integer
--- @param targetX number
--- @param targetY number
--- @param targetZ number
--- @param distanceToShoot number
--- @param pedAccuracy integer
--- @param p8 boolean
--- @param firingPattern integer
function TaskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) end

--- Example: TASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby}); Needs working example. Doesn't seem to do anything. I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common. I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target. I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not. **This is the server-side RPC native equivalent of the client native TASK_DRIVE_BY.**
--- @param driverPed integer
--- @param targetPed integer
--- @param targetVehicle integer
--- @param targetX number
--- @param targetY number
--- @param targetZ number
--- @param distanceToShoot number
--- @param pedAccuracy integer
--- @param p8 boolean
--- @param firingPattern integer
function TaskDriveBy(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern) end

--- speed 1.0 = walk, 2.0 = run p5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle p6 is always 0
--- @param ped integer
--- @param vehicle integer
--- @param timeout integer
--- @param seatIndex integer
--- @param speed number
--- @param flag integer
--- @param p6 any
function TaskEnterVehicle(ped, vehicle, timeout, seatIndex, speed, flag, p6) end

--- speed 1.0 = walk, 2.0 = run p5 1 = normal, 3 = teleport to vehicle, 8 = normal/carjack ped from seat, 16 = teleport directly into vehicle p6 is always 0 **This is the server-side RPC native equivalent of the client native TASK_ENTER_VEHICLE.**
--- @param ped integer
--- @param vehicle integer
--- @param timeout integer
--- @param seatIndex integer
--- @param speed number
--- @param flag integer
--- @param p6 any
function TaskEnterVehicle(ped, vehicle, timeout, seatIndex, speed, flag, p6) end

--- @param vehicle integer
function TaskEveryoneLeaveVehicle(vehicle) end

--- TASK_EVERYONE_LEAVE_VEHICLE **This is the server-side RPC native equivalent of the client native TASK_EVERYONE_LEAVE_VEHICLE.**
--- @param vehicle integer
function TaskEveryoneLeaveVehicle(vehicle) end

--- @param p0 any
--- @param p1 any
--- @param p2 number
--- @param p3 number
--- @param p4 number
function TaskExitCover(p0, p1, p2, p3, p4) end

--- Adds a new point to the current point route; a maximum of 8 points can be added. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
--- @param x number
--- @param y number
--- @param z number
function TaskExtendRoute(x, y, z) end

--- Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
function TaskFlushRoute() end

--- Sometimes a path may not be able to be found. This could happen because there simply isn't any way to get there, or maybe a bunch of dynamic objects have blocked the way, or maybe the destination is too far away. In this case the ped will simply stand still. To identify when this has happened, you can use GET_NAVMESH_ROUTE_RESULT. This will help you find situations where peds cannot get to their target. cpp enum eNavScriptFlags { // Default flag ENAV_DEFAULT = 0, // Will ensure the ped continues to move whilst waiting for the path // to be found, and will not slow down at the end of their route. ENAV_NO_STOPPING = 1, // Performs a slide-to-coord at the end of the task. This requires that the // accompanying NAVDATA structure has the 'SlideToCoordHeading' member set correctly. ENAV_ADV_SLIDE_TO_COORD_AND_ACHIEVE_HEADING_AT_END = 2, // If the navmesh is not loaded in under the target position, then this will // cause the ped to get as close as is possible on whatever navmesh is loaded. // The navmesh must still be loaded at the path start. ENAV_GO_FAR_AS_POSSIBLE_IF_TARGET_NAVMESH_NOT_LOADED = 4, // Will allow navigation underwater - by default this is not allowed. ENAV_ALLOW_SWIMMING_UNDERWATER = 8, // Will only allow navigation on pavements. If the path starts or ends off // the pavement, the command will fail. Likewise if no pavement-only route // can be found even although the start and end are on pavement. ENAV_KEEP_TO_PAVEMENTS = 16, // Prevents the path from entering water at all. ENAV_NEVER_ENTER_WATER = 32, // Disables object-avoidance for this path. The ped may still make minor // steering adjustments to avoid objects, but will not pathfind around them. ENAV_DONT_AVOID_OBJECTS = 64, // Specifies that the navmesh route will only be able to traverse up slopes // which are under the angle specified, in the MaxSlopeNavigable member of the accompanying NAVDATA structure. ENAV_ADVANCED_USE_MAX_SLOPE_NAVIGABLE = 128, // Unused. ENAV_STOP_EXACTLY = 512, // The entity will look ahead in its path for a longer distance to make the // walk/run start go more in the right direction. ENAV_ACCURATE_WALKRUN_START = 1024, // Disables ped-avoidance for this path while we move. ENAV_DONT_AVOID_PEDS = 2048, // If target pos is inside the boundingbox of an object it will otherwise be pushed out. ENAV_DONT_ADJUST_TARGET_POSITION = 4096, // Turns off the default behaviour, which is to stop exactly at the target position. // Occasionally this can cause footsliding/skating problems. ENAV_SUPPRESS_EXACT_STOP = 8192, // Prevents the path-search from finding paths outside of this search distance. // This can be used to prevent peds from finding long undesired routes. ENAV_ADVANCED_USE_CLAMP_MAX_SEARCH_DISTANCE = 16384, // Pulls out the paths from edges at corners for a longer distance, to prevent peds walking into stuff. ENAV_PULL_FROM_EDGE_EXTRA = 32768 };
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param moveBlendRatio number
--- @param time integer
--- @param radius number
--- @param flags integer
--- @param finalHeading number
function TaskFollowNavMeshToCoord(ped, x, y, z, moveBlendRatio, time, radius, flags, finalHeading) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param timeout integer
--- @param unkFloat number
--- @param unkInt integer
--- @param unkX number
--- @param unkY number
--- @param unkZ number
--- @param unk_40000f number
function TaskFollowNavMeshToCoordAdvanced(ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f) end

--- Makes the ped go on a point route. cpp enum eFollowPointRouteMode { TICKET_SINGLE = 0, TICKET_RETURN = 1, TICKET_SEASON = 2, TICKET_LOOP = 3 } This native is often times used with `TASK_FLUSH_ROUTE` and `TASK_EXTEND_ROUTE`
--- @param ped integer
--- @param speed number
--- @param routeMode integer
function TaskFollowPointRoute(ped, speed, routeMode) end

--- p6 always -1 p7 always 10.0 p8 always 1
--- @param ped integer
--- @param entity integer
--- @param offsetX number
--- @param offsetY number
--- @param offsetZ number
--- @param movementSpeed number
--- @param timeout integer
--- @param stoppingRange number
--- @param persistFollowing boolean
function TaskFollowToOffsetOfEntity(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function TaskFollowWaypointRecording(p0, p1, p2, p3, p4) end

--- See `FORCE_PED_MOTION_STATE`
--- @param ped integer
--- @param state integer
--- @param p2 boolean
function TaskForceMotionState(ped, state, p2) end

--- @param ped integer
--- @param boat integer
function TaskGetOffBoat(ped, boat) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param timeout integer
--- @param targetHeading number
--- @param distanceToSlide number
function TaskGoStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide) end

--- TASK_GO_STRAIGHT_TO_COORD **This is the server-side RPC native equivalent of the client native TASK_GO_STRAIGHT_TO_COORD.**
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param timeout integer
--- @param targetHeading number
--- @param distanceToSlide number
function TaskGoStraightToCoord(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide) end

--- @param entity1 integer
--- @param entity2 integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 any
function TaskGoStraightToCoordRelativeToEntity(entity1, entity2, p2, p3, p4, p5, p6) end

--- The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path. If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination. If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming. The ped will stop aiming when he is closer than distanceToStopAt to goToLocation. I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true. I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0. Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation. The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation). Example: enum AimFlag { AimAtFocusLocation, AimAtGoToLocation }; Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding. Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding. Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground // 1st example TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/); // 2nd example TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/); 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1. 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
--- @param pedHandle integer
--- @param goToLocationX number
--- @param goToLocationY number
--- @param goToLocationZ number
--- @param focusLocationX number
--- @param focusLocationY number
--- @param focusLocationZ number
--- @param speed number
--- @param shootAtEnemies boolean
--- @param distanceToStopAt number
--- @param noRoadsDistance number
--- @param unkTrue boolean
--- @param unkFlag integer
--- @param aimingFlag integer
--- @param firingPattern integer
function TaskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern) end

--- Tells a ped to go to a coord by any means. cpp enum eDrivingMode { DF_StopForCars = 1, DF_StopForPeds = 2, DF_SwerveAroundAllCars = 4, DF_SteerAroundStationaryCars = 8, DF_SteerAroundPeds = 16, DF_SteerAroundObjects = 32, DF_DontSteerAroundPlayerPed = 64, DF_StopAtLights = 128, DF_GoOffRoadWhenAvoiding = 256, DF_DriveIntoOncomingTraffic = 512, DF_DriveInReverse = 1024, // If pathfinding fails, cruise randomly instead of going on a straight line DF_UseWanderFallbackInsteadOfStraightLine = 2048, DF_AvoidRestrictedAreas = 4096, // These only work on MISSION_CRUISE DF_PreventBackgroundPathfinding = 8192, DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384, DF_UseShortCutLinks = 262144, DF_ChangeLanesAroundObstructions = 524288, // cruise tasks ignore this anyway--only used for goto's DF_UseSwitchedOffNodes = 2097152, // if you're going to be primarily driving off road DF_PreferNavmeshRoute = 4194304, // Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly DF_PlaneTaxiMode = 8388608, DF_ForceStraightLine = 16777216, DF_UseStringPullingAtJunctions = 33554432, DF_AvoidHighways = 536870912, DF_ForceJoinInRoadDirection = 1073741824, // Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions DRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions, // Obey lights too // Like the above, but doesn't steer around anything in its way - will only wait instead. DRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch. // Default "alerted" driving mode. drives around everything, doesn't obey lights DRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars, // Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering DRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions, // Smashes through everything DRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks // Drives normally except for the fact that it ignores lights DRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions // Try to swerve around everything, but stop for lights if necessary DRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars // Swerve around cars, be careful around peds, and stop for lights DRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars };
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param fMoveBlendRatio number
--- @param vehicle integer
--- @param bUseLongRangeVehiclePathing boolean
--- @param drivingFlags integer
--- @param fMaxRangeToShootTargets number
function TaskGoToCoordAnyMeans(ped, x, y, z, fMoveBlendRatio, vehicle, bUseLongRangeVehiclePathing, drivingFlags, fMaxRangeToShootTargets) end

--- Tells a ped to go to a coord by any means. cpp enum eDrivingMode { DF_StopForCars = 1, DF_StopForPeds = 2, DF_SwerveAroundAllCars = 4, DF_SteerAroundStationaryCars = 8, DF_SteerAroundPeds = 16, DF_SteerAroundObjects = 32, DF_DontSteerAroundPlayerPed = 64, DF_StopAtLights = 128, DF_GoOffRoadWhenAvoiding = 256, DF_DriveIntoOncomingTraffic = 512, DF_DriveInReverse = 1024, // If pathfinding fails, cruise randomly instead of going on a straight line DF_UseWanderFallbackInsteadOfStraightLine = 2048, DF_AvoidRestrictedAreas = 4096, // These only work on MISSION_CRUISE DF_PreventBackgroundPathfinding = 8192, DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384, DF_UseShortCutLinks = 262144, DF_ChangeLanesAroundObstructions = 524288, // cruise tasks ignore this anyway--only used for goto's DF_UseSwitchedOffNodes = 2097152, // if you're going to be primarily driving off road DF_PreferNavmeshRoute = 4194304, // Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly DF_PlaneTaxiMode = 8388608, DF_ForceStraightLine = 16777216, DF_UseStringPullingAtJunctions = 33554432, DF_AvoidHighways = 536870912, DF_ForceJoinInRoadDirection = 1073741824, // Standard driving mode. stops for cars, peds, and lights, goes around stationary obstructions DRIVINGMODE_STOPFORCARS = 786603, // DF_StopForCars|DF_StopForPeds|DF_SteerAroundObjects|DF_SteerAroundStationaryCars|DF_StopAtLights|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions, // Obey lights too // Like the above, but doesn't steer around anything in its way - will only wait instead. DRIVINGMODE_STOPFORCARS_STRICT = 262275, // DF_StopForCars|DF_StopForPeds|DF_StopAtLights|DF_UseShortCutLinks, // Doesn't deviate an inch. // Default "alerted" driving mode. drives around everything, doesn't obey lights DRIVINGMODE_AVOIDCARS = 786469, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars, // Very erratic driving. difference between this and AvoidCars is that it doesn't use the brakes at ALL to help with steering DRIVINGMODE_AVOIDCARS_RECKLESS = 786468, // DF_SwerveAroundAllCars|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions, // Smashes through everything DRIVINGMODE_PLOUGHTHROUGH = 262144, // DF_UseShortCutLinks // Drives normally except for the fact that it ignores lights DRIVINGMODE_STOPFORCARS_IGNORELIGHTS = 786475, // DF_StopForCars|DF_SteerAroundStationaryCars|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions // Try to swerve around everything, but stop for lights if necessary DRIVINGMODE_AVOIDCARS_OBEYLIGHTS = 786597, // DF_SwerveAroundAllCars|DF_StopAtLights|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars // Swerve around cars, be careful around peds, and stop for lights DRIVINGMODE_AVOIDCARS_STOPFORPEDS_OBEYLIGHTS = 786599 // DF_SwerveAroundAllCars|DF_StopAtLights|DF_StopForPeds|DF_SteerAroundObjects|DF_UseShortCutLinks|DF_ChangeLanesAroundObstructions|DF_StopForCars }; **This is the server-side RPC native equivalent of the client native TASK_GO_TO_COORD_ANY_MEANS.**
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param fMoveBlendRatio number
--- @param vehicle integer
--- @param bUseLongRangeVehiclePathing boolean
--- @param drivingFlags integer
--- @param fMaxRangeToShootTargets number
function TaskGoToCoordAnyMeans(ped, x, y, z, fMoveBlendRatio, vehicle, bUseLongRangeVehiclePathing, drivingFlags, fMaxRangeToShootTargets) end

--- NativeDB Added Parameter 13: Any p12
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param p5 any
--- @param p6 boolean
--- @param walkingStyle integer
--- @param p8 number
--- @param p9 any
--- @param p10 any
--- @param p11 any
function TaskGoToCoordAnyMeansExtraParams(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11) end

--- NativeDB Added Parameter 14: Any p13
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param p5 any
--- @param p6 boolean
--- @param walkingStyle integer
--- @param p8 number
--- @param p9 any
--- @param p10 any
--- @param p11 any
--- @param p12 any
function TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12) end

--- Will make the ped move to a coordinate while aiming (and optionally shooting) at given coordinates.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param aimAtX number
--- @param aimAtY number
--- @param aimAtZ number
--- @param moveSpeed number
--- @param shoot boolean
--- @param p9 number
--- @param p10 number
--- @param p11 boolean
--- @param flags any
--- @param p13 boolean
--- @param firingPattern integer
function TaskGoToCoordWhileAimingAtCoord(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, shoot, p9, p10, p11, flags, p13, firingPattern) end

--- Will make the ped move to a coordinate while aiming (and optionally shooting) at the given entity. cpp enum eFiringPatternHashes { FIRING_PATTERN_DEFAULT = 0, FIRING_PATTERN_BURST_FIRE = -687903391, FIRING_PATTERN_BURST_FIRE_DRIVEBY = -753768974, FIRING_PATTERN_FULL_AUTO = -957453492, FIRING_PATTERN_SINGLE_SHOT = 1566631136, FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 2055493265, FIRING_PATTERN_BURST_FIRE_HELI = -1857128337, FIRING_PATTERN_SHORT_BURSTS = 445831135, FIRING_PATTERN_BURST_FIRE_MICRO = 1122960381, FIRING_PATTERN_SLOW_FIRE_TANK = -490063247, FIRING_PATTERN_TAMPA_MORTAR = -1842093953 }
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param entityToAimAt integer
--- @param moveSpeed number
--- @param shoot boolean
--- @param targetRadius number
--- @param slowDistance number
--- @param useNavMesh boolean
--- @param navFlags integer
--- @param instantBlendAtAim boolean
--- @param firingPattern integer
--- @param time integer
function TaskGoToCoordWhileAimingAtEntity(ped, x, y, z, entityToAimAt, moveSpeed, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendAtAim, firingPattern, time) end

--- The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0 Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet. Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0) Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
--- @param entity integer
--- @param target integer
--- @param duration integer
--- @param distance number
--- @param speed number
--- @param p5 number
--- @param p6 integer
function TaskGoToEntity(entity, target, duration, distance, speed, p5, p6) end

--- The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0 Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet. Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0) Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored). **This is the server-side RPC native equivalent of the client native TASK_GO_TO_ENTITY.**
--- @param entity integer
--- @param target integer
--- @param duration integer
--- @param distance number
--- @param speed number
--- @param p5 number
--- @param p6 integer
function TaskGoToEntity(entity, target, duration, distance, speed, p5, p6) end

--- eg TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0); ped = Ped you want to perform this task. target = the Entity they should aim at. distanceToStopAt = distance from the target, where the ped should stop to aim. StartAimingDist = distance where the ped should start to aim.
--- @param ped integer
--- @param target integer
--- @param distanceToStopAt number
--- @param StartAimingDist number
function TaskGotoEntityAiming(ped, target, distanceToStopAt, StartAimingDist) end

--- @param ped integer
--- @param p1 any
--- @param p2 any
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
function TaskGotoEntityOffset(ped, p1, p2, x, y, z, duration) end

--- @param ped integer
--- @param entity integer
--- @param duration integer
--- @param xOffset number
--- @param yOffset number
--- @param zOffset number
--- @param moveBlendRatio number
--- @param useNavmesh boolean
function TaskGotoEntityOffsetXy(ped, entity, duration, xOffset, yOffset, zOffset, moveBlendRatio, useNavmesh) end

--- @param p0 any
--- @param p1 any
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 number
--- @param p8 number
--- @param p9 boolean
--- @param p10 boolean
--- @param p11 any
function TaskGoToEntityWhileAimingAtCoord(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) end

--- shootatEntity: If true, peds will shoot at Entity till it is dead. If false, peds will just walk till they reach the entity and will cease shooting.
--- @param ped integer
--- @param entityToWalkTo integer
--- @param entityToAimAt integer
--- @param speed number
--- @param shootatEntity boolean
--- @param p5 number
--- @param p6 number
--- @param p7 boolean
--- @param p8 boolean
--- @param firingPattern integer
function TaskGoToEntityWhileAimingAtEntity(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 any
function TaskGuardAssignedDefensiveArea(p0, p1, p2, p3, p4, p5, p6) end

--- From re_prisonvanbreak: TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
--- @param p0 integer
--- @param p1 number
--- @param p2 number
--- @param p3 boolean
function TaskGuardCurrentPosition(p0, p1, p2, p3) end

--- p0 - Guessing PedID p1, p2, p3 - XYZ? p4 - ??? p5 - Maybe the size of sphere from XYZ? p6 - ??? p7, p8, p9 - XYZ again? p10 - Maybe the size of sphere from second XYZ?
--- @param p0 integer
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 any
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
function TaskGuardSphereDefensiveArea(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) end

--- In the scripts, p3 was always -1. p3 seems to be duration or timeout of turn animation. Also facingPed can be 0 or -1 so ped will just raise hands up.
--- @param ped integer
--- @param duration integer
--- @param facingPed integer
--- @param p3 integer
--- @param p4 boolean
function TaskHandsUp(ped, duration, facingPed, p3, p4) end

--- In the scripts, p3 was always -1. p3 seems to be duration or timeout of turn animation. Also facingPed can be 0 or -1 so ped will just raise hands up. **This is the server-side RPC native equivalent of the client native TASK_HANDS_UP.**
--- @param ped integer
--- @param duration integer
--- @param facingPed integer
--- @param p3 integer
--- @param p4 boolean
function TaskHandsUp(ped, duration, facingPed, p3, p4) end

--- Ped pilot should be in a heli. EntityToFollow can be a vehicle or Ped. x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane) NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
--- @param pilot integer
--- @param entityToFollow integer
--- @param x number
--- @param y number
--- @param z number
function TaskHeliChase(pilot, entityToFollow, x, y, z) end

--- NativeDB Introduced: v1290
--- @param pilot integer
--- @param heli1 integer
--- @param heli2 integer
--- @param p3 number
--- @param p4 number
--- @param p5 number
function TaskHeliEscortHeli(pilot, heli1, heli2, p3, p4, p5) end

--- All parameters except ped, heli and speed are optional, with `pedTarget`, `vehicleTarget`, `x`, `y`, `z` being dependent on `missionType` (ie. Attack/Flee mission types require a target ped/vehicle, whereas GoTo mission types require either `x`, `y`, `z` or a target ped/vehicle). If you don't want to use a parameter; pass `0.0f` for `x`, `y` and `z`, `0` for `pedTarget`, `vehicleTarget`, `0` for other int parameters, and `-1.0f` for the remaining float parameters. cpp enum eHeliMissionFlags { None = 0, AttainRequestedOrientation = 1, DontModifyOrientation = 2, DontModifyPitch = 4, DontModifyThrottle = 8, DontModifyRoll = 16, LandOnArrival = 32, DontDoAvoidance = 64, StartEngineImmediately = 128, ForceHeightMapAvoidance = 256, DontClampProbesToDestination = 512, EnableTimeslicingWhenPossible = 1024, CircleOppositeDirection = 2048, MaintainHeightAboveTerrain = 4096, IgnoreHiddenEntitiesDuringLand = 8192, DisableAllHeightMapAvoidance = 16384, // ForceHeightMapAvoidance | DontDoAvoidance HeightMapOnlyAvoidance = 320, }
--- @param ped integer
--- @param heli integer
--- @param vehicleTarget integer
--- @param pedTarget integer
--- @param x number
--- @param y number
--- @param z number
--- @param missionType integer
--- @param speed number
--- @param radius number
--- @param heading number
--- @param height number
--- @param minHeight number
--- @param slowDist number
--- @param missionFlags integer
function TaskHeliMission(ped, heli, vehicleTarget, pedTarget, x, y, z, missionType, speed, radius, heading, height, minHeight, slowDist, missionFlags) end

--- Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4). v350: Ped ped, bool unused v678: Ped ped, bool unused, bool flag1, bool flag2 flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true. NativeDB Added Parameter 3: Any p2 NativeDB Added Parameter 4: Any p3
--- @param ped integer
--- @param unused boolean
function TaskJump(ped, unused) end

--- Flags are the same flags used in `TASK_LEAVE_VEHICLE`
--- @param ped integer
--- @param p1 integer
--- @param flags integer
function TaskLeaveAnyVehicle(ped, p1, flags) end

--- Flags are the same flags used in `TASK_LEAVE_VEHICLE` **This is the server-side RPC native equivalent of the client native TASK_LEAVE_ANY_VEHICLE.**
--- @param ped integer
--- @param p1 integer
--- @param flags integer
function TaskLeaveAnyVehicle(ped, p1, flags) end

--- Flags from decompiled scripts: 0 = normal exit and closes door. 1 = normal exit and closes door. 16 = teleports outside, door kept closed. (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally) 64 = normal exit and closes door, maybe a bit slower animation than 0. 256 = normal exit but does not close the door. 4160 = ped is throwing himself out, even when the vehicle is still. 262144 = ped moves to passenger seat first, then exits normally Others to be tried out: 320, 512, 131072.
--- @param ped integer
--- @param vehicle integer
--- @param flags integer
function TaskLeaveVehicle(ped, vehicle, flags) end

--- Flags from decompiled scripts: 0 = normal exit and closes door. 1 = normal exit and closes door. 16 = teleports outside, door kept closed. (This flag does not seem to work for the front seats in buses, NPCs continue to exit normally) 64 = normal exit and closes door, maybe a bit slower animation than 0. 256 = normal exit but does not close the door. 4160 = ped is throwing himself out, even when the vehicle is still. 262144 = ped moves to passenger seat first, then exits normally Others to be tried out: 320, 512, 131072. **This is the server-side RPC native equivalent of the client native TASK_LEAVE_VEHICLE.**
--- @param ped integer
--- @param vehicle integer
--- @param flags integer
function TaskLeaveVehicle(ped, vehicle, flags) end

--- @param entity integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param p5 any
--- @param p6 any
function TaskLookAtCoord(entity, x, y, z, duration, p5, p6) end

--- param3: duration in ms, use -1 to look forever param4: using 2048 is fine param5: using 3 is fine
--- @param ped integer
--- @param lookAt integer
--- @param duration integer
--- @param unknown1 integer
--- @param unknown2 integer
function TaskLookAtEntity(ped, lookAt, duration, unknown1, unknown2) end

--- Example: TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
--- @param ped integer
--- @param p1 string
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 number
--- @param p6 number
--- @param p7 number
--- @param p8 any
--- @param p9 number
--- @param p10 boolean
--- @param animDict string
--- @param flags integer
function TaskMoveNetworkAdvancedByName(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags) end

--- Example: TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
--- @param ped integer
--- @param task string
--- @param multiplier number
--- @param p3 boolean
--- @param animDict string
--- @param flags integer
function TaskMoveNetworkByName(ped, task, multiplier, p3, animDict, flags) end

--- Used only once in the scripts (am_mp_nightclub) Used only once in the scripts (am_mp_nightclub) NativeDB Introduced: v1493
--- @param ped integer
--- @param p1 string
--- @param p3 number
--- @param p4 boolean
--- @param animDict string
--- @param flags integer
--- @return any
function TaskMoveNetworkByNameWithInitParams(ped, p1, p3, p4, animDict, flags) end

--- The given ped will try to open the nearest door to 'seat'. Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
--- @param ped integer
--- @param vehicle integer
--- @param timeOut integer
--- @param seat integer
--- @param speed number
function TaskOpenVehicleDoor(ped, vehicle, timeOut, seat, speed) end

--- This function has a third parameter as well (bool). Second parameter is unused. seconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed NativeDB Added Parameter 3: BOOL p2
--- @param ped integer
--- @param p1 boolean
function TaskParachute(ped, p1) end

--- makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
function TaskParachuteToTarget(ped, x, y, z) end

--- After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts: "miss_Tower_01" (this went from 01 - 10) "miss_Ass0" (0, 4, 6, 3) "MISS_PATROL_8" I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed. As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach. From the scripts TASK::OPEN_PATROL_ROUTE("miss_Ass0"); TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000)); TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000)); TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000)); TASK::ADD_PATROL_ROUTE_LINK(0, 1); TASK::ADD_PATROL_ROUTE_LINK(1, 2); TASK::ADD_PATROL_ROUTE_LINK(2, 0); TASK::CLOSE_PATROL_ROUTE(); TASK::CREATE_PATROL_ROUTE();
--- @param ped integer
--- @param p1 string
--- @param p2 any
--- @param p3 boolean
--- @param p4 boolean
function TaskPatrol(ped, p1, p2, p3, p4) end

--- This tasks the ped to do nothing for the specified amount of miliseconds. This is useful if you want to add a delay between tasks when using a sequence task.
--- @param ped integer
--- @param ms integer
function TaskPause(ped, ms) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param duration number
function TaskPedSlideToCoord(ped, x, y, z, heading, duration) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param p5 number
--- @param p6 number
function TaskPedSlideToCoordHdgRate(ped, x, y, z, heading, p5, p6) end

--- For an example on how to use this please refer to OPEN_SEQUENCE_TASK
--- @param ped integer
--- @param taskSequenceId integer
function TaskPerformSequence(ped, taskSequenceId) end

--- @param ped integer
--- @param taskIndex integer
--- @param progress1 integer
--- @param progress2 integer
function TaskPerformSequenceFromProgress(ped, taskIndex, progress1, progress2) end

--- For an example on how to use this please refer to \[OPEN_SEQUENCE_TASK]\(#\_0xE8854A4326B9E12B
--- @param ped integer
--- @param taskSequenceId integer
function TaskPerformSequenceLocally(ped, taskSequenceId) end

--- @param pilot integer
--- @param entityToFollow integer
--- @param x number
--- @param y number
--- @param z number
function TaskPlaneChase(pilot, entityToFollow, x, y, z) end

--- NativeDB Introduced: v1290
--- @param ped integer
--- @param vehicle integer
--- @param p2 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @param p6 any
--- @param p7 any
--- @param p8 any
--- @param p9 any
function TaskPlaneGotoPreciseVtol(ped, vehicle, p2, p3, p4, p5, p6, p7, p8, p9) end

--- @param pilot integer
--- @param plane integer
--- @param runwayStartX number
--- @param runwayStartY number
--- @param runwayStartZ number
--- @param runwayEndX number
--- @param runwayEndY number
--- @param runwayEndZ number
function TaskPlaneLand(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ) end

--- EDITED (7/13/2017) NOTE: If you want air combat, AI::TASK_COMBAT_PED (while your pilot is in an aircraft) also does the same thing as this native. DESCRIPTION: Ever wish your buddy could shoot down one of your enemies for you? Ever wanted an auto-pilot? Well look no further! This is the native for you! (Ped intelligence may vary) USAGE: -- REQUIRED -- • pilot = The ped flying the aircraft. • aircraft = The aircraft the pilot is flying -- OPTIONAL -- [atleast 1 must be assigned] • targetVehicle = The vehicle the pilot will target. • targetPed = The ped the pilot will target. • destinationX, destinationY, destinationZ = The location the pilot will target. -- LOGIC -- • missionFlag = The type of mission. pastebin.com/R8x73dbv • angularDrag = The higher the value, the slower the plane will rotate. Value ranges from 0 - Infinity. • unk = Set to 0, and you'll be fine. • targetHeading = The target angle (from world space north) that the pilot will try to acheive before executing an attack/landing. • maxZ = Maximum Z coordinate height for flying. • minZ = Minimum Z coordinate height for flying. Z: 2,700 is the default max height a pilot will be able to fly. Anything greater and he will fly downward until reaching 2,700 again. Mission Types (incase you don't like links..): 0 = None 1 = Unk 2 = CTaskVehicleRam 3 = CTaskVehicleBlock 4 = CTaskVehicleGoToPlane 5 = CTaskVehicleStop 6 = CTaskVehicleAttack 7 = CTaskVehicleFollow 8 = CTaskVehicleFleeAirborne 9 = CTaskVehicleCircle 10 = CTaskVehicleEscort 15 = CTaskVehicleFollowRecording 16 = CTaskVehiclePoliceBehaviour 17 = CTaskVehicleCrash Example C#: Function.Call(Hash.TASK_PLANE_MISSION, pilot, vehicle, 0, Game.Player.Character, 0, 0, 0, 6, 0f, 0f, 0f, 2500.0f, -1500f); Example C++ AI::TASK_PLANE_MISSION(pilot, vehicle, 0, PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_INDEX()), 0, 0, 0, 6, 0.0, 0.0, 0.0, 2500.0, -1500.0); [DEPRECATED] EXAMPLE USAGE: pastebin.com/gx7Finsk NativeDB Added Parameter 14: Any p13
--- @param pilot integer
--- @param aircraft integer
--- @param targetVehicle integer
--- @param targetPed integer
--- @param destinationX number
--- @param destinationY number
--- @param destinationZ number
--- @param missionFlag integer
--- @param angularDrag number
--- @param unk number
--- @param targetHeading number
--- @param maxZ number
--- @param minZ number
function TaskPlaneMission(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, unk, targetHeading, maxZ, minZ) end

--- The given ped will try to drive the plane to the given coordinates and will then drive around the given coords (the plane will form 8s on the ground)
--- @param pilot integer
--- @param aircraft integer
--- @param xPos number
--- @param yPos number
--- @param zPos number
--- @param fCruiseSpeed number
--- @param fTargetReachedDist number
function TaskPlaneTaxi(pilot, aircraft, xPos, yPos, zPos, fCruiseSpeed, fTargetReachedDist) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
function TaskPlantBomb(ped, x, y, z, heading) end

--- Animations list cpp enum eScriptedAnimFlags { AF_LOOPING = 1, AF_HOLD_LAST_FRAME = 2, AF_REPOSITION_WHEN_FINISHED = 4, AF_NOT_INTERRUPTABLE = 8, AF_UPPERBODY = 16, AF_SECONDARY = 32, AF_REORIENT_WHEN_FINISHED = 64, AF_ABORT_ON_PED_MOVEMENT = 128, AF_ADDITIVE = 256, AF_TURN_OFF_COLLISION = 512, AF_OVERRIDE_PHYSICS = 1024, AF_IGNORE_GRAVITY = 2048, AF_EXTRACT_INITIAL_OFFSET = 4096, AF_EXIT_AFTER_INTERRUPTED = 8192, AF_TAG_SYNC_IN = 16384, AF_TAG_SYNC_OUT = 32768, AF_TAG_SYNC_CONTINUOUS = 65536, AF_FORCE_START = 131072, AF_USE_KINEMATIC_PHYSICS = 262144, AF_USE_MOVER_EXTRACTION = 524288, AF_HIDE_WEAPON = 1048576, AF_ENDS_IN_DEAD_POSE = 2097152, AF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304, AF_DONT_EXIT_ON_DEATH = 8388608, AF_ABORT_ON_WEAPON_DAMAGE = 16777216, AF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432, AF_PROCESS_ATTACHMENTS_ON_START = 67108864, AF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728, AF_USE_ALTERNATIVE_FP_ANIM = 268435456, AF_BLENDOUT_WRT_LAST_FRAME = 536870912, AF_USE_FULL_BLENDING = 1073741824 }
--- @param ped integer
--- @param animDictionary string
--- @param animationName string
--- @param blendInSpeed number
--- @param blendOutSpeed number
--- @param duration integer
--- @param flag integer
--- @param playbackRate number
--- @param lockX boolean
--- @param lockY boolean
--- @param lockZ boolean
function TaskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) end

--- Animations list cpp enum eScriptedAnimFlags { AF_LOOPING = 1, AF_HOLD_LAST_FRAME = 2, AF_REPOSITION_WHEN_FINISHED = 4, AF_NOT_INTERRUPTABLE = 8, AF_UPPERBODY = 16, AF_SECONDARY = 32, AF_REORIENT_WHEN_FINISHED = 64, AF_ABORT_ON_PED_MOVEMENT = 128, AF_ADDITIVE = 256, AF_TURN_OFF_COLLISION = 512, AF_OVERRIDE_PHYSICS = 1024, AF_IGNORE_GRAVITY = 2048, AF_EXTRACT_INITIAL_OFFSET = 4096, AF_EXIT_AFTER_INTERRUPTED = 8192, AF_TAG_SYNC_IN = 16384, AF_TAG_SYNC_OUT = 32768, AF_TAG_SYNC_CONTINUOUS = 65536, AF_FORCE_START = 131072, AF_USE_KINEMATIC_PHYSICS = 262144, AF_USE_MOVER_EXTRACTION = 524288, AF_HIDE_WEAPON = 1048576, AF_ENDS_IN_DEAD_POSE = 2097152, AF_ACTIVATE_RAGDOLL_ON_COLLISION = 4194304, AF_DONT_EXIT_ON_DEATH = 8388608, AF_ABORT_ON_WEAPON_DAMAGE = 16777216, AF_DISABLE_FORCED_PHYSICS_UPDATE = 33554432, AF_PROCESS_ATTACHMENTS_ON_START = 67108864, AF_EXPAND_PED_CAPSULE_FROM_SKELETON = 134217728, AF_USE_ALTERNATIVE_FP_ANIM = 268435456, AF_BLENDOUT_WRT_LAST_FRAME = 536870912, AF_USE_FULL_BLENDING = 1073741824 } **This is the server-side RPC native equivalent of the client native TASK_PLAY_ANIM.**
--- @param ped integer
--- @param animDictionary string
--- @param animationName string
--- @param blendInSpeed number
--- @param blendOutSpeed number
--- @param duration integer
--- @param flag integer
--- @param playbackRate number
--- @param lockX boolean
--- @param lockY boolean
--- @param lockZ boolean
function TaskPlayAnim(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ) end

--- Similar in functionality to `TASK_PLAY_ANIM`, except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified. Animations list
--- @param ped integer
--- @param animDictionary string
--- @param animationName string
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param blendInSpeed number
--- @param blendOutSpeed number
--- @param duration integer
--- @param flag any
--- @param animTime number
--- @param p14 any
--- @param p15 any
function TaskPlayAnimAdvanced(ped, animDictionary, animationName, posX, posY, posZ, rotX, rotY, rotZ, blendInSpeed, blendOutSpeed, duration, flag, animTime, p14, p15) end

--- Similar in functionality to `TASK_PLAY_ANIM`, except the position and rotation parameters let you specify the initial position and rotation of the task. The ped is teleported to the position specified. Animations list **This is the server-side RPC native equivalent of the client native TASK_PLAY_ANIM_ADVANCED.**
--- @param ped integer
--- @param animDictionary string
--- @param animationName string
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param rotX number
--- @param rotY number
--- @param rotZ number
--- @param blendInSpeed number
--- @param blendOutSpeed number
--- @param duration integer
--- @param flag any
--- @param animTime number
--- @param p14 any
--- @param p15 any
function TaskPlayAnimAdvanced(ped, animDictionary, animationName, posX, posY, posZ, rotX, rotY, rotZ, blendInSpeed, blendOutSpeed, duration, flag, animTime, p14, p15) end

--- Example from the scripts: TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0); ========================================================= ^^ No offense, but Idk how that would really help anyone. As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks. Known boneMaskTypes' "BONEMASK_HEADONLY" "BONEMASK_HEAD_NECK_AND_ARMS" "BONEMASK_HEAD_NECK_AND_L_ARM" "BONEMASK_HEAD_NECK_AND_R_ARM" p4 known args - 0.0f, 0.5f, 0.25f p5 known args - 0.0f, 0.25f p6 known args - 1 if a global if check is passed. p7 known args - 1 if a global if check is passed. The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode). =========================================================
--- @param ped integer
--- @param animDict string
--- @param animation string
--- @param boneMaskType string
--- @param p4 number
--- @param p5 number
--- @param p6 boolean
--- @param p7 boolean
function TaskPlayPhoneGestureAnimation(ped, animDict, animation, boneMaskType, p4, p5, p6, p7) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param timeout any
--- @param p5 boolean
--- @param p6 number
--- @param p7 boolean
--- @param p8 boolean
--- @param p9 any
--- @param p10 boolean
function TaskPutPedDirectlyIntoCover(ped, x, y, z, timeout, p5, p6, p7, p8, p9, p10) end

--- from armenian3.c4 TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
--- @param ped integer
--- @param meleeTarget integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
function TaskPutPedDirectlyIntoMelee(ped, meleeTarget, p2, p3, p4, p5) end

--- Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope. NativeDB Introduced: v1868
--- @param ped integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param minZ number
--- @param ropeId integer
--- @param clipset string
--- @param p10 any
function TaskRappelDownWall(ped, x1, y1, z1, x2, y2, z2, minZ, ropeId, clipset, p10) end

--- Only appears twice in the scripts. TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000); TASK::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);
--- @param ped integer
--- @param unused number
function TaskRappelFromHeli(ped, unused) end

--- @param ped integer
--- @param fleeTarget integer
function TaskReactAndFleePed(ped, fleeTarget) end

--- TASK_REACT_AND_FLEE_PED **This is the server-side RPC native equivalent of the client native TASK_REACT_AND_FLEE_PED.**
--- @param ped integer
--- @param fleeTarget integer
function TaskReactAndFleePed(ped, fleeTarget) end

--- The 2nd param (unused) is not implemented. ----------------------------------------------------------------------- The only occurrence I found in a R* script ("assassin_construction.ysc.c4"): if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) { TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1); }
--- @param ped integer
--- @param unused boolean
function TaskReloadWeapon(ped, unused) end

--- From fm_mission_controller.c: reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1); vVar28 = {0.094f, 0.02f, -0.005f}; vVar29 = {-92.24f, 63.64f, 150.24f}; func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1); set_entity_lod_dist(net_to_ent(uVar30), 500); attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1); Var31.imm_4 = 1065353216; Var31.imm_5 = 1065353216; Var31.imm_9 = 1065353216; Var31.imm_10 = 1065353216; Var31.imm_14 = 1065353216; Var31.imm_15 = 1065353216; Var31.imm_17 = 1040187392; Var31.imm_18 = 1040187392; Var31.imm_19 = -1; Var32.imm_4 = 1065353216; Var32.imm_5 = 1065353216; Var32.imm_9 = 1065353216; Var32.imm_10 = 1065353216; Var32.imm_14 = 1065353216; Var32.imm_15 = 1065353216; Var32.imm_17 = 1040187392; Var32.imm_18 = 1040187392; Var32.imm_19 = -1; Var31 = 1; Var31.imm_1 = "weapons@misc@jerrycan@mp_male"; Var31.imm_2 = "idle"; Var31.imm_20 = 1048633; Var31.imm_4 = 0.5f; Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R"); task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f); set_model_as_no_longer_needed(joaat("prop_ld_case_01")); remove_anim_dict("anim@heists@biolab@");
--- @param ped integer
--- @param p4 number
--- @param p5 number
--- @return any
--- @return any
--- @return any
function TaskScriptedAnimation(ped, p4, p5) end

--- @param ped integer
--- @param target integer
--- @param duration integer
--- @param p3 boolean
function TaskSeekCoverFromPed(ped, target, duration, p3) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param p5 boolean
function TaskSeekCoverFromPos(ped, x, y, z, duration, p5) end

--- from michael2: TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1); appears to be shorter variation from michael3: TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
--- @param ped integer
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param p7 any
--- @param p8 boolean
function TaskSeekCoverToCoords(ped, x1, y1, z1, x2, y2, z2, p7, p8) end

--- @param p0 any
--- @param p1 any
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 any
--- @param p6 boolean
function TaskSeekCoverToCoverPoint(p0, p1, p2, p3, p4, p5, p6) end

--- I cant believe I have to define this, this is one of the best natives. It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee. Since it is a task, every time the native is called the ped will stop for a moment.
--- @param ped integer
--- @param toggle boolean
function TaskSetBlockingOfNonTemporaryEvents(ped, toggle) end

--- p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
--- @param ped integer
--- @param p1 integer
function TaskSetDecisionMaker(ped, p1) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
function TaskSetSphereDefensiveArea(p0, p1, p2, p3, p4) end

--- @param ped integer
--- @param eventHandle integer
function TaskShockingEventReact(ped, eventHandle) end

--- Firing Pattern Hash Information: https://pastebin.com/Px036isB
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param firingPattern integer
function TaskShootAtCoord(ped, x, y, z, duration, firingPattern) end

--- Firing Pattern Hash Information: https://pastebin.com/Px036isB **This is the server-side RPC native equivalent of the client native TASK_SHOOT_AT_COORD.**
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
--- @param firingPattern integer
function TaskShootAtCoord(ped, x, y, z, duration, firingPattern) end

--- //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds Entity aimedentity; Player player = PLAYER::PLAYER_ID(); PLAYER::_GET_AIMED_ENTITY(player, &aimedentity); //bg is an array of peds TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO")); in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better. Firing Pattern Hash Information: https://pastebin.com/Px036isB
--- @param entity integer
--- @param target integer
--- @param duration integer
--- @param firingPattern integer
function TaskShootAtEntity(entity, target, duration, firingPattern) end

--- //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds Entity aimedentity; Player player = PLAYER::PLAYER_ID(); PLAYER::_GET_AIMED_ENTITY(player, &aimedentity); //bg is an array of peds TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO")); in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better. Firing Pattern Hash Information: https://pastebin.com/Px036isB **This is the server-side RPC native equivalent of the client native TASK_SHOOT_AT_ENTITY.**
--- @param entity integer
--- @param target integer
--- @param duration integer
--- @param firingPattern integer
function TaskShootAtEntity(entity, target, duration, firingPattern) end

--- Makes the specified ped shuffle to the next vehicle seat. The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle. NativeDB Added Parameter 3: Any p2
--- @param ped integer
--- @param vehicle integer
function TaskShuffleToNextVehicleSeat(ped, vehicle) end

--- NativeDB Added Parameter 2: BOOL p1
--- @param ped integer
function TaskSkyDive(ped) end

--- Makes the specified ped flee the specified distance from the specified position.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param time integer
--- @param p6 boolean
--- @param p7 boolean
function TaskSmartFleeCoord(ped, x, y, z, distance, time, p6, p7) end

--- Makes a ped run away from another ped (fleeTarget). distance = ped will flee this distance. fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
--- @param ped integer
--- @param fleeTarget integer
--- @param distance number
--- @param fleeTime any
--- @param p4 boolean
--- @param p5 boolean
function TaskSmartFleePed(ped, fleeTarget, distance, fleeTime, p4, p5) end

--- scenarioName example: "WORLD_HUMAN_GUARD_STAND"
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param scenarioName string
function TaskStandGuard(ped, x, y, z, heading, scenarioName) end

--- Makes the specified ped stand still for (time) milliseconds.
--- @param ped integer
--- @param time integer
function TaskStandStill(ped, time) end

--- The ped will move or warp to the position and heading given, then start the scenario passed. See `TASK_START_SCENARIO_IN_PLACE` for a list of scenarios.
--- @param ped integer
--- @param scenarioName string
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param timeToLeave integer
--- @param playIntro boolean
--- @param warp boolean
function TaskStartScenarioAtPosition(ped, scenarioName, x, y, z, heading, timeToLeave, playIntro, warp) end

--- Puts the ped into the given scenario immediately at their current location. List of scenario names or in `update/update.rpf/common/data/ai/scenarios.meta`.
--- @param ped integer
--- @param scenarioName string
--- @param timeToLeave integer
--- @param playIntroClip boolean
function TaskStartScenarioInPlace(ped, scenarioName, timeToLeave, playIntroClip) end

--- Makes the ped run to take cover
--- @param ped integer
function TaskStayInCover(ped) end

--- Stealth kill action name hashes: stealth kills can be found here: Grand Theft Auto V\common.rpf\data\action\stealth_kills.meta ... { "ACT_stealth_kill_a", "ACT_stealth_kill_weapon", "ACT_stealth_kill_b", "ACT_stealth_kill_c", "ACT_stealth_kill_d", "ACT_stealth_kill_a_gardener" } Only known script using this native: fbi4_prep2 EXAMPLE: ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key("AR_stealth_kill_a"), 1f, 0);ai::task_stealth_kill(iParam1, Local_252, gameplay::get_hash_key("AR_stealth_kill_knife"), 1f, 0); Also it may be important to note, that each time this task is called, it's followed by AI::CLEAR_PED_TASKS on the target
--- @param killer integer
--- @param target integer
--- @param actionType integer
--- @param p3 number
--- @param p4 any
function TaskStealthKill(killer, target, actionType, p3, p4) end

--- NativeDB Added Parameter 2: Any p1
--- @param ped integer
function TaskStopPhoneGestureAnimation(ped) end

--- Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc. p0 is always 0, p5 is always 1 p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native. Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after NativeDB Introduced: v2189
--- @param p0 any
--- @param submarine integer
--- @param x number
--- @param y number
--- @param z number
--- @param p5 any
function TaskSubmarineGotoAndStop(p0, submarine, x, y, z, p5) end

--- @param ped integer
--- @param p1 boolean
function TaskSwapWeapon(ped, p1) end

--- This function is called on peds in vehicles. anim: animation name p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high" p5: no idea what it does but is usually -1
--- @param ped integer
--- @param anim string
--- @param p2 string
--- @param p3 string
--- @param p4 string
--- @param p5 integer
--- @param vehicle integer
--- @param p7 number
--- @param p8 number
function TaskSweepAimEntity(ped, anim, p2, p3, p4, p5, vehicle, p7, p8) end

--- @param p0 any
--- @param p5 any
--- @param p6 number
--- @param p7 number
--- @param p8 number
--- @param p9 number
--- @param p10 number
--- @return any
--- @return any
--- @return any
--- @return any
function TaskSweepAimPosition(p0, p5, p6, p7, p8, p9, p10) end

--- TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
--- @param ped integer
--- @param scene integer
--- @param animDictionary string
--- @param animationName string
--- @param speed number
--- @param speedMultiplier number
--- @param duration integer
--- @param flag integer
--- @param playbackRate number
--- @param p9 any
function TaskSynchronizedScene(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9) end

--- In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task. The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates. --- It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately). It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover. ---------------------------------------------------- The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason. NativeDB Added Parameter 5: Any p4 NativeDB Added Parameter 6: Any p5
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
function TaskThrowProjectile(ped, x, y, z) end

--- used in sequence task both parameters seems to be always 0
--- @param p0 boolean
--- @param p1 boolean
function TaskToggleDuck(p0, p1) end

--- duration in milliseconds
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param duration integer
function TaskTurnPedToFaceCoord(ped, x, y, z, duration) end

--- duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
--- @param ped integer
--- @param entity integer
--- @param duration integer
function TaskTurnPedToFaceEntity(ped, entity, duration) end

--- Actually has 3 params, not 2. p0: Ped p1: int (or bool?) p2: int NativeDB Added Parameter 3: Any p2
--- @param ped integer
--- @param p1 integer
function TaskUseMobilePhone(ped, p1) end

--- @param ped integer
--- @param duration integer
function TaskUseMobilePhoneTimed(ped, duration) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 any
function TaskUseNearestScenarioChainToCoord(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 any
function TaskUseNearestScenarioChainToCoordWarp(p0, p1, p2, p3, p4, p5) end

--- Updated variables An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param distance number
--- @param duration integer
function TaskUseNearestScenarioToCoord(ped, x, y, z, distance, duration) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param p5 any
function TaskUseNearestScenarioToCoordWarp(ped, x, y, z, radius, p5) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
function TaskVehicleAimAtCoord(ped, x, y, z) end

--- @param ped integer
--- @param target integer
function TaskVehicleAimAtPed(ped, target) end

--- chases targetEnt fast and aggressively -- Makes ped (needs to be in vehicle) chase targetEnt.
--- @param driver integer
--- @param targetEnt integer
function TaskVehicleChase(driver, targetEnt) end

--- info about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/ --------------------------------------------------------------- Passing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something. P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked. Here the e.g. code I used Function.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);
--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param p6 any
--- @param vehicleModel integer
--- @param drivingMode integer
--- @param stopRange number
--- @param p10 number
function TaskVehicleDriveToCoord(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10) end

--- You can let your character drive to the destination at the speed and driving style you set. You can use map marks to set the destination. cpp enum eDriveBehaviorFlags { DF_StopForCars = 1, DF_StopForPeds = 2, DF_SwerveAroundAllCars = 4, DF_SteerAroundStationaryCars = 8, DF_SteerAroundPeds = 16, DF_SteerAroundObjects = 32, DF_DontSteerAroundPlayerPed = 64, DF_StopAtLights = 128, DF_GoOffRoadWhenAvoiding = 256, DF_DriveIntoOncomingTraffic = 512, DF_DriveInReverse = 1024, DF_UseWanderFallbackInsteadOfStraightLine = 2048, DF_AvoidRestrictedAreas = 4096, DF_PreventBackgroundPathfinding = 8192, // **These only work on MISSION_CRUISE** DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384, DF_UseShortCutLinks = 262144, DF_ChangeLanesAroundObstructions = 524288, DF_UseSwitchedOffNodes = 2097152, //cruise tasks ignore this anyway--only used for goto's DF_PreferNavmeshRoute = 4194304, //if you're going to be primarily driving off road DF_PlaneTaxiMode = 8388608, // Only works for planes using MISSION_GOTO, will cause them to drive along the ground instead of fly DF_ForceStraightLine = 16777216, DF_UseStringPullingAtJunctions = 33554432, DF_AvoidHighways = 536870912, DF_ForceJoinInRoadDirection = 1073741824 }
--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param drivingStyle integer
--- @param stopRange number
function TaskVehicleDriveToCoordLongrange(ped, vehicle, x, y, z, speed, drivingStyle, stopRange) end

--- Drive randomly with no destination set.
--- @param ped integer
--- @param vehicle integer
--- @param speed number
--- @param drivingStyle integer
function TaskVehicleDriveWander(ped, vehicle, speed, drivingStyle) end

--- Makes a ped follow the targetVehicle with <minDistance> in between. note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine. Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there. -1 = behind 0 = ahead 1 = left 2 = right 3 = back left 4 = back right if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly. Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
--- @param ped integer
--- @param vehicle integer
--- @param targetVehicle integer
--- @param mode integer
--- @param speed number
--- @param drivingStyle integer
--- @param minDistance number
--- @param p7 integer
--- @param noRoadsDistance number
function TaskVehicleEscort(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance) end

--- Makes a ped in a vehicle follow an entity (ped, vehicle, etc.) drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
--- @param driver integer
--- @param vehicle integer
--- @param targetEntity integer
--- @param speed number
--- @param drivingStyle integer
--- @param minDistance integer
function TaskVehicleFollow(driver, vehicle, targetEntity, speed, drivingStyle, minDistance) end

--- task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11) p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf p3 = 786468 p4 = 0 p5 = 16 p6 = -1 (angle?) p7/8/9 = usually v3.zero p10 = bool (repeat?) p11 = 1073741824 -khorio
--- @param ped integer
--- @param vehicle integer
--- @param WPRecording string
--- @param p3 integer
--- @param p4 integer
--- @param p5 integer
--- @param p6 integer
--- @param p7 number
--- @param p8 boolean
--- @param p9 number
function TaskVehicleFollowWaypointRecording(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9) end

--- Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration. WARNING: A behaviorFlag value of 0 will result in a clunky, stupid driver! Recommended settings: speed = 30.0f, behaviorFlag = 156, stoppingRange = 5.0f; If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption. If using this to continually follow a Ped who is on foot: You will need to run this in a tick loop. Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck. If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck. One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick. EDIT: This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param speed number
--- @param behaviorFlag integer
--- @param stoppingRange number
function TaskVehicleGotoNavmesh(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange) end

--- pilot, vehicle and altitude are rather self-explanatory. p4: is unused variable in the function. entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them. 'targetSpeed': The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE. As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #. 'radius' isn't just "stop within radius of X of target" like with ground vehicles. In this case, the pilot will fly an entire circle around 'radius' and continue to do so. NOT CONFIRMED: p7 appears to be a FlyingStyle enum. Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc. NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
--- @param pilot integer
--- @param vehicle integer
--- @param entityToFollow integer
--- @param targetSpeed number
--- @param p4 integer
--- @param radius number
--- @param altitude integer
--- @param p7 integer
function TaskVehicleHeliProtect(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7) end

--- All parameters except ped, vehicle, vehicleTarget and speed are optional; with `missionType` being only those that require a target entity. If you don't want to use a parameter; pass `0` for int parameters, and `-1.0f` for the remaining float parameters. cpp enum eVehicleMissionType { None = 0, Cruise = 1, Ram = 2, Block = 3, GoTo = 4, Stop = 5, Attack = 6, Follow = 7, Flee = 8, Circle = 9, Escort = 12, GoToRacing = 14, FollowRecording = 15, PoliceBehaviour = 16, Land = 19, LandAndWait = 20, Crash = 21, PullOver = 22, HeliProtect = 23 }
--- @param ped integer
--- @param vehicle integer
--- @param vehicleTarget integer
--- @param missionType integer
--- @param speed number
--- @param drivingStyle integer
--- @param radius number
--- @param straightLineDist number
--- @param DriveAgainstTraffic boolean
function TaskVehicleMission(ped, vehicle, vehicleTarget, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic) end

--- All parameters except ped, vehicle, x, y, z and speed are optional; with `missionType` being only those that don't require a target entity. If you don't want to use a parameter; pass `0` for int parameters, and `-1.0f` for the remaining float parameters.
--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param missionType integer
--- @param speed number
--- @param drivingStyle integer
--- @param radius number
--- @param straightLineDist number
--- @param DriveAgainstTraffic boolean
function TaskVehicleMissionCoorsTarget(ped, vehicle, x, y, z, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic) end

--- All parameters except ped, vehicle, pedTarget and speed are optional; with `missionType` being only those that require a target entity. If you don't want to use a parameter; pass `0` for int parameters, and `-1.0f` for the remaining float parameters.
--- @param ped integer
--- @param vehicle integer
--- @param pedTarget integer
--- @param missionType integer
--- @param speed number
--- @param drivingStyle integer
--- @param radius number
--- @param straightLineDist number
--- @param DriveAgainstTraffic boolean
function TaskVehicleMissionPedTarget(ped, vehicle, pedTarget, missionType, speed, drivingStyle, radius, straightLineDist, DriveAgainstTraffic) end

--- Modes: 0 - ignore heading 1 - park forward 2 - park backwards Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle. Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
--- @param ped integer
--- @param vehicle integer
--- @param x number
--- @param y number
--- @param z number
--- @param heading number
--- @param mode integer
--- @param radius number
--- @param keepEngineOn boolean
function TaskVehiclePark(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn) end

--- Most probably plays a specific animation on vehicle. For example getting chop out of van etc... Here's how its used - TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo"); TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo"); FYI : Speedo is the name of van in which chop was put in the mission.
--- @param vehicle integer
--- @param animationSet string
--- @param animationName string
function TaskVehiclePlayAnim(vehicle, animationSet, animationName) end

--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 number
function TaskVehicleShootAtCoord(ped, x, y, z, p4) end

--- @param ped integer
--- @param target integer
--- @param p2 number
function TaskVehicleShootAtPed(ped, target, p2) end

--- Gives the vehicle a temporary action. **Note**: For migrating objects, a `CScriptEntityStateChangeEvent` will be sent over the network to let other clients know that this object is being given a temporary action. At the same time, temporary actions cannot be applied to clones/remote objects. cpp enum eTempAction { TA_NONE = 0, TA_WAIT = 1, TA_UNUSED = 2, TA_BRAKE_REVERSE = 3, TA_HANDBRAKE_TURN_LEFT = 4, TA_HANDBRAKE_TURN_RIGHT = 5, TA_HANDBRAKE_UNTIL_TIME_ENDS = 6, TA_TURN_LEFT = 7, TA_TURN_RIGHT = 8, TA_ACCELERATE = 9, TA_TURN_LEFT = 10, TA_TURN_RIGHT = 11, TA_UNUSED_12 = 12, TA_TURN_LEFT_GO_REVERSE = 13, TA_TURN_RIGHT_GO_REVERSE = 14, TA_PLANE_FLY_UP = 15, // (crashes game if not in plane) TA_PLANE_FLY_STRAIGHT = 16, // (crashes game if not in plane) TA_PLANE_SHARP_LEFT = 17, // (crashes game if not in plane) TA_PLANE_SHARP_RIGHT = 18, // (crashes game if not in plane) TA_STRONG_BRAKE = 19, TA_TURN_LEFT_AND_STOP = 20, TA_TURN_RIGHT_AND_STOP = 21, TA_GO_IN_REVERSE = 22, TA_ACCELERATE_FAST = 23, TA_BRAKE_ACTION = 24, TA_HANDBRAKE_TURN_LEFT_MORE = 25, TA_HANDBRAKE_TURN_RIGHT_MORE = 26, TA_HANDBRAKE_BRAKE_STRAIGHT = 27, TA_BRAKE_STRONG_REVERSE_ACCELERATION = 28, TA_UNUSED_29 = 29, TA_PERFORMS_BURNOUT = 30, TA_REV_ENGINE = 31, TA_ACCELERATE_VERY_STRONG = 32, TA_SURFACE_IN_SUBMARINE = 33 };
--- @param driver integer
--- @param vehicle integer
--- @param action integer
--- @param time integer
function TaskVehicleTempAction(driver, vehicle, action, time) end

--- Makes a ped wander/patrol around the specified area. The ped will continue to wander after getting distracted, but only if this additional task is temporary, ie. killing a target, after killing the target it will continue to wander around. Use `GetIsTaskActive(ped, 222)` to check if the ped is still wandering the area.
--- @param ped integer
--- @param x number
--- @param y number
--- @param z number
--- @param radius number
--- @param minimalLength integer
--- @param timeBetweenWalks number
function TaskWanderInArea(ped, x, y, z, radius, minimalLength, timeBetweenWalks) end

--- NativeDB Introduced: v1868
--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
function TaskWanderSpecific(p0, p1, p2, p3) end

--- Makes ped walk around the area. set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
--- @param ped integer
--- @param p1 number
--- @param p2 integer
function TaskWanderStandard(ped, p1, p2) end

--- This task warps a ped directly into a cover position closest to the specified point. This can be used to quickly place peds in strategic positions during gameplay. NativeDB Introduced: 2545
--- @param ped integer
--- @param time integer
--- @param canPeekAndAim boolean
--- @param forceInitialFacingDirection boolean
--- @param forceFaceLeft boolean
--- @param coverIndex integer
function TaskWarpPedDirectlyIntoCover(ped, time, canPeekAndAim, forceInitialFacingDirection, forceFaceLeft, coverIndex) end

--- NativeDB Introduced: v323 Warp a ped into a vehicle. **Note**: It's better to use `TASK_ENTER_VEHICLE` with the flag "warp" flag instead of this native.
--- @param ped integer
--- @param vehicle integer
--- @param seatIndex integer
function TaskWarpPedIntoVehicle(ped, vehicle, seatIndex) end

--- NativeDB Introduced: v323 Warp a ped into a vehicle. **Note**: It's better to use `TASK_ENTER_VEHICLE` with the flag "warp" flag instead of this native. **This is the server-side RPC native equivalent of the client native TASK_WARP_PED_INTO_VEHICLE.**
--- @param ped integer
--- @param vehicle integer
--- @param seatIndex integer
function TaskWarpPedIntoVehicle(ped, vehicle, seatIndex) end

--- NativeDB Added Parameter 5: Any p4 NativeDB Added Parameter 6: Any p5
--- @param ped integer
--- @param target integer
--- @param time integer
--- @param p3 integer
function TaskWrithe(ped, target, time, p3) end

--- @param playerSrc integer
--- @param reason string
function TempBanPlayer(playerSrc, reason) end

--- For a full list, see here.
--- @param scriptName string
function TerminateAllScriptsWithThisName(scriptName) end

function TerminateThisThread() end

--- @param threadId integer
function TerminateThread(threadId) end

--- This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png). This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
--- @param toggle boolean
function TerraingridActivate(toggle) end

--- This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`. This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height. All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png Old description: Only called in golf and golf_mp\ parameters used are\ GRAPHICS::\_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);
--- @param lowR integer
--- @param lowG integer
--- @param lowB integer
--- @param lowAlpha integer
--- @param R integer
--- @param G integer
--- @param B integer
--- @param Alpha integer
--- @param highR integer
--- @param highG integer
--- @param highB integer
--- @param highAlpha integer
function TerraingridSetColours(lowR, lowG, lowB, lowAlpha, R, G, B, Alpha, highR, highG, highB, highAlpha) end

--- This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`. This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max. All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
--- @param x number
--- @param y number
--- @param z number
--- @param p3 number
--- @param rotation number
--- @param p5 number
--- @param width number
--- @param height number
--- @param p8 number
--- @param scale number
--- @param glowIntensity number
--- @param normalHeight number
--- @param heightDiff number
function TerraingridSetParams(x, y, z, p3, rotation, p5, width, height, p8, scale, glowIntensity, normalHeight, heightDiff) end

--- Flags are identical to START_SHAPE_TEST\*, however, 128 is automatically set.
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @param flag integer
--- @return any
--- @return vector3
function TestProbeAgainstAllWater(x1, y1, z1, x2, y2, z2, flag) end

--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
--- @return vector3
function TestProbeAgainstWater(x1, y1, z1, x2, y2, z2) end

--- @param x number
--- @param y number
--- @param z number
--- @param flag integer
--- @return any
--- @return number
function TestVerticalProbeAgainstAllWater(x, y, z, flag) end

--- @param p0 integer
--- @return any
function TextureDownloadGetName(p0) end

--- @param p0 integer
--- @return any
function TextureDownloadHasFailed(p0) end

--- @param p0 integer
function TextureDownloadRelease(p0) end

--- @param FilePath string
--- @param Name string
--- @param p3 boolean
--- @return any
--- @return integer
function TextureDownloadRequest(FilePath, Name, p3) end

function ThefeedClearFrozenPost() end

--- Displays "normal" notifications again after calling `_0x56C8B608CFD49854` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
function ThefeedCommentTeleportPoolOff() end

--- Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
function ThefeedCommentTeleportPoolOn() end

--- Stops loading screen tips shown by invoking either `0x488043841BBE156F` or `0x15CFA549788D35EF`
function ThefeedDisableLoadingScreenTips() end

--- Displays loading screen tips, requires `0x56C8B608CFD49854` to be called beforehand.
function ThefeedDisplayLoadingScreenTips() end

function ThefeedFlushQueue() end

--- Enables loading screen tips to be be shown (`_0x15CFA549788D35EF` and `_0x488043841BBE156F`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
function ThefeedForceRenderOff() end

function ThefeedForceRenderOn() end

--- Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
function ThefeedFreezeNextPost() end

--- Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
--- @return any
function ThefeedGetFirstVisibleDeleteRemaining() end

--- Once called each frame hides all above radar notifications.
function ThefeedHideThisFrame() end

--- @return any
function ThefeedIsPaused() end

--- @param toggle boolean
function ThefeedOnlyShowTooltips(toggle) end

function ThefeedPause() end

--- Removes a notification instantly instead of waiting for it to disappear
--- @param notificationId integer
function ThefeedRemoveItem(notificationId) end

function ThefeedResetAllParameters() end

function ThefeedResume() end

--- @param red integer
--- @param green integer
--- @param blue integer
--- @param alpha integer
function ThefeedSetAnimpostfxColor(red, green, blue, alpha) end

--- Related to notification color flashing, setting p0 to 0 invalidates a `_SET_NOTIFICATION_FLASH_COLOR` call for the target notification.
--- @param count integer
function ThefeedSetAnimpostfxCount(count) end

--- Requires GAME_STREAM_ENUMS.MSGTEXT. Default sounds: "DPAD_WEAPON_SCROLL" and "HUD_FRONTEND_DEFAULT_SOUNDSET"
--- @param toggle boolean
function ThefeedSetAnimpostfxSound(toggle) end

--- If true, remove all feed components instantly. Otherwise tween/animate close each component
--- @param toggle boolean
function ThefeedSetFlushAnimpostfx(toggle) end

--- From the decompiled scripts: HUD::_92F0DA1E27DB96DC(6); HUD::_92F0DA1E27DB96DC(184); HUD::_92F0DA1E27DB96DC(190); sets background color for the next notification 6 = red 184 = green 190 = yellow Here is a list of some colors that can be used: gyazo.com/68bd384455fceb0a85a8729e48216e15
--- @param hudColorIndex integer
function ThefeedSetNextPostBackgroundColor(hudColorIndex) end

--- @param pos number
function ThefeedSetScriptedMenuHeight(pos) end

function ThefeedSpsExtendWidescreenOff() end

function ThefeedSpsExtendWidescreenOn() end

--- Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT". NativeDB Introduced: v323
--- @param txdString1 string
--- @param txnString1 string
--- @param txdString2 string
--- @param txnString2 string
function ThefeedUpdateItemTexture(txdString1, txnString1, txdString2, txnString2) end

--- Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
--- @return any
function Timera() end

--- @return any
function Timerb() end

--- Gets the current frame time.
--- @return any
function Timestep() end

--- @param FilePath string
--- @param Name string
--- @param p2 boolean
--- @return any
function TitleTextureDownloadRequest(FilePath, Name, p2) end

--- @param value integer
--- @return any
function ToFloat(value) end

--- Switches the rendering display to exclude everything except PostFX, resulting in a frozen screen before the UI pass.
--- @param toggle boolean
function TogglePausedRenderphases(toggle) end

--- Enable/disable optional stunt camera. NativeDB Introduced: v757
--- @param toggle boolean
function ToggleShowOptionalStuntJumpCamera(toggle) end

--- @param toggle boolean
function ToggleStealthRadar(toggle) end

--- Disabling/enabling a player from getting pickups. From the scripts: OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0); OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0); OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1); OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0); OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0); OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1); SET_PLAYER_*
--- @param player integer
--- @param pickupHash integer
--- @param toggle boolean
function ToggleUsePickupsForPlayer(player, pickupHash, toggle) end

--- Enables or disables a vehicle mod by index (`modType`) for a given vehicle. `eVehicleModType` enum, used for `modType` index can be found under `SET_VEHICLE_MOD`.
--- @param vehicle integer
--- @param modType integer
--- @param toggle boolean
function ToggleVehicleMod(vehicle, modType, toggle) end

--- @param object integer
function TrackObjectVisibility(object) end

--- in script hook .net Vehicle v = ...; Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
--- @param vehicle integer
function TrackVehicleVisibility(vehicle) end

--- Transforms the `stormberg` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
--- @param vehicle integer
--- @param instantly boolean
function TransformToCar(vehicle, instantly) end

--- Transforms the `stormberg` to its "water vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
--- @param vehicle integer
--- @param instantly boolean
function TransformToSubmarine(vehicle, instantly) end

--- The backing function for TriggerClientEvent.
--- @param eventName string
--- @param eventTarget integer
--- @param eventPayload string
--- @param payloadLength integer
function TriggerClientEventInternal(eventName, eventTarget, eventPayload, payloadLength) end

--- The backing function for TriggerEvent.
--- @param eventName string
--- @param eventPayload string
--- @param payloadLength integer
function TriggerEventInternal(eventName, eventPayload, payloadLength) end

--- The backing function for TriggerLatentClientEvent.
--- @param eventName string
--- @param eventTarget integer
--- @param eventPayload string
--- @param payloadLength integer
--- @param bps integer
function TriggerLatentClientEventInternal(eventName, eventTarget, eventPayload, payloadLength, bps) end

--- The backing function for TriggerLatentServerEvent.
--- @param eventName string
--- @param eventPayload string
--- @param payloadLength integer
--- @param bps integer
function TriggerLatentServerEventInternal(eventName, eventPayload, payloadLength, bps) end

--- List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
--- @param eventName string
--- @return any
function TriggerMusicEvent(eventName) end

--- @param transitionTime number
--- @return any
function TriggerScreenblurFadeIn(transitionTime) end

--- @param transitionTime number
--- @return any
function TriggerScreenblurFadeOut(transitionTime) end

--- p1 = 6
--- @param player integer
--- @param p1 integer
--- @param scriptHash integer
--- @return any
function TriggerScriptCrcCheckOnPlayer(player, p1, scriptHash) end

--- eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork) Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!). playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
--- @param eventGroup integer
--- @param eventDataSize integer
--- @param playerBits integer
--- @return integer
function TriggerScriptEvent(eventGroup, eventDataSize, playerBits) end

--- See TRIGGER_SCRIPT_EVENT
--- @param eventGroup integer
--- @param eventDataSize integer
--- @param playerBits integer
--- @return integer
function TriggerScriptEvent_2(eventGroup, eventDataSize, playerBits) end

--- The backing function for TriggerServerEvent.
--- @param eventName string
--- @param eventPayload string
--- @param payloadLength integer
function TriggerServerEventInternal(eventName, eventPayload, payloadLength) end

--- ... When not in a vehicle NativeDB Introduced: v1290
--- @param vehicle integer
function TriggerSiren(vehicle) end

--- @param posX number
--- @param posY number
--- @param posZ number
--- @param radius number
--- @param p4 integer
function TriggerSonarBlip(posX, posY, posZ, radius, p4) end

function UgcCancelQuery() end

function UgcClearCreateResult() end

function UgcClearModifyResult() end

function UgcClearOfflineQuery() end

function UgcClearQueryResults() end

--- @return any
--- @return any
--- @return any
function UgcCopyContent() end

--- NativeDB Added Parameter 8: Any p7
--- @param data string
--- @param dataCount integer
--- @param contentName string
--- @param description string
--- @param tagsCsv string
--- @param contentTypeName string
--- @param publish boolean
--- @return any
function UgcCreateContent(data, dataCount, contentName, description, tagsCsv, contentTypeName, publish) end

--- NativeDB Added Parameter 6: Any p5
--- @param contentName string
--- @param description string
--- @param tagsCsv string
--- @param contentTypeName string
--- @param publish boolean
--- @return any
function UgcCreateMission(contentName, description, tagsCsv, contentTypeName, publish) end

--- @return any
function UgcDidGetSucceed() end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
--- @return any
function UgcGetBookmarkedContent(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
function UgcGetCachedDescription(p0, p1) end

--- @param p0 integer
--- @return any
function UgcGetContentCategory(p0) end

--- @param p0 any
--- @return any
function UgcGetContentDescriptionHash(p0) end

--- @param p0 any
--- @param p1 any
--- @return any
function UgcGetContentFileVersion(p0, p1) end

--- @return any
function UgcGetContentHash() end

--- @param p0 any
--- @return any
function UgcGetContentHasPlayerBookmarked(p0) end

--- @param p0 any
--- @return any
function UgcGetContentHasPlayerRecord(p0) end

--- Return the mission id of a job.
--- @param p0 integer
--- @return any
function UgcGetContentId(p0) end

--- @param p0 any
--- @return any
function UgcGetContentIsPublished(p0) end

--- @param p0 any
--- @return any
function UgcGetContentIsVerified(p0) end

--- @param p0 any
--- @return any
function UgcGetContentLanguage(p0) end

--- @param p0 any
--- @return any
function UgcGetContentName(p0) end

--- @return any
function UgcGetContentNum() end

--- @param p0 integer
--- @param p1 integer
--- @return any
function UgcGetContentPath(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
function UgcGetContentRating(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
function UgcGetContentRatingCount(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
function UgcGetContentRatingNegativeCount(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @return any
function UgcGetContentRatingPositiveCount(p0, p1) end

--- @return any
function UgcGetContentTotal() end

--- @param p0 any
--- @return any
function UgcGetContentUpdatedDate(p0) end

--- @param p0 integer
--- @return any
function UgcGetContentUserId(p0) end

--- @param p0 any
--- @return any
function UgcGetContentUserName(p0) end

--- @return any
function UgcGetCreateContentId() end

--- @return any
function UgcGetCreateResult() end

--- @return any
function UgcGetCreatorNum() end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
--- @return any
--- @return any
function UgcGetCrewContent(p0, p1, p2) end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
--- @return any
function UgcGetFriendContent(p0, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @return any
--- @return any
--- @return any
function UgcGetGetByCategory(p0, p1, p2) end

--- @return any
function UgcGetModifyResult() end

--- @param p0 any
--- @param p1 any
--- @return any
--- @return any
--- @return any
function UgcGetMyContent(p0, p1) end

--- @return any
function UgcGetQueryResult() end

--- Return the root content id of a job.
--- @param p0 integer
--- @return any
function UgcGetRootContentId(p0) end

--- @return any
function UgcHasCreateFinished() end

--- @return any
function UgcHasGetFinished() end

--- @return any
function UgcHasModifyFinished() end

--- @return any
function UgcIsGetting() end

--- @param p0 any
--- @return any
function UgcIsLanguageSupported(p0) end

--- @param p0 any
--- @return any
function UgcPoliciesMakePrivate(p0) end

--- @param contentId string
--- @param baseContentId string
--- @param contentTypeName string
--- @return any
function UgcPublish(contentId, baseContentId, contentTypeName) end

--- @param contentId string
--- @param latestVersion boolean
--- @param contentTypeName string
--- @return any
function UgcQueryByContentId(contentId, latestVersion, contentTypeName) end

--- @param count integer
--- @param latestVersion boolean
--- @param contentTypeName string
--- @return any
--- @return any
function UgcQueryByContentIds(count, latestVersion, contentTypeName) end

--- @param p0 any
--- @param p1 any
--- @param p3 any
--- @param p4 any
--- @param p5 any
--- @return any
--- @return any
function UgcQueryMyContent(p0, p1, p3, p4, p5) end

--- @param offset integer
--- @param count integer
--- @param contentTypeName string
--- @param p3 integer
--- @return any
function UgcQueryRecentlyCreatedContent(offset, count, contentTypeName, p3) end

--- @param p0 integer
--- @return any
function UgcRequestCachedDescription(p0) end

--- @param p0 integer
--- @param p1 integer
--- @return any
function UgcRequestContentDataFromIndex(p0, p1) end

--- @param contentTypeName string
--- @param contentId string
--- @param p2 integer
--- @param p3 integer
--- @param p4 integer
--- @return any
function UgcRequestContentDataFromParams(contentTypeName, contentId, p2, p3, p4) end

--- @param contentId string
--- @param bookmarked boolean
--- @param contentTypeName string
--- @return any
function UgcSetBookmarked(contentId, bookmarked, contentTypeName) end

--- @param p1 boolean
--- @return any
--- @return any
--- @return any
function UgcSetDeleted(p1) end

--- NativeDB Added Parameter 4: Any p3
--- @param contentId string
--- @param rating number
--- @param contentTypeName string
--- @return any
function UgcSetPlayerData(contentId, rating, contentTypeName) end

--- @param p0 boolean
function UgcSetQueryDataFromOffline(p0) end

--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p5 boolean
--- @return any
--- @return any
--- @return any
function UgcTextureDownloadRequest(p1, p2, p3, p5) end

--- NativeDB Added Parameter 8: Any p7
--- @param contentId string
--- @param dataCount integer
--- @param contentName string
--- @param description string
--- @param tagsCsv string
--- @param contentTypeName string
--- @return any
--- @return any
function UgcUpdateContent(contentId, dataCount, contentName, description, tagsCsv, contentTypeName) end

--- NativeDB Added Parameter 6: Any p5
--- @param contentId string
--- @param contentName string
--- @param description string
--- @param tagsCsv string
--- @param contentTypeName string
--- @return any
function UgcUpdateMission(contentId, contentName, description, tagsCsv, contentTypeName) end

--- @return any
function Ui3dsceneIsAvailable() end

--- All presets can be found in common\data\ui\uiscenes.meta
--- @param presetName string
--- @return any
function Ui3dscenePushPreset(presetName) end

--- Returns whether the In-Game Pause Menu Launched the Benchmark Tests.
--- @return any
function UiStartedEndUserBenchmark() end

--- eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
--- @param name integer
--- @param eventType integer
function UnblockDecisionMakerEvent(name, eventType) end

--- NativeDB Introduced: v1493 Removes all instances of a given context block.
--- @param groupName string
function UnblockSpeechContextGroup(groupName) end

--- @param ped integer
function UncuffPed(ped) end

--- @param radioStation string
function UnfreezeRadioStation(radioStation) end

--- Called 4 times in the b617d scripts: MISC::_A74802FB8D0B7814("CONTRAILS", 0);
--- @param name string
--- @param p1 number
function UnloadCloudHat(name, p1) end

--- From fm_deathmatch_creator and fm_race_creator: FILES::_UNLOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP_SP")); FILES::_LOAD_CONTENT_CHANGE_SET_GROUP(joaat("GROUP_MAP")); NativeDB Introduced: v1604
--- @param hash integer
function UnloadContentChangeSetGroup(hash) end

function UnlockMinimapAngle() end

function UnlockMinimapPosition() end

--- @param newsStory integer
function UnlockMissionNewsStory(newsStory) end

--- AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
--- @param radioStation string
--- @param trackListName string
function UnlockRadioStationTrackList(radioStation, trackListName) end

--- GRAPHICS::UNPATCH_DECAL_DIFFUSE_MAP(9123); GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED("MPMissMarkers256");
--- @param decalType integer
function UnpatchDecalDiffuseMap(decalType) end

--- @param vehicle integer
function UnpausePlaybackRecordedVehicle(vehicle) end

--- Does something similar to INTERIOR::DISABLE_INTERIOR. You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
--- @param interior integer
function UnpinInterior(interior) end

--- @param ropeId integer
--- @param vertex integer
function UnpinRopeVertex(ropeId, vertex) end

--- gtaforums.com/topic/885580-ped-headshotmugshot-txd/
--- @param id integer
function UnregisterPedheadshot(id) end

--- Will unregister and cleanup a registered NUI callback handler. Use along side the REGISTER_RAW_NUI_CALLBACK native.
--- @param callbackType string
function UnregisterRawNuiCallback(callbackType) end

--- **This native does absolutely nothing, just a nullsub** On last-gen this just runs blr and this func is called by several other functions other then the native's table.
function UnregisterScriptWithAudio() end

--- Unloads tennis vocalization banks loaded with `REQUEST_TENNIS_BANKS`.
function UnrequestTennisBanks() end

--- @param entity integer
function UpdateLightsOnEntity(entity) end

--- Transiently updates the entity with the specified mapdata index and entity index. This function supports SDK infrastructure and is not intended to be used directly from your code.
--- @param mapdata integer
--- @param entity integer
--- @param entityDef table
function UpdateMapdataEntity(mapdata, entity, entityDef) end

--- @param object integer
--- @param posX number
--- @param posY number
--- @param posZ number
--- @param scaleX number
--- @param scaleY number
--- @param scaleZ number
--- @param heading number
--- @param flags integer
function UpdateNavmeshBlockingObject(object, posX, posY, posZ, scaleX, scaleY, scaleZ, heading, flags) end

--- Returns the current state of the text input box. cpp enum eOSKStatus { OSK_INVALID = -1, OSK_PENDING = 0, OSK_SUCCESS = 1, OSK_CANCELLED = 2, OSK_FAILED = 3 };
--- @return any
function UpdateOnscreenKeyboard() end

--- See `SET_PED_HEAD_BLEND_DATA`
--- @param ped integer
--- @param shapeMix number
--- @param skinMix number
--- @param thirdMix number
function UpdatePedHeadBlendData(ped, shapeMix, skinMix, thirdMix) end

--- @param player integer
--- @return any
function UpdatePlayerTeleport(player) end

--- Updates a playing sounds absolute position.
--- @param soundId integer
--- @param x number
--- @param y number
--- @param z number
function UpdateSoundCoord(soundId, x, y, z) end

--- @param p0 integer
--- @param p1 integer
--- @param p2 number
--- @param p3 number
--- @param p4 number
--- @param p5 boolean
function UpdateTaskAimGunScriptedTarget(p0, p1, p2, p3, p4, p5) end

--- @param ped integer
--- @param duration integer
function UpdateTaskHandsUpDuration(ped, duration) end

--- @param ped integer
--- @param entity integer
function UpdateTaskSweepAimEntity(ped, entity) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
function UpdateTaskSweepAimPosition(p0, p1, p2, p3) end

--- Unlocks any available DJ radio tracks based on the tuneable status NativeDB Introduced: v1493
--- @param allowTrackReprioritization boolean
function UpdateUnlockableDjRadioTracks(allowTrackReprioritization) end

--- Related to displaying cash on the HUD Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
--- @param p0 boolean
function UseFakeMpCash(p0) end

--- Allows script to trigger a sweetener footstep sound
--- @param ped integer
--- @param useSweetner boolean
--- @param soundSetHash integer
function UseFootstepScriptSweeteners(ped, useSweetner, soundSetHash) end

--- From the b678d decompiled scripts: GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler"); GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp"); GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks"); GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane"); GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator"); GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist"); GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");
--- @param name string
function UseParticleFxAsset(name) end

--- @param toggle boolean
function UsePlayerColourInsteadOfTeamColour(toggle) end

--- Sets the ambient ped & vehicle population spawning origin to be based around the active scripted camera for this frame This will prevent vehicles from being created close to the camera and/or on-screen
--- @param vehicles boolean
--- @param peds boolean
function UseScriptCamForAmbientPopulationOriginThisFrame(vehicles, peds) end

--- @param vehicle integer
--- @param sirenAsHorn boolean
function UseSirenAsHorn(vehicle, sirenAsHorn) end

--- Applies a predefined set of vehicle camera settings optimized for capturing stunts, effective for the current game update/frame. NativeDB Introduced: v791
function UseVehicleCamStuntSettingsThisUpdate() end

--- @param name string
--- @param p1 boolean
--- @param p2 number
--- @param p3 number
function UseWaypointRecordingAsAssistedMovementRoute(name, p1, p2, p3) end

--- @param toggle boolean
function UsingMissionCreator(toggle) end

--- Calculates the distance between two points in 3D space. For performance reasons, consider using direct mathematical calculations for distance, as they can be more efficient than calling this native function. NativeDB Introduced: v323
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function Vdist(x1, y1, z1, x2, y2, z2) end

--- Calculates distance between vectors but does not perform Sqrt operations. Its way faster than `VDIST`, but it's not faster than direct mathematical calculations. NativeDB Introduced: v323
--- @param x1 number
--- @param y1 number
--- @param z1 number
--- @param x2 number
--- @param y2 number
--- @param z2 number
--- @return any
function Vdist2(x1, y1, z1, x2, y2, z2) end

--- @param vehicle integer
--- @param speed number
function VehicleWaypointPlaybackOverrideSpeed(vehicle, speed) end

--- @param vehicle integer
function VehicleWaypointPlaybackPause(vehicle) end

--- @param vehicle integer
function VehicleWaypointPlaybackResume(vehicle) end

--- @param vehicle integer
function VehicleWaypointPlaybackUseDefaultSpeed(vehicle) end

--- calls from vehicle to net.
--- @param vehicle integer
--- @return any
function VehToNet(vehicle) end

--- @param password string
--- @param hash string
--- @return any
function VerifyPasswordHash(password, hash) end

--- Calculates the magnitude of a vector.
--- @param x number
--- @param y number
--- @param z number
--- @return any
function Vmag(x, y, z) end

--- Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
--- @param x number
--- @param y number
--- @param z number
--- @return any
function Vmag2(x, y, z) end

--- Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
--- @param ms integer
function Wait(ms) end

--- @return any
function WasCutsceneSkipped() end

--- Returns whether or not the currently executing event was canceled.
--- @return any
function WasEventCanceled() end

--- @param vehicle integer
--- @param p1 number
function WashDecalsFromVehicle(vehicle, p1) end

--- @param p0 any
--- @param p1 any
--- @param p2 any
--- @param p3 any
--- @param p4 any
function WashDecalsInRange(p0, p1, p2, p3, p4) end

--- Verifies whether ped was eliminated through stealth.
--- @param ped integer
--- @return any
function WasPedKilledByStealth(ped) end

--- @param ped integer
--- @return any
function WasPedKilledByTakedown(ped) end

--- @param ped integer
--- @return any
function WasPedKnockedOut(ped) end

--- Despite this function's name, it simply returns whether the specified handle is a Ped.
--- @param ped integer
--- @return any
function WasPedSkeletonUpdated(ped) end

--- @param p0 number
function WaterOverrideFadeIn(p0) end

--- @param p0 number
function WaterOverrideFadeOut(p0) end

--- @param minAmplitude number
function WaterOverrideSetOceannoiseminamplitude(minAmplitude) end

--- @param amplitude number
function WaterOverrideSetOceanwaveamplitude(amplitude) end

--- @param maxAmplitude number
function WaterOverrideSetOceanwavemaxamplitude(maxAmplitude) end

--- @param minAmplitude number
function WaterOverrideSetOceanwaveminamplitude(minAmplitude) end

--- @param bumpiness number
function WaterOverrideSetRipplebumpiness(bumpiness) end

--- @param disturb number
function WaterOverrideSetRippledisturb(disturb) end

--- @param maxBumpiness number
function WaterOverrideSetRipplemaxbumpiness(maxBumpiness) end

--- @param minBumpiness number
function WaterOverrideSetRippleminbumpiness(minBumpiness) end

--- @param amplitude number
function WaterOverrideSetShorewaveamplitude(amplitude) end

--- @param maxAmplitude number
function WaterOverrideSetShorewavemaxamplitude(maxAmplitude) end

--- @param minAmplitude number
function WaterOverrideSetShorewaveminamplitude(minAmplitude) end

--- This seems to edit the water wave, intensity around your current location. 0.0f = Normal 1.0f = So Calm and Smooth, a boat will stay still. 3.0f = Really Intense.
--- @param strength number
function WaterOverrideSetStrength(strength) end

--- @param p0 any
--- @return any
function WaypointPlaybackGetIsPaused(p0) end

--- @param p0 any
--- @param p1 number
--- @param p2 boolean
function WaypointPlaybackOverrideSpeed(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 boolean
function WaypointPlaybackPause(p0, p1, p2) end

--- @param p0 any
--- @param p1 boolean
--- @param p2 any
--- @param p3 any
function WaypointPlaybackResume(p0, p1, p2, p3) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
function WaypointPlaybackStartAimingAtCoord(p0, p1, p2, p3, p4) end

--- @param p0 any
--- @param p1 any
--- @param p2 boolean
function WaypointPlaybackStartAimingAtPed(p0, p1, p2) end

--- @param p0 any
--- @param p1 number
--- @param p2 number
--- @param p3 number
--- @param p4 boolean
--- @param p5 any
function WaypointPlaybackStartShootingAtCoord(p0, p1, p2, p3, p4, p5) end

--- @param p0 any
--- @param p1 any
--- @param p2 boolean
--- @param p3 any
function WaypointPlaybackStartShootingAtPed(p0, p1, p2, p3) end

--- @param p0 any
function WaypointPlaybackStopAimingOrShooting(p0) end

--- @param p0 any
function WaypointPlaybackUseDefaultSpeed(p0) end

--- For a full list of the points, see here: goo.gl/wIH0vn
--- @param name string
--- @param x number
--- @param y number
--- @param z number
--- @return any
--- @return integer
function WaypointRecordingGetClosestWaypoint(name, x, y, z) end

--- For a full list of the points, see here: goo.gl/wIH0vn
--- @param name string
--- @param point integer
--- @return any
--- @return vector3
function WaypointRecordingGetCoord(name, point) end

--- For a full list of the points, see here: goo.gl/wIH0vn
--- @param name string
--- @return any
--- @return integer
function WaypointRecordingGetNumPoints(name) end

--- @param name string
--- @param point integer
--- @return any
function WaypointRecordingGetSpeedAtPoint(name, point) end

--- Does nothing and always returns 0.
--- @param amount integer
--- @return any
function WithdrawVc(amount) end

--- @param entityModelHash integer
--- @param x number
--- @param y number
--- @param z number
--- @param p4 boolean
--- @return any
function WouldEntityBeOccluded(entityModelHash, x, y, z, p4) end